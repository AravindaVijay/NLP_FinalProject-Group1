{
    "clean_data": "Python Developer span lPythonspan span lDeveloperspan Python Developer Uber Around 6 years of experience as a Python Developer proficient coder in multiple languages and experience in Design Development Implementation of Python Django clientserver technologiesbased applications RESTful services SQL and relational databases like MySQL and NoSQL database like mongo dB and OS like Linux and windows Experience in implementing Model View Control MVC architecture using serverside applications like Django Flask and Pyramid for developing web applications Good experience in performing operations such as CRUD operations and writing complex queries with Oracle MS SQL Server and MongoDB and experience in developing web services WSDL SOAP and REST and consuming web services with python 23 programming language Hands on experience with Build Automation tool like Maven and version control tools such as Git and GitHub and Experience in NodeJS implementing NodeJS callbacks NodeJS web server NodeJS Restful Good experience in software development using Python and using its libraries and modules like NumPy Pandas SciPy Pickle Jupiter SciPy Pythontwitter Matplotlib urllib2 for data analytics and rapid development Experience in Amazon Web Services Amazon EC2 Amazon S3 Amazon Simple DB Amazon RDS Amazon Elastic Load Balancing Amazon SQS AWS Identity and access management AWS Cloud Watch Amazon EBS and Amazon Cloud Front and Familiar with JSON based REST Web services and Amazon Web services Experienced in NoSQL technologies like MongoDB Redis and relational databases like Oracle SQLite PostgreSQL and MySQL databases Experience in developing RESTful APIs using Django REST Framework consumed via Rectangular a 3rd party AngularJS service and Knowledge about setting up Python REST API Frame work using Django Experience in Pythons modules NumPy Matplot for generating complex graphical data the creation of histograms and experience in working with serverside technologies including databases Restful API and MVC design patterns Experience in Reactjs for creating interactive UIs using Oneway data flow Virtual DOM JSX React Native concepts and strong experience writing APIs and Web Services in PHP and Python Experienced in implementing Microservices Service Oriented Architecture SOA with XML based Web Services SOAPWSDL using Top Down and Bottom Up approach Experience using Python 3627 Django 1718 HTML XML CSS JavaScript Bootstrap Reactjs and Nodejs and Well versed with design and development of presentation layer for web applications using technologies like HTML CSS and JavaScript Expertise working in WAMP Windows Apache MYSQL and PythonPHP and LAMP Linux Apache MySQL and PythonPHP Architecture Experienced in implementing Microservices Service Oriented Architecture SOA with XML based Web Services SOAPWSDL using Top Down and Bottom Up approach Hands on with tools GitGitHub Ansible Artifactory Jenkins OpenStack Balance NodeProxy VMWare and Open Source software to build automated testing and delivery pipelines Experience in AWS Docker and Kubernetes Stateless application Canary deployment in Kubernetes Kubernetes Stateful Sets deployment for MySQL and Kafka resources within the pod Hands on experience in using NOSQL libraries like MongoDB Cassandra Redis and relational databases like Oracle SQLite PostgreSQL and MYSQL databases Experienced in WAMP Windows Apache MYSQL PythonPHP and LAMP Linux Apache MySQL PythonPHP Architecture Knowledge in various frontend tools like HTML DHTML CSS JavaScript XML jQuery Angular JS and AJAX Proficient in Front end development experience using HTML XML CSS jQuery JSON and JavaScript CSS Experienced in design patterns such as MVC using Django Flask and deploying application on Apache tomcat server containerizing applications using Docker Responsible for designing developing testing deploying and maintaining the web application Experience with Design code and debug operations reporting data analysis and web applications utilizing Python Extensively worked with automation tools like Heroku Jenkins for continuous integration and continuous delivery CICD and to implement the EndtoEnd Automation Experienced in Backend applications using Python FlaskDjango and SQL PostgreSQL Handson experience in writing and reviewing requirements architecture documents test plans design documents quality analysis and audits Working Experience on various Python 20 and 30 packages such as NumPy SQL Alchemy big data software Matplotlib and scipy and Experienced in developing UNIX shell scripts and bash scripting Experience in developing RESTful APIs using Django REST Framework consumed via React a 3rd party reactJS service and Knowledge about setting up Python REST API Frame work using Django Experience in implementing with serverside technologies with restful API and MVC design patterns with node JS and Django framework Experienced in using Integrated Development Environment IDEs in PyDev PyScripter PyCharm Spider Python IDLE Brackets Eclipse JBuilder Sublime and NetBeans Experience in Web Application Development hands on experience of PythonDjango Flask SQL Alchemy SQLite JavaScript jQuery HTML5 and CSS Familiar with Python modules like NumPy Matplotlib Pickle Pandas SciPy PyTables PyQt etc for generating complex graphical data creation of histograms etc Experienced in developing webbased applications using Python Django HTML JavaScript AWS and jQuery Experience in Installing JenkinsPlugins for GIT Repository Setup SCM Polling for Immediate Build with Maven and Maven Repository and Deployment of apps using custom modules through Puppet as a CICD Process Handson experience working on several microservices components like Docker Engine Docker Hub Compose Docker Registry and handling multiple images primarily for installations and domain configurations and creating Docker images Experience in Reactjs for creating interactive UIs using Oneway data flow Virtual DOM JSX React Native concepts and strong experience writing APIs and Web Services in PHP and Python Work Experience Python Developer Uber Chicago IL July 2018 to Present Pinterest is an online pinboard to organize and share what inspires us Project started in order to improve the scalability of overall timeline servers and platform Involved in tasks Designing Developing and building a system using Python Shell Scripts to automate Oracle patching Grid Patching Upgrade Migration rollback Used Apache CouchDB NoSQL in AWS Linux instance in parallel to RDS MySQL to store and analyze job market info Created a python Flask webbased application using Python scripting for data processing and MySQL for database HTML CSS jQuery for data visualization Created MongoDB replica sets Clusters for growing highly scalable datasets in combining sharding databases and worked for design and Setting up of environment of MongoDB with shards and replica sets Built backend for web application using Expressjs Nodejs MongoDB and Mongoose library for serverside data retrieval Implemented Model View Controller MVC Architecture based presentation using React framework and client webpages are built using HTML CSS and JavaScript and Developed Hibernate mapping configuration files to provide the relation Deployed Application using AWS EC2 Standard Deployment Techniques and Worked on Amazon web services AWS infrastructure with automation and developed Serverside automation using Node JS scripting and connecting different types of SQL and NoSQL stores from Node JS following MVC Architecture Created a PythonDjango based web application using Python scripting for data processing MySQL for the database and HTMLCSSjQuery and High Charts for data visualization of the served pages Involved in development of Python APIs to dump the array structures in the Processor at the failure point for debugging and Implemented presentation layer using CSS framework NodeJS AngularJS Angular2 Angular4WireFraming and HTML5 Achieved business process automation via applications developed using Git Gerrit Jenkins MySQL and custom tools developed in Python and Bash Containerized Microservices by creating Docker images from Docker file collaborated with development support team to set up a continuous deployment environment using Docker and created Jenkins pipeline which helps to drive all builds out to the docker registry and then deployed to the docker containers using Jenkins file Worked with React JS components Redux Forms Events Animations and Router and Generated REST API using Flask Django Frame work and Worked on various Operating Systems like UNIX Linux Windows and MacOS Created interactive data charts on web application using High charts JavaScript library with data coming from Apache Cassandra also build Restful API web services using Node JS and Express JS and used a Full complement of Express Nodejs and Mongo DB to store and present assessments Automated builds using Maven and scheduled automated nightly builds using Heroku and Jenkins Built Jenkins pipeline to drive all microservices builds out to the Docker registry and then deployed to Kubernetes Worked on microservicebased architecture using spring boot for developing the microservices Netflix components eureka ribbon spring cloud for supporting the cloud native environment Automated builds using Maven and scheduled automated nightly builds using Heroku and Jenkins Built Jenkins pipeline to drive all microservices builds out to the Docker registry and then deployed to Kubernetes Used Pandas API to put the data as time series and tabular format for local timestamp data manipulation and retrieval and storing it into MongoDB Developed Restful APIs using Python Flask and SQL Alchemy data models as well as ensured code quality by writing unit tests using Pytest Successfully migrated the Django database from SQLite to MySQL to Postgres SQL with complete data integrity and tested many features for dashboard using Python Bootstrap CSS and JavaScript Created Python Django app using Python DjangoSession and management Implemented PEP8 coding standards across all projects Used Python Django Database APIs to access database objects Consumed REST based Microservices with Rest template based on RESTful APIs and designed developed and tested HTML CSS jQuery that meets accessibility and web browser standards for car dealerships websites Worked on NoSQL database MongoDB and developed custom MongoDB applications as per the client specification Developed Restful APIs using Python Flask and SQL Alchemy data models as well as Managed developed and designed a dashboard control panel for customers and Administrators using Django Oracle DB PostgreSQL and VMware calls Developed a fully automated continuous integration system using Git MySQL Jenkins and custom tools developed in Python Used Kubernetes to orchestrate the deployment scaling and management of Docker Containers and apart from this Worked on infrastructure with Docker containerization and maintained Docker Images and containers Developed existing network mapping microservices using python Nmap and deployed it on Kubernetes also performed Restful routing using Nodejs which submits my form data to the Mongo DB database Used Pandas API to put the data as time series and tabular format for local timestamp data manipulation and retrieval and storing it into MongoDB and developed internal auxiliary web apps using Python Flask framework with CSSHTML framework Build highly available content distribution sites by using CICD tools like Chef Ansible Docker Maven Jenkins Jira Kubernetes etc Python Developer Flatiron Health New York NY November 2015 to July 2017 Eli Lilly is a pharmaceutical company mainly do the research work so project was started in order to work on their internal management system called Biologica which Eli Lillys drug research scientists use for management of the development of Biologic drugs Created a PythonDjango based web application using Python scripting for data processing MySQL for the database and HTMLCSSjQuery and High Charts for data visualization of the served pages following MVC architecture Involved in developing webbased application using Python Django JavaScript ReactJS NodeJS Express CSS MongoDB and HTML Participated in scalability testing to ensure MongoDB High Performance Configured MongoDB Shaded cluster with Replica Set HA on Different AWS regions Designed application and created UI using JavaScript and HTML5CSS Implemented business logic using PythonDjango and Used Celery with RabbitMQ MySQL Django and Flask to create a distributed worker framework and Analyzed Created Nodejs middleware application server to encapsulate modern JS widget framework Worked with JSON objects and JavaScript and jQuery intensively to create interactive web pages Designed and developed integration methodologies between client web portals and existing software infrastructure using SOAP APIs and vendor specific frameworks Developed existing network mapping microservices using python nmap and deployed it on kubernetes Implemented a Continuous Delivery pipeline with Docker Jenkins and GitHub and worked on installation of Docker using Docker toolbox and apart from this Responsible for maintaining and expanding AWS Cloud Services infrastructure using AWS Stack especially worked with database setup and maintenance and created AWS EC2 instances Involved in development of test environment on Docker containers and configuring the Docker containers using Kubernetes and Used AWS Beanstalk for deploying and scaling web applications and services developed with Java PHP Nodejs Python Ruby and Docker on familiar servers such as Apache and IIS Worked on NoSQL technologies like MongoDB Cassandra and relational databases like Oracle SQLite PostgreSQL Dynamo DB and MySQL database Worked on creating the Docker containers and Docker consoles for managing the application life cycle Write Python scripts to parse JSON documents and load the data in database and developed single page application by using React JS backed by MongoDB and NodeJS Used spring configuration server for centralized configuration and Splunk for centralized logging Used Concourse and Jenkins for Microservices deployment Developed the back end of the website using the Django framework using the MySQL database and used Django ORM to coordinate the back end internal data with the MySQL database Managed developed and designed a dashboard control panel for customers and Administrators using Django HTML CSS JavaScript Bootstrap jQuery and RESTAPI calls FTP server implemented in Nodejs Features basic UNIX authentication SSL support and support for most FTP commands and Managed datasets using Panda data frames and MySQL queried MySQL database queries from Python using Python MySQL connector MySQL dB package to retrieve information Develop consumerbased features and applications using Python Django HTML Behavior Driven Development BDD and pairbased programming Developed Restful Microservices using Flask and Django and deployed on AWS servers using EBS and EC2 Developed crossbrowserplatform with ReactJs NodeJS jQuery AJAX and HTML5CSS to desired design specs for single page layout using code standards Created UI from scratch using ReactJs Worked on JIRA for bug tracking and communicating for better results Strong Experience in Big data technologies including Apache Spark Hadoop HDFS Hive MongoDB Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML CSS JavaScript and Reacyjs Implemented clientside form validation to validate the user inputs before passing to backend using ES6 and ReactJS and Worked with Reactrouter JSX Babel and React bootstrap Facilitated a migration effort from a retiring CI CD pipeline to a new enterprise standard pipeline for the organization Python Engineer Lyft San Francisco CA September 2014 to October 2015 Involved in development of Python based Web Services using REST for sending and getting data from the external interface in the JSON format and perform analysis using Django PostgreSQL Following MVC architecture Developed entire frontend and backend modules using Python on Django using Git Node JS underscore JS React js CSS and JavaScript Consumed REST based Microservices with Rest template based on RESTful APIs and designed developed and tested HTML CSS jQuery that meets accessibility and web browser Worked on NoSQL databases such as MongoDB Elasticsearch and Oracle DB and Developed user interface using CSS PHP HTML JavaScript and jQuery Used Reactjs for templating for faster compilation and developing reusable components and developed tools using Python Shell scripting XML to automate some of the menial tasks Developed backend web services using Nodejs and stored dependencies using Node Package Manager NPM Developed serverbased web traffic statistical analysis tool using Flask Pandas and had implemented and tested pythonbased web applications interacting with MySQL Involved in development of RESTful Web Services for getting and sending data from the external interface in the JSON format and Developed user interface using CSS PHP HTML JavaScript and jQuery Created the docker images and deployed them into the Kubernetes cluster and create the multiple replicas to handle the workloads and Deployed Docker contained Spring REST services in to AWS EC2 container service using AWS admin console and used lambda to run applications in AWS console Developed python programs by using boto3 to implement security by using AWS Cognito service Created RESTful web services for Catalog and Pricing with Jersey MySQL and MongoDB while working on Single nodeMulticluster setup using technology NoSQL and MongoDB while using MongoDB as a persistent store and Apache Kafka as a messaging layer for custom Developed Restful APIs using Python Flask and SQL Alchemy data models as well as ensured code quality by writing unit tests using Pytest and worked on writing UNIX shell scripts for scheduling the sessions for my testing process of ETL Worked on PythonDjango based web application PostgreSql DB and integrations with 3rd party email messaging storage services and worked on Python OpenStack APIs and used Numpy for Numerical analysis Developed Microservices by creating REST APIs and used them to access data from different suppliers and to gather network traffic data from servers Worked on serverside applications with Django using Python programming and used python libraries like Beautiful Soup matplotlib SciPy NumPy and Built efficient Nodejs backend for client web application Performed Automation of the deployment of the Conductor application on AWS using highend AWS architectural components and Developed multithreaded standalone app in python and PHP to view performance Designed and maintained databases using Python and developed Python based API RESTful Web Service using Flask SQL Alchemy and Postgre SQL and Implemented clientside Interface using React JS Developed the REST API using Django for fetching the data from NoSQL MongoDB database Involved in the design and maintenance of the databases using Python and Python based API using Flask Exchanged data with SQL database and NoSQL database such as MongoDB Generated datadriven reports data visualization using Tableau Software Engineer We Pay Paramus NJ January 2013 to August 2014 Wrote Python code embedded with JSON and XML to produce HTTP GET request parsing HTML data from websites and Implemented SOAPRESTful web services in JSON format Designed and maintained databases using Python and developed Python based API RESTful Web Service using Flask SQL Alchemy and Postgre SQL and Implemented clientside Interface using React JS Developed the REST API using Django for fetching the data from NoSQL MongoDB database Involved in development of Python APIs to dump the array structures in the Processor at the failure point for debugging Involved in development of RESTful Web Services for getting and sending data from the external interface in the JSON format and Developed user interface using CSS PHP HTML JavaScript and jQuery Implemented Microservices architecture in developing the web application with the help of Flask framework Worked on developing CRUD applications using MERN stack MongoDB ReactJS and NodeJS and REST based API and worked on Extensive use of version controlling systems like GIT and SVN Worked in team of Architects and Developers to build and deploy Python Flask Peewee Linux AWS Redesign and maintain existing internal web application using HTML CSS JavaScript and jQuery React JS Build servers using AWS importing volumes launching EC2 creating security groups autoscaling load balancers ELBs in the defined virtual private connection and migrated applications to the AWS cloud Integrated RedisCache with the Djangorestframework for reading the data faster and Implemented RESTful WebServices for sending and receiving the data between multiple systems Wrote with objectoriented Python Flask SQL Beautiful Soup httplib2 Jinja2 HTMLCSS Bootstrap jQuery Linux Sublime Text GIT and Developed multithreaded standalone applications using Python and PHP Created PHPMySQL backend for data entry from Flash and Consumed external APIs and wrote RESTful API using Django REST Framework and React Build the Silent Circle Management System SCMC in Elasticsearch Python and NodeJS while integrating with infrastructure services",
    "entities": [
        "JS React",
        "Python Flask",
        "Process Handson",
        "JavaScript CSS Experienced",
        "Design Development Implementation of Python Django",
        "Analyzed Created Nodejs",
        "JavaScript Bootstrap Reactjs",
        "New York",
        "Java PHP Nodejs Python Ruby",
        "Nodejs",
        "jQuery React JS Build",
        "UNIX",
        "Eli Lilly",
        "Router",
        "JSON",
        "LAMP Linux",
        "GIT Repository Setup",
        "Operating Systems",
        "Heroku",
        "Panda",
        "Reacyjs Implemented",
        "Build Automation",
        "Node Package",
        "Model View Control MVC",
        "XML",
        "Python 3627 Django 1718",
        "React",
        "NOSQL",
        "CSS Familiar",
        "jQuery Created",
        "Python Flask SQL Beautiful Soup httplib2 Jinja2",
        "Python Developer Flatiron Health",
        "SVN Worked",
        "NodeJS",
        "Shell",
        "Apache Spark Hadoop HDFS Hive MongoDB Implemented",
        "Developed Restful Microservices",
        "Reactjs",
        "Automated",
        "PythonDjango Flask",
        "node JS",
        "Amazon",
        "Maven Repository and Deployment",
        "Nodejs Features",
        "Consumed",
        "Python",
        "MySQL Involved",
        "FlaskDjango",
        "Created RESTful",
        "jQuery Used Reactjs",
        "Flask Django Frame",
        "Developed",
        "AWS Docker",
        "PythonPHP Architecture Experienced",
        "Biologica",
        "Python REST API Frame",
        "Integrated Development Environment",
        "Python Experienced",
        "Conductor",
        "Python Work Experience Python Developer Uber Chicago",
        "VMware",
        "Puppet",
        "Docker Containers",
        "Git",
        "Restful",
        "Developed Hibernate",
        "PythonPHP",
        "Standard Deployment Techniques",
        "Develop",
        "Kubernetes Worked",
        "CSS PHP",
        "API RESTful Web Service",
        "Implemented PEP8",
        "ETL Worked",
        "Flask",
        "Built",
        "Worked",
        "Rectangular",
        "Jenkins Built Jenkins",
        "HTML CSS jQuery",
        "ReactJs Worked",
        "HTML XML CSS jQuery JSON",
        "Present Pinterest",
        "Docker",
        "RDS",
        "SSL",
        "AJAX Proficient",
        "JavaScript Created Python Django",
        "MVC",
        "Flask SQL Alchemy",
        "Interface",
        "PythonDjango",
        "GIT",
        "Node JS",
        "Working Experience",
        "HTML CSS",
        "JS",
        "Oracle MS SQL Server",
        "API",
        "Developed Microservices",
        "Restful API",
        "Web Services",
        "HTML CSS JavaScript",
        "jQuery Implemented Microservices",
        "Flask Exchanged",
        "Created",
        "MacOS Created",
        "AWS",
        "Implemented",
        "WAMP Windows Apache",
        "Python Developer",
        "Implemented Model View Controller MVC Architecture",
        "Oracle DB",
        "Express Nodejs and Mongo DB",
        "React JS",
        "SQL PostgreSQL Handson",
        "Web Application Development",
        "Netflix",
        "Kubernetes Kubernetes Stateful Sets",
        "PostgreSql DB",
        "SQL",
        "GitHub",
        "Amazon Web Services",
        "Django Oracle DB PostgreSQL",
        "lPythonspan",
        "Kubernetes",
        "Flash",
        "Administrators",
        "Bash Containerized Microservices",
        "the EndtoEnd Automation Experienced",
        "SQL Alchemy",
        "RESTAPI",
        "Worked with",
        "PHP Created PHPMySQL",
        "CICD",
        "Oracle patching Grid Patching Upgrade Migration",
        "Serverside",
        "FTP",
        "SQLite",
        "CRUD",
        "Pytest Successfully",
        "NodeJS Express CSS",
        "Maven",
        "Build",
        "NumPy SQL Alchemy",
        "Created UI",
        "JavaScript",
        "Eli Lillys",
        "Python Bootstrap CSS",
        "Front",
        "UI",
        "Tableau Software Engineer We Pay Paramus NJ",
        "the Silent Circle Management System SCMC",
        "MVC Architecture Created",
        "CSS",
        "Redux Forms Events Animations",
        "AWS Stack",
        "Python Django JavaScript ReactJS",
        "jQuery",
        "REST",
        "NetBeans",
        "Nmap",
        "PHP",
        "NoSQL",
        "Developed Restful",
        "HTMLCSSjQuery",
        "AWS Cloud Services",
        "EBS",
        "Oracle SQLite PostgreSQL",
        "Kubernetes Stateless",
        "Implemented RESTful WebServices",
        "Virtual DOM JSX React Native"
    ],
    "experience": "Experience in implementing Model View Control MVC architecture using serverside applications like Django Flask and Pyramid for developing web applications Good experience in performing operations such as CRUD operations and writing complex queries with Oracle MS SQL Server and MongoDB and experience in developing web services WSDL SOAP and REST and consuming web services with python 23 programming language Hands on experience with Build Automation tool like Maven and version control tools such as Git and GitHub and Experience in NodeJS implementing NodeJS callbacks NodeJS web server NodeJS Restful Good experience in software development using Python and using its libraries and modules like NumPy Pandas SciPy Pickle Jupiter SciPy Pythontwitter Matplotlib urllib2 for data analytics and rapid development Experience in Amazon Web Services Amazon EC2 Amazon S3 Amazon Simple DB Amazon RDS Amazon Elastic Load Balancing Amazon SQS AWS Identity and access management AWS Cloud Watch Amazon EBS and Amazon Cloud Front and Familiar with JSON based REST Web services and Amazon Web services Experienced in NoSQL technologies like MongoDB Redis and relational databases like Oracle SQLite PostgreSQL and MySQL databases Experience in developing RESTful APIs using Django REST Framework consumed via Rectangular a 3rd party AngularJS service and Knowledge about setting up Python REST API Frame work using Django Experience in Pythons modules NumPy Matplot for generating complex graphical data the creation of histograms and experience in working with serverside technologies including databases Restful API and MVC design patterns Experience in Reactjs for creating interactive UIs using Oneway data flow Virtual DOM JSX React Native concepts and strong experience writing APIs and Web Services in PHP and Python Experienced in implementing Microservices Service Oriented Architecture SOA with XML based Web Services SOAPWSDL using Top Down and Bottom Up approach Experience using Python 3627 Django 1718 HTML XML CSS JavaScript Bootstrap Reactjs and Nodejs and Well versed with design and development of presentation layer for web applications using technologies like HTML CSS and JavaScript Expertise working in WAMP Windows Apache MYSQL and PythonPHP and LAMP Linux Apache MySQL and PythonPHP Architecture Experienced in implementing Microservices Service Oriented Architecture SOA with XML based Web Services SOAPWSDL using Top Down and Bottom Up approach Hands on with tools GitGitHub Ansible Artifactory Jenkins OpenStack Balance NodeProxy VMWare and Open Source software to build automated testing and delivery pipelines Experience in AWS Docker and Kubernetes Stateless application Canary deployment in Kubernetes Kubernetes Stateful Sets deployment for MySQL and Kafka resources within the pod Hands on experience in using NOSQL libraries like MongoDB Cassandra Redis and relational databases like Oracle SQLite PostgreSQL and MYSQL databases Experienced in WAMP Windows Apache MYSQL PythonPHP and LAMP Linux Apache MySQL PythonPHP Architecture Knowledge in various frontend tools like HTML DHTML CSS JavaScript XML jQuery Angular JS and AJAX Proficient in Front end development experience using HTML XML CSS jQuery JSON and JavaScript CSS Experienced in design patterns such as MVC using Django Flask and deploying application on Apache tomcat server containerizing applications using Docker Responsible for designing developing testing deploying and maintaining the web application Experience with Design code and debug operations reporting data analysis and web applications utilizing Python Extensively worked with automation tools like Heroku Jenkins for continuous integration and continuous delivery CICD and to implement the EndtoEnd Automation Experienced in Backend applications using Python FlaskDjango and SQL PostgreSQL Handson experience in writing and reviewing requirements architecture documents test plans design documents quality analysis and audits Working Experience on various Python 20 and 30 packages such as NumPy SQL Alchemy big data software Matplotlib and scipy and Experienced in developing UNIX shell scripts and bash scripting Experience in developing RESTful APIs using Django REST Framework consumed via React a 3rd party reactJS service and Knowledge about setting up Python REST API Frame work using Django Experience in implementing with serverside technologies with restful API and MVC design patterns with node JS and Django framework Experienced in using Integrated Development Environment IDEs in PyDev PyScripter PyCharm Spider Python IDLE Brackets Eclipse JBuilder Sublime and NetBeans Experience in Web Application Development hands on experience of PythonDjango Flask SQL Alchemy SQLite JavaScript jQuery HTML5 and CSS Familiar with Python modules like NumPy Matplotlib Pickle Pandas SciPy PyTables PyQt etc for generating complex graphical data creation of histograms etc Experienced in developing webbased applications using Python Django HTML JavaScript AWS and jQuery Experience in Installing JenkinsPlugins for GIT Repository Setup SCM Polling for Immediate Build with Maven and Maven Repository and Deployment of apps using custom modules through Puppet as a CICD Process Handson experience working on several microservices components like Docker Engine Docker Hub Compose Docker Registry and handling multiple images primarily for installations and domain configurations and creating Docker images Experience in Reactjs for creating interactive UIs using Oneway data flow Virtual DOM JSX React Native concepts and strong experience writing APIs and Web Services in PHP and Python Work Experience Python Developer Uber Chicago IL July 2018 to Present Pinterest is an online pinboard to organize and share what inspires us Project started in order to improve the scalability of overall timeline servers and platform Involved in tasks Designing Developing and building a system using Python Shell Scripts to automate Oracle patching Grid Patching Upgrade Migration rollback Used Apache CouchDB NoSQL in AWS Linux instance in parallel to RDS MySQL to store and analyze job market info Created a python Flask webbased application using Python scripting for data processing and MySQL for database HTML CSS jQuery for data visualization Created MongoDB replica sets Clusters for growing highly scalable datasets in combining sharding databases and worked for design and Setting up of environment of MongoDB with shards and replica sets Built backend for web application using Expressjs Nodejs MongoDB and Mongoose library for serverside data retrieval Implemented Model View Controller MVC Architecture based presentation using React framework and client webpages are built using HTML CSS and JavaScript and Developed Hibernate mapping configuration files to provide the relation Deployed Application using AWS EC2 Standard Deployment Techniques and Worked on Amazon web services AWS infrastructure with automation and developed Serverside automation using Node JS scripting and connecting different types of SQL and NoSQL stores from Node JS following MVC Architecture Created a PythonDjango based web application using Python scripting for data processing MySQL for the database and HTMLCSSjQuery and High Charts for data visualization of the served pages Involved in development of Python APIs to dump the array structures in the Processor at the failure point for debugging and Implemented presentation layer using CSS framework NodeJS AngularJS Angular2 Angular4WireFraming and HTML5 Achieved business process automation via applications developed using Git Gerrit Jenkins MySQL and custom tools developed in Python and Bash Containerized Microservices by creating Docker images from Docker file collaborated with development support team to set up a continuous deployment environment using Docker and created Jenkins pipeline which helps to drive all builds out to the docker registry and then deployed to the docker containers using Jenkins file Worked with React JS components Redux Forms Events Animations and Router and Generated REST API using Flask Django Frame work and Worked on various Operating Systems like UNIX Linux Windows and MacOS Created interactive data charts on web application using High charts JavaScript library with data coming from Apache Cassandra also build Restful API web services using Node JS and Express JS and used a Full complement of Express Nodejs and Mongo DB to store and present assessments Automated builds using Maven and scheduled automated nightly builds using Heroku and Jenkins Built Jenkins pipeline to drive all microservices builds out to the Docker registry and then deployed to Kubernetes Worked on microservicebased architecture using spring boot for developing the microservices Netflix components eureka ribbon spring cloud for supporting the cloud native environment Automated builds using Maven and scheduled automated nightly builds using Heroku and Jenkins Built Jenkins pipeline to drive all microservices builds out to the Docker registry and then deployed to Kubernetes Used Pandas API to put the data as time series and tabular format for local timestamp data manipulation and retrieval and storing it into MongoDB Developed Restful APIs using Python Flask and SQL Alchemy data models as well as ensured code quality by writing unit tests using Pytest Successfully migrated the Django database from SQLite to MySQL to Postgres SQL with complete data integrity and tested many features for dashboard using Python Bootstrap CSS and JavaScript Created Python Django app using Python DjangoSession and management Implemented PEP8 coding standards across all projects Used Python Django Database APIs to access database objects Consumed REST based Microservices with Rest template based on RESTful APIs and designed developed and tested HTML CSS jQuery that meets accessibility and web browser standards for car dealerships websites Worked on NoSQL database MongoDB and developed custom MongoDB applications as per the client specification Developed Restful APIs using Python Flask and SQL Alchemy data models as well as Managed developed and designed a dashboard control panel for customers and Administrators using Django Oracle DB PostgreSQL and VMware calls Developed a fully automated continuous integration system using Git MySQL Jenkins and custom tools developed in Python Used Kubernetes to orchestrate the deployment scaling and management of Docker Containers and apart from this Worked on infrastructure with Docker containerization and maintained Docker Images and containers Developed existing network mapping microservices using python Nmap and deployed it on Kubernetes also performed Restful routing using Nodejs which submits my form data to the Mongo DB database Used Pandas API to put the data as time series and tabular format for local timestamp data manipulation and retrieval and storing it into MongoDB and developed internal auxiliary web apps using Python Flask framework with CSSHTML framework Build highly available content distribution sites by using CICD tools like Chef Ansible Docker Maven Jenkins Jira Kubernetes etc Python Developer Flatiron Health New York NY November 2015 to July 2017 Eli Lilly is a pharmaceutical company mainly do the research work so project was started in order to work on their internal management system called Biologica which Eli Lillys drug research scientists use for management of the development of Biologic drugs Created a PythonDjango based web application using Python scripting for data processing MySQL for the database and HTMLCSSjQuery and High Charts for data visualization of the served pages following MVC architecture Involved in developing webbased application using Python Django JavaScript ReactJS NodeJS Express CSS MongoDB and HTML Participated in scalability testing to ensure MongoDB High Performance Configured MongoDB Shaded cluster with Replica Set HA on Different AWS regions Designed application and created UI using JavaScript and HTML5CSS Implemented business logic using PythonDjango and Used Celery with RabbitMQ MySQL Django and Flask to create a distributed worker framework and Analyzed Created Nodejs middleware application server to encapsulate modern JS widget framework Worked with JSON objects and JavaScript and jQuery intensively to create interactive web pages Designed and developed integration methodologies between client web portals and existing software infrastructure using SOAP APIs and vendor specific frameworks Developed existing network mapping microservices using python nmap and deployed it on kubernetes Implemented a Continuous Delivery pipeline with Docker Jenkins and GitHub and worked on installation of Docker using Docker toolbox and apart from this Responsible for maintaining and expanding AWS Cloud Services infrastructure using AWS Stack especially worked with database setup and maintenance and created AWS EC2 instances Involved in development of test environment on Docker containers and configuring the Docker containers using Kubernetes and Used AWS Beanstalk for deploying and scaling web applications and services developed with Java PHP Nodejs Python Ruby and Docker on familiar servers such as Apache and IIS Worked on NoSQL technologies like MongoDB Cassandra and relational databases like Oracle SQLite PostgreSQL Dynamo DB and MySQL database Worked on creating the Docker containers and Docker consoles for managing the application life cycle Write Python scripts to parse JSON documents and load the data in database and developed single page application by using React JS backed by MongoDB and NodeJS Used spring configuration server for centralized configuration and Splunk for centralized logging Used Concourse and Jenkins for Microservices deployment Developed the back end of the website using the Django framework using the MySQL database and used Django ORM to coordinate the back end internal data with the MySQL database Managed developed and designed a dashboard control panel for customers and Administrators using Django HTML CSS JavaScript Bootstrap jQuery and RESTAPI calls FTP server implemented in Nodejs Features basic UNIX authentication SSL support and support for most FTP commands and Managed datasets using Panda data frames and MySQL queried MySQL database queries from Python using Python MySQL connector MySQL dB package to retrieve information Develop consumerbased features and applications using Python Django HTML Behavior Driven Development BDD and pairbased programming Developed Restful Microservices using Flask and Django and deployed on AWS servers using EBS and EC2 Developed crossbrowserplatform with ReactJs NodeJS jQuery AJAX and HTML5CSS to desired design specs for single page layout using code standards Created UI from scratch using ReactJs Worked on JIRA for bug tracking and communicating for better results Strong Experience in Big data technologies including Apache Spark Hadoop HDFS Hive MongoDB Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML CSS JavaScript and Reacyjs Implemented clientside form validation to validate the user inputs before passing to backend using ES6 and ReactJS and Worked with Reactrouter JSX Babel and React bootstrap Facilitated a migration effort from a retiring CI CD pipeline to a new enterprise standard pipeline for the organization Python Engineer Lyft San Francisco CA September 2014 to October 2015 Involved in development of Python based Web Services using REST for sending and getting data from the external interface in the JSON format and perform analysis using Django PostgreSQL Following MVC architecture Developed entire frontend and backend modules using Python on Django using Git Node JS underscore JS React js CSS and JavaScript Consumed REST based Microservices with Rest template based on RESTful APIs and designed developed and tested HTML CSS jQuery that meets accessibility and web browser Worked on NoSQL databases such as MongoDB Elasticsearch and Oracle DB and Developed user interface using CSS PHP HTML JavaScript and jQuery Used Reactjs for templating for faster compilation and developing reusable components and developed tools using Python Shell scripting XML to automate some of the menial tasks Developed backend web services using Nodejs and stored dependencies using Node Package Manager NPM Developed serverbased web traffic statistical analysis tool using Flask Pandas and had implemented and tested pythonbased web applications interacting with MySQL Involved in development of RESTful Web Services for getting and sending data from the external interface in the JSON format and Developed user interface using CSS PHP HTML JavaScript and jQuery Created the docker images and deployed them into the Kubernetes cluster and create the multiple replicas to handle the workloads and Deployed Docker contained Spring REST services in to AWS EC2 container service using AWS admin console and used lambda to run applications in AWS console Developed python programs by using boto3 to implement security by using AWS Cognito service Created RESTful web services for Catalog and Pricing with Jersey MySQL and MongoDB while working on Single nodeMulticluster setup using technology NoSQL and MongoDB while using MongoDB as a persistent store and Apache Kafka as a messaging layer for custom Developed Restful APIs using Python Flask and SQL Alchemy data models as well as ensured code quality by writing unit tests using Pytest and worked on writing UNIX shell scripts for scheduling the sessions for my testing process of ETL Worked on PythonDjango based web application PostgreSql DB and integrations with 3rd party email messaging storage services and worked on Python OpenStack APIs and used Numpy for Numerical analysis Developed Microservices by creating REST APIs and used them to access data from different suppliers and to gather network traffic data from servers Worked on serverside applications with Django using Python programming and used python libraries like Beautiful Soup matplotlib SciPy NumPy and Built efficient Nodejs backend for client web application Performed Automation of the deployment of the Conductor application on AWS using highend AWS architectural components and Developed multithreaded standalone app in python and PHP to view performance Designed and maintained databases using Python and developed Python based API RESTful Web Service using Flask SQL Alchemy and Postgre SQL and Implemented clientside Interface using React JS Developed the REST API using Django for fetching the data from NoSQL MongoDB database Involved in the design and maintenance of the databases using Python and Python based API using Flask Exchanged data with SQL database and NoSQL database such as MongoDB Generated datadriven reports data visualization using Tableau Software Engineer We Pay Paramus NJ January 2013 to August 2014 Wrote Python code embedded with JSON and XML to produce HTTP GET request parsing HTML data from websites and Implemented SOAPRESTful web services in JSON format Designed and maintained databases using Python and developed Python based API RESTful Web Service using Flask SQL Alchemy and Postgre SQL and Implemented clientside Interface using React JS Developed the REST API using Django for fetching the data from NoSQL MongoDB database Involved in development of Python APIs to dump the array structures in the Processor at the failure point for debugging Involved in development of RESTful Web Services for getting and sending data from the external interface in the JSON format and Developed user interface using CSS PHP HTML JavaScript and jQuery Implemented Microservices architecture in developing the web application with the help of Flask framework Worked on developing CRUD applications using MERN stack MongoDB ReactJS and NodeJS and REST based API and worked on Extensive use of version controlling systems like GIT and SVN Worked in team of Architects and Developers to build and deploy Python Flask Peewee Linux AWS Redesign and maintain existing internal web application using HTML CSS JavaScript and jQuery React JS Build servers using AWS importing volumes launching EC2 creating security groups autoscaling load balancers ELBs in the defined virtual private connection and migrated applications to the AWS cloud Integrated RedisCache with the Djangorestframework for reading the data faster and Implemented RESTful WebServices for sending and receiving the data between multiple systems Wrote with objectoriented Python Flask SQL Beautiful Soup httplib2 Jinja2 HTMLCSS Bootstrap jQuery Linux Sublime Text GIT and Developed multithreaded standalone applications using Python and PHP Created PHPMySQL backend for data entry from Flash and Consumed external APIs and wrote RESTful API using Django REST Framework and React Build the Silent Circle Management System SCMC in Elasticsearch Python and NodeJS while integrating with infrastructure services",
    "extracted_keywords": [
        "Python",
        "Developer",
        "lPythonspan",
        "span",
        "lDeveloperspan",
        "Python",
        "Developer",
        "Uber",
        "years",
        "experience",
        "Python",
        "Developer",
        "proficient",
        "coder",
        "languages",
        "experience",
        "Design",
        "Development",
        "Implementation",
        "Python",
        "Django",
        "applications",
        "services",
        "SQL",
        "databases",
        "MySQL",
        "NoSQL",
        "database",
        "mongo",
        "Linux",
        "Experience",
        "Model",
        "View",
        "Control",
        "MVC",
        "architecture",
        "serverside",
        "applications",
        "Django",
        "Flask",
        "Pyramid",
        "web",
        "applications",
        "experience",
        "operations",
        "CRUD",
        "operations",
        "queries",
        "Oracle",
        "MS",
        "SQL",
        "Server",
        "MongoDB",
        "experience",
        "web",
        "services",
        "WSDL",
        "SOAP",
        "REST",
        "web",
        "services",
        "python",
        "programming",
        "language",
        "Hands",
        "experience",
        "Build",
        "Automation",
        "tool",
        "Maven",
        "version",
        "control",
        "tools",
        "Git",
        "GitHub",
        "Experience",
        "NodeJS",
        "NodeJS",
        "callbacks",
        "NodeJS",
        "web",
        "server",
        "NodeJS",
        "Restful",
        "Good",
        "experience",
        "software",
        "development",
        "Python",
        "libraries",
        "modules",
        "NumPy",
        "Pandas",
        "SciPy",
        "Pickle",
        "Jupiter",
        "SciPy",
        "Pythontwitter",
        "Matplotlib",
        "urllib2",
        "data",
        "analytics",
        "development",
        "Experience",
        "Amazon",
        "Web",
        "Services",
        "Amazon",
        "EC2",
        "Amazon",
        "S3",
        "Amazon",
        "Simple",
        "DB",
        "Amazon",
        "RDS",
        "Amazon",
        "Elastic",
        "Load",
        "Amazon",
        "SQS",
        "AWS",
        "Identity",
        "access",
        "management",
        "AWS",
        "Cloud",
        "Amazon",
        "EBS",
        "Amazon",
        "Cloud",
        "Front",
        "Familiar",
        "JSON",
        "REST",
        "Web",
        "services",
        "Amazon",
        "Web",
        "services",
        "NoSQL",
        "technologies",
        "MongoDB",
        "Redis",
        "databases",
        "Oracle",
        "SQLite",
        "PostgreSQL",
        "MySQL",
        "Experience",
        "APIs",
        "Django",
        "REST",
        "Framework",
        "Rectangular",
        "party",
        "AngularJS",
        "service",
        "Knowledge",
        "Python",
        "REST",
        "API",
        "Frame",
        "work",
        "Django",
        "Experience",
        "Pythons",
        "modules",
        "NumPy",
        "Matplot",
        "data",
        "creation",
        "histograms",
        "experience",
        "serverside",
        "technologies",
        "API",
        "MVC",
        "design",
        "patterns",
        "Experience",
        "Reactjs",
        "UIs",
        "Oneway",
        "data",
        "DOM",
        "JSX",
        "React",
        "concepts",
        "experience",
        "APIs",
        "Web",
        "Services",
        "PHP",
        "Python",
        "Microservices",
        "Service",
        "Oriented",
        "Architecture",
        "SOA",
        "XML",
        "Web",
        "Services",
        "SOAPWSDL",
        "Top",
        "Down",
        "Bottom",
        "approach",
        "Experience",
        "Python",
        "Django",
        "HTML",
        "XML",
        "CSS",
        "JavaScript",
        "Bootstrap",
        "Reactjs",
        "Nodejs",
        "design",
        "development",
        "presentation",
        "layer",
        "web",
        "applications",
        "technologies",
        "HTML",
        "CSS",
        "JavaScript",
        "Expertise",
        "WAMP",
        "Windows",
        "Apache",
        "MYSQL",
        "PythonPHP",
        "LAMP",
        "Linux",
        "Apache",
        "MySQL",
        "PythonPHP",
        "Architecture",
        "Microservices",
        "Service",
        "Oriented",
        "Architecture",
        "SOA",
        "XML",
        "Web",
        "Services",
        "SOAPWSDL",
        "Top",
        "Down",
        "Bottom",
        "approach",
        "Hands",
        "tools",
        "GitGitHub",
        "Ansible",
        "Artifactory",
        "Jenkins",
        "OpenStack",
        "Balance",
        "NodeProxy",
        "VMWare",
        "Open",
        "Source",
        "software",
        "testing",
        "delivery",
        "pipelines",
        "Experience",
        "AWS",
        "Docker",
        "Kubernetes",
        "Stateless",
        "application",
        "Canary",
        "deployment",
        "Kubernetes",
        "Kubernetes",
        "Stateful",
        "Sets",
        "deployment",
        "MySQL",
        "Kafka",
        "resources",
        "pod",
        "Hands",
        "experience",
        "NOSQL",
        "libraries",
        "MongoDB",
        "Cassandra",
        "Redis",
        "databases",
        "Oracle",
        "SQLite",
        "PostgreSQL",
        "MYSQL",
        "WAMP",
        "Windows",
        "Apache",
        "MYSQL",
        "PythonPHP",
        "LAMP",
        "Linux",
        "Apache",
        "MySQL",
        "PythonPHP",
        "Architecture",
        "Knowledge",
        "frontend",
        "tools",
        "HTML",
        "DHTML",
        "CSS",
        "JavaScript",
        "XML",
        "jQuery",
        "Angular",
        "JS",
        "AJAX",
        "Proficient",
        "Front",
        "end",
        "development",
        "experience",
        "HTML",
        "XML",
        "CSS",
        "jQuery",
        "JSON",
        "JavaScript",
        "CSS",
        "design",
        "patterns",
        "MVC",
        "Django",
        "Flask",
        "application",
        "Apache",
        "tomcat",
        "server",
        "applications",
        "Docker",
        "Responsible",
        "testing",
        "web",
        "application",
        "Experience",
        "Design",
        "code",
        "operations",
        "data",
        "analysis",
        "web",
        "applications",
        "Python",
        "automation",
        "tools",
        "Heroku",
        "Jenkins",
        "integration",
        "delivery",
        "CICD",
        "EndtoEnd",
        "Automation",
        "Backend",
        "applications",
        "Python",
        "FlaskDjango",
        "SQL",
        "PostgreSQL",
        "Handson",
        "experience",
        "reviewing",
        "requirements",
        "architecture",
        "documents",
        "test",
        "design",
        "documents",
        "quality",
        "analysis",
        "audits",
        "Working",
        "Experience",
        "Python",
        "packages",
        "NumPy",
        "SQL",
        "Alchemy",
        "data",
        "software",
        "Matplotlib",
        "scipy",
        "UNIX",
        "shell",
        "scripts",
        "bash",
        "Experience",
        "APIs",
        "Django",
        "REST",
        "Framework",
        "React",
        "party",
        "reactJS",
        "service",
        "Knowledge",
        "Python",
        "REST",
        "API",
        "Frame",
        "work",
        "Django",
        "Experience",
        "serverside",
        "technologies",
        "API",
        "MVC",
        "design",
        "patterns",
        "node",
        "JS",
        "Django",
        "framework",
        "Integrated",
        "Development",
        "Environment",
        "IDEs",
        "PyDev",
        "PyScripter",
        "PyCharm",
        "Spider",
        "Python",
        "IDLE",
        "Brackets",
        "Eclipse",
        "JBuilder",
        "Sublime",
        "NetBeans",
        "Experience",
        "Web",
        "Application",
        "Development",
        "hands",
        "experience",
        "PythonDjango",
        "Flask",
        "SQL",
        "Alchemy",
        "SQLite",
        "JavaScript",
        "jQuery",
        "HTML5",
        "CSS",
        "Familiar",
        "Python",
        "modules",
        "NumPy",
        "Matplotlib",
        "Pickle",
        "SciPy",
        "PyTables",
        "PyQt",
        "data",
        "creation",
        "histograms",
        "applications",
        "Python",
        "Django",
        "HTML",
        "JavaScript",
        "AWS",
        "jQuery",
        "Experience",
        "Installing",
        "JenkinsPlugins",
        "GIT",
        "Repository",
        "Setup",
        "SCM",
        "Polling",
        "Immediate",
        "Build",
        "Maven",
        "Maven",
        "Repository",
        "Deployment",
        "apps",
        "custom",
        "modules",
        "Puppet",
        "CICD",
        "Process",
        "Handson",
        "experience",
        "microservices",
        "components",
        "Docker",
        "Engine",
        "Docker",
        "Hub",
        "Compose",
        "Docker",
        "Registry",
        "images",
        "installations",
        "domain",
        "configurations",
        "Docker",
        "images",
        "Experience",
        "Reactjs",
        "UIs",
        "Oneway",
        "data",
        "DOM",
        "JSX",
        "React",
        "concepts",
        "experience",
        "APIs",
        "Web",
        "Services",
        "PHP",
        "Python",
        "Work",
        "Experience",
        "Python",
        "Developer",
        "Uber",
        "Chicago",
        "IL",
        "July",
        "Present",
        "Pinterest",
        "pinboard",
        "Project",
        "order",
        "scalability",
        "timeline",
        "servers",
        "platform",
        "tasks",
        "Designing",
        "Developing",
        "system",
        "Python",
        "Shell",
        "Scripts",
        "Oracle",
        "Grid",
        "Patching",
        "Upgrade",
        "Migration",
        "rollback",
        "Apache",
        "CouchDB",
        "NoSQL",
        "AWS",
        "Linux",
        "instance",
        "parallel",
        "RDS",
        "MySQL",
        "job",
        "market",
        "info",
        "python",
        "Flask",
        "application",
        "Python",
        "scripting",
        "data",
        "processing",
        "MySQL",
        "database",
        "HTML",
        "CSS",
        "jQuery",
        "data",
        "visualization",
        "MongoDB",
        "replica",
        "Clusters",
        "datasets",
        "databases",
        "design",
        "environment",
        "MongoDB",
        "shards",
        "replica",
        "backend",
        "web",
        "application",
        "Expressjs",
        "Nodejs",
        "Mongoose",
        "library",
        "serverside",
        "data",
        "retrieval",
        "Model",
        "View",
        "Controller",
        "MVC",
        "Architecture",
        "presentation",
        "React",
        "framework",
        "client",
        "webpages",
        "HTML",
        "CSS",
        "JavaScript",
        "Developed",
        "Hibernate",
        "mapping",
        "configuration",
        "files",
        "relation",
        "Deployed",
        "Application",
        "AWS",
        "EC2",
        "Standard",
        "Deployment",
        "Techniques",
        "Worked",
        "Amazon",
        "web",
        "services",
        "AWS",
        "infrastructure",
        "automation",
        "Serverside",
        "automation",
        "Node",
        "JS",
        "scripting",
        "types",
        "SQL",
        "NoSQL",
        "stores",
        "Node",
        "JS",
        "MVC",
        "Architecture",
        "PythonDjango",
        "web",
        "application",
        "Python",
        "scripting",
        "data",
        "processing",
        "MySQL",
        "database",
        "HTMLCSSjQuery",
        "Charts",
        "data",
        "visualization",
        "pages",
        "development",
        "Python",
        "APIs",
        "array",
        "structures",
        "Processor",
        "failure",
        "point",
        "presentation",
        "layer",
        "CSS",
        "framework",
        "NodeJS",
        "Angular2",
        "Angular4WireFraming",
        "HTML5",
        "business",
        "process",
        "automation",
        "applications",
        "Git",
        "Gerrit",
        "Jenkins",
        "MySQL",
        "custom",
        "tools",
        "Python",
        "Bash",
        "Containerized",
        "Microservices",
        "Docker",
        "images",
        "Docker",
        "file",
        "development",
        "support",
        "team",
        "deployment",
        "environment",
        "Docker",
        "Jenkins",
        "pipeline",
        "docker",
        "registry",
        "docker",
        "containers",
        "Jenkins",
        "file",
        "React",
        "JS",
        "components",
        "Redux",
        "Forms",
        "Events",
        "Animations",
        "Router",
        "Generated",
        "REST",
        "API",
        "Flask",
        "Django",
        "Frame",
        "work",
        "Operating",
        "Systems",
        "UNIX",
        "Linux",
        "Windows",
        "MacOS",
        "data",
        "charts",
        "web",
        "application",
        "charts",
        "JavaScript",
        "library",
        "data",
        "Apache",
        "Cassandra",
        "API",
        "web",
        "services",
        "Node",
        "JS",
        "Express",
        "JS",
        "complement",
        "Express",
        "Nodejs",
        "Mongo",
        "DB",
        "assessments",
        "Automated",
        "builds",
        "Maven",
        "builds",
        "Heroku",
        "Jenkins",
        "Jenkins",
        "pipeline",
        "microservices",
        "Docker",
        "registry",
        "Kubernetes",
        "architecture",
        "spring",
        "boot",
        "microservices",
        "Netflix",
        "components",
        "ribbon",
        "spring",
        "cloud",
        "environment",
        "Automated",
        "builds",
        "Maven",
        "builds",
        "Heroku",
        "Jenkins",
        "Jenkins",
        "pipeline",
        "microservices",
        "Docker",
        "registry",
        "Kubernetes",
        "Pandas",
        "API",
        "data",
        "time",
        "series",
        "format",
        "timestamp",
        "data",
        "manipulation",
        "retrieval",
        "APIs",
        "Python",
        "Flask",
        "SQL",
        "Alchemy",
        "data",
        "models",
        "code",
        "quality",
        "unit",
        "tests",
        "Pytest",
        "Django",
        "database",
        "SQLite",
        "MySQL",
        "Postgres",
        "SQL",
        "data",
        "integrity",
        "features",
        "dashboard",
        "Python",
        "Bootstrap",
        "CSS",
        "JavaScript",
        "Python",
        "Django",
        "app",
        "Python",
        "DjangoSession",
        "management",
        "PEP8",
        "standards",
        "projects",
        "Python",
        "Django",
        "Database",
        "APIs",
        "database",
        "Consumed",
        "REST",
        "Microservices",
        "Rest",
        "template",
        "APIs",
        "HTML",
        "CSS",
        "jQuery",
        "accessibility",
        "web",
        "browser",
        "standards",
        "car",
        "dealerships",
        "websites",
        "NoSQL",
        "database",
        "MongoDB",
        "custom",
        "MongoDB",
        "applications",
        "client",
        "specification",
        "APIs",
        "Python",
        "Flask",
        "SQL",
        "Alchemy",
        "data",
        "models",
        "Managed",
        "dashboard",
        "control",
        "panel",
        "customers",
        "Administrators",
        "Django",
        "Oracle",
        "DB",
        "PostgreSQL",
        "VMware",
        "calls",
        "integration",
        "system",
        "Git",
        "MySQL",
        "Jenkins",
        "custom",
        "tools",
        "Python",
        "Kubernetes",
        "deployment",
        "scaling",
        "management",
        "Docker",
        "Containers",
        "Worked",
        "infrastructure",
        "Docker",
        "containerization",
        "Docker",
        "Images",
        "containers",
        "network",
        "mapping",
        "microservices",
        "python",
        "Nmap",
        "Kubernetes",
        "routing",
        "Nodejs",
        "form",
        "data",
        "Mongo",
        "DB",
        "database",
        "Pandas",
        "API",
        "data",
        "time",
        "series",
        "format",
        "timestamp",
        "data",
        "manipulation",
        "retrieval",
        "MongoDB",
        "web",
        "apps",
        "Python",
        "Flask",
        "framework",
        "CSSHTML",
        "framework",
        "Build",
        "distribution",
        "sites",
        "CICD",
        "tools",
        "Chef",
        "Ansible",
        "Docker",
        "Maven",
        "Jenkins",
        "Jira",
        "Kubernetes",
        "Python",
        "Developer",
        "Flatiron",
        "Health",
        "New",
        "York",
        "NY",
        "November",
        "July",
        "Eli",
        "Lilly",
        "company",
        "research",
        "work",
        "project",
        "order",
        "management",
        "system",
        "Biologica",
        "Eli",
        "Lillys",
        "drug",
        "research",
        "scientists",
        "management",
        "development",
        "drugs",
        "PythonDjango",
        "web",
        "application",
        "Python",
        "scripting",
        "data",
        "processing",
        "MySQL",
        "database",
        "HTMLCSSjQuery",
        "Charts",
        "data",
        "visualization",
        "pages",
        "MVC",
        "architecture",
        "application",
        "Python",
        "Django",
        "JavaScript",
        "ReactJS",
        "NodeJS",
        "Express",
        "CSS",
        "MongoDB",
        "HTML",
        "scalability",
        "testing",
        "MongoDB",
        "Performance",
        "cluster",
        "Replica",
        "Set",
        "HA",
        "AWS",
        "regions",
        "application",
        "UI",
        "JavaScript",
        "HTML5CSS",
        "business",
        "logic",
        "PythonDjango",
        "Celery",
        "RabbitMQ",
        "MySQL",
        "Django",
        "Flask",
        "worker",
        "framework",
        "Created",
        "Nodejs",
        "middleware",
        "application",
        "server",
        "JS",
        "widget",
        "framework",
        "objects",
        "JavaScript",
        "jQuery",
        "web",
        "pages",
        "integration",
        "methodologies",
        "client",
        "web",
        "portals",
        "software",
        "infrastructure",
        "APIs",
        "vendor",
        "frameworks",
        "network",
        "mapping",
        "microservices",
        "python",
        "nmap",
        "kubernetes",
        "Continuous",
        "Delivery",
        "pipeline",
        "Docker",
        "Jenkins",
        "GitHub",
        "installation",
        "Docker",
        "Docker",
        "toolbox",
        "AWS",
        "Cloud",
        "Services",
        "infrastructure",
        "AWS",
        "Stack",
        "database",
        "setup",
        "maintenance",
        "AWS",
        "EC2",
        "instances",
        "development",
        "test",
        "environment",
        "Docker",
        "containers",
        "Docker",
        "containers",
        "Kubernetes",
        "AWS",
        "Beanstalk",
        "web",
        "applications",
        "services",
        "Java",
        "PHP",
        "Nodejs",
        "Python",
        "Ruby",
        "Docker",
        "servers",
        "Apache",
        "IIS",
        "NoSQL",
        "technologies",
        "MongoDB",
        "Cassandra",
        "databases",
        "Oracle",
        "SQLite",
        "PostgreSQL",
        "Dynamo",
        "DB",
        "MySQL",
        "database",
        "Docker",
        "containers",
        "Docker",
        "application",
        "life",
        "cycle",
        "Write",
        "Python",
        "scripts",
        "documents",
        "data",
        "database",
        "page",
        "application",
        "React",
        "JS",
        "MongoDB",
        "NodeJS",
        "spring",
        "configuration",
        "server",
        "configuration",
        "Splunk",
        "Concourse",
        "Jenkins",
        "Microservices",
        "deployment",
        "end",
        "website",
        "Django",
        "framework",
        "MySQL",
        "database",
        "Django",
        "ORM",
        "end",
        "data",
        "MySQL",
        "database",
        "Managed",
        "dashboard",
        "control",
        "panel",
        "customers",
        "Administrators",
        "Django",
        "HTML",
        "CSS",
        "JavaScript",
        "Bootstrap",
        "jQuery",
        "RESTAPI",
        "FTP",
        "server",
        "Nodejs",
        "Features",
        "UNIX",
        "authentication",
        "SSL",
        "support",
        "support",
        "FTP",
        "commands",
        "datasets",
        "Panda",
        "data",
        "frames",
        "MySQL",
        "MySQL",
        "database",
        "Python",
        "Python",
        "MySQL",
        "connector",
        "MySQL",
        "package",
        "information",
        "Develop",
        "features",
        "applications",
        "Python",
        "Django",
        "HTML",
        "Behavior",
        "Driven",
        "Development",
        "BDD",
        "programming",
        "Developed",
        "Restful",
        "Microservices",
        "Flask",
        "Django",
        "AWS",
        "servers",
        "EBS",
        "EC2",
        "Developed",
        "crossbrowserplatform",
        "ReactJs",
        "NodeJS",
        "jQuery",
        "AJAX",
        "HTML5CSS",
        "design",
        "specs",
        "page",
        "layout",
        "code",
        "standards",
        "UI",
        "scratch",
        "ReactJs",
        "JIRA",
        "bug",
        "tracking",
        "communicating",
        "results",
        "Strong",
        "Experience",
        "data",
        "technologies",
        "Apache",
        "Spark",
        "Hadoop",
        "HDFS",
        "Hive",
        "MongoDB",
        "user",
        "interface",
        "guidelines",
        "standards",
        "development",
        "maintenance",
        "website",
        "HTML",
        "CSS",
        "JavaScript",
        "Reacyjs",
        "form",
        "validation",
        "user",
        "ES6",
        "ReactJS",
        "Reactrouter",
        "JSX",
        "Babel",
        "React",
        "bootstrap",
        "migration",
        "effort",
        "CI",
        "CD",
        "pipeline",
        "enterprise",
        "pipeline",
        "organization",
        "Python",
        "Engineer",
        "Lyft",
        "San",
        "Francisco",
        "CA",
        "September",
        "October",
        "development",
        "Python",
        "Web",
        "Services",
        "REST",
        "data",
        "interface",
        "format",
        "analysis",
        "Django",
        "PostgreSQL",
        "MVC",
        "architecture",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Git",
        "Node",
        "JS",
        "JS",
        "React",
        "CSS",
        "JavaScript",
        "Consumed",
        "REST",
        "Microservices",
        "Rest",
        "template",
        "APIs",
        "HTML",
        "CSS",
        "jQuery",
        "accessibility",
        "web",
        "browser",
        "NoSQL",
        "databases",
        "MongoDB",
        "Elasticsearch",
        "Oracle",
        "DB",
        "user",
        "interface",
        "CSS",
        "PHP",
        "HTML",
        "JavaScript",
        "jQuery",
        "Reactjs",
        "compilation",
        "components",
        "tools",
        "Python",
        "Shell",
        "XML",
        "tasks",
        "web",
        "services",
        "Nodejs",
        "dependencies",
        "Node",
        "Package",
        "Manager",
        "NPM",
        "Developed",
        "web",
        "traffic",
        "analysis",
        "tool",
        "Flask",
        "Pandas",
        "web",
        "applications",
        "MySQL",
        "development",
        "RESTful",
        "Web",
        "Services",
        "data",
        "interface",
        "format",
        "user",
        "interface",
        "CSS",
        "PHP",
        "HTML",
        "JavaScript",
        "jQuery",
        "docker",
        "images",
        "Kubernetes",
        "cluster",
        "replicas",
        "workloads",
        "Deployed",
        "Docker",
        "Spring",
        "REST",
        "services",
        "AWS",
        "EC2",
        "container",
        "service",
        "AWS",
        "admin",
        "console",
        "lambda",
        "applications",
        "AWS",
        "console",
        "python",
        "programs",
        "boto3",
        "security",
        "AWS",
        "Cognito",
        "service",
        "web",
        "services",
        "Catalog",
        "Pricing",
        "Jersey",
        "MySQL",
        "MongoDB",
        "nodeMulticluster",
        "setup",
        "technology",
        "NoSQL",
        "MongoDB",
        "MongoDB",
        "store",
        "Apache",
        "Kafka",
        "layer",
        "custom",
        "APIs",
        "Python",
        "Flask",
        "SQL",
        "Alchemy",
        "data",
        "models",
        "code",
        "quality",
        "unit",
        "tests",
        "Pytest",
        "UNIX",
        "shell",
        "scripts",
        "sessions",
        "testing",
        "process",
        "ETL",
        "PythonDjango",
        "web",
        "application",
        "PostgreSql",
        "DB",
        "integrations",
        "party",
        "email",
        "storage",
        "services",
        "Python",
        "OpenStack",
        "APIs",
        "Numpy",
        "Numerical",
        "analysis",
        "Microservices",
        "REST",
        "APIs",
        "data",
        "suppliers",
        "network",
        "traffic",
        "data",
        "servers",
        "serverside",
        "applications",
        "Django",
        "Python",
        "programming",
        "python",
        "libraries",
        "Beautiful",
        "Soup",
        "matplotlib",
        "SciPy",
        "NumPy",
        "Nodejs",
        "backend",
        "client",
        "web",
        "application",
        "Performed",
        "Automation",
        "deployment",
        "Conductor",
        "application",
        "AWS",
        "highend",
        "AWS",
        "components",
        "Developed",
        "app",
        "python",
        "PHP",
        "performance",
        "databases",
        "Python",
        "Python",
        "API",
        "RESTful",
        "Web",
        "Service",
        "Flask",
        "SQL",
        "Alchemy",
        "Postgre",
        "SQL",
        "clientside",
        "Interface",
        "React",
        "JS",
        "REST",
        "API",
        "Django",
        "data",
        "NoSQL",
        "database",
        "design",
        "maintenance",
        "databases",
        "Python",
        "Python",
        "API",
        "Flask",
        "Exchanged",
        "data",
        "SQL",
        "database",
        "NoSQL",
        "database",
        "MongoDB",
        "reports",
        "data",
        "visualization",
        "Tableau",
        "Software",
        "Engineer",
        "Paramus",
        "NJ",
        "January",
        "August",
        "Wrote",
        "Python",
        "code",
        "JSON",
        "XML",
        "HTTP",
        "GET",
        "request",
        "HTML",
        "data",
        "websites",
        "web",
        "services",
        "format",
        "databases",
        "Python",
        "Python",
        "API",
        "RESTful",
        "Web",
        "Service",
        "Flask",
        "SQL",
        "Alchemy",
        "Postgre",
        "SQL",
        "clientside",
        "Interface",
        "React",
        "JS",
        "REST",
        "API",
        "Django",
        "data",
        "NoSQL",
        "database",
        "development",
        "Python",
        "APIs",
        "array",
        "structures",
        "Processor",
        "failure",
        "point",
        "development",
        "RESTful",
        "Web",
        "Services",
        "data",
        "interface",
        "format",
        "user",
        "interface",
        "CSS",
        "PHP",
        "HTML",
        "JavaScript",
        "jQuery",
        "Microservices",
        "architecture",
        "web",
        "application",
        "help",
        "Flask",
        "framework",
        "CRUD",
        "applications",
        "MERN",
        "stack",
        "MongoDB",
        "ReactJS",
        "NodeJS",
        "REST",
        "API",
        "use",
        "version",
        "systems",
        "GIT",
        "SVN",
        "team",
        "Architects",
        "Developers",
        "Python",
        "Flask",
        "Peewee",
        "Linux",
        "AWS",
        "Redesign",
        "web",
        "application",
        "HTML",
        "CSS",
        "JavaScript",
        "jQuery",
        "React",
        "JS",
        "Build",
        "servers",
        "AWS",
        "volumes",
        "EC2",
        "security",
        "groups",
        "load",
        "balancers",
        "ELBs",
        "connection",
        "applications",
        "AWS",
        "Integrated",
        "RedisCache",
        "Djangorestframework",
        "data",
        "WebServices",
        "data",
        "systems",
        "Python",
        "Flask",
        "SQL",
        "Beautiful",
        "Soup",
        "httplib2",
        "Jinja2",
        "HTMLCSS",
        "Bootstrap",
        "jQuery",
        "Linux",
        "Sublime",
        "Text",
        "GIT",
        "Developed",
        "applications",
        "Python",
        "PHP",
        "PHPMySQL",
        "backend",
        "data",
        "entry",
        "Flash",
        "Consumed",
        "APIs",
        "API",
        "Django",
        "REST",
        "Framework",
        "React",
        "Build",
        "Silent",
        "Circle",
        "Management",
        "System",
        "Elasticsearch",
        "Python",
        "NodeJS",
        "infrastructure",
        "services"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T21:19:22.091826",
    "resume_data": "Python Developer span lPythonspan span lDeveloperspan Python Developer Uber Around 6 years of experience as a Python Developer proficient coder in multiple languages and experience in Design Development Implementation of Python Django clientserver technologiesbased applications RESTful services SQL and relational databases like MySQL and NoSQL database like mongo dB and OS like Linux and windows Experience in implementing Model View Control MVC architecture using serverside applications like Django Flask and Pyramid for developing web applications Good experience in performing operations such as CRUD operations and writing complex queries with Oracle MS SQL Server and MongoDB and experience in developing web services WSDL SOAP and REST and consuming web services with python 23 programming language Hands on experience with Build Automation tool like Maven and version control tools such as Git and GitHub and Experience in NodeJS implementing NodeJS callbacks NodeJS web server NodeJS Restful Good experience in software development using Python and using its libraries and modules like NumPy Pandas SciPy Pickle Jupiter SciPy Pythontwitter Matplotlib urllib2 for data analytics and rapid development Experience in Amazon Web Services Amazon EC2 Amazon S3 Amazon Simple DB Amazon RDS Amazon Elastic Load Balancing Amazon SQS AWS Identity and access management AWS Cloud Watch Amazon EBS and Amazon Cloud Front and Familiar with JSON based REST Web services and Amazon Web services Experienced in NoSQL technologies like MongoDB Redis and relational databases like Oracle SQLite PostgreSQL and MySQL databases Experience in developing RESTful APIs using Django REST Framework consumed via Rectangular a 3rd party AngularJS service and Knowledge about setting up Python REST API Frame work using Django Experience in Pythons modules NumPy Matplot for generating complex graphical data the creation of histograms and experience in working with serverside technologies including databases Restful API and MVC design patterns Experience in Reactjs for creating interactive UIs using Oneway data flow Virtual DOM JSX React Native concepts and strong experience writing APIs and Web Services in PHP and Python Experienced in implementing Microservices Service Oriented Architecture SOA with XML based Web Services SOAPWSDL using Top Down and Bottom Up approach Experience using Python 3627 Django 1718 HTML XML CSS JavaScript Bootstrap Reactjs and Nodejs and Well versed with design and development of presentation layer for web applications using technologies like HTML CSS and JavaScript Expertise working in WAMP Windows Apache MYSQL and PythonPHP and LAMP Linux Apache MySQL and PythonPHP Architecture Experienced in implementing Microservices Service Oriented Architecture SOA with XML based Web Services SOAPWSDL using Top Down and Bottom Up approach Hands on with tools GitGitHub Ansible Artifactory Jenkins OpenStack Balance NodeProxy VMWare and Open Source software to build automated testing and delivery pipelines Experience in AWS Docker and Kubernetes Stateless application Canary deployment in Kubernetes Kubernetes Stateful Sets deployment for MySQL and Kafka resources within the pod Hands on experience in using NOSQL libraries like MongoDB Cassandra Redis and relational databases like Oracle SQLite PostgreSQL and MYSQL databases Experienced in WAMP Windows Apache MYSQL PythonPHP and LAMP Linux Apache MySQL PythonPHP Architecture Knowledge in various frontend tools like HTML DHTML CSS JavaScript XML jQuery Angular JS and AJAX Proficient in Front end development experience using HTML XML CSS jQuery JSON and JavaScript CSS Experienced in design patterns such as MVC using Django Flask and deploying application on Apache tomcat server containerizing applications using Docker Responsible for designing developing testing deploying and maintaining the web application Experience with Design code and debug operations reporting data analysis and web applications utilizing Python Extensively worked with automation tools like Heroku Jenkins for continuous integration and continuous delivery CICD and to implement the EndtoEnd Automation Experienced in Backend applications using Python FlaskDjango and SQL PostgreSQL Handson experience in writing and reviewing requirements architecture documents test plans design documents quality analysis and audits Working Experience on various Python 20 and 30 packages such as NumPy SQL Alchemy big data software Matplotlib and scipy and Experienced in developing UNIX shell scripts and bash scripting Experience in developing RESTful APIs using Django REST Framework consumed via React a 3rd party reactJS service and Knowledge about setting up Python REST API Frame work using Django Experience in implementing with serverside technologies with restful API and MVC design patterns with node JS and Django framework Experienced in using Integrated Development Environment IDEs in PyDev PyScripter PyCharm Spider Python IDLE Brackets Eclipse JBuilder Sublime and NetBeans Experience in Web Application Development hands on experience of PythonDjango Flask SQL Alchemy SQLite JavaScript jQuery HTML5 and CSS Familiar with Python modules like NumPy Matplotlib Pickle Pandas SciPy PyTables PyQt etc for generating complex graphical data creation of histograms etc Experienced in developing webbased applications using Python Django HTML JavaScript AWS and jQuery Experience in Installing JenkinsPlugins for GIT Repository Setup SCM Polling for Immediate Build with Maven and Maven Repository and Deployment of apps using custom modules through Puppet as a CICD Process Handson experience working on several microservices components like Docker Engine Docker Hub Compose Docker Registry and handling multiple images primarily for installations and domain configurations and creating Docker images Experience in Reactjs for creating interactive UIs using Oneway data flow Virtual DOM JSX React Native concepts and strong experience writing APIs and Web Services in PHP and Python Work Experience Python Developer Uber Chicago IL July 2018 to Present Pinterest is an online pinboard to organize and share what inspires us Project started in order to improve the scalability of overall timeline servers and platform Involved in tasks Designing Developing and building a system using Python Shell Scripts to automate Oracle patching Grid Patching Upgrade Migration rollback Used Apache CouchDB NoSQL in AWS Linux instance in parallel to RDS MySQL to store and analyze job market info Created a python Flask webbased application using Python scripting for data processing and MySQL for database HTML CSS jQuery for data visualization Created MongoDB replica sets Clusters for growing highly scalable datasets in combining sharding databases and worked for design and Setting up of environment of MongoDB with shards and replica sets Built backend for web application using Expressjs Nodejs MongoDB and Mongoose library for serverside data retrieval Implemented Model View Controller MVC Architecture based presentation using React framework and client webpages are built using HTML CSS and JavaScript and Developed Hibernate mapping configuration files to provide the relation Deployed Application using AWS EC2 Standard Deployment Techniques and Worked on Amazon web services AWS infrastructure with automation and developed Serverside automation using Node JS scripting and connecting different types of SQL and NoSQL stores from Node JS following MVC Architecture Created a PythonDjango based web application using Python scripting for data processing MySQL for the database and HTMLCSSjQuery and High Charts for data visualization of the served pages Involved in development of Python APIs to dump the array structures in the Processor at the failure point for debugging and Implemented presentation layer using CSS framework NodeJS AngularJS Angular2 Angular4WireFraming and HTML5 Achieved business process automation via applications developed using Git Gerrit Jenkins MySQL and custom tools developed in Python and Bash Containerized Microservices by creating Docker images from Docker file collaborated with development support team to set up a continuous deployment environment using Docker and created Jenkins pipeline which helps to drive all builds out to the docker registry and then deployed to the docker containers using Jenkins file Worked with React JS components Redux Forms Events Animations and Router and Generated REST API using Flask Django Frame work and Worked on various Operating Systems like UNIX Linux Windows and MacOS Created interactive data charts on web application using High charts JavaScript library with data coming from Apache Cassandra also build Restful API web services using Node JS and Express JS and used a Full complement of Express Nodejs and Mongo DB to store and present assessments Automated builds using Maven and scheduled automated nightly builds using Heroku and Jenkins Built Jenkins pipeline to drive all microservices builds out to the Docker registry and then deployed to Kubernetes Worked on microservicebased architecture using spring boot for developing the microservices Netflix components eureka ribbon spring cloud for supporting the cloud native environment Automated builds using Maven and scheduled automated nightly builds using Heroku and Jenkins Built Jenkins pipeline to drive all microservices builds out to the Docker registry and then deployed to Kubernetes Used Pandas API to put the data as time series and tabular format for local timestamp data manipulation and retrieval and storing it into MongoDB Developed Restful APIs using Python Flask and SQL Alchemy data models as well as ensured code quality by writing unit tests using Pytest Successfully migrated the Django database from SQLite to MySQL to Postgres SQL with complete data integrity and tested many features for dashboard using Python Bootstrap CSS and JavaScript Created Python Django app using Python DjangoSession and management Implemented PEP8 coding standards across all projects Used Python Django Database APIs to access database objects Consumed REST based Microservices with Rest template based on RESTful APIs and designed developed and tested HTML CSS jQuery that meets accessibility and web browser standards for car dealerships websites Worked on NoSQL database MongoDB and developed custom MongoDB applications as per the client specification Developed Restful APIs using Python Flask and SQL Alchemy data models as well as Managed developed and designed a dashboard control panel for customers and Administrators using Django Oracle DB PostgreSQL and VMware calls Developed a fully automated continuous integration system using Git MySQL Jenkins and custom tools developed in Python Used Kubernetes to orchestrate the deployment scaling and management of Docker Containers and apart from this Worked on infrastructure with Docker containerization and maintained Docker Images and containers Developed existing network mapping microservices using python Nmap and deployed it on Kubernetes also performed Restful routing using Nodejs which submits my form data to the Mongo DB database Used Pandas API to put the data as time series and tabular format for local timestamp data manipulation and retrieval and storing it into MongoDB and developed internal auxiliary web apps using Python Flask framework with CSSHTML framework Build highly available content distribution sites by using CICD tools like Chef Ansible Docker Maven Jenkins Jira Kubernetes etc Python Developer Flatiron Health New York NY November 2015 to July 2017 Eli Lilly is a pharmaceutical company mainly do the research work so project was started in order to work on their internal management system called Biologica which Eli Lillys drug research scientists use for management of the development of Biologic drugs Created a PythonDjango based web application using Python scripting for data processing MySQL for the database and HTMLCSSjQuery and High Charts for data visualization of the served pages following MVC architecture Involved in developing webbased application using Python Django JavaScript ReactJS NodeJS Express CSS MongoDB and HTML Participated in scalability testing to ensure MongoDB High Performance Configured MongoDB Shaded cluster with Replica Set HA on Different AWS regions Designed application and created UI using JavaScript and HTML5CSS Implemented business logic using PythonDjango and Used Celery with RabbitMQ MySQL Django and Flask to create a distributed worker framework and Analyzed Created Nodejs middleware application server to encapsulate modern JS widget framework Worked with JSON objects and JavaScript and jQuery intensively to create interactive web pages Designed and developed integration methodologies between client web portals and existing software infrastructure using SOAP APIs and vendor specific frameworks Developed existing network mapping microservices using python nmap and deployed it on kubernetes Implemented a Continuous Delivery pipeline with Docker Jenkins and GitHub and worked on installation of Docker using Docker toolbox and apart from this Responsible for maintaining and expanding AWS Cloud Services infrastructure using AWS Stack especially worked with database setup and maintenance and created AWS EC2 instances Involved in development of test environment on Docker containers and configuring the Docker containers using Kubernetes and Used AWS Beanstalk for deploying and scaling web applications and services developed with Java PHP Nodejs Python Ruby and Docker on familiar servers such as Apache and IIS Worked on NoSQL technologies like MongoDB Cassandra and relational databases like Oracle SQLite PostgreSQL Dynamo DB and MySQL database Worked on creating the Docker containers and Docker consoles for managing the application life cycle Write Python scripts to parse JSON documents and load the data in database and developed single page application by using React JS backed by MongoDB and NodeJS Used spring configuration server for centralized configuration and Splunk for centralized logging Used Concourse and Jenkins for Microservices deployment Developed the back end of the website using the Django framework using the MySQL database and used Django ORM to coordinate the back end internal data with the MySQL database Managed developed and designed a dashboard control panel for customers and Administrators using Django HTML CSS JavaScript Bootstrap jQuery and RESTAPI calls FTP server implemented in Nodejs Features basic UNIX authentication SSL support and support for most FTP commands and Managed datasets using Panda data frames and MySQL queried MySQL database queries from Python using Python MySQL connector MySQL dB package to retrieve information Develop consumerbased features and applications using Python Django HTML Behavior Driven Development BDD and pairbased programming Developed Restful Microservices using Flask and Django and deployed on AWS servers using EBS and EC2 Developed crossbrowserplatform with ReactJs NodeJS jQuery AJAX and HTML5CSS to desired design specs for single page layout using code standards Created UI from scratch using ReactJs Worked on JIRA for bug tracking and communicating for better results Strong Experience in Big data technologies including Apache Spark Hadoop HDFS Hive MongoDB Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML CSS JavaScript and Reacyjs Implemented clientside form validation to validate the user inputs before passing to backend using ES6 and ReactJS and Worked with Reactrouter JSX Babel and React bootstrap Facilitated a migration effort from a retiring CI CD pipeline to a new enterprise standard pipeline for the organization Python Engineer Lyft San Francisco CA September 2014 to October 2015 Involved in development of Python based Web Services using REST for sending and getting data from the external interface in the JSON format and perform analysis using Django PostgreSQL Following MVC architecture Developed entire frontend and backend modules using Python on Django using Git Node JS underscore JS React js CSS and JavaScript Consumed REST based Microservices with Rest template based on RESTful APIs and designed developed and tested HTML CSS jQuery that meets accessibility and web browser Worked on NoSQL databases such as MongoDB Elasticsearch and Oracle DB and Developed user interface using CSS PHP HTML JavaScript and jQuery Used Reactjs for templating for faster compilation and developing reusable components and developed tools using Python Shell scripting XML to automate some of the menial tasks Developed backend web services using Nodejs and stored dependencies using Node Package Manager NPM Developed serverbased web traffic statistical analysis tool using Flask Pandas and had implemented and tested pythonbased web applications interacting with MySQL Involved in development of RESTful Web Services for getting and sending data from the external interface in the JSON format and Developed user interface using CSS PHP HTML JavaScript and jQuery Created the docker images and deployed them into the Kubernetes cluster and create the multiple replicas to handle the workloads and Deployed Docker contained Spring REST services in to AWS EC2 container service using AWS admin console and used lambda to run applications in AWS console Developed python programs by using boto3 to implement security by using AWS Cognito service Created RESTful web services for Catalog and Pricing with Jersey MySQL and MongoDB while working on Single nodeMulticluster setup using technology NoSQL and MongoDB while using MongoDB as a persistent store and Apache Kafka as a messaging layer for custom Developed Restful APIs using Python Flask and SQL Alchemy data models as well as ensured code quality by writing unit tests using Pytest and worked on writing UNIX shell scripts for scheduling the sessions for my testing process of ETL Worked on PythonDjango based web application PostgreSql DB and integrations with 3rd party email messaging storage services and worked on Python OpenStack APIs and used Numpy for Numerical analysis Developed Microservices by creating REST APIs and used them to access data from different suppliers and to gather network traffic data from servers Worked on serverside applications with Django using Python programming and used python libraries like Beautiful Soup matplotlib SciPy NumPy and Built efficient Nodejs backend for client web application Performed Automation of the deployment of the Conductor application on AWS using highend AWS architectural components and Developed multithreaded standalone app in python and PHP to view performance Designed and maintained databases using Python and developed Python based API RESTful Web Service using Flask SQL Alchemy and Postgre SQL and Implemented clientside Interface using React JS Developed the REST API using Django for fetching the data from NoSQL MongoDB database Involved in the design and maintenance of the databases using Python and Python based API using Flask Exchanged data with SQL database and NoSQL database such as MongoDB Generated datadriven reports data visualization using Tableau Software Engineer We Pay Paramus NJ January 2013 to August 2014 Wrote Python code embedded with JSON and XML to produce HTTP GET request parsing HTML data from websites and Implemented SOAPRESTful web services in JSON format Designed and maintained databases using Python and developed Python based API RESTful Web Service using Flask SQL Alchemy and Postgre SQL and Implemented clientside Interface using React JS Developed the REST API using Django for fetching the data from NoSQL MongoDB database Involved in development of Python APIs to dump the array structures in the Processor at the failure point for debugging Involved in development of RESTful Web Services for getting and sending data from the external interface in the JSON format and Developed user interface using CSS PHP HTML JavaScript and jQuery Implemented Microservices architecture in developing the web application with the help of Flask framework Worked on developing CRUD applications using MERN stack MongoDB ReactJS and NodeJS and REST based API and worked on Extensive use of version controlling systems like GIT and SVN Worked in team of Architects and Developers to build and deploy Python Flask Peewee Linux AWS Redesign and maintain existing internal web application using HTML CSS JavaScript and jQuery React JS Build servers using AWS importing volumes launching EC2 creating security groups autoscaling load balancers ELBs in the defined virtual private connection and migrated applications to the AWS cloud Integrated RedisCache with the Djangorestframework for reading the data faster and Implemented RESTful WebServices for sending and receiving the data between multiple systems Wrote with objectoriented Python Flask SQL Beautiful Soup httplib2 Jinja2 HTMLCSS Bootstrap jQuery Linux Sublime Text GIT and Developed multithreaded standalone applications using Python and PHP Created PHPMySQL backend for data entry from Flash and Consumed external APIs and wrote RESTful API using Django REST Framework and React Build the Silent Circle Management System SCMC in Elasticsearch Python and NodeJS while integrating with infrastructure services",
    "unique_id": "58c040b2-f5fd-4863-b67a-979b405c39b7"
}