{
    "clean_data": "Java developer span lJavaspan span ldeveloperspan Java developer Ebay Work Experience Java developer Ebay Seattle WA November 2018 to Present Responsibilities Worked in stages such as analysis and design development testing and debugging and Involved in Unit testing and Integration testing Designed and managed build and release methodologies using Witbe Tool Designed and managed API system deployment using fast http server and Amazon AWS architecture Design and develop CPD Test scripts for Droplet Generator steering system with C C Python Linux Internal and driver interfaces Developed Custom Item Rendered to include components assets in Flex Advanced Data grid Connected Flex from Spring Controller using different API services Led POC for implementing the loss forecasting model in Spark and then final production release Worked on design document write Pyunit test case for pyspark Utilize ActionScript 30 to develop and maintain the Flash and livestreaming components of the companys websites Developed Simple Object Access Protocol SOAP based web services for different applications called User Service and other applications using Representational State Transfer REST based Web services Developed the front end of the web pages using HTML5 CSS3 JavaScript Angular JS JQuery and AJAX Decent experience in UNIX in developing the application and familiar with all of its commands All Web Application Developing was standardized in MVC Model View Control design patterns eg Adobe Flex Pure MVC ASPNetMVC MVVC Experienced with Bootstrap as a mechanism to manage and organize the HTML page layout Scalable databasedriven web application development using a variety of frameworks ASPNET on C Flask on Python and PHP Rewrite existing Java C application in Python Actively involved in developing the methods for Create Read Update and Delete CRUD in Active Record Experience in writing SQL queries for performing various CRUD operations like create update read and delete Deployed Django web application in Apache webserver and Carpathias cloud operations Written numerous Django views class based and templates for page rendering Extensive experience in creating custom Flex components as well as extending stock components for the Team Everest application and the Solsys application Implemented the Backbone JS for DOM manipulation as this is the light web framework compared to Angular JS Utilized Python Libraries like Boto3 NumPy for AWS Used Pandas library for statistical Analysis Developed efficient Angularjs for client web based application Implemented SOA based web services designed and built SOAP web service interface Created SOAP web services and SOAP handlers to store the SOAP messages Performed pytest and unit test on them Extracted XML code from script for testing Build JSON objects using the framework which will be used by JavaScript to control the flow of the page Resolved performance related issues using efficient coding Created a signing panel for signers and notaries It had a videoconferencing module coded in AdobeFlex a signature pad a jQuery Ajax interface for adding modifying deleting signatures notes seals verifying user identities and documents navigating between document pages Worked on numerous Python modules Built dbcontext runcontext and other python objects thats reused by application Optimized the code using smart pointers profilers and C Standard template library As Full Stack developer created a custom CMS built using Django AWS Amazon web service REST Json with JavaScript JQuery AJAX components worked closely with designer Converted Photoshop images into XHTMLCSS Created many reports using xlrtxlwt python packages and reportlab2733 Used JSON and Simple SON modules of python to call webservices Deployed Django web application in Apache webserver and Carpathias cloud operations Written numerous Django views class based and templates for page rendering Build JSON objects using the framework which will be used by JavaScript to control the flow of the page Resolved performance related issues using efficient coding Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Implemented AWS highavailability using AWS Elastic Load Balancing ELB which performed balance across instances Managed code versioning with GitHub Bit Bucket and deployment to staging and production servers Used Celery as task queue and RabbitMQ as messaging broker to execute asynchronous tasks Implemented task object to interface with data feed framework and invoke database message service setup and update functionality Views and Templates were developed with Python and to create a userfriendly website interface Djangos view controller and template language is used Developed UI using CSS HTML JavaScript AngularJS JQuery and JSON Developed dynamic webpages through HTML5 CSS JavaScript and AJAX Involved in Developing a Restful APIS service using Python Flask framework Worked on a resulting report of the application and Tableau reports Deployed production site using Apache Servers with mod Python and AWS Knowledge of the Software Development Life Cycle SDLC Agile and Waterfall Methodologies Expertise on using python libraries like os pickle and SQLite Built vagrantdocker boxes to work on dev and test environment Extensive experience in web application development using Python Django and web technologies HTML HTML5 DHTML CSS CSS3 XML and JavaScript to create scalable and robust common components which can be used across the whole framework Designed and developed Database management using MYSQL and wrote and executed various MySQL database queries from PythonMySQL connector and MySQL dB package Views and Templates were developed with Python and Bash scripting and to create a userfriendly website interface Djangos view controller and template language is used Involved in all the phases of Software Development Life Cycle including Requirement Analysis Design Implementation Testing and Maintenance Involved in Daily Scrum Agile meetings Sprint planning and estimation of the tasks for the user stories participated in retrospective and presenting Demo at end of the sprint Used Angular 20 for data binding and Node JS for backend support with APIs Experience in Clientside web development utilizing HTML 5 CSS3 Bootstrap Angular JS 20 Typescript to develop Single Page Application SPA and for the interactive user interface Used AngularCLI to generate components routes services pipes and to run testsImplemented Angular 2 Router to enable navigation from one view to the next as agent performs application tasks Created Angular 2 components implemented Interpolation input variables Bootstrapping Router Outlet binding the click event Component decorator binding to the hidden property Used Angular 2 MVC architecture and twoway data binding techniques in the development of the application Built stable React components and standalone functions to be added to any future pages Application classes are developed by Core Java 8 concepts like Lambdas Streams parallel Streams Functional Interfaces Developed Business objects using POJOs and data access layer using Hibernate framework Extensively Implemented Spring Boot dependency Injection DI and AOP Used Spring Core Annotations for Spring DI and Spring MVC for REST APIs and Spring Boot for Microservices Developed REST architecturebased web services using Node JS stored dependencies using NPM and facilitated communication between client server Involved in the implementation of the RESTful web services using the Spring Boot and to perform CRUD operation from the database published the REST services parsed the data to project to client and handled the security and Authorization using Spring Security Spring security OAuth can be used for authentication and authorization purposes in application Designed and developed Spring Boot adapter applications using Rest API Designed and created Microservices business segments and RESTful administration endpoints utilizing Spring Boot Developed Spring Boot applications using spring data Used Spring Boot which is radically faster in building cloud Microservices To generate reports for the batch services used the Spring Batch created test cases of Junit for testing the DAO layer Performed configuration deployment and support of cloud services including Amazon Web Services AWS Launch various AWS EC2 instance to deploy the application Practical implementation of AWS S3 RDC EBS Used AWS SDK to connect with Amazon SQS for bulk email processing Used Amazon Cloud Watch to monitor AWS services and Amazon Cloud Watch logs to monitor Hosted and tested the application in AWS servers before publishing it in an actual production environment Focused on Test Driven Development thereby creating detailed Junit tests for every single piece of functionality before the functionality Used Apache Kafka in cluster as messaging system between the APIs and Microservices Used Springdata module to communicate with Mongo DB JIRA was used for project tracking and bug fixing and Jenkins for continuous Integration Involved in server configurations Data Sources Connection Pooling and deploying the apps on WebSphere Creating detailed Junit test for producing the clear and actual functionality of the application Java Developer GameStop Irving TX January 2018 to October 2018 Responsibilities Used JSP and JSTL Tag Libraries for developing User Interface components Developed test cases and performed unit and integration testing Performed using testing using Used JUnit Designed and developed presentation layer using JSP Custom Tags and HTML Understanding the client requirements and add designing document Implemented the Servlets to transfer the request to an appropriate server where the request can be processed and the results are then transferred to client JavaScript is used for the clientside validations and to provide the event driven programming with HTML Developed the user interface using JSP and JavaScript to view all online trading transactions Developed both Session and Entity beans representing different types of business logic abstractions Involved in Daily Scrum Agile meetings Sprint planning and estimation of the tasks for the user stories participated in retrospective and presenting Demo at end of the sprint Designed the complete website using HTML5 CSS3 jQuery AJAX JSON Bootstrap JavaScript Developed single page applications SPAs using Angular JS to improve page performance Used Angular JS to create reusable components like custom directives filters for data manipulations and to display data in company standard format in UI Experience in writing swagger documentation for Node JS services Used Angular JS to create reusable components like custom directives filters for data manipulations and to display data in company standard format in UI Added dynamic functionality to the application by implementing Node JS Wrote internal and external API services using Node JS modules Developed internal coding using J2EE technologies based on the MVC Architecture Used Java 8 features in developing the code like Lambda expressions Functional Programming Stream API etc Implemented Business Logic using Java Spring MVC and Hibernate Implemented RESTful Web services to retrieve data from client side and made REST API calls from Angular JS and parsed the data to project to client and handled the security and Authorization using Spring Security and OAuth Developed Business objects using POJOs and data access layer using Hibernate framework Designed and developed business components using Spring Boot Spring Dependency Injection Core Spring AOP Spring Annotations Used Spring Data Framework to use the features of Spring JDBC and Spring ORM classes like JDBC Template and Hibernate Template to perform the database operations by connecting to Data sources available Removed all the XML based configurations required to build the MVC application and maintained in the classes using Spring Boot Developed REST architecturebased web services to facilitate communication between client server Involved in the implementation of the RESTful web services using the Spring Boot and to perform CRUD operation from the database published the REST services parsed the data to project to client and handled the security and Authorization using Spring Security Spring security OAuth can be used for authentication and authorization purposes in application Implemented RESTful and SOAP based web administrations utilizing for JAXRS and JAXWS individually Strategic and practical implementation of cloudspecific AWS technologies including Elastic Compute CloudEC2 Simple Storage Services S3 Cloud Formation Elastic Beanstalk Virtual Private CloudVPC RDS and Cloud Watch Handson experience in developing AWS cloud formation templates and setting up Auto scaling for EC2 instances and involved in the automated provisioning of AWS cloud environment using Jenkins Aware of troubleshooting issues on AWS and other developer IDE and Cloud environments Design develop test of SOA services using SOARESTful Web Service Involved in the deployment of REST based WebService EndPoints Developed the REST based Microservices using spring data and spring boot with JPA Refactored Microservice to make it RESTful thread safe and more configurable Created Docker images for SOA projects that are developed as Microservices Used Microservice architecture with Spring BootCloud foundrybased services interacting through a combination of REST Involved in the analysis design coding development and testing stages of the application using Software Development Life Cycle SDLC Used Multithreading concepts in the application thereby supporting concurrent alerts creations and adhered to new design patterns and frameworks used within the firm for fast and quality development Application classes are developed by Core Java collections Exception handling Generics Design patterns are used and they are for client data like created Services Business Delegate Controller and DAO Implemented MVC architecture using Spring MVC and used Java Bean Classes for the Business Logic in the application Extensively used HTML CSS JavaScript AngularJS jQuery and AJAX to provide users with interactive speedy functional and more usable user interfaces Created and maintained the configuration of the Spring IOC container with Dependency Injection Developed Business Layer DAO Classes and combined with Spring framework combination of JMS with PTP and PubSub methods with message broker Apache ActiveMQ and Apache Camel Used Spring JDBC for accessing the relational databases and Spring ORM is used for templates used Apache MySQL which is used for horizontal scaling and maintaining huge amount of data Integrated Dependency Injection among various layers of an application using Spring Involved in creating and extracting data from database using SQL queries PLSQL Stored procedures triggers and packages on Oracle database Developed the application by using Eclipse IDE and added Drools for core development in business because of its workspace and plugins with the help of IBM WebSphere Application Server Java developer Pfizer New York NY November 2017 to September 2018 Responsibilities Designed and developed Enterprise Eligibility business objects and domain objects with Object Relational Mapping framework such as Hibernate Created applications connection pools deployment of JSPs Servlets and EJBs in Apache Tomcat Developed Presentation layer components comprising of JSP AJAX Struts Action and AJAX tag libraries Developed backend stored procedures and triggers using Oracle PLSQL involved in database objects creation performance tuning of stored procedures and query plan Developed SQL queries with JDBC API Hibernate ORM to access data Develop innovative and quality solutions by making use of latest tools and technologies like Apache CXF Spring IOC and Spring AOP Implemented Executor Framework in Multithreading Designed and implemented Multiple Process Service using Multithreading and Concurrency concepts to schedule and execute jobs Used the various error handling features of SOA Suite like Fault Management Framework catchcatch all branches compensating transaction etc to achieve robust error handling Worked extensively on the SOA infrastructure and Enterprise Manager EM console to fix some critical performance memory and transaction timeout issues in the system Developed the different components of application such as JSPs Servlets EJBs using WebSphere Studio Application Developer and used CVS for version control Written Unix shell scripts to identify user login information Developed and build the application using ANT Prepared the REST and SOAP based service calls depending on the data passing to the web service Create edit and maintain sites implementing responsive design themes using frontend development frameworks including Bootstrap Used Bootstrap frontend framework for faster and easier web development Design website and maintain the website content up to date Strong experience with AJAX to pull the data from the REST API and issued HTTP requests to interact with REST endpoints Worked with Cassandra Node Connector for database persistence to interact with dra NOSQL DB with Spring Data to unify and ease the access to Cassandra persistence stores Integrated spring with Hibernate for data access from MySQL Database Unstructured data was handled using Cassandra DB and used Cassandra Connector for connection Used Cucumber and Selenium for Behavioral and Integration testing respectively Deployed the Dockerized Spring Boot application that is intended to be run on dev local machine using PCF Pivotal Cloud Foundry Used Oath 2 which is a lightweight authentication framework with a central authorization server and generates an access token to access a protected resource on a resource server Oath 2 simplifies all the communications between the client server and content provider Deployment of application source code using PCF Open Shift also deployed binary packages Dynamo DB SQS for Elastic load balancing storing data and message queueing Installed the application on AWS EC2 instances and configured the storage on S3 buckets Extensively used GIT for version controlling and regularly pushed the code to Git Hub Used MAVEN for building the project dependency and documentation which is based on POM project object model BABEL and Webpack is used to build and deploy the application Performed Unit test cases using Junit Cucumber for Spring Protractor for Angular Mocha and Chai for React Involved in all phases of the Software development life cycle SDLC using Agile Methodology Developed User Interface using JSP JSTL HTML CSS Java Script JQuery and Angular JS Developed client side application with AngularJS in a clean Model View Controller MVC Architecture Involved in component development using J2EE principles and used design patterns such as Singleton Factory and Data Access Object DAO in the implementation of the application Used Spring MVC and Dependency Injection for handling presentation and business logic To maintain loose coupling between layers published the business layer as services and injected necessary dependent components using Spring IOC and published cross cutting concerns like Logging User Interface exceptions Transactions using Spring AOP Implemented persistence framework using Hibernate Handled Transaction Management using the provided data source Extensively used JSON to parse the data from server side to satisfy the business requirement Responsible for designing Hibernate mapping files based on business logic and Object relationships Integrated Spring and Hibernate together and worked on developing backend components and services using Hibernate and spring Established Database Connectivity using JDBC Hibernate OR mapping with Spring ORM for Oracle Worked on Hibernate for mapping the java objects to relational database and SQL queries to fetch the data insert and update the data from the database Java developer Accenture New York NY September 2012 to January 2014 Responsibilities Participated in requirement gathering with clients and prepared the data dictionary Assisted in moving the components from Development to TEST to Production troubleshoot and resolved issues Involved in coding front end using Swing HTML JSP JSF Struts Framework and involved in integrating the business layer with DAO layer using ORM tool Hibernate Worked on Hibernate persistence tier This involves developing Mapping files and Hibernate POJOsDAOs Involved in working with J2EE Design patterns Singleton Factory DAO and Business Delegate and Model View Controller Architecture with JSF and Spring DI Wrote SQL PLSQL and stored procedures as part of database interaction Extensively used Hibernate for Object relational Mapping for data persistence Unit testing bug fixing in multiple environments DEVINTCERTPROD and reproduce bugs for fixing and code review of individual modules in the application Developed customized Exception classes for all modules to display user friendly messages Responsible for complex queries using JDBC and also implemented JPA using provider as Hibernate at the Persistence layer Used web services to retrieve information from remote services using SOAP WSDL and Axis Webservices Worked on Java APIs like Collections Generics exception handling etc Leveraged Ant JUnit Test Driven Development and log4j opensource projects Coordinate with the offshore team and client for resolving the queries and finalize the timelines Responsible for data modeling and database design in Oracle Involve in installation and configuration of Web Logic Application Server on Windows XP systems for the application Used Spring Framework for developing the application Implemented the persistence layer using Hibernate and configured Hibernate with Spring to interact with the Oracle Database from the DAO Extensive use of Maven to build and deploy the application into Dev environment and QA environment and work with the frontend developers in displaying the data Extensive use of Collection Framework features like Map Object List to retrieve the data from Web Service manipulate the data to incorporate Business Logic and save the data to Oracle database Used Spring MVC Model View Controller to handleintercept the user requests and used various controllers to delegate the request flow to the Backend tier of the application Configured the XML files for Spring Security injection to ensure the backend security by discriminating the role of users as well as access authority for the URIs and Serverside assets Used Multithreading to simultaneously process tables as and when a specific user data is completed in one table Consume Web Services using Java to retrieve the required information to be populated in the database Wrote PLSQL Stored Procedure using TOAD for archiving data on a daily basis for a monthly report and scheduled the job using DBMS Scheduler Used JERSEY framework to implement the JAXRS Java API for XML and RESTful Service and used Agile methodology that included iterative application development weekly Sprints and daily stand up meetings Externalized Business Logic from code using database to store dynamic rules based on UI used by business and used these rules in the code to apply business logic to data Created number of scripting tasks to get different libraries which we have created for the logging and exceptional handling using C in the IDE visual studio 2012 Configured and set up JBoss Server for deployment and used JIRA for tracking bugs and JENKINS for continuous integration Involved in various phases of Software Development Life Cycle SDLC of Search module Credit Authenticate Module and Purchase Module Generated Use case diagrams Activity flow diagrams Class diagrams and Object diagrams in the design phase using Rational Rose Developed applications using AGILE methodology Designed UI screens using JSP Struts tags HTML Used JavaScript for clientside validation Used Struts Framework in the application which is based on MVC2 design pattern Used Hibernate Persistence Strategy to interact with database Actively involved in designing and implementing Session Fa ade Service Locator Data Access Objects and Singleton and Data Transfer Object design patterns Designed and developed Message driven beans that consumed the messages from the Java message queue Continuous integration using Jenkins for nightly builds and send automatic emails to the team Used Jenkins plugins for code coverage and also to run all the test before generating war file Used Spring Framework for Dependency injection and integrated with the Struts Framework and Hibernate Developed the Hibernate mapping files using Eclipse IDE Developed JPA mapping to the Database tables to access the data from the database Developed DAO to handle queries using JPAhibernate and Transfer objects Developed Custom Tags to simplify the JSP code Designed and implemented database and associated RESTful web service that persists highvolume user profile data for vertical teams Migrated highvolume OLTP transactions from Oracle to Cassandra in order to reduce Oracle licensing footprint Used JDBC to access Oracle database for accessing customer information Extensive involvement in database design development and coding of stored Procedures DDL DML statements functions and triggers Used Spring MVC framework for Dependency injection and Spring Core Implemented JAXWS SOAP Web Services using SpringWS Framework Created unit test strategy preparing test environments and test cases Monitored the error logs using Log4j and CSR Framework Fusion Logger Used Ant scripts to fetch build and deploy the application to development environment Used Eclipse 35 IDE for developing code modules in the development environment Worked on Insight backend for TRAQS application as a part of enhancement to the existing project and automated it using Dollar Universe scripts Developed EDI Web Tool EDIMx for internal use using Ice Faces and ANT Created managed beans for business logic and navigation rules for navigation between the pages Developed Graphical User Interfaces using JSF along with HTML and JSPs for user interaction Used Subversion Version Control Tool for version control in the development of the project and integrating the code Created dynamic HTML pages used JavaScript for clientside validations and AJAX to create interactive frontend GUI Used Web Logic Application Server for deployment of the product over various platforms Java based Used Subversion Version Control Tool for version control in the development of the project and integrating the code Provided technical expertise to project team covering application design database design and performance tuning activities",
    "entities": [
        "CSS HTML JavaScript",
        "Python Flask",
        "Hosted",
        "Simple SON",
        "AJAX",
        "Amazon AWS architecture",
        "IDE",
        "Session Fa ade Service",
        "Angular JS Utilized Python Libraries like Boto3 NumPy",
        "Node JS Wrote",
        "UNIX",
        "Leveraged Ant JUnit Test Driven Development",
        "Externalized Business Logic",
        "Flex Advanced Data",
        "JMS",
        "HTTP",
        "JSP AJAX Struts Action",
        "PCF Open Shift",
        "Spring IOC",
        "Amazon SQS",
        "Authorization using Spring Security",
        "ANT Created",
        "CVS",
        "Web Logic Application Server",
        "CPD Test",
        "Integration Involved",
        "Dependency Injection Developed Business Layer DAO Classes",
        "Credit Authenticate Module",
        "PubSub",
        "SOAP",
        "Developed Simple Object Access Protocol",
        "XML",
        "Map Object List",
        "Java Bean Classes",
        "JPA Refactored Microservice",
        "Multiple Process Service",
        "J2EE Design",
        "Solsys",
        "JAXWS",
        "DEVINTCERTPROD",
        "Software Development Life Cycle SDLC",
        "AJAX Involved",
        "WebSphere Creating",
        "Amazon Web Services AWS Launch",
        "EM",
        "TX",
        "Amazon",
        "GitHub Bit Bucket",
        "Apache CXF Spring IOC",
        "Python",
        "Fault Management Framework",
        "Worked on Insight",
        "Pyunit",
        "Amazon AWS S3",
        "Developed",
        "DAO",
        "Accenture New York",
        "Bootstrap Used Bootstrap",
        "HTML Developed",
        "AWS Elastic Load Balancing ELB",
        "Servlets",
        "Axis Webservices Worked",
        "Hibernate for Object relational Mapping",
        "Monitored",
        "Ebay",
        "Web Service",
        "OAuth Developed Business",
        "PCF Pivotal Cloud Foundry Used Oath 2",
        "Droplet Generator",
        "HTML5",
        "SOA",
        "Data Access Object DAO",
        "Windows XP",
        "Spring Security",
        "AGILE",
        "JSP",
        "the Software Development Life Cycle",
        "JPAhibernate",
        "Hibernate Implemented RESTful Web",
        "Spring Data Framework",
        "Oracle PLSQL",
        "the Oracle Database",
        "Spring DI",
        "Worked",
        "WebService EndPoints Developed",
        "Chai for React Involved",
        "DOM",
        "Witbe Tool Designed",
        "Developed Custom Item Rendered",
        "RDS",
        "Data Sources Connection",
        "Consume Web Services",
        "Celery",
        "Views",
        "Created Docker",
        "Angular JS",
        "Interface",
        "MVC",
        "Spark",
        "POM",
        "Agile",
        "GIT",
        "Node JS",
        "API",
        "Build JSON",
        "HTML CSS JavaScript",
        "jQuery Ajax",
        "QA",
        "Pfizer New York",
        "Spring Data",
        "Spring JDBC",
        "Integrated Spring and Hibernate",
        "Drools",
        "Cassandra Connector",
        "Created",
        "IDE Developed",
        "AWS",
        "Created Angular 2",
        "Sprints",
        "SOA Suite",
        "Singleton",
        "HTML5 CSS JavaScript",
        "JSF",
        "Used Subversion Version Control Tool",
        "the Business Logic",
        "JENKINS",
        "HTML",
        "Performed Unit",
        "SQL",
        "Log4j",
        "OLTP",
        "Business Delegate and",
        "Hibernate Handled Transaction Management",
        "JBoss Server",
        "Bootstrap",
        "DML",
        "NPM",
        "JAXRS",
        "WebSphere Studio Application Developer",
        "Serverside",
        "User Service",
        "Practical",
        "Hibernate Template",
        "Oracle Worked on Hibernate",
        "Hibernate POJOsDAOs Involved",
        "IBM WebSphere Application",
        "Pandas",
        "JSP Custom Tags",
        "Singleton Factory",
        "CRUD",
        "Backend",
        "Spring AOP Implemented Executor Framework",
        "Developed Graphical User Interfaces",
        "Maven",
        "RESTful Service",
        "Performed",
        "Oracle Involve",
        "Oracle to Cassandra",
        "lJavaspan",
        "Framework Created",
        "Djangos",
        "HTML Understanding",
        "JavaScript",
        "TRAQS",
        "Created SOAP",
        "UI",
        "Business Logic",
        "Team Everest",
        "Templates",
        "UI Added",
        "AJAX Decent",
        "REST Involved",
        "Spring Core Implemented JAXWS SOAP Web Services",
        "Django AWS Amazon",
        "Collections Generics",
        "Spring BootCloud",
        "Ice Faces",
        "Present Responsibilities Worked",
        "the Struts Framework and Hibernate Developed the Hibernate",
        "CMS",
        "XHTMLCSS Created",
        "jQuery",
        "Carpathias",
        "ASPNET",
        "REST",
        "Hibernate Created",
        "Authorization using Spring Security Spring",
        "Developed UI",
        "PTP",
        "Tableau",
        "TOAD",
        "Software Development Life Cycle",
        "MVC Model View Control",
        "Dependency Injection",
        "Single Page Application",
        "BABEL",
        "Developed Custom Tags"
    ],
    "experience": "Experience Java developer Ebay Seattle WA November 2018 to Present Responsibilities Worked in stages such as analysis and design development testing and debugging and Involved in Unit testing and Integration testing Designed and managed build and release methodologies using Witbe Tool Designed and managed API system deployment using fast http server and Amazon AWS architecture Design and develop CPD Test scripts for Droplet Generator steering system with C C Python Linux Internal and driver interfaces Developed Custom Item Rendered to include components assets in Flex Advanced Data grid Connected Flex from Spring Controller using different API services Led POC for implementing the loss forecasting model in Spark and then final production release Worked on design document write Pyunit test case for pyspark Utilize ActionScript 30 to develop and maintain the Flash and livestreaming components of the companys websites Developed Simple Object Access Protocol SOAP based web services for different applications called User Service and other applications using Representational State Transfer REST based Web services Developed the front end of the web pages using HTML5 CSS3 JavaScript Angular JS JQuery and AJAX Decent experience in UNIX in developing the application and familiar with all of its commands All Web Application Developing was standardized in MVC Model View Control design patterns eg Adobe Flex Pure MVC ASPNetMVC MVVC Experienced with Bootstrap as a mechanism to manage and organize the HTML page layout Scalable databasedriven web application development using a variety of frameworks ASPNET on C Flask on Python and PHP Rewrite existing Java C application in Python Actively involved in developing the methods for Create Read Update and Delete CRUD in Active Record Experience in writing SQL queries for performing various CRUD operations like create update read and delete Deployed Django web application in Apache webserver and Carpathias cloud operations Written numerous Django views class based and templates for page rendering Extensive experience in creating custom Flex components as well as extending stock components for the Team Everest application and the Solsys application Implemented the Backbone JS for DOM manipulation as this is the light web framework compared to Angular JS Utilized Python Libraries like Boto3 NumPy for AWS Used Pandas library for statistical Analysis Developed efficient Angularjs for client web based application Implemented SOA based web services designed and built SOAP web service interface Created SOAP web services and SOAP handlers to store the SOAP messages Performed pytest and unit test on them Extracted XML code from script for testing Build JSON objects using the framework which will be used by JavaScript to control the flow of the page Resolved performance related issues using efficient coding Created a signing panel for signers and notaries It had a videoconferencing module coded in AdobeFlex a signature pad a jQuery Ajax interface for adding modifying deleting signatures notes seals verifying user identities and documents navigating between document pages Worked on numerous Python modules Built dbcontext runcontext and other python objects that s reused by application Optimized the code using smart pointers profilers and C Standard template library As Full Stack developer created a custom CMS built using Django AWS Amazon web service REST Json with JavaScript JQuery AJAX components worked closely with designer Converted Photoshop images into XHTMLCSS Created many reports using xlrtxlwt python packages and reportlab2733 Used JSON and Simple SON modules of python to call webservices Deployed Django web application in Apache webserver and Carpathias cloud operations Written numerous Django views class based and templates for page rendering Build JSON objects using the framework which will be used by JavaScript to control the flow of the page Resolved performance related issues using efficient coding Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Implemented AWS highavailability using AWS Elastic Load Balancing ELB which performed balance across instances Managed code versioning with GitHub Bit Bucket and deployment to staging and production servers Used Celery as task queue and RabbitMQ as messaging broker to execute asynchronous tasks Implemented task object to interface with data feed framework and invoke database message service setup and update functionality Views and Templates were developed with Python and to create a userfriendly website interface Djangos view controller and template language is used Developed UI using CSS HTML JavaScript AngularJS JQuery and JSON Developed dynamic webpages through HTML5 CSS JavaScript and AJAX Involved in Developing a Restful APIS service using Python Flask framework Worked on a resulting report of the application and Tableau reports Deployed production site using Apache Servers with mod Python and AWS Knowledge of the Software Development Life Cycle SDLC Agile and Waterfall Methodologies Expertise on using python libraries like os pickle and SQLite Built vagrantdocker boxes to work on dev and test environment Extensive experience in web application development using Python Django and web technologies HTML HTML5 DHTML CSS CSS3 XML and JavaScript to create scalable and robust common components which can be used across the whole framework Designed and developed Database management using MYSQL and wrote and executed various MySQL database queries from PythonMySQL connector and MySQL dB package Views and Templates were developed with Python and Bash scripting and to create a userfriendly website interface Djangos view controller and template language is used Involved in all the phases of Software Development Life Cycle including Requirement Analysis Design Implementation Testing and Maintenance Involved in Daily Scrum Agile meetings Sprint planning and estimation of the tasks for the user stories participated in retrospective and presenting Demo at end of the sprint Used Angular 20 for data binding and Node JS for backend support with APIs Experience in Clientside web development utilizing HTML 5 CSS3 Bootstrap Angular JS 20 Typescript to develop Single Page Application SPA and for the interactive user interface Used AngularCLI to generate components routes services pipes and to run testsImplemented Angular 2 Router to enable navigation from one view to the next as agent performs application tasks Created Angular 2 components implemented Interpolation input variables Bootstrapping Router Outlet binding the click event Component decorator binding to the hidden property Used Angular 2 MVC architecture and twoway data binding techniques in the development of the application Built stable React components and standalone functions to be added to any future pages Application classes are developed by Core Java 8 concepts like Lambdas Streams parallel Streams Functional Interfaces Developed Business objects using POJOs and data access layer using Hibernate framework Extensively Implemented Spring Boot dependency Injection DI and AOP Used Spring Core Annotations for Spring DI and Spring MVC for REST APIs and Spring Boot for Microservices Developed REST architecturebased web services using Node JS stored dependencies using NPM and facilitated communication between client server Involved in the implementation of the RESTful web services using the Spring Boot and to perform CRUD operation from the database published the REST services parsed the data to project to client and handled the security and Authorization using Spring Security Spring security OAuth can be used for authentication and authorization purposes in application Designed and developed Spring Boot adapter applications using Rest API Designed and created Microservices business segments and RESTful administration endpoints utilizing Spring Boot Developed Spring Boot applications using spring data Used Spring Boot which is radically faster in building cloud Microservices To generate reports for the batch services used the Spring Batch created test cases of Junit for testing the DAO layer Performed configuration deployment and support of cloud services including Amazon Web Services AWS Launch various AWS EC2 instance to deploy the application Practical implementation of AWS S3 RDC EBS Used AWS SDK to connect with Amazon SQS for bulk email processing Used Amazon Cloud Watch to monitor AWS services and Amazon Cloud Watch logs to monitor Hosted and tested the application in AWS servers before publishing it in an actual production environment Focused on Test Driven Development thereby creating detailed Junit tests for every single piece of functionality before the functionality Used Apache Kafka in cluster as messaging system between the APIs and Microservices Used Springdata module to communicate with Mongo DB JIRA was used for project tracking and bug fixing and Jenkins for continuous Integration Involved in server configurations Data Sources Connection Pooling and deploying the apps on WebSphere Creating detailed Junit test for producing the clear and actual functionality of the application Java Developer GameStop Irving TX January 2018 to October 2018 Responsibilities Used JSP and JSTL Tag Libraries for developing User Interface components Developed test cases and performed unit and integration testing Performed using testing using Used JUnit Designed and developed presentation layer using JSP Custom Tags and HTML Understanding the client requirements and add designing document Implemented the Servlets to transfer the request to an appropriate server where the request can be processed and the results are then transferred to client JavaScript is used for the clientside validations and to provide the event driven programming with HTML Developed the user interface using JSP and JavaScript to view all online trading transactions Developed both Session and Entity beans representing different types of business logic abstractions Involved in Daily Scrum Agile meetings Sprint planning and estimation of the tasks for the user stories participated in retrospective and presenting Demo at end of the sprint Designed the complete website using HTML5 CSS3 jQuery AJAX JSON Bootstrap JavaScript Developed single page applications SPAs using Angular JS to improve page performance Used Angular JS to create reusable components like custom directives filters for data manipulations and to display data in company standard format in UI Experience in writing swagger documentation for Node JS services Used Angular JS to create reusable components like custom directives filters for data manipulations and to display data in company standard format in UI Added dynamic functionality to the application by implementing Node JS Wrote internal and external API services using Node JS modules Developed internal coding using J2EE technologies based on the MVC Architecture Used Java 8 features in developing the code like Lambda expressions Functional Programming Stream API etc Implemented Business Logic using Java Spring MVC and Hibernate Implemented RESTful Web services to retrieve data from client side and made REST API calls from Angular JS and parsed the data to project to client and handled the security and Authorization using Spring Security and OAuth Developed Business objects using POJOs and data access layer using Hibernate framework Designed and developed business components using Spring Boot Spring Dependency Injection Core Spring AOP Spring Annotations Used Spring Data Framework to use the features of Spring JDBC and Spring ORM classes like JDBC Template and Hibernate Template to perform the database operations by connecting to Data sources available Removed all the XML based configurations required to build the MVC application and maintained in the classes using Spring Boot Developed REST architecturebased web services to facilitate communication between client server Involved in the implementation of the RESTful web services using the Spring Boot and to perform CRUD operation from the database published the REST services parsed the data to project to client and handled the security and Authorization using Spring Security Spring security OAuth can be used for authentication and authorization purposes in application Implemented RESTful and SOAP based web administrations utilizing for JAXRS and JAXWS individually Strategic and practical implementation of cloudspecific AWS technologies including Elastic Compute CloudEC2 Simple Storage Services S3 Cloud Formation Elastic Beanstalk Virtual Private CloudVPC RDS and Cloud Watch Handson experience in developing AWS cloud formation templates and setting up Auto scaling for EC2 instances and involved in the automated provisioning of AWS cloud environment using Jenkins Aware of troubleshooting issues on AWS and other developer IDE and Cloud environments Design develop test of SOA services using SOARESTful Web Service Involved in the deployment of REST based WebService EndPoints Developed the REST based Microservices using spring data and spring boot with JPA Refactored Microservice to make it RESTful thread safe and more configurable Created Docker images for SOA projects that are developed as Microservices Used Microservice architecture with Spring BootCloud foundrybased services interacting through a combination of REST Involved in the analysis design coding development and testing stages of the application using Software Development Life Cycle SDLC Used Multithreading concepts in the application thereby supporting concurrent alerts creations and adhered to new design patterns and frameworks used within the firm for fast and quality development Application classes are developed by Core Java collections Exception handling Generics Design patterns are used and they are for client data like created Services Business Delegate Controller and DAO Implemented MVC architecture using Spring MVC and used Java Bean Classes for the Business Logic in the application Extensively used HTML CSS JavaScript AngularJS jQuery and AJAX to provide users with interactive speedy functional and more usable user interfaces Created and maintained the configuration of the Spring IOC container with Dependency Injection Developed Business Layer DAO Classes and combined with Spring framework combination of JMS with PTP and PubSub methods with message broker Apache ActiveMQ and Apache Camel Used Spring JDBC for accessing the relational databases and Spring ORM is used for templates used Apache MySQL which is used for horizontal scaling and maintaining huge amount of data Integrated Dependency Injection among various layers of an application using Spring Involved in creating and extracting data from database using SQL queries PLSQL Stored procedures triggers and packages on Oracle database Developed the application by using Eclipse IDE and added Drools for core development in business because of its workspace and plugins with the help of IBM WebSphere Application Server Java developer Pfizer New York NY November 2017 to September 2018 Responsibilities Designed and developed Enterprise Eligibility business objects and domain objects with Object Relational Mapping framework such as Hibernate Created applications connection pools deployment of JSPs Servlets and EJBs in Apache Tomcat Developed Presentation layer components comprising of JSP AJAX Struts Action and AJAX tag libraries Developed backend stored procedures and triggers using Oracle PLSQL involved in database objects creation performance tuning of stored procedures and query plan Developed SQL queries with JDBC API Hibernate ORM to access data Develop innovative and quality solutions by making use of latest tools and technologies like Apache CXF Spring IOC and Spring AOP Implemented Executor Framework in Multithreading Designed and implemented Multiple Process Service using Multithreading and Concurrency concepts to schedule and execute jobs Used the various error handling features of SOA Suite like Fault Management Framework catchcatch all branches compensating transaction etc to achieve robust error handling Worked extensively on the SOA infrastructure and Enterprise Manager EM console to fix some critical performance memory and transaction timeout issues in the system Developed the different components of application such as JSPs Servlets EJBs using WebSphere Studio Application Developer and used CVS for version control Written Unix shell scripts to identify user login information Developed and build the application using ANT Prepared the REST and SOAP based service calls depending on the data passing to the web service Create edit and maintain sites implementing responsive design themes using frontend development frameworks including Bootstrap Used Bootstrap frontend framework for faster and easier web development Design website and maintain the website content up to date Strong experience with AJAX to pull the data from the REST API and issued HTTP requests to interact with REST endpoints Worked with Cassandra Node Connector for database persistence to interact with dra NOSQL DB with Spring Data to unify and ease the access to Cassandra persistence stores Integrated spring with Hibernate for data access from MySQL Database Unstructured data was handled using Cassandra DB and used Cassandra Connector for connection Used Cucumber and Selenium for Behavioral and Integration testing respectively Deployed the Dockerized Spring Boot application that is intended to be run on dev local machine using PCF Pivotal Cloud Foundry Used Oath 2 which is a lightweight authentication framework with a central authorization server and generates an access token to access a protected resource on a resource server Oath 2 simplifies all the communications between the client server and content provider Deployment of application source code using PCF Open Shift also deployed binary packages Dynamo DB SQS for Elastic load balancing storing data and message queueing Installed the application on AWS EC2 instances and configured the storage on S3 buckets Extensively used GIT for version controlling and regularly pushed the code to Git Hub Used MAVEN for building the project dependency and documentation which is based on POM project object model BABEL and Webpack is used to build and deploy the application Performed Unit test cases using Junit Cucumber for Spring Protractor for Angular Mocha and Chai for React Involved in all phases of the Software development life cycle SDLC using Agile Methodology Developed User Interface using JSP JSTL HTML CSS Java Script JQuery and Angular JS Developed client side application with AngularJS in a clean Model View Controller MVC Architecture Involved in component development using J2EE principles and used design patterns such as Singleton Factory and Data Access Object DAO in the implementation of the application Used Spring MVC and Dependency Injection for handling presentation and business logic To maintain loose coupling between layers published the business layer as services and injected necessary dependent components using Spring IOC and published cross cutting concerns like Logging User Interface exceptions Transactions using Spring AOP Implemented persistence framework using Hibernate Handled Transaction Management using the provided data source Extensively used JSON to parse the data from server side to satisfy the business requirement Responsible for designing Hibernate mapping files based on business logic and Object relationships Integrated Spring and Hibernate together and worked on developing backend components and services using Hibernate and spring Established Database Connectivity using JDBC Hibernate OR mapping with Spring ORM for Oracle Worked on Hibernate for mapping the java objects to relational database and SQL queries to fetch the data insert and update the data from the database Java developer Accenture New York NY September 2012 to January 2014 Responsibilities Participated in requirement gathering with clients and prepared the data dictionary Assisted in moving the components from Development to TEST to Production troubleshoot and resolved issues Involved in coding front end using Swing HTML JSP JSF Struts Framework and involved in integrating the business layer with DAO layer using ORM tool Hibernate Worked on Hibernate persistence tier This involves developing Mapping files and Hibernate POJOsDAOs Involved in working with J2EE Design patterns Singleton Factory DAO and Business Delegate and Model View Controller Architecture with JSF and Spring DI Wrote SQL PLSQL and stored procedures as part of database interaction Extensively used Hibernate for Object relational Mapping for data persistence Unit testing bug fixing in multiple environments DEVINTCERTPROD and reproduce bugs for fixing and code review of individual modules in the application Developed customized Exception classes for all modules to display user friendly messages Responsible for complex queries using JDBC and also implemented JPA using provider as Hibernate at the Persistence layer Used web services to retrieve information from remote services using SOAP WSDL and Axis Webservices Worked on Java APIs like Collections Generics exception handling etc Leveraged Ant JUnit Test Driven Development and log4j opensource projects Coordinate with the offshore team and client for resolving the queries and finalize the timelines Responsible for data modeling and database design in Oracle Involve in installation and configuration of Web Logic Application Server on Windows XP systems for the application Used Spring Framework for developing the application Implemented the persistence layer using Hibernate and configured Hibernate with Spring to interact with the Oracle Database from the DAO Extensive use of Maven to build and deploy the application into Dev environment and QA environment and work with the frontend developers in displaying the data Extensive use of Collection Framework features like Map Object List to retrieve the data from Web Service manipulate the data to incorporate Business Logic and save the data to Oracle database Used Spring MVC Model View Controller to handleintercept the user requests and used various controllers to delegate the request flow to the Backend tier of the application Configured the XML files for Spring Security injection to ensure the backend security by discriminating the role of users as well as access authority for the URIs and Serverside assets Used Multithreading to simultaneously process tables as and when a specific user data is completed in one table Consume Web Services using Java to retrieve the required information to be populated in the database Wrote PLSQL Stored Procedure using TOAD for archiving data on a daily basis for a monthly report and scheduled the job using DBMS Scheduler Used JERSEY framework to implement the JAXRS Java API for XML and RESTful Service and used Agile methodology that included iterative application development weekly Sprints and daily stand up meetings Externalized Business Logic from code using database to store dynamic rules based on UI used by business and used these rules in the code to apply business logic to data Created number of scripting tasks to get different libraries which we have created for the logging and exceptional handling using C in the IDE visual studio 2012 Configured and set up JBoss Server for deployment and used JIRA for tracking bugs and JENKINS for continuous integration Involved in various phases of Software Development Life Cycle SDLC of Search module Credit Authenticate Module and Purchase Module Generated Use case diagrams Activity flow diagrams Class diagrams and Object diagrams in the design phase using Rational Rose Developed applications using AGILE methodology Designed UI screens using JSP Struts tags HTML Used JavaScript for clientside validation Used Struts Framework in the application which is based on MVC2 design pattern Used Hibernate Persistence Strategy to interact with database Actively involved in designing and implementing Session Fa ade Service Locator Data Access Objects and Singleton and Data Transfer Object design patterns Designed and developed Message driven beans that consumed the messages from the Java message queue Continuous integration using Jenkins for nightly builds and send automatic emails to the team Used Jenkins plugins for code coverage and also to run all the test before generating war file Used Spring Framework for Dependency injection and integrated with the Struts Framework and Hibernate Developed the Hibernate mapping files using Eclipse IDE Developed JPA mapping to the Database tables to access the data from the database Developed DAO to handle queries using JPAhibernate and Transfer objects Developed Custom Tags to simplify the JSP code Designed and implemented database and associated RESTful web service that persists highvolume user profile data for vertical teams Migrated highvolume OLTP transactions from Oracle to Cassandra in order to reduce Oracle licensing footprint Used JDBC to access Oracle database for accessing customer information Extensive involvement in database design development and coding of stored Procedures DDL DML statements functions and triggers Used Spring MVC framework for Dependency injection and Spring Core Implemented JAXWS SOAP Web Services using SpringWS Framework Created unit test strategy preparing test environments and test cases Monitored the error logs using Log4j and CSR Framework Fusion Logger Used Ant scripts to fetch build and deploy the application to development environment Used Eclipse 35 IDE for developing code modules in the development environment Worked on Insight backend for TRAQS application as a part of enhancement to the existing project and automated it using Dollar Universe scripts Developed EDI Web Tool EDIMx for internal use using Ice Faces and ANT Created managed beans for business logic and navigation rules for navigation between the pages Developed Graphical User Interfaces using JSF along with HTML and JSPs for user interaction Used Subversion Version Control Tool for version control in the development of the project and integrating the code Created dynamic HTML pages used JavaScript for clientside validations and AJAX to create interactive frontend GUI Used Web Logic Application Server for deployment of the product over various platforms Java based Used Subversion Version Control Tool for version control in the development of the project and integrating the code Provided technical expertise to project team covering application design database design and performance tuning activities",
    "extracted_keywords": [
        "developer",
        "span",
        "lJavaspan",
        "span",
        "ldeveloperspan",
        "Java",
        "developer",
        "Ebay",
        "Work",
        "Experience",
        "Java",
        "developer",
        "Ebay",
        "Seattle",
        "WA",
        "November",
        "Present",
        "Responsibilities",
        "stages",
        "analysis",
        "design",
        "development",
        "testing",
        "debugging",
        "Unit",
        "testing",
        "Integration",
        "testing",
        "build",
        "methodologies",
        "Witbe",
        "Tool",
        "API",
        "system",
        "deployment",
        "http",
        "server",
        "Amazon",
        "AWS",
        "Design",
        "CPD",
        "Test",
        "scripts",
        "Droplet",
        "Generator",
        "steering",
        "system",
        "C",
        "C",
        "Python",
        "Linux",
        "Internal",
        "driver",
        "interfaces",
        "Custom",
        "Item",
        "Rendered",
        "components",
        "assets",
        "Flex",
        "Advanced",
        "Data",
        "Connected",
        "Flex",
        "Spring",
        "Controller",
        "API",
        "services",
        "Led",
        "POC",
        "loss",
        "forecasting",
        "model",
        "Spark",
        "production",
        "release",
        "design",
        "document",
        "Pyunit",
        "test",
        "case",
        "pyspark",
        "Utilize",
        "ActionScript",
        "Flash",
        "components",
        "companys",
        "websites",
        "Simple",
        "Object",
        "Access",
        "Protocol",
        "SOAP",
        "web",
        "services",
        "applications",
        "User",
        "Service",
        "applications",
        "Representational",
        "State",
        "Transfer",
        "REST",
        "Web",
        "services",
        "end",
        "web",
        "pages",
        "HTML5",
        "CSS3",
        "JavaScript",
        "Angular",
        "JS",
        "JQuery",
        "AJAX",
        "experience",
        "UNIX",
        "application",
        "commands",
        "Web",
        "Application",
        "Developing",
        "MVC",
        "Model",
        "View",
        "Control",
        "design",
        "patterns",
        "Adobe",
        "Flex",
        "Pure",
        "MVC",
        "ASPNetMVC",
        "MVVC",
        "Bootstrap",
        "mechanism",
        "HTML",
        "page",
        "layout",
        "web",
        "application",
        "development",
        "variety",
        "frameworks",
        "ASPNET",
        "C",
        "Flask",
        "Python",
        "PHP",
        "Rewrite",
        "Java",
        "C",
        "application",
        "Python",
        "methods",
        "Create",
        "Read",
        "Update",
        "Delete",
        "CRUD",
        "Active",
        "Record",
        "Experience",
        "SQL",
        "CRUD",
        "operations",
        "update",
        "read",
        "Deployed",
        "Django",
        "web",
        "application",
        "Apache",
        "webserver",
        "Carpathias",
        "cloud",
        "operations",
        "Django",
        "class",
        "templates",
        "page",
        "experience",
        "custom",
        "Flex",
        "components",
        "stock",
        "components",
        "Team",
        "Everest",
        "application",
        "Solsys",
        "application",
        "Backbone",
        "JS",
        "DOM",
        "manipulation",
        "web",
        "framework",
        "JS",
        "Python",
        "Libraries",
        "NumPy",
        "AWS",
        "Pandas",
        "library",
        "Analysis",
        "Angularjs",
        "client",
        "web",
        "application",
        "SOA",
        "web",
        "services",
        "SOAP",
        "web",
        "service",
        "interface",
        "Created",
        "SOAP",
        "web",
        "services",
        "SOAP",
        "handlers",
        "SOAP",
        "messages",
        "unit",
        "test",
        "XML",
        "code",
        "script",
        "Build",
        "JSON",
        "objects",
        "framework",
        "JavaScript",
        "flow",
        "page",
        "performance",
        "issues",
        "signing",
        "panel",
        "signers",
        "notaries",
        "videoconferencing",
        "module",
        "AdobeFlex",
        "signature",
        "pad",
        "jQuery",
        "Ajax",
        "interface",
        "signatures",
        "notes",
        "seals",
        "user",
        "identities",
        "documents",
        "document",
        "pages",
        "Python",
        "modules",
        "runcontext",
        "python",
        "application",
        "code",
        "pointers",
        "profilers",
        "C",
        "Standard",
        "template",
        "library",
        "Full",
        "Stack",
        "developer",
        "custom",
        "CMS",
        "Django",
        "Amazon",
        "web",
        "service",
        "REST",
        "Json",
        "JavaScript",
        "JQuery",
        "AJAX",
        "components",
        "designer",
        "Photoshop",
        "images",
        "XHTMLCSS",
        "reports",
        "xlrtxlwt",
        "python",
        "packages",
        "reportlab2733",
        "JSON",
        "SON",
        "modules",
        "python",
        "webservices",
        "Deployed",
        "Django",
        "web",
        "application",
        "Apache",
        "webserver",
        "Carpathias",
        "cloud",
        "operations",
        "Django",
        "class",
        "templates",
        "page",
        "Build",
        "JSON",
        "framework",
        "JavaScript",
        "flow",
        "page",
        "performance",
        "issues",
        "support",
        "Amazon",
        "AWS",
        "S3",
        "RDS",
        "files",
        "database",
        "Amazon",
        "Cloud",
        "AWS",
        "highavailability",
        "AWS",
        "Elastic",
        "Load",
        "Balancing",
        "ELB",
        "balance",
        "instances",
        "Managed",
        "code",
        "GitHub",
        "Bit",
        "Bucket",
        "deployment",
        "staging",
        "production",
        "servers",
        "Celery",
        "task",
        "queue",
        "RabbitMQ",
        "broker",
        "tasks",
        "task",
        "object",
        "data",
        "feed",
        "framework",
        "invoke",
        "database",
        "message",
        "service",
        "setup",
        "functionality",
        "Views",
        "Templates",
        "Python",
        "website",
        "interface",
        "Djangos",
        "controller",
        "template",
        "language",
        "Developed",
        "UI",
        "CSS",
        "HTML",
        "JavaScript",
        "JQuery",
        "webpages",
        "HTML5",
        "CSS",
        "JavaScript",
        "AJAX",
        "APIS",
        "service",
        "Python",
        "Flask",
        "framework",
        "report",
        "application",
        "Tableau",
        "production",
        "site",
        "Apache",
        "Servers",
        "mod",
        "Python",
        "AWS",
        "Knowledge",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "SDLC",
        "Agile",
        "Waterfall",
        "Methodologies",
        "Expertise",
        "python",
        "libraries",
        "pickle",
        "vagrantdocker",
        "boxes",
        "dev",
        "test",
        "environment",
        "experience",
        "web",
        "application",
        "development",
        "Python",
        "Django",
        "web",
        "technologies",
        "HTML",
        "HTML5",
        "CSS",
        "CSS3",
        "XML",
        "JavaScript",
        "components",
        "framework",
        "Database",
        "management",
        "MYSQL",
        "MySQL",
        "database",
        "connector",
        "MySQL",
        "package",
        "Views",
        "Templates",
        "Python",
        "Bash",
        "scripting",
        "website",
        "interface",
        "Djangos",
        "controller",
        "template",
        "language",
        "phases",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "Requirement",
        "Analysis",
        "Design",
        "Implementation",
        "Testing",
        "Maintenance",
        "Daily",
        "Scrum",
        "Agile",
        "meetings",
        "Sprint",
        "planning",
        "estimation",
        "tasks",
        "user",
        "stories",
        "Demo",
        "end",
        "sprint",
        "Angular",
        "data",
        "Node",
        "JS",
        "support",
        "APIs",
        "Experience",
        "web",
        "development",
        "HTML",
        "CSS3",
        "Bootstrap",
        "Angular",
        "JS",
        "Typescript",
        "Single",
        "Page",
        "Application",
        "SPA",
        "user",
        "interface",
        "AngularCLI",
        "components",
        "routes",
        "services",
        "pipes",
        "Angular",
        "Router",
        "navigation",
        "view",
        "agent",
        "application",
        "tasks",
        "Angular",
        "components",
        "Interpolation",
        "input",
        "variables",
        "Bootstrapping",
        "Router",
        "Outlet",
        "event",
        "Component",
        "decorator",
        "property",
        "Angular",
        "MVC",
        "architecture",
        "twoway",
        "data",
        "techniques",
        "development",
        "application",
        "React",
        "components",
        "functions",
        "pages",
        "Application",
        "classes",
        "Core",
        "Java",
        "concepts",
        "Lambdas",
        "Streams",
        "Streams",
        "Functional",
        "Interfaces",
        "Developed",
        "Business",
        "POJOs",
        "data",
        "access",
        "layer",
        "Hibernate",
        "framework",
        "Spring",
        "Boot",
        "dependency",
        "Injection",
        "DI",
        "AOP",
        "Spring",
        "Core",
        "Annotations",
        "Spring",
        "DI",
        "Spring",
        "MVC",
        "REST",
        "APIs",
        "Spring",
        "Boot",
        "Microservices",
        "Developed",
        "REST",
        "web",
        "services",
        "Node",
        "JS",
        "dependencies",
        "NPM",
        "communication",
        "client",
        "server",
        "implementation",
        "RESTful",
        "web",
        "services",
        "Spring",
        "Boot",
        "CRUD",
        "operation",
        "database",
        "REST",
        "services",
        "data",
        "client",
        "security",
        "Authorization",
        "Spring",
        "Security",
        "Spring",
        "security",
        "OAuth",
        "authentication",
        "authorization",
        "purposes",
        "application",
        "Spring",
        "Boot",
        "adapter",
        "applications",
        "Rest",
        "API",
        "Microservices",
        "business",
        "segments",
        "administration",
        "endpoints",
        "Spring",
        "Boot",
        "Developed",
        "Spring",
        "Boot",
        "applications",
        "spring",
        "data",
        "Spring",
        "Boot",
        "cloud",
        "Microservices",
        "reports",
        "batch",
        "services",
        "Spring",
        "Batch",
        "test",
        "cases",
        "Junit",
        "DAO",
        "layer",
        "configuration",
        "deployment",
        "support",
        "cloud",
        "services",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "AWS",
        "EC2",
        "instance",
        "application",
        "implementation",
        "AWS",
        "S3",
        "EBS",
        "AWS",
        "SDK",
        "Amazon",
        "SQS",
        "email",
        "processing",
        "Amazon",
        "Cloud",
        "AWS",
        "services",
        "Amazon",
        "Cloud",
        "Watch",
        "Hosted",
        "application",
        "AWS",
        "servers",
        "production",
        "environment",
        "Test",
        "Driven",
        "Development",
        "Junit",
        "tests",
        "piece",
        "functionality",
        "functionality",
        "Apache",
        "Kafka",
        "cluster",
        "system",
        "APIs",
        "Microservices",
        "Springdata",
        "module",
        "Mongo",
        "DB",
        "JIRA",
        "project",
        "tracking",
        "bug",
        "fixing",
        "Jenkins",
        "Integration",
        "server",
        "configurations",
        "Data",
        "Sources",
        "Connection",
        "Pooling",
        "apps",
        "WebSphere",
        "Junit",
        "test",
        "functionality",
        "application",
        "Java",
        "Developer",
        "GameStop",
        "Irving",
        "TX",
        "January",
        "October",
        "Responsibilities",
        "JSP",
        "JSTL",
        "Tag",
        "Libraries",
        "User",
        "Interface",
        "components",
        "test",
        "cases",
        "unit",
        "integration",
        "testing",
        "testing",
        "JUnit",
        "presentation",
        "layer",
        "JSP",
        "Custom",
        "Tags",
        "HTML",
        "client",
        "requirements",
        "document",
        "Servlets",
        "request",
        "server",
        "request",
        "results",
        "client",
        "JavaScript",
        "validations",
        "event",
        "programming",
        "HTML",
        "user",
        "interface",
        "JSP",
        "JavaScript",
        "trading",
        "transactions",
        "Session",
        "Entity",
        "beans",
        "types",
        "business",
        "logic",
        "abstractions",
        "Daily",
        "Scrum",
        "Agile",
        "meetings",
        "Sprint",
        "planning",
        "estimation",
        "tasks",
        "user",
        "stories",
        "Demo",
        "end",
        "sprint",
        "website",
        "HTML5",
        "CSS3",
        "jQuery",
        "AJAX",
        "JSON",
        "Bootstrap",
        "JavaScript",
        "page",
        "applications",
        "SPAs",
        "JS",
        "page",
        "performance",
        "JS",
        "components",
        "custom",
        "directives",
        "filters",
        "data",
        "manipulations",
        "data",
        "company",
        "format",
        "UI",
        "Experience",
        "documentation",
        "Node",
        "JS",
        "services",
        "JS",
        "components",
        "custom",
        "directives",
        "filters",
        "data",
        "manipulations",
        "data",
        "company",
        "format",
        "UI",
        "functionality",
        "application",
        "Node",
        "JS",
        "Wrote",
        "API",
        "services",
        "Node",
        "JS",
        "modules",
        "coding",
        "J2EE",
        "technologies",
        "MVC",
        "Architecture",
        "Java",
        "features",
        "code",
        "Lambda",
        "expressions",
        "Functional",
        "Programming",
        "Stream",
        "API",
        "Business",
        "Logic",
        "Java",
        "Spring",
        "MVC",
        "Hibernate",
        "Web",
        "services",
        "data",
        "client",
        "side",
        "REST",
        "API",
        "JS",
        "data",
        "client",
        "security",
        "Authorization",
        "Spring",
        "Security",
        "OAuth",
        "Developed",
        "Business",
        "POJOs",
        "data",
        "access",
        "layer",
        "Hibernate",
        "framework",
        "business",
        "components",
        "Spring",
        "Boot",
        "Spring",
        "Dependency",
        "Injection",
        "Core",
        "Spring",
        "AOP",
        "Spring",
        "Annotations",
        "Spring",
        "Data",
        "Framework",
        "features",
        "Spring",
        "JDBC",
        "Spring",
        "ORM",
        "classes",
        "JDBC",
        "Template",
        "Hibernate",
        "Template",
        "database",
        "operations",
        "Data",
        "sources",
        "Removed",
        "XML",
        "configurations",
        "MVC",
        "application",
        "classes",
        "Spring",
        "Boot",
        "Developed",
        "REST",
        "web",
        "services",
        "communication",
        "client",
        "server",
        "implementation",
        "RESTful",
        "web",
        "services",
        "Spring",
        "Boot",
        "CRUD",
        "operation",
        "database",
        "REST",
        "services",
        "data",
        "client",
        "security",
        "Authorization",
        "Spring",
        "Security",
        "Spring",
        "security",
        "OAuth",
        "authentication",
        "authorization",
        "purposes",
        "application",
        "SOAP",
        "web",
        "administrations",
        "JAXRS",
        "JAXWS",
        "implementation",
        "AWS",
        "technologies",
        "Elastic",
        "Compute",
        "Simple",
        "Storage",
        "Services",
        "S3",
        "Cloud",
        "Formation",
        "Elastic",
        "Beanstalk",
        "Virtual",
        "Private",
        "CloudVPC",
        "RDS",
        "Cloud",
        "Watch",
        "Handson",
        "experience",
        "AWS",
        "cloud",
        "formation",
        "templates",
        "Auto",
        "scaling",
        "EC2",
        "instances",
        "provisioning",
        "AWS",
        "cloud",
        "environment",
        "Jenkins",
        "Aware",
        "troubleshooting",
        "issues",
        "AWS",
        "developer",
        "IDE",
        "Cloud",
        "Design",
        "test",
        "SOA",
        "services",
        "Web",
        "Service",
        "deployment",
        "REST",
        "WebService",
        "EndPoints",
        "REST",
        "Microservices",
        "spring",
        "data",
        "spring",
        "boot",
        "JPA",
        "Refactored",
        "Microservice",
        "thread",
        "Created",
        "Docker",
        "images",
        "SOA",
        "projects",
        "Microservices",
        "Microservice",
        "architecture",
        "Spring",
        "BootCloud",
        "services",
        "combination",
        "REST",
        "analysis",
        "design",
        "development",
        "testing",
        "stages",
        "application",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "SDLC",
        "Multithreading",
        "concepts",
        "application",
        "alerts",
        "creations",
        "design",
        "patterns",
        "frameworks",
        "firm",
        "quality",
        "development",
        "Application",
        "classes",
        "Core",
        "Java",
        "collections",
        "Exception",
        "Generics",
        "Design",
        "patterns",
        "client",
        "data",
        "Services",
        "Business",
        "Delegate",
        "Controller",
        "DAO",
        "MVC",
        "architecture",
        "Spring",
        "MVC",
        "Java",
        "Bean",
        "Classes",
        "Business",
        "Logic",
        "application",
        "HTML",
        "CSS",
        "JavaScript",
        "jQuery",
        "AJAX",
        "users",
        "user",
        "interfaces",
        "configuration",
        "Spring",
        "IOC",
        "container",
        "Dependency",
        "Injection",
        "Developed",
        "Business",
        "Layer",
        "DAO",
        "Classes",
        "Spring",
        "framework",
        "combination",
        "JMS",
        "PTP",
        "PubSub",
        "methods",
        "message",
        "broker",
        "Apache",
        "ActiveMQ",
        "Apache",
        "Camel",
        "Spring",
        "JDBC",
        "databases",
        "Spring",
        "ORM",
        "templates",
        "Apache",
        "MySQL",
        "scaling",
        "amount",
        "data",
        "Integrated",
        "Dependency",
        "Injection",
        "layers",
        "application",
        "Spring",
        "data",
        "database",
        "SQL",
        "queries",
        "PLSQL",
        "procedures",
        "triggers",
        "packages",
        "Oracle",
        "database",
        "application",
        "Eclipse",
        "IDE",
        "Drools",
        "core",
        "development",
        "business",
        "workspace",
        "plugins",
        "help",
        "IBM",
        "WebSphere",
        "Application",
        "Server",
        "Java",
        "developer",
        "Pfizer",
        "New",
        "York",
        "NY",
        "November",
        "September",
        "Responsibilities",
        "Enterprise",
        "Eligibility",
        "business",
        "objects",
        "domain",
        "objects",
        "Object",
        "Relational",
        "Mapping",
        "framework",
        "Hibernate",
        "Created",
        "applications",
        "connection",
        "pools",
        "deployment",
        "JSPs",
        "Servlets",
        "EJBs",
        "Apache",
        "Tomcat",
        "Presentation",
        "layer",
        "components",
        "JSP",
        "AJAX",
        "Struts",
        "Action",
        "AJAX",
        "tag",
        "backend",
        "procedures",
        "triggers",
        "Oracle",
        "PLSQL",
        "database",
        "creation",
        "performance",
        "procedures",
        "query",
        "Developed",
        "SQL",
        "JDBC",
        "API",
        "Hibernate",
        "ORM",
        "data",
        "quality",
        "solutions",
        "use",
        "tools",
        "technologies",
        "Apache",
        "CXF",
        "Spring",
        "IOC",
        "Spring",
        "AOP",
        "Executor",
        "Framework",
        "Multithreading",
        "Multiple",
        "Process",
        "Service",
        "Multithreading",
        "Concurrency",
        "concepts",
        "jobs",
        "error",
        "features",
        "SOA",
        "Suite",
        "Fault",
        "Management",
        "Framework",
        "branches",
        "transaction",
        "error",
        "SOA",
        "infrastructure",
        "Enterprise",
        "Manager",
        "EM",
        "console",
        "performance",
        "memory",
        "transaction",
        "timeout",
        "issues",
        "system",
        "components",
        "application",
        "JSPs",
        "Servlets",
        "EJBs",
        "WebSphere",
        "Studio",
        "Application",
        "Developer",
        "CVS",
        "version",
        "control",
        "Unix",
        "shell",
        "scripts",
        "user",
        "login",
        "information",
        "application",
        "ANT",
        "Prepared",
        "REST",
        "SOAP",
        "service",
        "data",
        "web",
        "service",
        "Create",
        "edit",
        "sites",
        "design",
        "themes",
        "frontend",
        "development",
        "frameworks",
        "Bootstrap",
        "Used",
        "Bootstrap",
        "frontend",
        "framework",
        "web",
        "development",
        "Design",
        "website",
        "website",
        "content",
        "date",
        "experience",
        "AJAX",
        "data",
        "REST",
        "API",
        "HTTP",
        "requests",
        "REST",
        "endpoints",
        "Cassandra",
        "Node",
        "Connector",
        "database",
        "persistence",
        "dra",
        "NOSQL",
        "DB",
        "Spring",
        "Data",
        "access",
        "Cassandra",
        "persistence",
        "stores",
        "spring",
        "Hibernate",
        "data",
        "access",
        "MySQL",
        "Database",
        "Unstructured",
        "data",
        "Cassandra",
        "DB",
        "Cassandra",
        "Connector",
        "connection",
        "Cucumber",
        "Selenium",
        "Behavioral",
        "Integration",
        "testing",
        "Dockerized",
        "Spring",
        "Boot",
        "application",
        "dev",
        "machine",
        "PCF",
        "Cloud",
        "Foundry",
        "Oath",
        "authentication",
        "framework",
        "authorization",
        "server",
        "access",
        "resource",
        "resource",
        "server",
        "Oath",
        "simplifies",
        "communications",
        "client",
        "server",
        "content",
        "provider",
        "Deployment",
        "application",
        "source",
        "code",
        "PCF",
        "Open",
        "Shift",
        "packages",
        "Dynamo",
        "DB",
        "SQS",
        "load",
        "data",
        "message",
        "application",
        "AWS",
        "EC2",
        "instances",
        "storage",
        "S3",
        "buckets",
        "GIT",
        "version",
        "code",
        "Git",
        "Hub",
        "MAVEN",
        "project",
        "dependency",
        "documentation",
        "POM",
        "project",
        "object",
        "model",
        "BABEL",
        "Webpack",
        "application",
        "Performed",
        "Unit",
        "test",
        "cases",
        "Junit",
        "Cucumber",
        "Spring",
        "Protractor",
        "Angular",
        "Mocha",
        "Chai",
        "React",
        "phases",
        "Software",
        "development",
        "life",
        "cycle",
        "SDLC",
        "Agile",
        "Methodology",
        "Developed",
        "User",
        "Interface",
        "JSP",
        "JSTL",
        "HTML",
        "CSS",
        "Java",
        "Script",
        "JQuery",
        "Angular",
        "JS",
        "client",
        "side",
        "application",
        "AngularJS",
        "Model",
        "View",
        "Controller",
        "MVC",
        "Architecture",
        "component",
        "development",
        "J2EE",
        "principles",
        "design",
        "patterns",
        "Singleton",
        "Factory",
        "Data",
        "Access",
        "Object",
        "DAO",
        "implementation",
        "application",
        "Spring",
        "MVC",
        "Dependency",
        "Injection",
        "presentation",
        "business",
        "logic",
        "coupling",
        "layers",
        "business",
        "layer",
        "services",
        "components",
        "Spring",
        "IOC",
        "cross",
        "concerns",
        "Logging",
        "User",
        "Interface",
        "exceptions",
        "Transactions",
        "Spring",
        "AOP",
        "persistence",
        "framework",
        "Hibernate",
        "Handled",
        "Transaction",
        "Management",
        "data",
        "source",
        "JSON",
        "data",
        "server",
        "side",
        "business",
        "requirement",
        "Hibernate",
        "mapping",
        "files",
        "business",
        "logic",
        "Object",
        "relationships",
        "Integrated",
        "Spring",
        "Hibernate",
        "components",
        "services",
        "Hibernate",
        "spring",
        "Established",
        "Database",
        "Connectivity",
        "JDBC",
        "Hibernate",
        "mapping",
        "Spring",
        "ORM",
        "Oracle",
        "Worked",
        "Hibernate",
        "objects",
        "database",
        "SQL",
        "data",
        "data",
        "database",
        "Java",
        "developer",
        "Accenture",
        "New",
        "York",
        "NY",
        "September",
        "January",
        "Responsibilities",
        "requirement",
        "gathering",
        "clients",
        "data",
        "Assisted",
        "components",
        "Development",
        "Production",
        "troubleshoot",
        "issues",
        "end",
        "Swing",
        "HTML",
        "JSP",
        "JSF",
        "Struts",
        "Framework",
        "business",
        "layer",
        "DAO",
        "layer",
        "ORM",
        "tool",
        "Hibernate",
        "Hibernate",
        "persistence",
        "tier",
        "Mapping",
        "files",
        "Hibernate",
        "POJOsDAOs",
        "J2EE",
        "Design",
        "patterns",
        "Singleton",
        "Factory",
        "DAO",
        "Business",
        "Delegate",
        "Model",
        "View",
        "Controller",
        "Architecture",
        "JSF",
        "Spring",
        "DI",
        "Wrote",
        "SQL",
        "PLSQL",
        "procedures",
        "part",
        "database",
        "interaction",
        "Hibernate",
        "Object",
        "Mapping",
        "data",
        "persistence",
        "Unit",
        "testing",
        "bug",
        "environments",
        "bugs",
        "fixing",
        "code",
        "review",
        "modules",
        "application",
        "Exception",
        "classes",
        "modules",
        "user",
        "messages",
        "queries",
        "JDBC",
        "JPA",
        "provider",
        "Hibernate",
        "Persistence",
        "layer",
        "web",
        "services",
        "information",
        "services",
        "SOAP",
        "WSDL",
        "Axis",
        "Webservices",
        "Java",
        "APIs",
        "Collections",
        "Generics",
        "exception",
        "Leveraged",
        "Ant",
        "JUnit",
        "Test",
        "Driven",
        "Development",
        "log4j",
        "projects",
        "Coordinate",
        "team",
        "client",
        "queries",
        "timelines",
        "data",
        "modeling",
        "database",
        "design",
        "Oracle",
        "Involve",
        "installation",
        "configuration",
        "Web",
        "Logic",
        "Application",
        "Server",
        "Windows",
        "XP",
        "systems",
        "application",
        "Spring",
        "Framework",
        "application",
        "persistence",
        "layer",
        "Hibernate",
        "Hibernate",
        "Spring",
        "Oracle",
        "Database",
        "DAO",
        "use",
        "Maven",
        "application",
        "Dev",
        "environment",
        "QA",
        "environment",
        "frontend",
        "developers",
        "data",
        "use",
        "Collection",
        "Framework",
        "Map",
        "Object",
        "List",
        "data",
        "Web",
        "Service",
        "data",
        "Business",
        "Logic",
        "data",
        "Oracle",
        "database",
        "Spring",
        "MVC",
        "Model",
        "View",
        "Controller",
        "user",
        "requests",
        "controllers",
        "request",
        "flow",
        "tier",
        "application",
        "XML",
        "files",
        "Spring",
        "Security",
        "injection",
        "security",
        "role",
        "users",
        "access",
        "authority",
        "URIs",
        "Serverside",
        "assets",
        "tables",
        "user",
        "data",
        "table",
        "Consume",
        "Web",
        "Services",
        "Java",
        "information",
        "database",
        "Wrote",
        "PLSQL",
        "Stored",
        "Procedure",
        "TOAD",
        "data",
        "basis",
        "report",
        "job",
        "DBMS",
        "Scheduler",
        "JERSEY",
        "framework",
        "JAXRS",
        "Java",
        "API",
        "XML",
        "RESTful",
        "Service",
        "methodology",
        "application",
        "development",
        "Sprints",
        "meetings",
        "Externalized",
        "Business",
        "Logic",
        "code",
        "database",
        "rules",
        "UI",
        "business",
        "rules",
        "code",
        "business",
        "logic",
        "data",
        "number",
        "scripting",
        "tasks",
        "libraries",
        "logging",
        "handling",
        "C",
        "IDE",
        "studio",
        "Configured",
        "JBoss",
        "Server",
        "deployment",
        "JIRA",
        "bugs",
        "JENKINS",
        "integration",
        "phases",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "SDLC",
        "Search",
        "module",
        "Credit",
        "Authenticate",
        "Module",
        "Purchase",
        "Module",
        "Generated",
        "Use",
        "case",
        "diagrams",
        "Activity",
        "flow",
        "diagrams",
        "Class",
        "diagrams",
        "Object",
        "diagrams",
        "design",
        "phase",
        "Rational",
        "Rose",
        "applications",
        "methodology",
        "UI",
        "screens",
        "JSP",
        "Struts",
        "HTML",
        "JavaScript",
        "validation",
        "Struts",
        "Framework",
        "application",
        "MVC2",
        "design",
        "pattern",
        "Hibernate",
        "Persistence",
        "Strategy",
        "database",
        "Session",
        "Fa",
        "ade",
        "Service",
        "Locator",
        "Data",
        "Access",
        "Objects",
        "Singleton",
        "Data",
        "Transfer",
        "Object",
        "design",
        "patterns",
        "Message",
        "beans",
        "messages",
        "Java",
        "message",
        "queue",
        "integration",
        "Jenkins",
        "builds",
        "emails",
        "team",
        "Jenkins",
        "plugins",
        "code",
        "coverage",
        "test",
        "war",
        "file",
        "Spring",
        "Framework",
        "Dependency",
        "injection",
        "Struts",
        "Framework",
        "Hibernate",
        "Hibernate",
        "mapping",
        "files",
        "Eclipse",
        "IDE",
        "JPA",
        "mapping",
        "Database",
        "tables",
        "data",
        "database",
        "Developed",
        "DAO",
        "queries",
        "JPAhibernate",
        "Transfer",
        "Custom",
        "Tags",
        "JSP",
        "code",
        "database",
        "RESTful",
        "web",
        "service",
        "user",
        "profile",
        "data",
        "teams",
        "OLTP",
        "transactions",
        "Oracle",
        "Cassandra",
        "order",
        "Oracle",
        "licensing",
        "footprint",
        "JDBC",
        "Oracle",
        "database",
        "customer",
        "information",
        "involvement",
        "database",
        "design",
        "development",
        "coding",
        "Procedures",
        "DDL",
        "DML",
        "functions",
        "Spring",
        "MVC",
        "framework",
        "Dependency",
        "injection",
        "Spring",
        "Core",
        "JAXWS",
        "SOAP",
        "Web",
        "Services",
        "Framework",
        "unit",
        "test",
        "strategy",
        "test",
        "environments",
        "test",
        "cases",
        "error",
        "logs",
        "Log4j",
        "CSR",
        "Framework",
        "Fusion",
        "Logger",
        "Ant",
        "scripts",
        "build",
        "application",
        "development",
        "environment",
        "Eclipse",
        "IDE",
        "code",
        "modules",
        "development",
        "environment",
        "Insight",
        "backend",
        "TRAQS",
        "application",
        "part",
        "enhancement",
        "project",
        "Dollar",
        "Universe",
        "Developed",
        "EDI",
        "Web",
        "Tool",
        "EDIMx",
        "use",
        "Ice",
        "Faces",
        "ANT",
        "beans",
        "business",
        "logic",
        "navigation",
        "rules",
        "navigation",
        "pages",
        "Graphical",
        "User",
        "Interfaces",
        "JSF",
        "HTML",
        "JSPs",
        "user",
        "interaction",
        "Used",
        "Subversion",
        "Version",
        "Control",
        "Tool",
        "version",
        "control",
        "development",
        "project",
        "code",
        "HTML",
        "pages",
        "JavaScript",
        "validations",
        "AJAX",
        "frontend",
        "GUI",
        "Web",
        "Logic",
        "Application",
        "Server",
        "deployment",
        "product",
        "platforms",
        "Java",
        "Used",
        "Subversion",
        "Version",
        "Control",
        "Tool",
        "version",
        "control",
        "development",
        "project",
        "code",
        "expertise",
        "team",
        "application",
        "design",
        "database",
        "design",
        "performance",
        "activities"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T21:13:11.779852",
    "resume_data": "Java developer span lJavaspan span ldeveloperspan Java developer Ebay Work Experience Java developer Ebay Seattle WA November 2018 to Present Responsibilities Worked in stages such as analysis and design development testing and debugging and Involved in Unit testing and Integration testing Designed and managed build and release methodologies using Witbe Tool Designed and managed API system deployment using fast http server and Amazon AWS architecture Design and develop CPD Test scripts for Droplet Generator steering system with C C Python Linux Internal and driver interfaces Developed Custom Item Rendered to include components assets in Flex Advanced Data grid Connected Flex from Spring Controller using different API services Led POC for implementing the loss forecasting model in Spark and then final production release Worked on design document write Pyunit test case for pyspark Utilize ActionScript 30 to develop and maintain the Flash and livestreaming components of the companys websites Developed Simple Object Access Protocol SOAP based web services for different applications called User Service and other applications using Representational State Transfer REST based Web services Developed the front end of the web pages using HTML5 CSS3 JavaScript Angular JS JQuery and AJAX Decent experience in UNIX in developing the application and familiar with all of its commands All Web Application Developing was standardized in MVC Model View Control design patterns eg Adobe Flex Pure MVC ASPNetMVC MVVC Experienced with Bootstrap as a mechanism to manage and organize the HTML page layout Scalable databasedriven web application development using a variety of frameworks ASPNET on C Flask on Python and PHP Rewrite existing Java C application in Python Actively involved in developing the methods for Create Read Update and Delete CRUD in Active Record Experience in writing SQL queries for performing various CRUD operations like create update read and delete Deployed Django web application in Apache webserver and Carpathias cloud operations Written numerous Django views class based and templates for page rendering Extensive experience in creating custom Flex components as well as extending stock components for the Team Everest application and the Solsys application Implemented the Backbone JS for DOM manipulation as this is the light web framework compared to Angular JS Utilized Python Libraries like Boto3 NumPy for AWS Used Pandas library for statistical Analysis Developed efficient Angularjs for client web based application Implemented SOA based web services designed and built SOAP web service interface Created SOAP web services and SOAP handlers to store the SOAP messages Performed pytest and unit test on them Extracted XML code from script for testing Build JSON objects using the framework which will be used by JavaScript to control the flow of the page Resolved performance related issues using efficient coding Created a signing panel for signers and notaries It had a videoconferencing module coded in AdobeFlex a signature pad a jQuery Ajax interface for adding modifying deleting signatures notes seals verifying user identities and documents navigating between document pages Worked on numerous Python modules Built dbcontext runcontext and other python objects thats reused by application Optimized the code using smart pointers profilers and C Standard template library As Full Stack developer created a custom CMS built using Django AWS Amazon web service REST Json with JavaScript JQuery AJAX components worked closely with designer Converted Photoshop images into XHTMLCSS Created many reports using xlrtxlwt python packages and reportlab2733 Used JSON and Simple SON modules of python to call webservices Deployed Django web application in Apache webserver and Carpathias cloud operations Written numerous Django views class based and templates for page rendering Build JSON objects using the framework which will be used by JavaScript to control the flow of the page Resolved performance related issues using efficient coding Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Implemented AWS highavailability using AWS Elastic Load Balancing ELB which performed balance across instances Managed code versioning with GitHub Bit Bucket and deployment to staging and production servers Used Celery as task queue and RabbitMQ as messaging broker to execute asynchronous tasks Implemented task object to interface with data feed framework and invoke database message service setup and update functionality Views and Templates were developed with Python and to create a userfriendly website interface Djangos view controller and template language is used Developed UI using CSS HTML JavaScript AngularJS JQuery and JSON Developed dynamic webpages through HTML5 CSS JavaScript and AJAX Involved in Developing a Restful APIS service using Python Flask framework Worked on a resulting report of the application and Tableau reports Deployed production site using Apache Servers with mod Python and AWS Knowledge of the Software Development Life Cycle SDLC Agile and Waterfall Methodologies Expertise on using python libraries like os pickle and SQLite Built vagrantdocker boxes to work on dev and test environment Extensive experience in web application development using Python Django and web technologies HTML HTML5 DHTML CSS CSS3 XML and JavaScript to create scalable and robust common components which can be used across the whole framework Designed and developed Database management using MYSQL and wrote and executed various MySQL database queries from PythonMySQL connector and MySQL dB package Views and Templates were developed with Python and Bash scripting and to create a userfriendly website interface Djangos view controller and template language is used Involved in all the phases of Software Development Life Cycle including Requirement Analysis Design Implementation Testing and Maintenance Involved in Daily Scrum Agile meetings Sprint planning and estimation of the tasks for the user stories participated in retrospective and presenting Demo at end of the sprint Used Angular 20 for data binding and Node JS for backend support with APIs Experience in Clientside web development utilizing HTML 5 CSS3 Bootstrap Angular JS 20 Typescript to develop Single Page Application SPA and for the interactive user interface Used AngularCLI to generate components routes services pipes and to run testsImplemented Angular 2 Router to enable navigation from one view to the next as agent performs application tasks Created Angular 2 components implemented Interpolation input variables Bootstrapping Router Outlet binding the click event Component decorator binding to the hidden property Used Angular 2 MVC architecture and twoway data binding techniques in the development of the application Built stable React components and standalone functions to be added to any future pages Application classes are developed by Core Java 8 concepts like Lambdas Streams parallel Streams Functional Interfaces Developed Business objects using POJOs and data access layer using Hibernate framework Extensively Implemented Spring Boot dependency Injection DI and AOP Used Spring Core Annotations for Spring DI and Spring MVC for REST APIs and Spring Boot for Microservices Developed REST architecturebased web services using Node JS stored dependencies using NPM and facilitated communication between client server Involved in the implementation of the RESTful web services using the Spring Boot and to perform CRUD operation from the database published the REST services parsed the data to project to client and handled the security and Authorization using Spring Security Spring security OAuth can be used for authentication and authorization purposes in application Designed and developed Spring Boot adapter applications using Rest API Designed and created Microservices business segments and RESTful administration endpoints utilizing Spring Boot Developed Spring Boot applications using spring data Used Spring Boot which is radically faster in building cloud Microservices To generate reports for the batch services used the Spring Batch created test cases of Junit for testing the DAO layer Performed configuration deployment and support of cloud services including Amazon Web Services AWS Launch various AWS EC2 instance to deploy the application Practical implementation of AWS S3 RDC EBS Used AWS SDK to connect with Amazon SQS for bulk email processing Used Amazon Cloud Watch to monitor AWS services and Amazon Cloud Watch logs to monitor Hosted and tested the application in AWS servers before publishing it in an actual production environment Focused on Test Driven Development thereby creating detailed Junit tests for every single piece of functionality before the functionality Used Apache Kafka in cluster as messaging system between the APIs and Microservices Used Springdata module to communicate with Mongo DB JIRA was used for project tracking and bug fixing and Jenkins for continuous Integration Involved in server configurations Data Sources Connection Pooling and deploying the apps on WebSphere Creating detailed Junit test for producing the clear and actual functionality of the application Java Developer GameStop Irving TX January 2018 to October 2018 Responsibilities Used JSP and JSTL Tag Libraries for developing User Interface components Developed test cases and performed unit and integration testing Performed using testing using Used JUnit Designed and developed presentation layer using JSP Custom Tags and HTML Understanding the client requirements and add designing document Implemented the Servlets to transfer the request to an appropriate server where the request can be processed and the results are then transferred to client JavaScript is used for the clientside validations and to provide the event driven programming with HTML Developed the user interface using JSP and JavaScript to view all online trading transactions Developed both Session and Entity beans representing different types of business logic abstractions Involved in Daily Scrum Agile meetings Sprint planning and estimation of the tasks for the user stories participated in retrospective and presenting Demo at end of the sprint Designed the complete website using HTML5 CSS3 jQuery AJAX JSON Bootstrap JavaScript Developed single page applications SPAs using Angular JS to improve page performance Used Angular JS to create reusable components like custom directives filters for data manipulations and to display data in company standard format in UI Experience in writing swagger documentation for Node JS services Used Angular JS to create reusable components like custom directives filters for data manipulations and to display data in company standard format in UI Added dynamic functionality to the application by implementing Node JS Wrote internal and external API services using Node JS modules Developed internal coding using J2EE technologies based on the MVC Architecture Used Java 8 features in developing the code like Lambda expressions Functional Programming Stream API etc Implemented Business Logic using Java Spring MVC and Hibernate Implemented RESTful Web services to retrieve data from client side and made REST API calls from Angular JS and parsed the data to project to client and handled the security and Authorization using Spring Security and OAuth Developed Business objects using POJOs and data access layer using Hibernate framework Designed and developed business components using Spring Boot Spring Dependency Injection Core Spring AOP Spring Annotations Used Spring Data Framework to use the features of Spring JDBC and Spring ORM classes like JDBC Template and Hibernate Template to perform the database operations by connecting to Data sources available Removed all the XML based configurations required to build the MVC application and maintained in the classes using Spring Boot Developed REST architecturebased web services to facilitate communication between client server Involved in the implementation of the RESTful web services using the Spring Boot and to perform CRUD operation from the database published the REST services parsed the data to project to client and handled the security and Authorization using Spring Security Spring security OAuth can be used for authentication and authorization purposes in application Implemented RESTful and SOAP based web administrations utilizing for JAXRS and JAXWS individually Strategic and practical implementation of cloudspecific AWS technologies including Elastic Compute CloudEC2 Simple Storage Services S3 Cloud Formation Elastic Beanstalk Virtual Private CloudVPC RDS and Cloud Watch Handson experience in developing AWS cloud formation templates and setting up Auto scaling for EC2 instances and involved in the automated provisioning of AWS cloud environment using Jenkins Aware of troubleshooting issues on AWS and other developer IDE and Cloud environments Design develop test of SOA services using SOARESTful Web Service Involved in the deployment of REST based WebService EndPoints Developed the REST based Microservices using spring data and spring boot with JPA Refactored Microservice to make it RESTful thread safe and more configurable Created Docker images for SOA projects that are developed as Microservices Used Microservice architecture with Spring BootCloud foundrybased services interacting through a combination of REST Involved in the analysis design coding development and testing stages of the application using Software Development Life Cycle SDLC Used Multithreading concepts in the application thereby supporting concurrent alerts creations and adhered to new design patterns and frameworks used within the firm for fast and quality development Application classes are developed by Core Java collections Exception handling Generics Design patterns are used and they are for client data like created Services Business Delegate Controller and DAO Implemented MVC architecture using Spring MVC and used Java Bean Classes for the Business Logic in the application Extensively used HTML CSS JavaScript AngularJS jQuery and AJAX to provide users with interactive speedy functional and more usable user interfaces Created and maintained the configuration of the Spring IOC container with Dependency Injection Developed Business Layer DAO Classes and combined with Spring framework combination of JMS with PTP and PubSub methods with message broker Apache ActiveMQ and Apache Camel Used Spring JDBC for accessing the relational databases and Spring ORM is used for templates used Apache MySQL which is used for horizontal scaling and maintaining huge amount of data Integrated Dependency Injection among various layers of an application using Spring Involved in creating and extracting data from database using SQL queries PLSQL Stored procedures triggers and packages on Oracle database Developed the application by using Eclipse IDE and added Drools for core development in business because of its workspace and plugins with the help of IBM WebSphere Application Server Java developer Pfizer New York NY November 2017 to September 2018 Responsibilities Designed and developed Enterprise Eligibility business objects and domain objects with Object Relational Mapping framework such as Hibernate Created applications connection pools deployment of JSPs Servlets and EJBs in Apache Tomcat Developed Presentation layer components comprising of JSP AJAX Struts Action and AJAX tag libraries Developed backend stored procedures and triggers using Oracle PLSQL involved in database objects creation performance tuning of stored procedures and query plan Developed SQL queries with JDBC API Hibernate ORM to access data Develop innovative and quality solutions by making use of latest tools and technologies like Apache CXF Spring IOC and Spring AOP Implemented Executor Framework in Multithreading Designed and implemented Multiple Process Service using Multithreading and Concurrency concepts to schedule and execute jobs Used the various error handling features of SOA Suite like Fault Management Framework catchcatch all branches compensating transaction etc to achieve robust error handling Worked extensively on the SOA infrastructure and Enterprise Manager EM console to fix some critical performance memory and transaction timeout issues in the system Developed the different components of application such as JSPs Servlets EJBs using WebSphere Studio Application Developer and used CVS for version control Written Unix shell scripts to identify user login information Developed and build the application using ANT Prepared the REST and SOAP based service calls depending on the data passing to the web service Create edit and maintain sites implementing responsive design themes using frontend development frameworks including Bootstrap Used Bootstrap frontend framework for faster and easier web development Design website and maintain the website content up to date Strong experience with AJAX to pull the data from the REST API and issued HTTP requests to interact with REST endpoints Worked with Cassandra Node Connector for database persistence to interact with dra NOSQL DB with Spring Data to unify and ease the access to Cassandra persistence stores Integrated spring with Hibernate for data access from MySQL Database Unstructured data was handled using Cassandra DB and used Cassandra Connector for connection Used Cucumber and Selenium for Behavioral and Integration testing respectively Deployed the Dockerized Spring Boot application that is intended to be run on dev local machine using PCF Pivotal Cloud Foundry Used Oath 2 which is a lightweight authentication framework with a central authorization server and generates an access token to access a protected resource on a resource server Oath 2 simplifies all the communications between the client server and content provider Deployment of application source code using PCF Open Shift also deployed binary packages Dynamo DB SQS for Elastic load balancing storing data and message queueing Installed the application on AWS EC2 instances and configured the storage on S3 buckets Extensively used GIT for version controlling and regularly pushed the code to Git Hub Used MAVEN for building the project dependency and documentation which is based on POM project object model BABEL and Webpack is used to build and deploy the application Performed Unit test cases using Junit Cucumber for Spring Protractor for Angular Mocha and Chai for React Involved in all phases of the Software development life cycle SDLC using Agile Methodology Developed User Interface using JSP JSTL HTML CSS Java Script JQuery and Angular JS Developed client side application with AngularJS in a clean Model View Controller MVC Architecture Involved in component development using J2EE principles and used design patterns such as Singleton Factory and Data Access Object DAO in the implementation of the application Used Spring MVC and Dependency Injection for handling presentation and business logic To maintain loose coupling between layers published the business layer as services and injected necessary dependent components using Spring IOC and published cross cutting concerns like Logging User Interface exceptions Transactions using Spring AOP Implemented persistence framework using Hibernate Handled Transaction Management using the provided data source Extensively used JSON to parse the data from server side to satisfy the business requirement Responsible for designing Hibernate mapping files based on business logic and Object relationships Integrated Spring and Hibernate together and worked on developing backend components and services using Hibernate and spring Established Database Connectivity using JDBC Hibernate OR mapping with Spring ORM for Oracle Worked on Hibernate for mapping the java objects to relational database and SQL queries to fetch the data insert and update the data from the database Java developer Accenture New York NY September 2012 to January 2014 Responsibilities Participated in requirement gathering with clients and prepared the data dictionary Assisted in moving the components from Development to TEST to Production troubleshoot and resolved issues Involved in coding front end using Swing HTML JSP JSF Struts Framework and involved in integrating the business layer with DAO layer using ORM tool Hibernate Worked on Hibernate persistence tier This involves developing Mapping files and Hibernate POJOsDAOs Involved in working with J2EE Design patterns Singleton Factory DAO and Business Delegate and Model View Controller Architecture with JSF and Spring DI Wrote SQL PLSQL and stored procedures as part of database interaction Extensively used Hibernate for Object relational Mapping for data persistence Unit testing bug fixing in multiple environments DEVINTCERTPROD and reproduce bugs for fixing and code review of individual modules in the application Developed customized Exception classes for all modules to display user friendly messages Responsible for complex queries using JDBC and also implemented JPA using provider as Hibernate at the Persistence layer Used web services to retrieve information from remote services using SOAP WSDL and Axis Webservices Worked on Java APIs like Collections Generics exception handling etc Leveraged Ant JUnit Test Driven Development and log4j opensource projects Coordinate with the offshore team and client for resolving the queries and finalize the timelines Responsible for data modeling and database design in Oracle Involve in installation and configuration of Web Logic Application Server on Windows XP systems for the application Used Spring Framework for developing the application Implemented the persistence layer using Hibernate and configured Hibernate with Spring to interact with the Oracle Database from the DAO Extensive use of Maven to build and deploy the application into Dev environment and QA environment and work with the frontend developers in displaying the data Extensive use of Collection Framework features like Map Object List to retrieve the data from Web Service manipulate the data to incorporate Business Logic and save the data to Oracle database Used Spring MVC Model View Controller to handleintercept the user requests and used various controllers to delegate the request flow to the Backend tier of the application Configured the XML files for Spring Security injection to ensure the backend security by discriminating the role of users as well as access authority for the URIs and Serverside assets Used Multithreading to simultaneously process tables as and when a specific user data is completed in one table Consume Web Services using Java to retrieve the required information to be populated in the database Wrote PLSQL Stored Procedure using TOAD for archiving data on a daily basis for a monthly report and scheduled the job using DBMS Scheduler Used JERSEY framework to implement the JAXRS Java API for XML and RESTful Service and used Agile methodology that included iterative application development weekly Sprints and daily stand up meetings Externalized Business Logic from code using database to store dynamic rules based on UI used by business and used these rules in the code to apply business logic to data Created number of scripting tasks to get different libraries which we have created for the logging and exceptional handling using C in the IDE visual studio 2012 Configured and set up JBoss Server for deployment and used JIRA for tracking bugs and JENKINS for continuous integration Involved in various phases of Software Development Life Cycle SDLC of Search module Credit Authenticate Module and Purchase Module Generated Use case diagrams Activity flow diagrams Class diagrams and Object diagrams in the design phase using Rational Rose Developed applications using AGILE methodology Designed UI screens using JSP Struts tags HTML Used JavaScript for clientside validation Used Struts Framework in the application which is based on MVC2 design pattern Used Hibernate Persistence Strategy to interact with database Actively involved in designing and implementing Session Fa ade Service Locator Data Access Objects and Singleton and Data Transfer Object design patterns Designed and developed Message driven beans that consumed the messages from the Java message queue Continuous integration using Jenkins for nightly builds and send automatic emails to the team Used Jenkins plugins for code coverage and also to run all the test before generating war file Used Spring Framework for Dependency injection and integrated with the Struts Framework and Hibernate Developed the Hibernate mapping files using Eclipse IDE Developed JPA mapping to the Database tables to access the data from the database Developed DAO to handle queries using JPAhibernate and Transfer objects Developed Custom Tags to simplify the JSP code Designed and implemented database and associated RESTful web service that persists highvolume user profile data for vertical teams Migrated highvolume OLTP transactions from Oracle to Cassandra in order to reduce Oracle licensing footprint Used JDBC to access Oracle database for accessing customer information Extensive involvement in database design development and coding of stored Procedures DDL DML statements functions and triggers Used Spring MVC framework for Dependency injection and Spring Core Implemented JAXWS SOAP Web Services using SpringWS Framework Created unit test strategy preparing test environments and test cases Monitored the error logs using Log4j and CSR Framework Fusion Logger Used Ant scripts to fetch build and deploy the application to development environment Used Eclipse 35 IDE for developing code modules in the development environment Worked on Insight backend for TRAQS application as a part of enhancement to the existing project and automated it using Dollar Universe scripts Developed EDI Web Tool EDIMx for internal use using Ice Faces and ANT Created managed beans for business logic and navigation rules for navigation between the pages Developed Graphical User Interfaces using JSF along with HTML and JSPs for user interaction Used Subversion Version Control Tool for version control in the development of the project and integrating the code Created dynamic HTML pages used JavaScript for clientside validations and AJAX to create interactive frontend GUI Used Web Logic Application Server for deployment of the product over various platforms Java based Used Subversion Version Control Tool for version control in the development of the project and integrating the code Provided technical expertise to project team covering application design database design and performance tuning activities",
    "unique_id": "c2954677-b1b0-462e-8a9c-cb86f2514a1d"
}