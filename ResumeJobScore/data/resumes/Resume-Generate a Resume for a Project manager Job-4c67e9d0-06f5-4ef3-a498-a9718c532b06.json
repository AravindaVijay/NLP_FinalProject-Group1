{
    "clean_data": "Sr Python Developer Sr span lPythonspan span lDeveloperspan Sr Python Developer JPMC New York NY 6Years of experience in Analysis Design Development Testing Customization Bug fixes Enhancement Support and Implementation of various web standalone clientserver enterprise applications using Python Django in various domains Experience working in Java JavaScript and Python software development environments Experience with Design code and debug operations reporting data analysis and web applications utilizing Python Wrote AJAX framework to transform Datasets and Data tables into HTTPserializable JSON strings Experience with creating scripts for data modeling and data import and export Extensive experience in deploying managing and developing MongoDB clusters Built the web application by using Python Django AWS J2EE PostgreSQL MySQL Oracle 10g and MongoDB Experienced in WAMP Windows Apache MYSQL and Python and LAMP Linux Apache MySQL and Python Architecture Experience in writing Sub Queries Stored Procedures Triggers Cursors and Functions on MySQL and PostgreSQL database Experience in performing signal processing and machine learning algorithm development for a variety of programs Experienced in Agile Methodologies Scrum stories and sprints experience in a Python based environment along with data analytics data wrangling and Excel data extract Experience in developing webbased applications using Python 2726 Django 1413 PHP Flask Webapp2 Angularjs VB C XML CSS HTML DHTML JavaScript and JQuery Proficient in Front end development experience using HTML XML CSS JQuery JSON JavaScript CSS and Bootstrap Good experience of software development in Python libraries used Beautiful Soup numpy scipy matplotlib pythontwitter Pandas data frame network urllib2 MySQL dB for database connectivity and IDEs sublime text Spyder pycharm Emacs Very strong experience writing APIs and Web Services in PHP and in Python Utilized Python Pandas framework to provide data analysis and Applied HTML HTML5 XML DHTML CSS CSS3 JavaScript jQuery JSON and AJAX to deliver cuttingedge user interfaces and components Very strong experience in writing APIs and Web Services in Python Good in process validate parse and extract data from xml file Extensive use of Linux UbuntuSSH FlaskDjango Developed ColdFusion Components custom tags and modified CF Objects and Worked on AJAX framework to transform Datasets and Data tables into HTTPserializable JSON strings Experience in using UNIX shell Scripts for automating batch programs Experienced in working on Application Servers like WebSphere WebLogic Tomcat Web Servers like Apache server NGINX and Integrated Development Environments like Pycharm Eclipse MyEclipse JDeveloper and RAD Built the web application by using Python Django AWS J2EE PostgreSQL MySQL Oracle 10g and MongoDB Experienced in WAMP Windows Apache MYSQL and Python and LAMP Linux Apache MySQL and Python Architecture Developed consumer based features and applications using Python Django HTML Behavior Driven Development BDD and pair based programming Strong Experience in Big data technologies including Apache Spark Hadoop HDFS Hive Cassandra MongoDB Experienced with batch processing of data sources using Apache Spark Good working experience in processing large datasets with Spark using Scala and Pyspark Good experience in developing web applications implementing MVTMVC architecture using Django Flask Webapp2 and spring web application frameworks Work Experience Sr Python Developer JPMC New York NY December 2015 to Present Description Dovetail Payment Processing System DPS is a 3rd party vendor from whom JPMC has purchased the Dovetail Application DT in order to provide a single platform for all types of payments Urgent nonurgent single and Bulk High Value and Low Value This application is called iPAY International Payment system that processes payments for all their international customers iPAY mechanism enables their customers to initiate receive Payments and acknowledgments across the globe tofrom any other person in any country that has this service provided by JPMC This Application uses various interfaces in order to process the payments from the Initiator who initiated the Transaction to the Receiver who receives the Transaction Responsibilities Gathered all requirements for developing and analyzing requirement of projects Developed entire frontend and backend modules using Python on Django including Tastypie Web Framework using Git Used Numpy for Numerical analysis Followed AGILE development methodology to develop the application Used and customized apache server to for checking our developed project Used Test driven approach TDD for developing services required for the application Implemented Integration test cases Worked on MongoDB database concepts such as locking transactions indexes Sharding replication schema design Developed Merge jobs in Python to extract and load data into MySQL database Successfully migrated the Django database from SQLite to MySQL to PostgreSQL with complete data integrity Developed Ruby on Rails 3 web applications using MongoDB and background processes using Resque and Redis Used Test driven approach for developing the application and Implemented the unit tests using Python Unit test framework Developed Ruby Python scripts to monitor health of Mongo databases and perform adhoc backups using Mongo dump and Mongo restore Used Pandas API to put the data as time series and tabular format for east timestamp data manipulation and retrieval Worked very closely with designer tightly integrating Flash into the CMS with the use of Flashvars stored in the Django models Also created XML with Django to be used by the Flash Used HTML CSS JQuery JSON and Javascript for front end applications Developed tools using Python Shell scripting XML to automate some of the menial tasks Interfacing with supervisors artists systems administrators and production to ensure production deadlines are met Used SOAP and RESTful API for information extraction from various Banking applications Familiar with JSON based REST Web services and Amazon Web services AWS Dynamic implementation of SQL server work on website using SQL developer tool Designed front end using UI HTML Bootstrap Node JS underscore JS Angular JS CSS and JavaScript Involved in the Complete Software development life cycle SDLC to develop the application Used Git to resolve and coding the work on python and portlet Used several python libraries like wx Python numPY and matPlotLib Was involved in environment code installation as well as the SVN implementation Build all database mapping classes using Django models and Apache Cassandra Deployment and Build of various environments including Linux and UNIX Installed and maintained web servers Tomcat and Apache HTTP Web servers in UNIX Wrote SQL scripts in Abinitio for Data analysis and used TivoliAutosys for automation of data extractionreporting Collaborate with Quality Analysis team to build and populated stage DB Involved in UAT coordination with business Users Involved in analyzing existing reports and converting into O2MS report server scripts Designed and developed the UI of the website using HTML XHTML AJAX CSS and JavaScript Also used Bootstrap as a mechanism to manage and organize the html page layout Used Django configuration to manage URLs and application parameters Wrote and executed various MYSQL database queries from Python using PythonMySQL connector and MySQLdb package Environment Python 33 PyQT PyQuery MVW HTML5 CSS3 DOM Angularjs Shell Scripting JSON Rest Apache Web Server Django SQL UNIX Windows MongoDB PostgreSQL and python libraries such as Numpy IPython sqlalchemy Django Tastypie Sr Python Developer Citi bank New York NY January 2013 to November 2014 Description Citi bank is a global banking and financial services company offering financial products and services for corporate and institutional clients along with private and business clients Services include sales trading research and origination of debt and equity mergers and acquisitions MA risk management products such as derivatives corporate finance wealth management retail banking fund management and transaction banking Responsibilities Worked with team of developers on Python applications for RISK management Used Ajax and JQuery for transmitting JSON data objects between frontend and controllers Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML CSS JavaScript and JQuery Implemented AJAX for dynamic functionality of a webpages for front end applications Worked on front end frame works like CSS Bootstrap for responsive webpages Developed and tested many features for dashboard created using Bootstrap CSS and JavaScript Performed testing using Djangos Test Module Web pages on the internet are generated by servers running LINUX Worked on middle tier and persistence layer Created service and model layer classes and Value objectsPOJO to hold values between java classes and database fields Used python libraries like Beautiful Soup and matplotlib Utilized standard Python modules such as csv robotparser itertools and pickle for development Worked on Python OpenStack APIs and used Numpy for Numerical analysis Wrote Python routines to log into the websites and fetch data for selected options Worked PHP as a server side scripting language for web pages Successfully migrated all the data to the database while the site was in production Implemented the validation error handling and caching framework with Oracle Coherence cache Worked on scripts for setting up the discovery client with attribute data Worked on scriptsgranite reference data scripts for setting up adapter attributes in granite system Managed datasets using Panda data frames and MySQL queried MYSQL database queries from python using PythonMySQL connector and MySQLdb package to retrieve information ExportedImported data between different data sources using SQL Server Management Studio Maintained program libraries users manuals and technical documentation Responsible for debugging and troubleshooting the web application Developed Wrapper in Python for instantiating multithreaded application Developed views and templates with Python and Djangos view controller and templating language to create a userfriendly website interface Designed the database schema for the content management system Designed and developed the UI of the website using HTML XHTML AJAX CSS and JavaScript Involved in development of Web Services using SOAP for sending and getting data from the external interface in the XML format Used PHP to write dynamically generated pages quickly Experienced Python on LINUX for execution Environment Python 27 Django 14 HTML5 CSS XML MySQL JavaScript Backbone JS JQuery Mongo DB MS SQL Server JavaScript Git GitHub AWS Linux Shell Scripting AJAX JAVA PHP Python Developer San Jose CA June 2011 to December 2012 Description Vocera enables mobile communications services for hospitals that improve patient safety and satisfaction and increase hospital efficiency and productivity Vocera provides secure integrated and intelligent communication to instantly connect people in mobile missioncritical environments Voceras secure voice and text applications keep hospital communication safe improve efficiency and comply with HIPAA regulations Responsibilities Worked on development of internal testing tool framework written in Python Developed GUI using Python and Django for dynamically displaying the test block documentation and other features of python code using a web browser Created database using MySQL wrote several queries to extract data from database Setup automated cron jobs to upload data into database generate graphs bar charts upload these charts to wiki and backup the database Developed Merge jobs in Python to extract and load data into MySQL database Successfully migrated the Django database from SQLite to MySQL to PostgreSQL with complete data integrity Dynamic implementation of SQL server work on website using SQL developer tool Wrote scripts in Python for extracting data from HTML file Effectively communicated with the external vendors to resolve queries Developed views and templates with Python and Djangos view controller and templating language to create a userfriendly website interface Used JavaScript and JSON to update a portion of a webpage Develop consumer based features and applications using Python Django HTML Behavior Driven Development BDD and pair based programming Wrote Python scripts to parse JSON documents and load the data in database Used Python and Django to interface with the jQuery UI and manage the storage and deletion of content Developed entire frontend and backend modules using Python on Django including Tastypie Web Framework using Git Designed front end using UI HTML Bootstrap Node JS underscore JS Angular JS CSS and JavaScript Followed AGILE development methodology to develop the application Used and customized apache server to for checking our developed project Used Test driven approach TDD for developing services required for the application Implemented Integration test cases Rewrite existing PythonDjango modules to deliver certain format of data Responsible for debugging the project monitored on JIRA Agile Used Git to resolve and coding the work on python and portlet Environment Python 30 Django 16 HTML5 CSS XML MySQL MySQL JavaScript Angular JS Backbone JS JQuery CSS Bootstrap MS SQL Server TSQL JavaScript Eclipse Git GitHub Linux Shell Scripting Python Developer Bosch Designs Novi MI June 2009 to May 2011 Description Bosch designs and produces precision automotive components and systems sold to vehicle and powertrain manufacturers worldwide These include systems and components for gasoline and diesel injection airbag components ABS and conventional braking systems telematics as well as small motors electrical and electronic equipment Worked on development of Warranty and defects tracking system Responsibilities Wrote Python routines to log into the websites and fetch data for selected options Worked on HTML5 CSS3 JavaScript AngularJS NodeJS Git REST API Mongo DB intelliJ IDEA Design and Setting up of environment of Mongodb with shards and replicasets DevTest and Production Private VPN using Ubuntu Python Django CherryPy Postgres Redis Bootstrap Jquery Mongo Fabric Git Tenjin Selenium Sphinx Nose and Used Python modules such as requests urllib urllib2 for web crawling Used other packages such as Beautifulsoup for data parsing Worked on writing and as well as read data from csv and excel file formats Worked on resulting reports of the application and Tableau reports and Modifying data using SASBASE SAS MACROS Extracting data from the database using SASAccess SAS SQL procedures and create SAS data sets Developed approaches for improving NLP pipeline and Create custom VB scripts in repackaging applications as needed NLP File Prep SettlementPrepare files for review for Settlement Held meetings with client and worked all alone for the entire project with limited help from the client Participated in the complete SDLC process Designed and developed the UI of the website using HTML CSS and JavaScript Developed entire frontend and backend modules using Python on Django Web Framework Designed and developed data management system using MySQL Rewrite existing PythonDjango module to deliver certain format of data Created database using MySQL wrote several queries to extract data from database Wrote scripts in Python for extracting data from HTML file Developed a MATLAB algorithm which determines an objects dimensions from digital images Webservices backend development using Python CherryPy Django SQLAlchemy Participated in developing the companys internal framework on Python This framework became a basement for the quick services development Framework based on CherryPy with GnuPg encryption reGnuPg module on the top and Developed rich user interface using CSS HTML JavaScript and JQuery Created a Python based GUI application For Freight Tracking and processing Used Django framework for application development Developed and maintained various automated web tools for reducing manual effort and increasing efficiency of the Global Shipping Team Effectively communicated with the external vendors to resolve queries Used Perforce for the version control Environment Python Django Java Oracle 11g PLSQL MySQL HTML5CSS3 JavaScript JQuery AngularJS AbInitio Autosys Linux Apache UnixLinux Additional Information TECHNICAL SKILLS Programming Languages Python 3327 Django 1413 Flask Java C Shell Script SQL JavaJ2EE PyJamas Jython IronPython Cpython Web Technologies AJAX JavaScript HTML DHTML XHTML XML JSON Jquery Angular Js Database MySQL SQL Server Oracle 11g Operating systems Windows XP Win 7 81 10 Linux OS X Methodologie Agile V Model Waterfall Hybrid",
    "entities": [
        "Urgent",
        "CSS HTML JavaScript",
        "NLP File Prep SettlementPrepare",
        "Flashvars",
        "Python Developed GUI",
        "AJAX",
        "ExportedImported",
        "GUI",
        "New York",
        "UNIX",
        "SQL Server Management Studio Maintained",
        "Quality Analysis",
        "Python Django AWS J2EE PostgreSQL",
        "Interfacing",
        "MVTMVC",
        "LAMP Linux",
        "UNIX Installed",
        "Panda",
        "XML",
        "SOAP",
        "DHTML",
        "CherryPy",
        "Bootstrap CSS",
        "MA",
        "Shell",
        "csv",
        "SASAccess SAS SQL",
        "DB Involved",
        "Amazon",
        "Djangos Test Module",
        "Python",
        "Oracle Coherence",
        "Integrated Development Environments",
        "Mongo",
        "Developed",
        "CSS Bootstrap",
        "MATLAB",
        "Django",
        "Python Unit",
        "NY",
        "Complete Software",
        "JPMC This Application",
        "Apache Cassandra Deployment",
        "the Dovetail Application",
        "San Jose",
        "JavaScript Involved",
        "Linux",
        "JQuery Proficient",
        "Developed Ruby Python",
        "CF Objects",
        "Spark",
        "PythonDjango",
        "HTML CSS",
        "API",
        "WebSphere WebLogic Tomcat Web Servers",
        "Description Citi",
        "HTML CSS JavaScript",
        "NGINX",
        "Created",
        "Warranty",
        "Scala",
        "WAMP Windows Apache",
        "Sub Queries Stored Procedures Triggers Cursors and Functions",
        "SAS",
        "SQL",
        "NLP",
        "lPythonspan",
        "Responsibilities Worked",
        "JS Angular JS CSS",
        "Analysis Design Development Testing Customization Bug",
        "Wrote",
        "TivoliAutosys",
        "the Global Shipping Team Effectively",
        "Users Involved",
        "Pandas",
        "SQLite",
        "JQuery Created",
        "Build",
        "Djangos",
        "Scripts",
        "Windows XP Win",
        "Front",
        "Create custom VB",
        "Bulk High Value",
        "SVN",
        "Implemented Integration",
        "CMS",
        "Python Utilized Python",
        "Tomcat",
        "HTML XML CSS",
        "REST",
        "Developed Ruby on Rails",
        "JQuery Implemented AJAX",
        "PHP",
        "TDD",
        "Tableau",
        "JPMC",
        "Apache Spark Hadoop",
        "Worked on HTML5",
        "Value",
        "DevTest"
    ],
    "experience": "Experience working in Java JavaScript and Python software development environments Experience with Design code and debug operations reporting data analysis and web applications utilizing Python Wrote AJAX framework to transform Datasets and Data tables into HTTPserializable JSON strings Experience with creating scripts for data modeling and data import and export Extensive experience in deploying managing and developing MongoDB clusters Built the web application by using Python Django AWS J2EE PostgreSQL MySQL Oracle 10 g and MongoDB Experienced in WAMP Windows Apache MYSQL and Python and LAMP Linux Apache MySQL and Python Architecture Experience in writing Sub Queries Stored Procedures Triggers Cursors and Functions on MySQL and PostgreSQL database Experience in performing signal processing and machine learning algorithm development for a variety of programs Experienced in Agile Methodologies Scrum stories and sprints experience in a Python based environment along with data analytics data wrangling and Excel data extract Experience in developing webbased applications using Python 2726 Django 1413 PHP Flask Webapp2 Angularjs VB C XML CSS HTML DHTML JavaScript and JQuery Proficient in Front end development experience using HTML XML CSS JQuery JSON JavaScript CSS and Bootstrap Good experience of software development in Python libraries used Beautiful Soup numpy scipy matplotlib pythontwitter Pandas data frame network urllib2 MySQL dB for database connectivity and IDEs sublime text Spyder pycharm Emacs Very strong experience writing APIs and Web Services in PHP and in Python Utilized Python Pandas framework to provide data analysis and Applied HTML HTML5 XML DHTML CSS CSS3 JavaScript jQuery JSON and AJAX to deliver cuttingedge user interfaces and components Very strong experience in writing APIs and Web Services in Python Good in process validate parse and extract data from xml file Extensive use of Linux UbuntuSSH FlaskDjango Developed ColdFusion Components custom tags and modified CF Objects and Worked on AJAX framework to transform Datasets and Data tables into HTTPserializable JSON strings Experience in using UNIX shell Scripts for automating batch programs Experienced in working on Application Servers like WebSphere WebLogic Tomcat Web Servers like Apache server NGINX and Integrated Development Environments like Pycharm Eclipse MyEclipse JDeveloper and RAD Built the web application by using Python Django AWS J2EE PostgreSQL MySQL Oracle 10 g and MongoDB Experienced in WAMP Windows Apache MYSQL and Python and LAMP Linux Apache MySQL and Python Architecture Developed consumer based features and applications using Python Django HTML Behavior Driven Development BDD and pair based programming Strong Experience in Big data technologies including Apache Spark Hadoop HDFS Hive Cassandra MongoDB Experienced with batch processing of data sources using Apache Spark Good working experience in processing large datasets with Spark using Scala and Pyspark Good experience in developing web applications implementing MVTMVC architecture using Django Flask Webapp2 and spring web application frameworks Work Experience Sr Python Developer JPMC New York NY December 2015 to Present Description Dovetail Payment Processing System DPS is a 3rd party vendor from whom JPMC has purchased the Dovetail Application DT in order to provide a single platform for all types of payments Urgent nonurgent single and Bulk High Value and Low Value This application is called iPAY International Payment system that processes payments for all their international customers iPAY mechanism enables their customers to initiate receive Payments and acknowledgments across the globe tofrom any other person in any country that has this service provided by JPMC This Application uses various interfaces in order to process the payments from the Initiator who initiated the Transaction to the Receiver who receives the Transaction Responsibilities Gathered all requirements for developing and analyzing requirement of projects Developed entire frontend and backend modules using Python on Django including Tastypie Web Framework using Git Used Numpy for Numerical analysis Followed AGILE development methodology to develop the application Used and customized apache server to for checking our developed project Used Test driven approach TDD for developing services required for the application Implemented Integration test cases Worked on MongoDB database concepts such as locking transactions indexes Sharding replication schema design Developed Merge jobs in Python to extract and load data into MySQL database Successfully migrated the Django database from SQLite to MySQL to PostgreSQL with complete data integrity Developed Ruby on Rails 3 web applications using MongoDB and background processes using Resque and Redis Used Test driven approach for developing the application and Implemented the unit tests using Python Unit test framework Developed Ruby Python scripts to monitor health of Mongo databases and perform adhoc backups using Mongo dump and Mongo restore Used Pandas API to put the data as time series and tabular format for east timestamp data manipulation and retrieval Worked very closely with designer tightly integrating Flash into the CMS with the use of Flashvars stored in the Django models Also created XML with Django to be used by the Flash Used HTML CSS JQuery JSON and Javascript for front end applications Developed tools using Python Shell scripting XML to automate some of the menial tasks Interfacing with supervisors artists systems administrators and production to ensure production deadlines are met Used SOAP and RESTful API for information extraction from various Banking applications Familiar with JSON based REST Web services and Amazon Web services AWS Dynamic implementation of SQL server work on website using SQL developer tool Designed front end using UI HTML Bootstrap Node JS underscore JS Angular JS CSS and JavaScript Involved in the Complete Software development life cycle SDLC to develop the application Used Git to resolve and coding the work on python and portlet Used several python libraries like wx Python numPY and matPlotLib Was involved in environment code installation as well as the SVN implementation Build all database mapping classes using Django models and Apache Cassandra Deployment and Build of various environments including Linux and UNIX Installed and maintained web servers Tomcat and Apache HTTP Web servers in UNIX Wrote SQL scripts in Abinitio for Data analysis and used TivoliAutosys for automation of data extractionreporting Collaborate with Quality Analysis team to build and populated stage DB Involved in UAT coordination with business Users Involved in analyzing existing reports and converting into O2MS report server scripts Designed and developed the UI of the website using HTML XHTML AJAX CSS and JavaScript Also used Bootstrap as a mechanism to manage and organize the html page layout Used Django configuration to manage URLs and application parameters Wrote and executed various MYSQL database queries from Python using PythonMySQL connector and MySQLdb package Environment Python 33 PyQT PyQuery MVW HTML5 CSS3 DOM Angularjs Shell Scripting JSON Rest Apache Web Server Django SQL UNIX Windows MongoDB PostgreSQL and python libraries such as Numpy IPython sqlalchemy Django Tastypie Sr Python Developer Citi bank New York NY January 2013 to November 2014 Description Citi bank is a global banking and financial services company offering financial products and services for corporate and institutional clients along with private and business clients Services include sales trading research and origination of debt and equity mergers and acquisitions MA risk management products such as derivatives corporate finance wealth management retail banking fund management and transaction banking Responsibilities Worked with team of developers on Python applications for RISK management Used Ajax and JQuery for transmitting JSON data objects between frontend and controllers Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML CSS JavaScript and JQuery Implemented AJAX for dynamic functionality of a webpages for front end applications Worked on front end frame works like CSS Bootstrap for responsive webpages Developed and tested many features for dashboard created using Bootstrap CSS and JavaScript Performed testing using Djangos Test Module Web pages on the internet are generated by servers running LINUX Worked on middle tier and persistence layer Created service and model layer classes and Value objectsPOJO to hold values between java classes and database fields Used python libraries like Beautiful Soup and matplotlib Utilized standard Python modules such as csv robotparser itertools and pickle for development Worked on Python OpenStack APIs and used Numpy for Numerical analysis Wrote Python routines to log into the websites and fetch data for selected options Worked PHP as a server side scripting language for web pages Successfully migrated all the data to the database while the site was in production Implemented the validation error handling and caching framework with Oracle Coherence cache Worked on scripts for setting up the discovery client with attribute data Worked on scriptsgranite reference data scripts for setting up adapter attributes in granite system Managed datasets using Panda data frames and MySQL queried MYSQL database queries from python using PythonMySQL connector and MySQLdb package to retrieve information ExportedImported data between different data sources using SQL Server Management Studio Maintained program libraries users manuals and technical documentation Responsible for debugging and troubleshooting the web application Developed Wrapper in Python for instantiating multithreaded application Developed views and templates with Python and Djangos view controller and templating language to create a userfriendly website interface Designed the database schema for the content management system Designed and developed the UI of the website using HTML XHTML AJAX CSS and JavaScript Involved in development of Web Services using SOAP for sending and getting data from the external interface in the XML format Used PHP to write dynamically generated pages quickly Experienced Python on LINUX for execution Environment Python 27 Django 14 HTML5 CSS XML MySQL JavaScript Backbone JS JQuery Mongo DB MS SQL Server JavaScript Git GitHub AWS Linux Shell Scripting AJAX JAVA PHP Python Developer San Jose CA June 2011 to December 2012 Description Vocera enables mobile communications services for hospitals that improve patient safety and satisfaction and increase hospital efficiency and productivity Vocera provides secure integrated and intelligent communication to instantly connect people in mobile missioncritical environments Voceras secure voice and text applications keep hospital communication safe improve efficiency and comply with HIPAA regulations Responsibilities Worked on development of internal testing tool framework written in Python Developed GUI using Python and Django for dynamically displaying the test block documentation and other features of python code using a web browser Created database using MySQL wrote several queries to extract data from database Setup automated cron jobs to upload data into database generate graphs bar charts upload these charts to wiki and backup the database Developed Merge jobs in Python to extract and load data into MySQL database Successfully migrated the Django database from SQLite to MySQL to PostgreSQL with complete data integrity Dynamic implementation of SQL server work on website using SQL developer tool Wrote scripts in Python for extracting data from HTML file Effectively communicated with the external vendors to resolve queries Developed views and templates with Python and Djangos view controller and templating language to create a userfriendly website interface Used JavaScript and JSON to update a portion of a webpage Develop consumer based features and applications using Python Django HTML Behavior Driven Development BDD and pair based programming Wrote Python scripts to parse JSON documents and load the data in database Used Python and Django to interface with the jQuery UI and manage the storage and deletion of content Developed entire frontend and backend modules using Python on Django including Tastypie Web Framework using Git Designed front end using UI HTML Bootstrap Node JS underscore JS Angular JS CSS and JavaScript Followed AGILE development methodology to develop the application Used and customized apache server to for checking our developed project Used Test driven approach TDD for developing services required for the application Implemented Integration test cases Rewrite existing PythonDjango modules to deliver certain format of data Responsible for debugging the project monitored on JIRA Agile Used Git to resolve and coding the work on python and portlet Environment Python 30 Django 16 HTML5 CSS XML MySQL MySQL JavaScript Angular JS Backbone JS JQuery CSS Bootstrap MS SQL Server TSQL JavaScript Eclipse Git GitHub Linux Shell Scripting Python Developer Bosch Designs Novi MI June 2009 to May 2011 Description Bosch designs and produces precision automotive components and systems sold to vehicle and powertrain manufacturers worldwide These include systems and components for gasoline and diesel injection airbag components ABS and conventional braking systems telematics as well as small motors electrical and electronic equipment Worked on development of Warranty and defects tracking system Responsibilities Wrote Python routines to log into the websites and fetch data for selected options Worked on HTML5 CSS3 JavaScript AngularJS NodeJS Git REST API Mongo DB intelliJ IDEA Design and Setting up of environment of Mongodb with shards and replicasets DevTest and Production Private VPN using Ubuntu Python Django CherryPy Postgres Redis Bootstrap Jquery Mongo Fabric Git Tenjin Selenium Sphinx Nose and Used Python modules such as requests urllib urllib2 for web crawling Used other packages such as Beautifulsoup for data parsing Worked on writing and as well as read data from csv and excel file formats Worked on resulting reports of the application and Tableau reports and Modifying data using SASBASE SAS MACROS Extracting data from the database using SASAccess SAS SQL procedures and create SAS data sets Developed approaches for improving NLP pipeline and Create custom VB scripts in repackaging applications as needed NLP File Prep SettlementPrepare files for review for Settlement Held meetings with client and worked all alone for the entire project with limited help from the client Participated in the complete SDLC process Designed and developed the UI of the website using HTML CSS and JavaScript Developed entire frontend and backend modules using Python on Django Web Framework Designed and developed data management system using MySQL Rewrite existing PythonDjango module to deliver certain format of data Created database using MySQL wrote several queries to extract data from database Wrote scripts in Python for extracting data from HTML file Developed a MATLAB algorithm which determines an objects dimensions from digital images Webservices backend development using Python CherryPy Django SQLAlchemy Participated in developing the companys internal framework on Python This framework became a basement for the quick services development Framework based on CherryPy with GnuPg encryption reGnuPg module on the top and Developed rich user interface using CSS HTML JavaScript and JQuery Created a Python based GUI application For Freight Tracking and processing Used Django framework for application development Developed and maintained various automated web tools for reducing manual effort and increasing efficiency of the Global Shipping Team Effectively communicated with the external vendors to resolve queries Used Perforce for the version control Environment Python Django Java Oracle 11 g PLSQL MySQL HTML5CSS3 JavaScript JQuery AngularJS AbInitio Autosys Linux Apache UnixLinux Additional Information TECHNICAL SKILLS Programming Languages Python 3327 Django 1413 Flask Java C Shell Script SQL JavaJ2EE PyJamas Jython IronPython Cpython Web Technologies AJAX JavaScript HTML DHTML XHTML XML JSON Jquery Angular Js Database MySQL SQL Server Oracle 11 g Operating systems Windows XP Win 7 81 10 Linux OS X Methodologie Agile V Model Waterfall Hybrid",
    "extracted_keywords": [
        "Sr",
        "Python",
        "Developer",
        "Sr",
        "lPythonspan",
        "span",
        "lDeveloperspan",
        "Sr",
        "Python",
        "Developer",
        "JPMC",
        "New",
        "York",
        "NY",
        "6Years",
        "experience",
        "Analysis",
        "Design",
        "Development",
        "Testing",
        "Customization",
        "Bug",
        "fixes",
        "Enhancement",
        "Support",
        "Implementation",
        "web",
        "standalone",
        "enterprise",
        "applications",
        "Python",
        "Django",
        "domains",
        "Experience",
        "Java",
        "JavaScript",
        "Python",
        "software",
        "development",
        "Experience",
        "Design",
        "code",
        "operations",
        "data",
        "analysis",
        "web",
        "applications",
        "Python",
        "Wrote",
        "AJAX",
        "framework",
        "Datasets",
        "Data",
        "tables",
        "JSON",
        "strings",
        "scripts",
        "data",
        "modeling",
        "data",
        "import",
        "experience",
        "clusters",
        "web",
        "application",
        "Python",
        "Django",
        "J2EE",
        "PostgreSQL",
        "MySQL",
        "Oracle",
        "g",
        "MongoDB",
        "WAMP",
        "Windows",
        "Apache",
        "MYSQL",
        "Python",
        "LAMP",
        "Linux",
        "Apache",
        "MySQL",
        "Python",
        "Architecture",
        "Experience",
        "Sub",
        "Queries",
        "Stored",
        "Procedures",
        "Triggers",
        "Cursors",
        "Functions",
        "MySQL",
        "PostgreSQL",
        "database",
        "Experience",
        "signal",
        "processing",
        "machine",
        "algorithm",
        "development",
        "variety",
        "programs",
        "Agile",
        "Methodologies",
        "Scrum",
        "stories",
        "sprints",
        "experience",
        "Python",
        "environment",
        "data",
        "analytics",
        "data",
        "Excel",
        "data",
        "Experience",
        "applications",
        "Python",
        "Django",
        "PHP",
        "Flask",
        "Webapp2",
        "Angularjs",
        "VB",
        "C",
        "XML",
        "CSS",
        "HTML",
        "DHTML",
        "JavaScript",
        "JQuery",
        "Proficient",
        "Front",
        "end",
        "development",
        "experience",
        "HTML",
        "XML",
        "CSS",
        "JQuery",
        "JSON",
        "JavaScript",
        "CSS",
        "Bootstrap",
        "experience",
        "software",
        "development",
        "Python",
        "libraries",
        "Beautiful",
        "Soup",
        "numpy",
        "matplotlib",
        "pythontwitter",
        "Pandas",
        "data",
        "frame",
        "network",
        "urllib2",
        "MySQL",
        "database",
        "connectivity",
        "IDEs",
        "text",
        "Spyder",
        "Emacs",
        "experience",
        "APIs",
        "Web",
        "Services",
        "PHP",
        "Python",
        "Python",
        "Pandas",
        "framework",
        "data",
        "analysis",
        "Applied",
        "HTML",
        "HTML5",
        "XML",
        "DHTML",
        "CSS",
        "CSS3",
        "JavaScript",
        "jQuery",
        "JSON",
        "AJAX",
        "cuttingedge",
        "user",
        "interfaces",
        "components",
        "experience",
        "APIs",
        "Web",
        "Services",
        "Python",
        "Good",
        "process",
        "validate",
        "parse",
        "data",
        "xml",
        "file",
        "use",
        "Linux",
        "UbuntuSSH",
        "FlaskDjango",
        "Developed",
        "ColdFusion",
        "Components",
        "custom",
        "tags",
        "CF",
        "Objects",
        "AJAX",
        "framework",
        "Datasets",
        "Data",
        "tables",
        "JSON",
        "strings",
        "Experience",
        "UNIX",
        "shell",
        "Scripts",
        "batch",
        "programs",
        "Application",
        "Servers",
        "WebSphere",
        "WebLogic",
        "Tomcat",
        "Web",
        "Servers",
        "Apache",
        "server",
        "NGINX",
        "Integrated",
        "Development",
        "Environments",
        "Pycharm",
        "Eclipse",
        "MyEclipse",
        "JDeveloper",
        "RAD",
        "web",
        "application",
        "Python",
        "Django",
        "J2EE",
        "PostgreSQL",
        "MySQL",
        "Oracle",
        "g",
        "MongoDB",
        "WAMP",
        "Windows",
        "Apache",
        "MYSQL",
        "Python",
        "LAMP",
        "Linux",
        "Apache",
        "MySQL",
        "Python",
        "Architecture",
        "Developed",
        "consumer",
        "features",
        "applications",
        "Python",
        "Django",
        "HTML",
        "Behavior",
        "Driven",
        "Development",
        "BDD",
        "programming",
        "Strong",
        "Experience",
        "data",
        "technologies",
        "Apache",
        "Spark",
        "Hadoop",
        "HDFS",
        "Hive",
        "Cassandra",
        "MongoDB",
        "batch",
        "processing",
        "data",
        "sources",
        "Apache",
        "Spark",
        "Good",
        "working",
        "experience",
        "datasets",
        "Spark",
        "Scala",
        "Pyspark",
        "Good",
        "experience",
        "web",
        "applications",
        "MVTMVC",
        "architecture",
        "Django",
        "Flask",
        "Webapp2",
        "spring",
        "web",
        "application",
        "frameworks",
        "Work",
        "Experience",
        "Sr",
        "Python",
        "Developer",
        "JPMC",
        "New",
        "York",
        "NY",
        "December",
        "Present",
        "Description",
        "Dovetail",
        "Payment",
        "Processing",
        "System",
        "DPS",
        "party",
        "vendor",
        "JPMC",
        "Dovetail",
        "Application",
        "order",
        "platform",
        "types",
        "payments",
        "Urgent",
        "nonurgent",
        "Bulk",
        "High",
        "Value",
        "Low",
        "Value",
        "application",
        "International",
        "Payment",
        "system",
        "payments",
        "customers",
        "iPAY",
        "mechanism",
        "customers",
        "Payments",
        "acknowledgments",
        "globe",
        "person",
        "country",
        "service",
        "JPMC",
        "Application",
        "interfaces",
        "order",
        "payments",
        "Initiator",
        "Transaction",
        "Receiver",
        "Transaction",
        "Responsibilities",
        "requirements",
        "requirement",
        "projects",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Tastypie",
        "Web",
        "Framework",
        "Git",
        "Used",
        "Numpy",
        "Numerical",
        "analysis",
        "AGILE",
        "development",
        "methodology",
        "application",
        "apache",
        "server",
        "project",
        "Test",
        "approach",
        "TDD",
        "services",
        "application",
        "Integration",
        "test",
        "cases",
        "MongoDB",
        "database",
        "concepts",
        "transactions",
        "indexes",
        "Sharding",
        "replication",
        "schema",
        "Developed",
        "Merge",
        "jobs",
        "Python",
        "data",
        "MySQL",
        "database",
        "Django",
        "database",
        "SQLite",
        "PostgreSQL",
        "data",
        "integrity",
        "Developed",
        "Ruby",
        "Rails",
        "web",
        "applications",
        "MongoDB",
        "background",
        "processes",
        "Resque",
        "Redis",
        "Used",
        "Test",
        "approach",
        "application",
        "unit",
        "tests",
        "Python",
        "Unit",
        "test",
        "framework",
        "Developed",
        "Ruby",
        "Python",
        "health",
        "Mongo",
        "adhoc",
        "backups",
        "Mongo",
        "dump",
        "Mongo",
        "Pandas",
        "API",
        "data",
        "time",
        "series",
        "format",
        "east",
        "timestamp",
        "data",
        "manipulation",
        "retrieval",
        "Worked",
        "designer",
        "Flash",
        "CMS",
        "use",
        "Flashvars",
        "Django",
        "models",
        "XML",
        "Django",
        "Flash",
        "HTML",
        "CSS",
        "JQuery",
        "JSON",
        "Javascript",
        "end",
        "applications",
        "tools",
        "Python",
        "Shell",
        "XML",
        "tasks",
        "supervisors",
        "artists",
        "systems",
        "administrators",
        "production",
        "production",
        "deadlines",
        "SOAP",
        "API",
        "information",
        "extraction",
        "Banking",
        "applications",
        "JSON",
        "REST",
        "Web",
        "services",
        "Amazon",
        "Web",
        "services",
        "implementation",
        "SQL",
        "server",
        "work",
        "website",
        "SQL",
        "developer",
        "tool",
        "end",
        "UI",
        "HTML",
        "Bootstrap",
        "Node",
        "JS",
        "JS",
        "Angular",
        "JS",
        "CSS",
        "JavaScript",
        "Complete",
        "Software",
        "development",
        "life",
        "cycle",
        "SDLC",
        "application",
        "Git",
        "work",
        "python",
        "portlet",
        "python",
        "libraries",
        "wx",
        "Python",
        "numPY",
        "matPlotLib",
        "environment",
        "code",
        "installation",
        "SVN",
        "implementation",
        "database",
        "mapping",
        "classes",
        "Django",
        "models",
        "Apache",
        "Cassandra",
        "Deployment",
        "Build",
        "environments",
        "Linux",
        "UNIX",
        "Installed",
        "web",
        "servers",
        "Tomcat",
        "Apache",
        "HTTP",
        "Web",
        "servers",
        "UNIX",
        "Wrote",
        "SQL",
        "scripts",
        "Abinitio",
        "Data",
        "analysis",
        "TivoliAutosys",
        "automation",
        "data",
        "Collaborate",
        "Quality",
        "Analysis",
        "team",
        "stage",
        "DB",
        "coordination",
        "business",
        "Users",
        "reports",
        "O2MS",
        "report",
        "server",
        "scripts",
        "UI",
        "website",
        "HTML",
        "XHTML",
        "AJAX",
        "CSS",
        "JavaScript",
        "Bootstrap",
        "mechanism",
        "html",
        "page",
        "layout",
        "Django",
        "configuration",
        "URLs",
        "application",
        "parameters",
        "Wrote",
        "MYSQL",
        "database",
        "Python",
        "PythonMySQL",
        "connector",
        "package",
        "Environment",
        "Python",
        "PyQT",
        "PyQuery",
        "MVW",
        "HTML5",
        "CSS3",
        "DOM",
        "Angularjs",
        "Shell",
        "Scripting",
        "JSON",
        "Rest",
        "Apache",
        "Web",
        "Server",
        "Django",
        "SQL",
        "UNIX",
        "Windows",
        "MongoDB",
        "PostgreSQL",
        "python",
        "libraries",
        "Numpy",
        "IPython",
        "sqlalchemy",
        "Django",
        "Tastypie",
        "Sr",
        "Python",
        "Developer",
        "Citi",
        "bank",
        "New",
        "York",
        "NY",
        "January",
        "November",
        "Description",
        "Citi",
        "bank",
        "banking",
        "services",
        "company",
        "products",
        "services",
        "clients",
        "business",
        "clients",
        "Services",
        "sales",
        "trading",
        "research",
        "origination",
        "debt",
        "equity",
        "mergers",
        "acquisitions",
        "MA",
        "risk",
        "management",
        "products",
        "derivatives",
        "finance",
        "wealth",
        "management",
        "banking",
        "fund",
        "management",
        "transaction",
        "banking",
        "Responsibilities",
        "team",
        "developers",
        "Python",
        "applications",
        "RISK",
        "management",
        "Ajax",
        "JQuery",
        "JSON",
        "data",
        "objects",
        "frontend",
        "controllers",
        "user",
        "interface",
        "guidelines",
        "standards",
        "development",
        "maintenance",
        "website",
        "HTML",
        "CSS",
        "JavaScript",
        "JQuery",
        "AJAX",
        "functionality",
        "webpages",
        "end",
        "applications",
        "end",
        "frame",
        "CSS",
        "Bootstrap",
        "webpages",
        "features",
        "dashboard",
        "Bootstrap",
        "CSS",
        "JavaScript",
        "Performed",
        "testing",
        "Djangos",
        "Test",
        "Module",
        "Web",
        "pages",
        "internet",
        "servers",
        "LINUX",
        "tier",
        "persistence",
        "layer",
        "service",
        "model",
        "layer",
        "classes",
        "Value",
        "values",
        "classes",
        "database",
        "fields",
        "python",
        "libraries",
        "Beautiful",
        "Soup",
        "Python",
        "modules",
        "csv",
        "robotparser",
        "itertools",
        "pickle",
        "development",
        "Python",
        "OpenStack",
        "APIs",
        "Numpy",
        "Numerical",
        "analysis",
        "Wrote",
        "Python",
        "websites",
        "data",
        "options",
        "PHP",
        "server",
        "side",
        "scripting",
        "language",
        "web",
        "pages",
        "data",
        "database",
        "site",
        "production",
        "validation",
        "error",
        "handling",
        "framework",
        "Oracle",
        "Coherence",
        "cache",
        "scripts",
        "discovery",
        "client",
        "attribute",
        "data",
        "scriptsgranite",
        "reference",
        "data",
        "scripts",
        "adapter",
        "attributes",
        "granite",
        "system",
        "datasets",
        "Panda",
        "data",
        "frames",
        "MySQL",
        "MYSQL",
        "database",
        "python",
        "PythonMySQL",
        "connector",
        "package",
        "information",
        "ExportedImported",
        "data",
        "data",
        "sources",
        "SQL",
        "Server",
        "Management",
        "Studio",
        "program",
        "users",
        "manuals",
        "documentation",
        "web",
        "application",
        "Developed",
        "Wrapper",
        "Python",
        "application",
        "views",
        "templates",
        "Python",
        "Djangos",
        "controller",
        "templating",
        "language",
        "website",
        "interface",
        "database",
        "schema",
        "content",
        "management",
        "system",
        "UI",
        "website",
        "HTML",
        "XHTML",
        "AJAX",
        "CSS",
        "JavaScript",
        "development",
        "Web",
        "Services",
        "SOAP",
        "data",
        "interface",
        "XML",
        "format",
        "PHP",
        "pages",
        "Python",
        "LINUX",
        "execution",
        "Environment",
        "Python",
        "Django",
        "HTML5",
        "CSS",
        "XML",
        "MySQL",
        "JavaScript",
        "Backbone",
        "JS",
        "JQuery",
        "Mongo",
        "DB",
        "MS",
        "SQL",
        "Server",
        "JavaScript",
        "Git",
        "GitHub",
        "Linux",
        "Shell",
        "Scripting",
        "AJAX",
        "PHP",
        "Python",
        "Developer",
        "San",
        "Jose",
        "CA",
        "June",
        "December",
        "Description",
        "Vocera",
        "communications",
        "services",
        "hospitals",
        "safety",
        "satisfaction",
        "hospital",
        "efficiency",
        "productivity",
        "Vocera",
        "communication",
        "people",
        "environments",
        "Voceras",
        "voice",
        "text",
        "applications",
        "hospital",
        "communication",
        "efficiency",
        "comply",
        "HIPAA",
        "regulations",
        "Responsibilities",
        "development",
        "testing",
        "tool",
        "framework",
        "Python",
        "Developed",
        "GUI",
        "Python",
        "Django",
        "test",
        "block",
        "documentation",
        "features",
        "python",
        "code",
        "web",
        "browser",
        "database",
        "MySQL",
        "queries",
        "data",
        "database",
        "Setup",
        "cron",
        "jobs",
        "data",
        "database",
        "graphs",
        "bar",
        "charts",
        "charts",
        "wiki",
        "database",
        "Merge",
        "jobs",
        "Python",
        "data",
        "MySQL",
        "database",
        "Django",
        "database",
        "SQLite",
        "PostgreSQL",
        "data",
        "integrity",
        "implementation",
        "SQL",
        "server",
        "work",
        "website",
        "SQL",
        "developer",
        "tool",
        "scripts",
        "Python",
        "data",
        "HTML",
        "file",
        "vendors",
        "queries",
        "views",
        "templates",
        "Python",
        "Djangos",
        "controller",
        "templating",
        "language",
        "website",
        "interface",
        "JavaScript",
        "JSON",
        "portion",
        "webpage",
        "Develop",
        "consumer",
        "features",
        "applications",
        "Python",
        "Django",
        "HTML",
        "Behavior",
        "Driven",
        "Development",
        "BDD",
        "programming",
        "Wrote",
        "Python",
        "scripts",
        "documents",
        "data",
        "database",
        "Python",
        "Django",
        "jQuery",
        "UI",
        "storage",
        "deletion",
        "content",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Tastypie",
        "Web",
        "Framework",
        "Git",
        "end",
        "UI",
        "HTML",
        "Bootstrap",
        "Node",
        "JS",
        "JS",
        "Angular",
        "JS",
        "CSS",
        "JavaScript",
        "AGILE",
        "development",
        "methodology",
        "application",
        "apache",
        "server",
        "project",
        "Test",
        "approach",
        "TDD",
        "services",
        "application",
        "Integration",
        "test",
        "cases",
        "Rewrite",
        "PythonDjango",
        "modules",
        "format",
        "data",
        "project",
        "JIRA",
        "Agile",
        "Git",
        "work",
        "python",
        "Environment",
        "Python",
        "Django",
        "HTML5",
        "CSS",
        "XML",
        "MySQL",
        "MySQL",
        "JavaScript",
        "Angular",
        "JS",
        "Backbone",
        "JS",
        "JQuery",
        "CSS",
        "Bootstrap",
        "MS",
        "SQL",
        "Server",
        "TSQL",
        "JavaScript",
        "Eclipse",
        "Git",
        "GitHub",
        "Linux",
        "Shell",
        "Scripting",
        "Python",
        "Developer",
        "Bosch",
        "Novi",
        "MI",
        "June",
        "May",
        "Description",
        "Bosch",
        "precision",
        "components",
        "systems",
        "vehicle",
        "manufacturers",
        "systems",
        "components",
        "gasoline",
        "diesel",
        "injection",
        "airbag",
        "components",
        "ABS",
        "braking",
        "systems",
        "telematics",
        "motors",
        "equipment",
        "development",
        "Warranty",
        "tracking",
        "system",
        "Responsibilities",
        "Wrote",
        "Python",
        "websites",
        "data",
        "options",
        "HTML5",
        "CSS3",
        "JavaScript",
        "NodeJS",
        "Git",
        "REST",
        "API",
        "Mongo",
        "DB",
        "intelliJ",
        "IDEA",
        "Design",
        "environment",
        "Mongodb",
        "shards",
        "DevTest",
        "Production",
        "VPN",
        "Ubuntu",
        "Python",
        "Django",
        "CherryPy",
        "Postgres",
        "Redis",
        "Bootstrap",
        "Jquery",
        "Mongo",
        "Fabric",
        "Git",
        "Tenjin",
        "Selenium",
        "Sphinx",
        "Nose",
        "Python",
        "modules",
        "requests",
        "urllib2",
        "web",
        "packages",
        "Beautifulsoup",
        "data",
        "writing",
        "data",
        "csv",
        "file",
        "formats",
        "reports",
        "application",
        "Tableau",
        "Modifying",
        "data",
        "SASBASE",
        "SAS",
        "MACROS",
        "data",
        "database",
        "SASAccess",
        "SAS",
        "SQL",
        "procedures",
        "SAS",
        "data",
        "approaches",
        "NLP",
        "pipeline",
        "custom",
        "VB",
        "scripts",
        "applications",
        "NLP",
        "File",
        "Prep",
        "SettlementPrepare",
        "review",
        "Settlement",
        "meetings",
        "client",
        "project",
        "help",
        "client",
        "SDLC",
        "process",
        "UI",
        "website",
        "HTML",
        "CSS",
        "JavaScript",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Web",
        "Framework",
        "data",
        "management",
        "system",
        "MySQL",
        "Rewrite",
        "PythonDjango",
        "module",
        "format",
        "data",
        "database",
        "MySQL",
        "queries",
        "data",
        "database",
        "Wrote",
        "scripts",
        "Python",
        "data",
        "HTML",
        "file",
        "MATLAB",
        "algorithm",
        "objects",
        "dimensions",
        "images",
        "Webservices",
        "development",
        "Python",
        "CherryPy",
        "Django",
        "SQLAlchemy",
        "companys",
        "framework",
        "Python",
        "framework",
        "basement",
        "services",
        "development",
        "Framework",
        "CherryPy",
        "GnuPg",
        "encryption",
        "reGnuPg",
        "module",
        "user",
        "interface",
        "CSS",
        "HTML",
        "JavaScript",
        "JQuery",
        "Python",
        "GUI",
        "application",
        "Freight",
        "Tracking",
        "processing",
        "Django",
        "framework",
        "application",
        "development",
        "web",
        "tools",
        "effort",
        "efficiency",
        "Global",
        "Shipping",
        "Team",
        "vendors",
        "queries",
        "Perforce",
        "version",
        "control",
        "Environment",
        "Python",
        "Django",
        "Java",
        "Oracle",
        "g",
        "PLSQL",
        "MySQL",
        "HTML5CSS3",
        "JavaScript",
        "JQuery",
        "AngularJS",
        "AbInitio",
        "Autosys",
        "Linux",
        "Apache",
        "UnixLinux",
        "Information",
        "TECHNICAL",
        "SKILLS",
        "Programming",
        "Languages",
        "Python",
        "Django",
        "Flask",
        "Java",
        "C",
        "Shell",
        "Script",
        "SQL",
        "JavaJ2EE",
        "PyJamas",
        "Jython",
        "IronPython",
        "Cpython",
        "Web",
        "Technologies",
        "AJAX",
        "JavaScript",
        "HTML",
        "DHTML",
        "XML",
        "JSON",
        "Jquery",
        "Angular",
        "Js",
        "Database",
        "MySQL",
        "SQL",
        "Server",
        "Oracle",
        "g",
        "Operating",
        "systems",
        "Windows",
        "XP",
        "Win",
        "Linux",
        "OS",
        "X",
        "Methodologie",
        "Agile",
        "V",
        "Model",
        "Waterfall",
        "Hybrid"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T21:03:49.766956",
    "resume_data": "Sr Python Developer Sr span lPythonspan span lDeveloperspan Sr Python Developer JPMC New York NY 6Years of experience in Analysis Design Development Testing Customization Bug fixes Enhancement Support and Implementation of various web standalone clientserver enterprise applications using Python Django in various domains Experience working in Java JavaScript and Python software development environments Experience with Design code and debug operations reporting data analysis and web applications utilizing Python Wrote AJAX framework to transform Datasets and Data tables into HTTPserializable JSON strings Experience with creating scripts for data modeling and data import and export Extensive experience in deploying managing and developing MongoDB clusters Built the web application by using Python Django AWS J2EE PostgreSQL MySQL Oracle 10g and MongoDB Experienced in WAMP Windows Apache MYSQL and Python and LAMP Linux Apache MySQL and Python Architecture Experience in writing Sub Queries Stored Procedures Triggers Cursors and Functions on MySQL and PostgreSQL database Experience in performing signal processing and machine learning algorithm development for a variety of programs Experienced in Agile Methodologies Scrum stories and sprints experience in a Python based environment along with data analytics data wrangling and Excel data extract Experience in developing webbased applications using Python 2726 Django 1413 PHP Flask Webapp2 Angularjs VB C XML CSS HTML DHTML JavaScript and JQuery Proficient in Front end development experience using HTML XML CSS JQuery JSON JavaScript CSS and Bootstrap Good experience of software development in Python libraries used Beautiful Soup numpy scipy matplotlib pythontwitter Pandas data frame network urllib2 MySQL dB for database connectivity and IDEs sublime text Spyder pycharm Emacs Very strong experience writing APIs and Web Services in PHP and in Python Utilized Python Pandas framework to provide data analysis and Applied HTML HTML5 XML DHTML CSS CSS3 JavaScript jQuery JSON and AJAX to deliver cuttingedge user interfaces and components Very strong experience in writing APIs and Web Services in Python Good in process validate parse and extract data from xml file Extensive use of Linux UbuntuSSH FlaskDjango Developed ColdFusion Components custom tags and modified CF Objects and Worked on AJAX framework to transform Datasets and Data tables into HTTPserializable JSON strings Experience in using UNIX shell Scripts for automating batch programs Experienced in working on Application Servers like WebSphere WebLogic Tomcat Web Servers like Apache server NGINX and Integrated Development Environments like Pycharm Eclipse MyEclipse JDeveloper and RAD Built the web application by using Python Django AWS J2EE PostgreSQL MySQL Oracle 10g and MongoDB Experienced in WAMP Windows Apache MYSQL and Python and LAMP Linux Apache MySQL and Python Architecture Developed consumer based features and applications using Python Django HTML Behavior Driven Development BDD and pair based programming Strong Experience in Big data technologies including Apache Spark Hadoop HDFS Hive Cassandra MongoDB Experienced with batch processing of data sources using Apache Spark Good working experience in processing large datasets with Spark using Scala and Pyspark Good experience in developing web applications implementing MVTMVC architecture using Django Flask Webapp2 and spring web application frameworks Work Experience Sr Python Developer JPMC New York NY December 2015 to Present Description Dovetail Payment Processing System DPS is a 3rd party vendor from whom JPMC has purchased the Dovetail Application DT in order to provide a single platform for all types of payments Urgent nonurgent single and Bulk High Value and Low Value This application is called iPAY International Payment system that processes payments for all their international customers iPAY mechanism enables their customers to initiate receive Payments and acknowledgments across the globe tofrom any other person in any country that has this service provided by JPMC This Application uses various interfaces in order to process the payments from the Initiator who initiated the Transaction to the Receiver who receives the Transaction Responsibilities Gathered all requirements for developing and analyzing requirement of projects Developed entire frontend and backend modules using Python on Django including Tastypie Web Framework using Git Used Numpy for Numerical analysis Followed AGILE development methodology to develop the application Used and customized apache server to for checking our developed project Used Test driven approach TDD for developing services required for the application Implemented Integration test cases Worked on MongoDB database concepts such as locking transactions indexes Sharding replication schema design Developed Merge jobs in Python to extract and load data into MySQL database Successfully migrated the Django database from SQLite to MySQL to PostgreSQL with complete data integrity Developed Ruby on Rails 3 web applications using MongoDB and background processes using Resque and Redis Used Test driven approach for developing the application and Implemented the unit tests using Python Unit test framework Developed Ruby Python scripts to monitor health of Mongo databases and perform adhoc backups using Mongo dump and Mongo restore Used Pandas API to put the data as time series and tabular format for east timestamp data manipulation and retrieval Worked very closely with designer tightly integrating Flash into the CMS with the use of Flashvars stored in the Django models Also created XML with Django to be used by the Flash Used HTML CSS JQuery JSON and Javascript for front end applications Developed tools using Python Shell scripting XML to automate some of the menial tasks Interfacing with supervisors artists systems administrators and production to ensure production deadlines are met Used SOAP and RESTful API for information extraction from various Banking applications Familiar with JSON based REST Web services and Amazon Web services AWS Dynamic implementation of SQL server work on website using SQL developer tool Designed front end using UI HTML Bootstrap Node JS underscore JS Angular JS CSS and JavaScript Involved in the Complete Software development life cycle SDLC to develop the application Used Git to resolve and coding the work on python and portlet Used several python libraries like wx Python numPY and matPlotLib Was involved in environment code installation as well as the SVN implementation Build all database mapping classes using Django models and Apache Cassandra Deployment and Build of various environments including Linux and UNIX Installed and maintained web servers Tomcat and Apache HTTP Web servers in UNIX Wrote SQL scripts in Abinitio for Data analysis and used TivoliAutosys for automation of data extractionreporting Collaborate with Quality Analysis team to build and populated stage DB Involved in UAT coordination with business Users Involved in analyzing existing reports and converting into O2MS report server scripts Designed and developed the UI of the website using HTML XHTML AJAX CSS and JavaScript Also used Bootstrap as a mechanism to manage and organize the html page layout Used Django configuration to manage URLs and application parameters Wrote and executed various MYSQL database queries from Python using PythonMySQL connector and MySQLdb package Environment Python 33 PyQT PyQuery MVW HTML5 CSS3 DOM Angularjs Shell Scripting JSON Rest Apache Web Server Django SQL UNIX Windows MongoDB PostgreSQL and python libraries such as Numpy IPython sqlalchemy Django Tastypie Sr Python Developer Citi bank New York NY January 2013 to November 2014 Description Citi bank is a global banking and financial services company offering financial products and services for corporate and institutional clients along with private and business clients Services include sales trading research and origination of debt and equity mergers and acquisitions MA risk management products such as derivatives corporate finance wealth management retail banking fund management and transaction banking Responsibilities Worked with team of developers on Python applications for RISK management Used Ajax and JQuery for transmitting JSON data objects between frontend and controllers Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML CSS JavaScript and JQuery Implemented AJAX for dynamic functionality of a webpages for front end applications Worked on front end frame works like CSS Bootstrap for responsive webpages Developed and tested many features for dashboard created using Bootstrap CSS and JavaScript Performed testing using Djangos Test Module Web pages on the internet are generated by servers running LINUX Worked on middle tier and persistence layer Created service and model layer classes and Value objectsPOJO to hold values between java classes and database fields Used python libraries like Beautiful Soup and matplotlib Utilized standard Python modules such as csv robotparser itertools and pickle for development Worked on Python OpenStack APIs and used Numpy for Numerical analysis Wrote Python routines to log into the websites and fetch data for selected options Worked PHP as a server side scripting language for web pages Successfully migrated all the data to the database while the site was in production Implemented the validation error handling and caching framework with Oracle Coherence cache Worked on scripts for setting up the discovery client with attribute data Worked on scriptsgranite reference data scripts for setting up adapter attributes in granite system Managed datasets using Panda data frames and MySQL queried MYSQL database queries from python using PythonMySQL connector and MySQLdb package to retrieve information ExportedImported data between different data sources using SQL Server Management Studio Maintained program libraries users manuals and technical documentation Responsible for debugging and troubleshooting the web application Developed Wrapper in Python for instantiating multithreaded application Developed views and templates with Python and Djangos view controller and templating language to create a userfriendly website interface Designed the database schema for the content management system Designed and developed the UI of the website using HTML XHTML AJAX CSS and JavaScript Involved in development of Web Services using SOAP for sending and getting data from the external interface in the XML format Used PHP to write dynamically generated pages quickly Experienced Python on LINUX for execution Environment Python 27 Django 14 HTML5 CSS XML MySQL JavaScript Backbone JS JQuery Mongo DB MS SQL Server JavaScript Git GitHub AWS Linux Shell Scripting AJAX JAVA PHP Python Developer San Jose CA June 2011 to December 2012 Description Vocera enables mobile communications services for hospitals that improve patient safety and satisfaction and increase hospital efficiency and productivity Vocera provides secure integrated and intelligent communication to instantly connect people in mobile missioncritical environments Voceras secure voice and text applications keep hospital communication safe improve efficiency and comply with HIPAA regulations Responsibilities Worked on development of internal testing tool framework written in Python Developed GUI using Python and Django for dynamically displaying the test block documentation and other features of python code using a web browser Created database using MySQL wrote several queries to extract data from database Setup automated cron jobs to upload data into database generate graphs bar charts upload these charts to wiki and backup the database Developed Merge jobs in Python to extract and load data into MySQL database Successfully migrated the Django database from SQLite to MySQL to PostgreSQL with complete data integrity Dynamic implementation of SQL server work on website using SQL developer tool Wrote scripts in Python for extracting data from HTML file Effectively communicated with the external vendors to resolve queries Developed views and templates with Python and Djangos view controller and templating language to create a userfriendly website interface Used JavaScript and JSON to update a portion of a webpage Develop consumer based features and applications using Python Django HTML Behavior Driven Development BDD and pair based programming Wrote Python scripts to parse JSON documents and load the data in database Used Python and Django to interface with the jQuery UI and manage the storage and deletion of content Developed entire frontend and backend modules using Python on Django including Tastypie Web Framework using Git Designed front end using UI HTML Bootstrap Node JS underscore JS Angular JS CSS and JavaScript Followed AGILE development methodology to develop the application Used and customized apache server to for checking our developed project Used Test driven approach TDD for developing services required for the application Implemented Integration test cases Rewrite existing PythonDjango modules to deliver certain format of data Responsible for debugging the project monitored on JIRA Agile Used Git to resolve and coding the work on python and portlet Environment Python 30 Django 16 HTML5 CSS XML MySQL MySQL JavaScript Angular JS Backbone JS JQuery CSS Bootstrap MS SQL Server TSQL JavaScript Eclipse Git GitHub Linux Shell Scripting Python Developer Bosch Designs Novi MI June 2009 to May 2011 Description Bosch designs and produces precision automotive components and systems sold to vehicle and powertrain manufacturers worldwide These include systems and components for gasoline and diesel injection airbag components ABS and conventional braking systems telematics as well as small motors electrical and electronic equipment Worked on development of Warranty and defects tracking system Responsibilities Wrote Python routines to log into the websites and fetch data for selected options Worked on HTML5 CSS3 JavaScript AngularJS NodeJS Git REST API Mongo DB intelliJ IDEA Design and Setting up of environment of Mongodb with shards and replicasets DevTest and Production Private VPN using Ubuntu Python Django CherryPy Postgres Redis Bootstrap Jquery Mongo Fabric Git Tenjin Selenium Sphinx Nose and Used Python modules such as requests urllib urllib2 for web crawling Used other packages such as Beautifulsoup for data parsing Worked on writing and as well as read data from csv and excel file formats Worked on resulting reports of the application and Tableau reports and Modifying data using SASBASE SAS MACROS Extracting data from the database using SASAccess SAS SQL procedures and create SAS data sets Developed approaches for improving NLP pipeline and Create custom VB scripts in repackaging applications as needed NLP File Prep SettlementPrepare files for review for Settlement Held meetings with client and worked all alone for the entire project with limited help from the client Participated in the complete SDLC process Designed and developed the UI of the website using HTML CSS and JavaScript Developed entire frontend and backend modules using Python on Django Web Framework Designed and developed data management system using MySQL Rewrite existing PythonDjango module to deliver certain format of data Created database using MySQL wrote several queries to extract data from database Wrote scripts in Python for extracting data from HTML file Developed a MATLAB algorithm which determines an objects dimensions from digital images Webservices backend development using Python CherryPy Django SQLAlchemy Participated in developing the companys internal framework on Python This framework became a basement for the quick services development Framework based on CherryPy with GnuPg encryption reGnuPg module on the top and Developed rich user interface using CSS HTML JavaScript and JQuery Created a Python based GUI application For Freight Tracking and processing Used Django framework for application development Developed and maintained various automated web tools for reducing manual effort and increasing efficiency of the Global Shipping Team Effectively communicated with the external vendors to resolve queries Used Perforce for the version control Environment Python Django Java Oracle 11g PLSQL MySQL HTML5CSS3 JavaScript JQuery AngularJS AbInitio Autosys Linux Apache UnixLinux Additional Information TECHNICAL SKILLS Programming Languages Python 3327 Django 1413 Flask Java C Shell Script SQL JavaJ2EE PyJamas Jython IronPython Cpython Web Technologies AJAX JavaScript HTML DHTML XHTML XML JSON Jquery Angular Js Database MySQL SQL Server Oracle 11g Operating systems Windows XP Win 7 81 10 Linux OS X Methodologie Agile V Model Waterfall Hybrid",
    "unique_id": "4c67e9d0-06f5-4ef3-a498-a9718c532b06"
}