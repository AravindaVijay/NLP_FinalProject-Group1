{
    "clean_data": "Go Lang Developer Go Lang span lDeveloperspan Go Lang Developer Bank of America 4 years of strong Data Engineering experience in financial domain expert in using GO Lang and Python Involved in all phases of SDLC analysis Design development testing maintenance and documentation of different applications Good hands on experience with GO Lang and its Builtin concurrency features such as goroutines channels and select statement Strong experience in developing Microservices using Docker Mesos GO Lang and Python Experience in Object Oriented Design and Programming concepts in Python Good experience with GO Lang drivers to perform operations such as CRUD operations and writing complex queries with PostgreSQL and SQL Server Good experience with JDBC to perform operations such as CRUD operations and writing complex queries with Oracle 10g11g Experience in developing REST web services and Go based REST clients for consuming the REST services using GO Lang Developed GO Lang based tokenization service for NPI and PCI data Experience in developing web services WSDL SOAP and REST and consuming web services with python programming language Good experience in using Shell scripting for automation by following Python PEP Hands on experience with AWS web services EC2 S3 ELBs CICD tools such as Jenkins Git and Tortoise SVN Expertise in full life cycle application development and also good experience in Unit testing and Test Driven Development TDD and Behavior driven Development Hands on experience with continuous integration and automation using Jenkins Hands on experience with version control tools such as SVN JIRA and GitHub Excellent Experience on various Python integrated IDEs such as Sublime Text Pycharm Eclipse and NetBeans Experience in developing web applications by following Model View Control MVC Architecture using server side applications Django Experience in working on different operating systemswindows Linux UNIX and Mac also strong development experience on Linux based operating systems such as Ubuntu Excellent communication Teamwork interpersonnel and presentation skills fast learner and organized selfstarter Work Experience Go Lang Developer Bank of America September 2015 to Present As per banking regulations related to AML every day data has to be feed to the Office of Foreign Assets Control OFAC of the US Department of the Treasury administers feed record In this project data from different line of business Home Loans Home Equity has to be extracted and sent it to the AML LOB in BOFA Roles Responsibilities Developed Microservices to extract the data from system of records into Enterprise Data warehousing Developed another microservice to extract AML data from Enterprise Data warehousing and push to external systems in JSON format All these batch microservices are written utilizing distributed message passing via Kafka message broker with JSON and CSV as data exchange formats Extensively used Gos approach to concurrency using goroutines channels and Wait Groups Hands on experience with version control used Github version control for GO Lang source code Designed complex application database SQL statements for querying updating and reporting using GO Database Connector Performed GO Lang unit testing and benchmarking for microservices Worked on integration of PostgreSQL database Developed a microservice that extracts data from PostgreSQL and generates a flat file and sends to AWS S3 using GO Experienced in Agile Methodologies and SCRUM Process Environment Go Lang Kafka JSON Github Unix and PostgreSQL Python Developer Data Engineering JP Morgan Chase NY April 2014 to August 2015 To make JPMC critical infrastructure fast reliable and agile company started a pilot project The main concentration is towards the corporate banking Daily transactions are sent as a batch file from the company to JPMC to make the transactions FreeBird processes these files and process the transactions from respective channels such as ACH EFT and EDI payments Roles Responsibilities Created microservices that has the capability to transfer the input files to machinereadable format and pass through respective payment channels Worked on microservices architecture written in Python utilizing distributed message passing via Kafka Wrote Python scripts to parse JSON documents CSV files and load the data in database Worked on integration of PostgreSQL from Python using psycopg2 package Created a connection to AWS S3 from Python using boto package Developed a plugin to automate data retrieval from external sources and pushing onto S3 buckets Created and enhanced existing automated solutions Used Numpy and pandas for Numerical and statistical analysis Tracked defects using JIRA and HPQC ALM and generated defect summary reports Involved in scrubbing project which updates the existing data with hashed values Used Github as a version control Responsible for unit testing Environment  PyCharm CentOSRedhat Linux PostgreSQL Kafka JSON Github Oracle PLSQL Developer Wells Fargo IA September 2012 to March 2014 Wells Fargo Bank is an American multinational banking and financial services holding company with operations around the world Wells Fargo is the fourth largest bank in the USA by assets and largest bank by market capitalization CORE program focuses on innovation in processes and technology to reduce cost and complexity better our skill and scale and enable a better response to market and volume changes CORE is a Home Lending project to modularize product rules This project required data movement from the online systems to different downstream departments for decision and reporting purposes using PLSQL Autosys PERL and Data stage Roles Responsibilities Analyzing user requirements and defining functional specifications Coordinated with the architects to make sure that all the Demand and Change Requests have been covered for that release Redesigned existing data model to eliminate the need for creating individual files for every subject area Developed PLSQL Procedures Functions Cursors and Packages Views and Materialized Views with fast and incremental Refresh Rates Working on PLSQL Implicit Explicit Cursors and created Triggers Used SCN System Change Number to eliminate the need for staging schema Extensively used Global Temporary Tables to load the required data set to increase the performance Extensively used materialized views pragma autonomous transactions object types table functions and pipelined functions to implement business logic effectively Used web builder to deploy and test the code base for every release to database Created JILS shell scripts to schedule and automate jobs in Autosys environment Responsible for Unit System and UAT testing the data and provided the test evidence reports Environment Oracle Database 11g10g TOAD UNIX PUTTY PVCS WinSCP UNIX PLSQL UNIX Windows NTXP Skills SQL 3 years UNIX 3 years AWS 3 years INTEGRATION 3 years INTEGRATOR 3 years Additional Information TECHNICAL SKILLS Operating Systems Unix Linux Windows and Mac Programming Languages GO Lang Python and PLSQL Databases Oracle 1011g MySQL SQL Server and PostgreSQL Tools Intellij PyCharm FileZilla PLSQL Developer and TOAD Integration Tools Jenkins Sonar Cube and Web Builder Version Control GitHub and SVN Defect Tracking JIRA Git and VersionOne Cloud AWS EC2 S3 ELB and VPC",
    "entities": [
        "Lang Developed GO Lang",
        "Lang Developer Bank of America",
        "Tortoise",
        "Global Temporary Tables",
        "AML",
        "CSV",
        "Enterprise Data",
        "CRUD",
        "Test Driven Development TDD",
        "Wells Fargo Bank",
        "Object Oriented Design",
        "Wells Fargo",
        "Model View Control MVC Architecture",
        "Mac Programming Languages GO Lang Python",
        "AWS S3",
        "ACH EFT",
        "Jenkins Hands",
        "Web Builder Version Control GitHub",
        "Additional Information TECHNICAL SKILLS Operating Systems",
        "EDI",
        "NPI",
        "Created",
        "Morgan Chase",
        "the Office of Foreign Assets Control OFAC",
        "JSON",
        "Python PEP Hands",
        "ELB",
        "Refresh Rates Working on PLSQL Implicit Explicit Cursors",
        "SVN",
        "Home Lending",
        "Sublime Text Pycharm Eclipse",
        "Data Engineering",
        "Linux",
        "Numerical",
        "Treasury",
        "Wells Fargo IA",
        "GO Experienced",
        "SQL",
        "Materialized Views",
        "Home Loans Home Equity",
        "REST",
        "VersionOne Cloud AWS",
        "PUTTY PVCS WinSCP",
        "Developed PLSQL Procedures Functions Cursors",
        "SDLC",
        "NetBeans",
        "Builtin",
        "VPC",
        "CORE",
        "Oracle 10g11",
        "Github",
        "GitHub Excellent",
        "JIRA",
        "Tracked",
        "Shell",
        "Responsibilities Created",
        "USA",
        "the US Department",
        "Autosys",
        "Responsible for Unit System",
        "GO Lang",
        "Ubuntu Excellent communication Teamwork",
        "Oracle Database",
        "UAT",
        "CICD"
    ],
    "experience": "Experience in Object Oriented Design and Programming concepts in Python Good experience with GO Lang drivers to perform operations such as CRUD operations and writing complex queries with PostgreSQL and SQL Server Good experience with JDBC to perform operations such as CRUD operations and writing complex queries with Oracle 10g11 g Experience in developing REST web services and Go based REST clients for consuming the REST services using GO Lang Developed GO Lang based tokenization service for NPI and PCI data Experience in developing web services WSDL SOAP and REST and consuming web services with python programming language Good experience in using Shell scripting for automation by following Python PEP Hands on experience with AWS web services EC2 S3 ELBs CICD tools such as Jenkins Git and Tortoise SVN Expertise in full life cycle application development and also good experience in Unit testing and Test Driven Development TDD and Behavior driven Development Hands on experience with continuous integration and automation using Jenkins Hands on experience with version control tools such as SVN JIRA and GitHub Excellent Experience on various Python integrated IDEs such as Sublime Text Pycharm Eclipse and NetBeans Experience in developing web applications by following Model View Control MVC Architecture using server side applications Django Experience in working on different operating systemswindows Linux UNIX and Mac also strong development experience on Linux based operating systems such as Ubuntu Excellent communication Teamwork interpersonnel and presentation skills fast learner and organized selfstarter Work Experience Go Lang Developer Bank of America September 2015 to Present As per banking regulations related to AML every day data has to be feed to the Office of Foreign Assets Control OFAC of the US Department of the Treasury administers feed record In this project data from different line of business Home Loans Home Equity has to be extracted and sent it to the AML LOB in BOFA Roles Responsibilities Developed Microservices to extract the data from system of records into Enterprise Data warehousing Developed another microservice to extract AML data from Enterprise Data warehousing and push to external systems in JSON format All these batch microservices are written utilizing distributed message passing via Kafka message broker with JSON and CSV as data exchange formats Extensively used Gos approach to concurrency using goroutines channels and Wait Groups Hands on experience with version control used Github version control for GO Lang source code Designed complex application database SQL statements for querying updating and reporting using GO Database Connector Performed GO Lang unit testing and benchmarking for microservices Worked on integration of PostgreSQL database Developed a microservice that extracts data from PostgreSQL and generates a flat file and sends to AWS S3 using GO Experienced in Agile Methodologies and SCRUM Process Environment Go Lang Kafka JSON Github Unix and PostgreSQL Python Developer Data Engineering JP Morgan Chase NY April 2014 to August 2015 To make JPMC critical infrastructure fast reliable and agile company started a pilot project The main concentration is towards the corporate banking Daily transactions are sent as a batch file from the company to JPMC to make the transactions FreeBird processes these files and process the transactions from respective channels such as ACH EFT and EDI payments Roles Responsibilities Created microservices that has the capability to transfer the input files to machinereadable format and pass through respective payment channels Worked on microservices architecture written in Python utilizing distributed message passing via Kafka Wrote Python scripts to parse JSON documents CSV files and load the data in database Worked on integration of PostgreSQL from Python using psycopg2 package Created a connection to AWS S3 from Python using boto package Developed a plugin to automate data retrieval from external sources and pushing onto S3 buckets Created and enhanced existing automated solutions Used Numpy and pandas for Numerical and statistical analysis Tracked defects using JIRA and HPQC ALM and generated defect summary reports Involved in scrubbing project which updates the existing data with hashed values Used Github as a version control Responsible for unit testing Environment   PyCharm CentOSRedhat Linux PostgreSQL Kafka JSON Github Oracle PLSQL Developer Wells Fargo IA September 2012 to March 2014 Wells Fargo Bank is an American multinational banking and financial services holding company with operations around the world Wells Fargo is the fourth largest bank in the USA by assets and largest bank by market capitalization CORE program focuses on innovation in processes and technology to reduce cost and complexity better our skill and scale and enable a better response to market and volume changes CORE is a Home Lending project to modularize product rules This project required data movement from the online systems to different downstream departments for decision and reporting purposes using PLSQL Autosys PERL and Data stage Roles Responsibilities Analyzing user requirements and defining functional specifications Coordinated with the architects to make sure that all the Demand and Change Requests have been covered for that release Redesigned existing data model to eliminate the need for creating individual files for every subject area Developed PLSQL Procedures Functions Cursors and Packages Views and Materialized Views with fast and incremental Refresh Rates Working on PLSQL Implicit Explicit Cursors and created Triggers Used SCN System Change Number to eliminate the need for staging schema Extensively used Global Temporary Tables to load the required data set to increase the performance Extensively used materialized views pragma autonomous transactions object types table functions and pipelined functions to implement business logic effectively Used web builder to deploy and test the code base for every release to database Created JILS shell scripts to schedule and automate jobs in Autosys environment Responsible for Unit System and UAT testing the data and provided the test evidence reports Environment Oracle Database 11g10 g TOAD UNIX PUTTY PVCS WinSCP UNIX PLSQL UNIX Windows NTXP Skills SQL 3 years UNIX 3 years AWS 3 years INTEGRATION 3 years INTEGRATOR 3 years Additional Information TECHNICAL SKILLS Operating Systems Unix Linux Windows and Mac Programming Languages GO Lang Python and PLSQL Databases Oracle 1011 g MySQL SQL Server and PostgreSQL Tools Intellij PyCharm FileZilla PLSQL Developer and TOAD Integration Tools Jenkins Sonar Cube and Web Builder Version Control GitHub and SVN Defect Tracking JIRA Git and VersionOne Cloud AWS EC2 S3 ELB and VPC",
    "extracted_keywords": [
        "Lang",
        "Developer",
        "Go",
        "Lang",
        "span",
        "lDeveloperspan",
        "Go",
        "Lang",
        "Developer",
        "Bank",
        "America",
        "years",
        "Data",
        "Engineering",
        "experience",
        "domain",
        "expert",
        "GO",
        "Lang",
        "Python",
        "phases",
        "SDLC",
        "analysis",
        "Design",
        "development",
        "testing",
        "maintenance",
        "documentation",
        "applications",
        "hands",
        "experience",
        "GO",
        "Lang",
        "Builtin",
        "concurrency",
        "features",
        "goroutines",
        "channels",
        "statement",
        "experience",
        "Microservices",
        "Docker",
        "Mesos",
        "GO",
        "Lang",
        "Python",
        "Experience",
        "Object",
        "Oriented",
        "Design",
        "Programming",
        "concepts",
        "Python",
        "experience",
        "GO",
        "Lang",
        "drivers",
        "operations",
        "CRUD",
        "operations",
        "queries",
        "PostgreSQL",
        "SQL",
        "Server",
        "Good",
        "experience",
        "JDBC",
        "operations",
        "CRUD",
        "operations",
        "queries",
        "Oracle",
        "g",
        "Experience",
        "REST",
        "web",
        "services",
        "REST",
        "clients",
        "REST",
        "services",
        "GO",
        "Lang",
        "Developed",
        "GO",
        "Lang",
        "tokenization",
        "service",
        "NPI",
        "data",
        "Experience",
        "web",
        "services",
        "WSDL",
        "SOAP",
        "REST",
        "web",
        "services",
        "python",
        "programming",
        "language",
        "experience",
        "Shell",
        "scripting",
        "automation",
        "Python",
        "PEP",
        "Hands",
        "experience",
        "AWS",
        "web",
        "services",
        "EC2",
        "S3",
        "ELBs",
        "CICD",
        "tools",
        "Jenkins",
        "Git",
        "Tortoise",
        "SVN",
        "Expertise",
        "life",
        "cycle",
        "application",
        "development",
        "experience",
        "Unit",
        "testing",
        "Test",
        "Driven",
        "Development",
        "TDD",
        "Behavior",
        "Development",
        "Hands",
        "experience",
        "integration",
        "automation",
        "Jenkins",
        "Hands",
        "experience",
        "version",
        "control",
        "tools",
        "SVN",
        "JIRA",
        "GitHub",
        "Excellent",
        "Experience",
        "Python",
        "IDEs",
        "Sublime",
        "Text",
        "Pycharm",
        "Eclipse",
        "NetBeans",
        "Experience",
        "web",
        "applications",
        "Model",
        "View",
        "Control",
        "MVC",
        "Architecture",
        "server",
        "side",
        "applications",
        "Django",
        "Experience",
        "operating",
        "systemswindows",
        "Linux",
        "UNIX",
        "Mac",
        "development",
        "experience",
        "Linux",
        "operating",
        "systems",
        "Ubuntu",
        "Excellent",
        "communication",
        "Teamwork",
        "interpersonnel",
        "presentation",
        "skills",
        "learner",
        "selfstarter",
        "Work",
        "Experience",
        "Lang",
        "Developer",
        "Bank",
        "America",
        "September",
        "Present",
        "banking",
        "regulations",
        "AML",
        "day",
        "data",
        "feed",
        "Office",
        "Foreign",
        "Assets",
        "Control",
        "OFAC",
        "US",
        "Department",
        "Treasury",
        "administers",
        "record",
        "project",
        "data",
        "line",
        "business",
        "Home",
        "Loans",
        "Home",
        "Equity",
        "AML",
        "LOB",
        "BOFA",
        "Roles",
        "Responsibilities",
        "Microservices",
        "data",
        "system",
        "records",
        "Enterprise",
        "Data",
        "warehousing",
        "microservice",
        "AML",
        "data",
        "Enterprise",
        "Data",
        "warehousing",
        "systems",
        "format",
        "batch",
        "microservices",
        "message",
        "Kafka",
        "message",
        "broker",
        "JSON",
        "CSV",
        "data",
        "exchange",
        "formats",
        "Gos",
        "approach",
        "concurrency",
        "goroutines",
        "channels",
        "Groups",
        "Hands",
        "experience",
        "version",
        "control",
        "Github",
        "version",
        "control",
        "GO",
        "Lang",
        "source",
        "code",
        "application",
        "database",
        "SQL",
        "statements",
        "reporting",
        "GO",
        "Database",
        "Connector",
        "Performed",
        "GO",
        "Lang",
        "unit",
        "testing",
        "microservices",
        "integration",
        "PostgreSQL",
        "database",
        "microservice",
        "data",
        "PostgreSQL",
        "file",
        "AWS",
        "S3",
        "GO",
        "Agile",
        "Methodologies",
        "SCRUM",
        "Process",
        "Environment",
        "Lang",
        "Kafka",
        "Github",
        "Unix",
        "PostgreSQL",
        "Python",
        "Developer",
        "Data",
        "Engineering",
        "JP",
        "Morgan",
        "Chase",
        "NY",
        "April",
        "August",
        "JPMC",
        "infrastructure",
        "company",
        "project",
        "concentration",
        "banking",
        "Daily",
        "transactions",
        "batch",
        "file",
        "company",
        "JPMC",
        "transactions",
        "FreeBird",
        "files",
        "transactions",
        "channels",
        "ACH",
        "EFT",
        "EDI",
        "payments",
        "Roles",
        "Responsibilities",
        "microservices",
        "capability",
        "input",
        "files",
        "format",
        "payment",
        "channels",
        "microservices",
        "architecture",
        "Python",
        "message",
        "Kafka",
        "Wrote",
        "Python",
        "scripts",
        "JSON",
        "documents",
        "CSV",
        "files",
        "data",
        "database",
        "integration",
        "PostgreSQL",
        "Python",
        "package",
        "connection",
        "AWS",
        "S3",
        "Python",
        "boto",
        "package",
        "plugin",
        "data",
        "retrieval",
        "sources",
        "S3",
        "buckets",
        "solutions",
        "Numpy",
        "Numerical",
        "analysis",
        "defects",
        "JIRA",
        "ALM",
        "summary",
        "reports",
        "scrubbing",
        "project",
        "data",
        "values",
        "Github",
        "version",
        "control",
        "unit",
        "testing",
        "Environment",
        "PyCharm",
        "CentOSRedhat",
        "Linux",
        "PostgreSQL",
        "Kafka",
        "JSON",
        "Github",
        "Oracle",
        "PLSQL",
        "Developer",
        "Wells",
        "Fargo",
        "IA",
        "September",
        "March",
        "Wells",
        "Fargo",
        "Bank",
        "banking",
        "services",
        "company",
        "operations",
        "world",
        "Wells",
        "Fargo",
        "bank",
        "USA",
        "assets",
        "bank",
        "market",
        "capitalization",
        "program",
        "innovation",
        "processes",
        "technology",
        "cost",
        "complexity",
        "skill",
        "scale",
        "response",
        "market",
        "volume",
        "changes",
        "CORE",
        "Home",
        "Lending",
        "project",
        "product",
        "rules",
        "project",
        "data",
        "movement",
        "systems",
        "departments",
        "decision",
        "reporting",
        "purposes",
        "PLSQL",
        "Autosys",
        "PERL",
        "Data",
        "stage",
        "Roles",
        "Responsibilities",
        "user",
        "requirements",
        "specifications",
        "architects",
        "Demand",
        "Change",
        "Requests",
        "release",
        "data",
        "model",
        "need",
        "files",
        "area",
        "Developed",
        "PLSQL",
        "Procedures",
        "Functions",
        "Cursors",
        "Packages",
        "Views",
        "Views",
        "Refresh",
        "Rates",
        "PLSQL",
        "Implicit",
        "Explicit",
        "Cursors",
        "Triggers",
        "SCN",
        "System",
        "Change",
        "Number",
        "need",
        "schema",
        "Global",
        "Temporary",
        "Tables",
        "data",
        "performance",
        "views",
        "pragma",
        "transactions",
        "object",
        "types",
        "table",
        "functions",
        "functions",
        "business",
        "logic",
        "web",
        "builder",
        "code",
        "base",
        "release",
        "database",
        "shell",
        "scripts",
        "schedule",
        "jobs",
        "Autosys",
        "environment",
        "Unit",
        "System",
        "UAT",
        "data",
        "test",
        "evidence",
        "Environment",
        "Oracle",
        "Database",
        "g",
        "TOAD",
        "UNIX",
        "PUTTY",
        "PVCS",
        "WinSCP",
        "UNIX",
        "PLSQL",
        "UNIX",
        "Windows",
        "NTXP",
        "Skills",
        "SQL",
        "years",
        "UNIX",
        "years",
        "AWS",
        "years",
        "INTEGRATION",
        "years",
        "INTEGRATOR",
        "years",
        "Information",
        "TECHNICAL",
        "SKILLS",
        "Operating",
        "Systems",
        "Unix",
        "Linux",
        "Windows",
        "Mac",
        "Programming",
        "Languages",
        "Lang",
        "Python",
        "PLSQL",
        "Oracle",
        "g",
        "MySQL",
        "SQL",
        "Server",
        "PostgreSQL",
        "Tools",
        "Intellij",
        "PyCharm",
        "FileZilla",
        "PLSQL",
        "Developer",
        "TOAD",
        "Integration",
        "Tools",
        "Jenkins",
        "Sonar",
        "Cube",
        "Web",
        "Builder",
        "Version",
        "Control",
        "GitHub",
        "SVN",
        "Defect",
        "Tracking",
        "JIRA",
        "Git",
        "VersionOne",
        "Cloud",
        "AWS",
        "EC2",
        "S3",
        "ELB",
        "VPC"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T23:13:35.785148",
    "resume_data": "Go Lang Developer Go Lang span lDeveloperspan Go Lang Developer Bank of America 4 years of strong Data Engineering experience in financial domain expert in using GO Lang and Python Involved in all phases of SDLC analysis Design development testing maintenance and documentation of different applications Good hands on experience with GO Lang and its Builtin concurrency features such as goroutines channels and select statement Strong experience in developing Microservices using Docker Mesos GO Lang and Python Experience in Object Oriented Design and Programming concepts in Python Good experience with GO Lang drivers to perform operations such as CRUD operations and writing complex queries with PostgreSQL and SQL Server Good experience with JDBC to perform operations such as CRUD operations and writing complex queries with Oracle 10g11g Experience in developing REST web services and Go based REST clients for consuming the REST services using GO Lang Developed GO Lang based tokenization service for NPI and PCI data Experience in developing web services WSDL SOAP and REST and consuming web services with python programming language Good experience in using Shell scripting for automation by following Python PEP Hands on experience with AWS web services EC2 S3 ELBs CICD tools such as Jenkins Git and Tortoise SVN Expertise in full life cycle application development and also good experience in Unit testing and Test Driven Development TDD and Behavior driven Development Hands on experience with continuous integration and automation using Jenkins Hands on experience with version control tools such as SVN JIRA and GitHub Excellent Experience on various Python integrated IDEs such as Sublime Text Pycharm Eclipse and NetBeans Experience in developing web applications by following Model View Control MVC Architecture using server side applications Django Experience in working on different operating systemswindows Linux UNIX and Mac also strong development experience on Linux based operating systems such as Ubuntu Excellent communication Teamwork interpersonnel and presentation skills fast learner and organized selfstarter Work Experience Go Lang Developer Bank of America September 2015 to Present As per banking regulations related to AML every day data has to be feed to the Office of Foreign Assets Control OFAC of the US Department of the Treasury administers feed record In this project data from different line of business Home Loans Home Equity has to be extracted and sent it to the AML LOB in BOFA Roles Responsibilities Developed Microservices to extract the data from system of records into Enterprise Data warehousing Developed another microservice to extract AML data from Enterprise Data warehousing and push to external systems in JSON format All these batch microservices are written utilizing distributed message passing via Kafka message broker with JSON and CSV as data exchange formats Extensively used Gos approach to concurrency using goroutines channels and Wait Groups Hands on experience with version control used Github version control for GO Lang source code Designed complex application database SQL statements for querying updating and reporting using GO Database Connector Performed GO Lang unit testing and benchmarking for microservices Worked on integration of PostgreSQL database Developed a microservice that extracts data from PostgreSQL and generates a flat file and sends to AWS S3 using GO Experienced in Agile Methodologies and SCRUM Process Environment Go Lang Kafka JSON Github Unix and PostgreSQL Python Developer Data Engineering JP Morgan Chase NY April 2014 to August 2015 To make JPMC critical infrastructure fast reliable and agile company started a pilot project The main concentration is towards the corporate banking Daily transactions are sent as a batch file from the company to JPMC to make the transactions FreeBird processes these files and process the transactions from respective channels such as ACH EFT and EDI payments Roles Responsibilities Created microservices that has the capability to transfer the input files to machinereadable format and pass through respective payment channels Worked on microservices architecture written in Python utilizing distributed message passing via Kafka Wrote Python scripts to parse JSON documents CSV files and load the data in database Worked on integration of PostgreSQL from Python using psycopg2 package Created a connection to AWS S3 from Python using boto package Developed a plugin to automate data retrieval from external sources and pushing onto S3 buckets Created and enhanced existing automated solutions Used Numpy and pandas for Numerical and statistical analysis Tracked defects using JIRA and HPQC ALM and generated defect summary reports Involved in scrubbing project which updates the existing data with hashed values Used Github as a version control Responsible for unit testing Environment Python27 PyCharm CentOSRedhat Linux PostgreSQL Kafka JSON Github Oracle PLSQL Developer Wells Fargo IA September 2012 to March 2014 Wells Fargo Bank is an American multinational banking and financial services holding company with operations around the world Wells Fargo is the fourth largest bank in the USA by assets and largest bank by market capitalization CORE program focuses on innovation in processes and technology to reduce cost and complexity better our skill and scale and enable a better response to market and volume changes CORE is a Home Lending project to modularize product rules This project required data movement from the online systems to different downstream departments for decision and reporting purposes using PLSQL Autosys PERL and Data stage Roles Responsibilities Analyzing user requirements and defining functional specifications Coordinated with the architects to make sure that all the Demand and Change Requests have been covered for that release Redesigned existing data model to eliminate the need for creating individual files for every subject area Developed PLSQL Procedures Functions Cursors and Packages Views and Materialized Views with fast and incremental Refresh Rates Working on PLSQL Implicit Explicit Cursors and created Triggers Used SCN System Change Number to eliminate the need for staging schema Extensively used Global Temporary Tables to load the required data set to increase the performance Extensively used materialized views pragma autonomous transactions object types table functions and pipelined functions to implement business logic effectively Used web builder to deploy and test the code base for every release to database Created JILS shell scripts to schedule and automate jobs in Autosys environment Responsible for Unit System and UAT testing the data and provided the test evidence reports Environment Oracle Database 11g10g TOAD UNIX PUTTY PVCS WinSCP UNIX PLSQL UNIX Windows NTXP Skills SQL 3 years UNIX 3 years AWS 3 years INTEGRATION 3 years INTEGRATOR 3 years Additional Information TECHNICAL SKILLS Operating Systems Unix Linux Windows and Mac Programming Languages GO Lang Python and PLSQL Databases Oracle 1011g MySQL SQL Server and PostgreSQL Tools Intellij PyCharm FileZilla PLSQL Developer and TOAD Integration Tools Jenkins Sonar Cube and Web Builder Version Control GitHub and SVN Defect Tracking JIRA Git and VersionOne Cloud AWS EC2 S3 ELB and VPC",
    "unique_id": "f0b670d2-c890-4bcf-aed4-d2a8b52ed6ce"
}