{
    "clean_data": "Sr Python Developer Sr span lPythonspan span lDeveloperspan Sr Python Developer Charter Communications Over 41 years of IT Experience in design development testing and implementation of various standalone and clientserverbased enterprise applications Hands on experience in developing web applications implementing Model View Control MVC architecture using Django Flask web application frameworks Exposure in working for developing a portal to manage and entities in a content management system using Flask Extensive experience of objectoriented programming OOP concepts using Python Experienced with all aspects of technology projects including Business Requirements Technical Architecture Design Specification Development and Deployment Experienced in developing webbased applications using Python 23 Django 1413 Vue JS JAVA CSS Bootstrap HTML JavaScript and AJAX Experienced in working with Python ORM Libraries including Django ORM Proficient in NoSQL SQLite databases with Python and JavaScript Understanding of Python Best Practices PEP8 Experienced in creating web applications with Python Flask Created RESTful APIs using Python Experience in configuring EC2 Instances for app deployment in production Designed applications implementing MVC architecture Django frame work Experienced with Core Python and Django More than 4 years of Professional Web Apps development experience using Django inclusive of experience in UI using JavaScript NodeJSAWSCloud Developed Views and Templates with Django view controller and template language to create an easily accessible website interface for users Experienced in writing the python scripts and tracking customer development Familiarity with implementing Model view control architecture using Django for webbased applications Creating repositories in GitHub for version controlling Setting up databases in AWS using RDS and configuring instance backups to S3 bucket Experience in setting up Elastic Load Balancers ELBs and Auto Scaling groups on Production EC2 Instances to build FaultTolerant and High Availability applications Experienced in Amazon Web Services AWS Cloud services such as EC2 EBS S3 VPC Cloud Watch Elastic Load Balancer Good knowledge on hosting Python applications using WSGI modules Worked in AGILE methodologies and various phases of Software Development Life Cycle SDLC Good Experience in requirement gathering use case development Business Process Modeling extensively used UML to develop various use cases class diagrams and sequence diagrams Very strong experience writing APIs and Web Services in Python Excellent communication skills team player quick learner organized and selfmotivated Worked in fast pace Agile environments and actively participated in Scrum and Sprint meetings Experienced in working with and administering different operating systems Windows UNIXLINUX and strong knowledge of Linux systems administration and operations Work Experience Sr Python Developer Charter Communications Denver CO July 2018 to Present Responsibilities Worked in a team involved in developing the UI layout and frontend programming HTML for web application that matches requirements of the company Wrote Python routines to log into the websites and fetch data for selected options Excellent Coordination in project activities and ensure that all project phases are followed and documented properly Created the Automation scripts using Python for testing applications as well as the integration of these application APIs UIs based on REST calls using Python phrasing the JSON responses Utilized PyTest the Python unit test framework for all Python applications Wrote Python OO Design code for manufacturing quality monitoring logging and debugging code optimization Involved and played a leading role in database migration projects from Oracle to MongoDB Deployment and Build of various environments including Linux and UNIX Designed the frontend applications user interactive UI web pages using web technologies like HTML and CSS Developed nonfunctional HTML CSS pages from the mockups and involved in UI review with UI architect and Business Units Rewrite existing Python Django module to deliver certain format of data Improved user experience by creating and designing new web components and features Generated Python Django forms to record data of online users Extensive use of version controller Team Foundation Server TFS Designing and deploying scalable highly available and fault tolerant systems on AWS and developed programs using Python Shell Java Scripts and Restful APIs developed for NodeJS applications Configuring IAM roles for EC2 instances in ELB and assign them policies granting specific level access to S3 buckets by customizing JSON template designed Stacks using Amazon Cloud Formation templates to launch Infrastructure Used Code Commit to host secure scalable private Git repositories Launching Amazon EC2 Cloud Instances and Configuring launched instances with respect to specific applications Build application and database servers using AWS EC2 Handled potential points of failure through error handling and communication of failure Anticipated potential parts of failure database communication points file system errors Troubleshoot the process execution and worked with other team members to correct them Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Followed MVC Structure to develop Application Handling cross browserplatform compatibility issues IE Firefox and Chrome on both Windows Managed application state using server and clientbased State Management options Environment Python Django SQL AJAX REST JavaScript AWS UNIX HTML Sublime Text Python Developer Department of Health and Human Services NC January 2017 to June 2018 Responsibilities Implemented front end for third party Web service using HTML AJAX JSON and JavaScript Developed the backend web services using Python and Django REST framework Designed added and maintained new database tables for new functions Analyzes and improves application efficiency by optimizing queries and contents for DjangoFlask Used Django framework to design and develop the application Used HTML5CSS Bootstrap and JavaScript for UI development Developed Python scripts using multithreading module Used Restful APIs with JSON XML to extract Network traffic information Created the Automation scripts using Python for testing applications as well as the integration of these application APIs UIs based on REST calls using Python phrasing the JSON responses Used JSON based and RESTful API for information extraction Designed and developed data management system using MySQL Used GitHub for Python source code version control Developed UI using HTML JavaScript and JSP and developed Business Logic and Interfacing components Using Business Objects XML and JDBC Designed userinterface and checking validations using JavaScript Managed connectivity using JDBC for queryinginserting data management including triggers and stored procedures Worked as a developer on Core Java Collections and multithreading Implemented Master Eligibility Verification model Allowed systems perform all eligibility Managed code versioning with GitHub and deployment to staging and production servers Implemented DAO database access objects Associated with development of Web Services using RestAPI for sending and getting data from the external interface in the JSON format Designed and developed reporting modules for the application and implemented the pagination Worked on operating systems like Linux MAC Windows Associated with code review and code test Responsible for new development and change request within the scope of the project Environment Python JavaScript SQL Ajax HTML CSS Linux Web services Python Developer Trinity Health Organization Livonia MI August 2015 to December 2016 Responsibilities Extensively used Interceptors validators actions using Django17 framework Extensively used Django Technologies which includes forms templates and ORM for communication with Database in different forms Involved in the analysis design and development and testing phases of Software Development Life Cycle SDLC Used Agile SCRUM methodologies for Software Development Developed the applications using Django 17 MTV Framework which is based on Model Template View design pattern Developed Custom Tags to simplify the template code Designed UI screens using templates Ajax HTML and JSON Used JavaScript for clientside validation Developed the database tier using Django ORM Used RestAPI for sending and getting data from different applications using JSON such as task details from Work distribution Used Django framework for creating the Web Services Used JavaScriptAjax and Bootstrap to develop Interactive Webpages and Single Page Applications Used Pylint framework for unit testing of applications Developed restful Webservices using Django Rest framework in Python Used GIT for version control and used PyCharm for development Participated in User Acceptance Test Requirements Gathering etc Environment Python 27 Django 17 Django Rest framework Rest JSON JavaScript AJAX HTML CSS Bootstrap GIT Pylint MySQL PyCharm Windows Education Bachelors Skills Visual studio Django Git Html Javascript Bootstrap Nodejs Ajax Css Web server Mysql Linux Java Mongodb Version control Additional Information TECHNICAL SKILLS Operating Systems Windows Linux Languages JAVA Python2x3x Shell Script Framework Django Web framework Databases MySQL Sqlite3 MongoDB Web Technologies HTML CSS JavaScript AJAX Bootstrap Code version control tool GIT Web Server Nodejs Tools Framework Visual Studio PyCharm",
    "entities": [
        "Application Handling",
        "CSS Developed",
        "ORM",
        "Additional Information TECHNICAL SKILLS Operating Systems",
        "Python Developer Trinity Health Organization Livonia MI",
        "MTV Framework",
        "Core Python",
        "Django ORM Proficient",
        "Created the Automation",
        "Software Development Life Cycle SDLC Good Experience",
        "Model View Control MVC",
        "Amazon",
        "Used HTML5CSS Bootstrap",
        "HTML Sublime Text Python Developer Department of Health and Human Services",
        "CSS Bootstrap",
        "Python Experienced",
        "NC",
        "Django",
        "Business Units Rewrite",
        "UML",
        "Developed Views",
        "AWS EC2 Handled",
        "AGILE",
        "Linux MAC Windows",
        "Linux",
        "HTML AJAX JSON",
        "JSP",
        "Software Development Life Cycle SDLC Used Agile",
        "Worked",
        "PyCharm Windows Education",
        "Nodejs Tools Framework Visual Studio",
        "RDS",
        "Allowed",
        "Team Foundation",
        "MVC",
        "IE Firefox",
        "Agile",
        "Python Flask Created",
        "Business Logic and Interfacing",
        "Associated",
        "API",
        "Database",
        "Python Used GIT",
        "AWS",
        "Oracle",
        "State Management options Environment Python Django SQL AJAX",
        "ELB",
        "HTML",
        "Flask Extensive",
        "Python ORM Libraries",
        "GitHub",
        "lPythonspan",
        "Python Django",
        "Interactive Webpages",
        "Implemented Master Eligibility Verification",
        "AJAX Experienced",
        "Amazon Web Services AWS Cloud",
        "Designed UI",
        "Shell Script Framework Django Web",
        "Django Technologies",
        "JAVA",
        "Infrastructure Used Code Commit",
        "Performed",
        "Windows UNIXLINUX",
        "JavaScript",
        "UI",
        "Network",
        "Present Responsibilities Worked",
        "Core Java Collections",
        "REST",
        "Developed UI",
        "Model",
        "Business Requirements Technical Architecture Design Specification Development and Deployment Experienced",
        "Sprint",
        "Stacks",
        "Developed Custom Tags",
        "Troubleshoot",
        "JSON XML"
    ],
    "experience": "Experience in design development testing and implementation of various standalone and clientserverbased enterprise applications Hands on experience in developing web applications implementing Model View Control MVC architecture using Django Flask web application frameworks Exposure in working for developing a portal to manage and entities in a content management system using Flask Extensive experience of objectoriented programming OOP concepts using Python Experienced with all aspects of technology projects including Business Requirements Technical Architecture Design Specification Development and Deployment Experienced in developing webbased applications using Python 23 Django 1413 Vue JS JAVA CSS Bootstrap HTML JavaScript and AJAX Experienced in working with Python ORM Libraries including Django ORM Proficient in NoSQL SQLite databases with Python and JavaScript Understanding of Python Best Practices PEP8 Experienced in creating web applications with Python Flask Created RESTful APIs using Python Experience in configuring EC2 Instances for app deployment in production Designed applications implementing MVC architecture Django frame work Experienced with Core Python and Django More than 4 years of Professional Web Apps development experience using Django inclusive of experience in UI using JavaScript NodeJSAWSCloud Developed Views and Templates with Django view controller and template language to create an easily accessible website interface for users Experienced in writing the python scripts and tracking customer development Familiarity with implementing Model view control architecture using Django for webbased applications Creating repositories in GitHub for version controlling Setting up databases in AWS using RDS and configuring instance backups to S3 bucket Experience in setting up Elastic Load Balancers ELBs and Auto Scaling groups on Production EC2 Instances to build FaultTolerant and High Availability applications Experienced in Amazon Web Services AWS Cloud services such as EC2 EBS S3 VPC Cloud Watch Elastic Load Balancer Good knowledge on hosting Python applications using WSGI modules Worked in AGILE methodologies and various phases of Software Development Life Cycle SDLC Good Experience in requirement gathering use case development Business Process Modeling extensively used UML to develop various use cases class diagrams and sequence diagrams Very strong experience writing APIs and Web Services in Python Excellent communication skills team player quick learner organized and selfmotivated Worked in fast pace Agile environments and actively participated in Scrum and Sprint meetings Experienced in working with and administering different operating systems Windows UNIXLINUX and strong knowledge of Linux systems administration and operations Work Experience Sr Python Developer Charter Communications Denver CO July 2018 to Present Responsibilities Worked in a team involved in developing the UI layout and frontend programming HTML for web application that matches requirements of the company Wrote Python routines to log into the websites and fetch data for selected options Excellent Coordination in project activities and ensure that all project phases are followed and documented properly Created the Automation scripts using Python for testing applications as well as the integration of these application APIs UIs based on REST calls using Python phrasing the JSON responses Utilized PyTest the Python unit test framework for all Python applications Wrote Python OO Design code for manufacturing quality monitoring logging and debugging code optimization Involved and played a leading role in database migration projects from Oracle to MongoDB Deployment and Build of various environments including Linux and UNIX Designed the frontend applications user interactive UI web pages using web technologies like HTML and CSS Developed nonfunctional HTML CSS pages from the mockups and involved in UI review with UI architect and Business Units Rewrite existing Python Django module to deliver certain format of data Improved user experience by creating and designing new web components and features Generated Python Django forms to record data of online users Extensive use of version controller Team Foundation Server TFS Designing and deploying scalable highly available and fault tolerant systems on AWS and developed programs using Python Shell Java Scripts and Restful APIs developed for NodeJS applications Configuring IAM roles for EC2 instances in ELB and assign them policies granting specific level access to S3 buckets by customizing JSON template designed Stacks using Amazon Cloud Formation templates to launch Infrastructure Used Code Commit to host secure scalable private Git repositories Launching Amazon EC2 Cloud Instances and Configuring launched instances with respect to specific applications Build application and database servers using AWS EC2 Handled potential points of failure through error handling and communication of failure Anticipated potential parts of failure database communication points file system errors Troubleshoot the process execution and worked with other team members to correct them Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Followed MVC Structure to develop Application Handling cross browserplatform compatibility issues IE Firefox and Chrome on both Windows Managed application state using server and clientbased State Management options Environment Python Django SQL AJAX REST JavaScript AWS UNIX HTML Sublime Text Python Developer Department of Health and Human Services NC January 2017 to June 2018 Responsibilities Implemented front end for third party Web service using HTML AJAX JSON and JavaScript Developed the backend web services using Python and Django REST framework Designed added and maintained new database tables for new functions Analyzes and improves application efficiency by optimizing queries and contents for DjangoFlask Used Django framework to design and develop the application Used HTML5CSS Bootstrap and JavaScript for UI development Developed Python scripts using multithreading module Used Restful APIs with JSON XML to extract Network traffic information Created the Automation scripts using Python for testing applications as well as the integration of these application APIs UIs based on REST calls using Python phrasing the JSON responses Used JSON based and RESTful API for information extraction Designed and developed data management system using MySQL Used GitHub for Python source code version control Developed UI using HTML JavaScript and JSP and developed Business Logic and Interfacing components Using Business Objects XML and JDBC Designed userinterface and checking validations using JavaScript Managed connectivity using JDBC for queryinginserting data management including triggers and stored procedures Worked as a developer on Core Java Collections and multithreading Implemented Master Eligibility Verification model Allowed systems perform all eligibility Managed code versioning with GitHub and deployment to staging and production servers Implemented DAO database access objects Associated with development of Web Services using RestAPI for sending and getting data from the external interface in the JSON format Designed and developed reporting modules for the application and implemented the pagination Worked on operating systems like Linux MAC Windows Associated with code review and code test Responsible for new development and change request within the scope of the project Environment Python JavaScript SQL Ajax HTML CSS Linux Web services Python Developer Trinity Health Organization Livonia MI August 2015 to December 2016 Responsibilities Extensively used Interceptors validators actions using Django17 framework Extensively used Django Technologies which includes forms templates and ORM for communication with Database in different forms Involved in the analysis design and development and testing phases of Software Development Life Cycle SDLC Used Agile SCRUM methodologies for Software Development Developed the applications using Django 17 MTV Framework which is based on Model Template View design pattern Developed Custom Tags to simplify the template code Designed UI screens using templates Ajax HTML and JSON Used JavaScript for clientside validation Developed the database tier using Django ORM Used RestAPI for sending and getting data from different applications using JSON such as task details from Work distribution Used Django framework for creating the Web Services Used JavaScriptAjax and Bootstrap to develop Interactive Webpages and Single Page Applications Used Pylint framework for unit testing of applications Developed restful Webservices using Django Rest framework in Python Used GIT for version control and used PyCharm for development Participated in User Acceptance Test Requirements Gathering etc Environment Python 27 Django 17 Django Rest framework Rest JSON JavaScript AJAX HTML CSS Bootstrap GIT Pylint MySQL PyCharm Windows Education Bachelors Skills Visual studio Django Git Html Javascript Bootstrap Nodejs Ajax Css Web server Mysql Linux Java Mongodb Version control Additional Information TECHNICAL SKILLS Operating Systems Windows Linux Languages JAVA Python2x3x Shell Script Framework Django Web framework Databases MySQL Sqlite3 MongoDB Web Technologies HTML CSS JavaScript AJAX Bootstrap Code version control tool GIT Web Server Nodejs Tools Framework Visual Studio PyCharm",
    "extracted_keywords": [
        "Sr",
        "Python",
        "Developer",
        "Sr",
        "lPythonspan",
        "span",
        "lDeveloperspan",
        "Sr",
        "Python",
        "Developer",
        "Charter",
        "Communications",
        "years",
        "IT",
        "Experience",
        "design",
        "development",
        "testing",
        "implementation",
        "standalone",
        "enterprise",
        "applications",
        "Hands",
        "experience",
        "web",
        "applications",
        "Model",
        "View",
        "Control",
        "MVC",
        "architecture",
        "Django",
        "Flask",
        "web",
        "application",
        "frameworks",
        "Exposure",
        "portal",
        "entities",
        "content",
        "management",
        "system",
        "Flask",
        "experience",
        "programming",
        "OOP",
        "concepts",
        "Python",
        "aspects",
        "technology",
        "projects",
        "Business",
        "Requirements",
        "Technical",
        "Architecture",
        "Design",
        "Specification",
        "Development",
        "Deployment",
        "applications",
        "Python",
        "Django",
        "Vue",
        "JS",
        "CSS",
        "Bootstrap",
        "HTML",
        "JavaScript",
        "AJAX",
        "Python",
        "ORM",
        "Libraries",
        "Django",
        "ORM",
        "Proficient",
        "NoSQL",
        "databases",
        "Python",
        "JavaScript",
        "Understanding",
        "Python",
        "Best",
        "Practices",
        "PEP8",
        "web",
        "applications",
        "Python",
        "Flask",
        "APIs",
        "Python",
        "Experience",
        "EC2",
        "Instances",
        "deployment",
        "production",
        "applications",
        "MVC",
        "architecture",
        "Django",
        "frame",
        "work",
        "Core",
        "Python",
        "Django",
        "years",
        "Professional",
        "Web",
        "Apps",
        "development",
        "experience",
        "Django",
        "inclusive",
        "experience",
        "UI",
        "JavaScript",
        "Views",
        "Templates",
        "Django",
        "controller",
        "template",
        "language",
        "website",
        "interface",
        "users",
        "python",
        "scripts",
        "customer",
        "development",
        "Familiarity",
        "Model",
        "view",
        "control",
        "architecture",
        "Django",
        "applications",
        "repositories",
        "GitHub",
        "version",
        "databases",
        "AWS",
        "RDS",
        "instance",
        "backups",
        "S3",
        "bucket",
        "Experience",
        "Elastic",
        "Load",
        "Balancers",
        "ELBs",
        "Auto",
        "Scaling",
        "groups",
        "Production",
        "EC2",
        "Instances",
        "FaultTolerant",
        "Availability",
        "applications",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "Cloud",
        "services",
        "EC2",
        "EBS",
        "S3",
        "VPC",
        "Cloud",
        "Watch",
        "Elastic",
        "Load",
        "Balancer",
        "knowledge",
        "Python",
        "applications",
        "WSGI",
        "modules",
        "AGILE",
        "methodologies",
        "phases",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "SDLC",
        "Good",
        "Experience",
        "requirement",
        "gathering",
        "use",
        "case",
        "development",
        "Business",
        "Process",
        "Modeling",
        "UML",
        "use",
        "cases",
        "class",
        "diagrams",
        "sequence",
        "diagrams",
        "experience",
        "APIs",
        "Web",
        "Services",
        "Python",
        "Excellent",
        "communication",
        "skills",
        "team",
        "player",
        "learner",
        "Worked",
        "pace",
        "environments",
        "Scrum",
        "Sprint",
        "meetings",
        "operating",
        "systems",
        "Windows",
        "UNIXLINUX",
        "knowledge",
        "Linux",
        "systems",
        "administration",
        "operations",
        "Work",
        "Experience",
        "Sr",
        "Python",
        "Developer",
        "Charter",
        "Communications",
        "Denver",
        "CO",
        "July",
        "Present",
        "Responsibilities",
        "team",
        "UI",
        "layout",
        "frontend",
        "programming",
        "HTML",
        "web",
        "application",
        "requirements",
        "company",
        "Wrote",
        "Python",
        "websites",
        "data",
        "options",
        "Excellent",
        "Coordination",
        "project",
        "activities",
        "project",
        "phases",
        "Automation",
        "scripts",
        "Python",
        "testing",
        "applications",
        "integration",
        "application",
        "APIs",
        "UIs",
        "REST",
        "calls",
        "Python",
        "responses",
        "PyTest",
        "Python",
        "unit",
        "test",
        "framework",
        "Python",
        "applications",
        "Wrote",
        "Python",
        "OO",
        "Design",
        "code",
        "quality",
        "monitoring",
        "code",
        "optimization",
        "role",
        "database",
        "migration",
        "projects",
        "Oracle",
        "MongoDB",
        "Deployment",
        "Build",
        "environments",
        "Linux",
        "UNIX",
        "frontend",
        "applications",
        "user",
        "UI",
        "web",
        "pages",
        "web",
        "technologies",
        "HTML",
        "CSS",
        "Developed",
        "HTML",
        "CSS",
        "pages",
        "mockups",
        "UI",
        "review",
        "UI",
        "architect",
        "Business",
        "Units",
        "Rewrite",
        "Python",
        "Django",
        "module",
        "format",
        "data",
        "user",
        "experience",
        "web",
        "components",
        "features",
        "Python",
        "Django",
        "data",
        "users",
        "use",
        "version",
        "controller",
        "Team",
        "Foundation",
        "Server",
        "TFS",
        "Designing",
        "systems",
        "AWS",
        "programs",
        "Python",
        "Shell",
        "Java",
        "Scripts",
        "APIs",
        "NodeJS",
        "applications",
        "Configuring",
        "IAM",
        "roles",
        "EC2",
        "instances",
        "ELB",
        "policies",
        "level",
        "access",
        "S3",
        "buckets",
        "JSON",
        "template",
        "Stacks",
        "Amazon",
        "Cloud",
        "Formation",
        "Infrastructure",
        "Code",
        "Commit",
        "Git",
        "repositories",
        "Amazon",
        "EC2",
        "Cloud",
        "Instances",
        "Configuring",
        "instances",
        "respect",
        "applications",
        "Build",
        "application",
        "database",
        "servers",
        "AWS",
        "EC2",
        "points",
        "failure",
        "error",
        "handling",
        "communication",
        "failure",
        "parts",
        "failure",
        "database",
        "communication",
        "points",
        "file",
        "system",
        "errors",
        "process",
        "execution",
        "team",
        "members",
        "Performed",
        "troubleshooting",
        "Python",
        "bug",
        "fixes",
        "applications",
        "source",
        "data",
        "customers",
        "customer",
        "service",
        "team",
        "MVC",
        "Structure",
        "Application",
        "Handling",
        "cross",
        "browserplatform",
        "compatibility",
        "issues",
        "IE",
        "Firefox",
        "Chrome",
        "Windows",
        "application",
        "state",
        "server",
        "State",
        "Management",
        "options",
        "Environment",
        "Python",
        "Django",
        "SQL",
        "AJAX",
        "REST",
        "JavaScript",
        "UNIX",
        "HTML",
        "Sublime",
        "Text",
        "Python",
        "Developer",
        "Department",
        "Health",
        "Human",
        "Services",
        "NC",
        "January",
        "June",
        "Responsibilities",
        "end",
        "party",
        "Web",
        "service",
        "HTML",
        "AJAX",
        "JSON",
        "JavaScript",
        "web",
        "services",
        "Python",
        "Django",
        "REST",
        "framework",
        "database",
        "tables",
        "functions",
        "Analyzes",
        "application",
        "efficiency",
        "queries",
        "contents",
        "DjangoFlask",
        "Django",
        "framework",
        "application",
        "HTML5CSS",
        "Bootstrap",
        "JavaScript",
        "UI",
        "development",
        "Developed",
        "Python",
        "scripts",
        "module",
        "APIs",
        "JSON",
        "XML",
        "Network",
        "traffic",
        "information",
        "Automation",
        "scripts",
        "Python",
        "testing",
        "applications",
        "integration",
        "application",
        "APIs",
        "UIs",
        "REST",
        "calls",
        "Python",
        "responses",
        "JSON",
        "API",
        "information",
        "extraction",
        "data",
        "management",
        "system",
        "MySQL",
        "GitHub",
        "Python",
        "source",
        "code",
        "version",
        "control",
        "UI",
        "HTML",
        "JavaScript",
        "JSP",
        "Business",
        "Logic",
        "Interfacing",
        "components",
        "Business",
        "Objects",
        "XML",
        "JDBC",
        "userinterface",
        "validations",
        "JavaScript",
        "Managed",
        "connectivity",
        "JDBC",
        "data",
        "management",
        "triggers",
        "procedures",
        "developer",
        "Core",
        "Java",
        "Collections",
        "Implemented",
        "Master",
        "Eligibility",
        "Verification",
        "model",
        "systems",
        "eligibility",
        "Managed",
        "code",
        "GitHub",
        "deployment",
        "staging",
        "production",
        "servers",
        "DAO",
        "database",
        "access",
        "objects",
        "development",
        "Web",
        "Services",
        "RestAPI",
        "data",
        "interface",
        "format",
        "reporting",
        "modules",
        "application",
        "pagination",
        "operating",
        "systems",
        "Linux",
        "MAC",
        "Windows",
        "Associated",
        "code",
        "review",
        "code",
        "test",
        "development",
        "request",
        "scope",
        "project",
        "Environment",
        "Python",
        "JavaScript",
        "SQL",
        "Ajax",
        "HTML",
        "CSS",
        "Linux",
        "Web",
        "services",
        "Python",
        "Developer",
        "Trinity",
        "Health",
        "Organization",
        "Livonia",
        "MI",
        "August",
        "December",
        "Responsibilities",
        "Interceptors",
        "validators",
        "actions",
        "Django17",
        "framework",
        "Django",
        "Technologies",
        "forms",
        "templates",
        "ORM",
        "communication",
        "Database",
        "forms",
        "analysis",
        "design",
        "development",
        "testing",
        "phases",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "SDLC",
        "Agile",
        "SCRUM",
        "methodologies",
        "Software",
        "Development",
        "applications",
        "Django",
        "MTV",
        "Framework",
        "Model",
        "Template",
        "View",
        "design",
        "pattern",
        "Custom",
        "Tags",
        "template",
        "code",
        "UI",
        "screens",
        "templates",
        "Ajax",
        "HTML",
        "JSON",
        "JavaScript",
        "validation",
        "database",
        "tier",
        "Django",
        "ORM",
        "RestAPI",
        "data",
        "applications",
        "JSON",
        "task",
        "details",
        "Work",
        "distribution",
        "Django",
        "framework",
        "Web",
        "Services",
        "JavaScriptAjax",
        "Bootstrap",
        "Interactive",
        "Webpages",
        "Single",
        "Page",
        "Applications",
        "Pylint",
        "framework",
        "unit",
        "testing",
        "applications",
        "Webservices",
        "Django",
        "Rest",
        "framework",
        "Python",
        "GIT",
        "version",
        "control",
        "PyCharm",
        "development",
        "User",
        "Acceptance",
        "Test",
        "Requirements",
        "Environment",
        "Python",
        "Django",
        "Django",
        "Rest",
        "framework",
        "Rest",
        "JSON",
        "JavaScript",
        "AJAX",
        "HTML",
        "CSS",
        "Bootstrap",
        "GIT",
        "Pylint",
        "MySQL",
        "PyCharm",
        "Windows",
        "Education",
        "Bachelors",
        "Skills",
        "Visual",
        "studio",
        "Django",
        "Git",
        "Html",
        "Javascript",
        "Bootstrap",
        "Nodejs",
        "Ajax",
        "Css",
        "Web",
        "server",
        "Mysql",
        "Linux",
        "Java",
        "Mongodb",
        "Version",
        "control",
        "Additional",
        "Information",
        "TECHNICAL",
        "SKILLS",
        "Operating",
        "Systems",
        "Windows",
        "Linux",
        "Languages",
        "Python2x3x",
        "Shell",
        "Script",
        "Framework",
        "Django",
        "Web",
        "framework",
        "MySQL",
        "Sqlite3",
        "MongoDB",
        "Web",
        "Technologies",
        "HTML",
        "CSS",
        "JavaScript",
        "AJAX",
        "Bootstrap",
        "Code",
        "version",
        "control",
        "tool",
        "GIT",
        "Web",
        "Server",
        "Nodejs",
        "Tools",
        "Framework",
        "Visual",
        "Studio",
        "PyCharm"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T20:13:51.316201",
    "resume_data": "Sr Python Developer Sr span lPythonspan span lDeveloperspan Sr Python Developer Charter Communications Over 41 years of IT Experience in design development testing and implementation of various standalone and clientserverbased enterprise applications Hands on experience in developing web applications implementing Model View Control MVC architecture using Django Flask web application frameworks Exposure in working for developing a portal to manage and entities in a content management system using Flask Extensive experience of objectoriented programming OOP concepts using Python Experienced with all aspects of technology projects including Business Requirements Technical Architecture Design Specification Development and Deployment Experienced in developing webbased applications using Python 23 Django 1413 Vue JS JAVA CSS Bootstrap HTML JavaScript and AJAX Experienced in working with Python ORM Libraries including Django ORM Proficient in NoSQL SQLite databases with Python and JavaScript Understanding of Python Best Practices PEP8 Experienced in creating web applications with Python Flask Created RESTful APIs using Python Experience in configuring EC2 Instances for app deployment in production Designed applications implementing MVC architecture Django frame work Experienced with Core Python and Django More than 4 years of Professional Web Apps development experience using Django inclusive of experience in UI using JavaScript NodeJSAWSCloud Developed Views and Templates with Django view controller and template language to create an easily accessible website interface for users Experienced in writing the python scripts and tracking customer development Familiarity with implementing Model view control architecture using Django for webbased applications Creating repositories in GitHub for version controlling Setting up databases in AWS using RDS and configuring instance backups to S3 bucket Experience in setting up Elastic Load Balancers ELBs and Auto Scaling groups on Production EC2 Instances to build FaultTolerant and High Availability applications Experienced in Amazon Web Services AWS Cloud services such as EC2 EBS S3 VPC Cloud Watch Elastic Load Balancer Good knowledge on hosting Python applications using WSGI modules Worked in AGILE methodologies and various phases of Software Development Life Cycle SDLC Good Experience in requirement gathering use case development Business Process Modeling extensively used UML to develop various use cases class diagrams and sequence diagrams Very strong experience writing APIs and Web Services in Python Excellent communication skills team player quick learner organized and selfmotivated Worked in fast pace Agile environments and actively participated in Scrum and Sprint meetings Experienced in working with and administering different operating systems Windows UNIXLINUX and strong knowledge of Linux systems administration and operations Work Experience Sr Python Developer Charter Communications Denver CO July 2018 to Present Responsibilities Worked in a team involved in developing the UI layout and frontend programming HTML for web application that matches requirements of the company Wrote Python routines to log into the websites and fetch data for selected options Excellent Coordination in project activities and ensure that all project phases are followed and documented properly Created the Automation scripts using Python for testing applications as well as the integration of these application APIs UIs based on REST calls using Python phrasing the JSON responses Utilized PyTest the Python unit test framework for all Python applications Wrote Python OO Design code for manufacturing quality monitoring logging and debugging code optimization Involved and played a leading role in database migration projects from Oracle to MongoDB Deployment and Build of various environments including Linux and UNIX Designed the frontend applications user interactive UI web pages using web technologies like HTML and CSS Developed nonfunctional HTML CSS pages from the mockups and involved in UI review with UI architect and Business Units Rewrite existing Python Django module to deliver certain format of data Improved user experience by creating and designing new web components and features Generated Python Django forms to record data of online users Extensive use of version controller Team Foundation Server TFS Designing and deploying scalable highly available and fault tolerant systems on AWS and developed programs using Python Shell Java Scripts and Restful APIs developed for NodeJS applications Configuring IAM roles for EC2 instances in ELB and assign them policies granting specific level access to S3 buckets by customizing JSON template designed Stacks using Amazon Cloud Formation templates to launch Infrastructure Used Code Commit to host secure scalable private Git repositories Launching Amazon EC2 Cloud Instances and Configuring launched instances with respect to specific applications Build application and database servers using AWS EC2 Handled potential points of failure through error handling and communication of failure Anticipated potential parts of failure database communication points file system errors Troubleshoot the process execution and worked with other team members to correct them Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Followed MVC Structure to develop Application Handling cross browserplatform compatibility issues IE Firefox and Chrome on both Windows Managed application state using server and clientbased State Management options Environment Python Django SQL AJAX REST JavaScript AWS UNIX HTML Sublime Text Python Developer Department of Health and Human Services NC January 2017 to June 2018 Responsibilities Implemented front end for third party Web service using HTML AJAX JSON and JavaScript Developed the backend web services using Python and Django REST framework Designed added and maintained new database tables for new functions Analyzes and improves application efficiency by optimizing queries and contents for DjangoFlask Used Django framework to design and develop the application Used HTML5CSS Bootstrap and JavaScript for UI development Developed Python scripts using multithreading module Used Restful APIs with JSON XML to extract Network traffic information Created the Automation scripts using Python for testing applications as well as the integration of these application APIs UIs based on REST calls using Python phrasing the JSON responses Used JSON based and RESTful API for information extraction Designed and developed data management system using MySQL Used GitHub for Python source code version control Developed UI using HTML JavaScript and JSP and developed Business Logic and Interfacing components Using Business Objects XML and JDBC Designed userinterface and checking validations using JavaScript Managed connectivity using JDBC for queryinginserting data management including triggers and stored procedures Worked as a developer on Core Java Collections and multithreading Implemented Master Eligibility Verification model Allowed systems perform all eligibility Managed code versioning with GitHub and deployment to staging and production servers Implemented DAO database access objects Associated with development of Web Services using RestAPI for sending and getting data from the external interface in the JSON format Designed and developed reporting modules for the application and implemented the pagination Worked on operating systems like Linux MAC Windows Associated with code review and code test Responsible for new development and change request within the scope of the project Environment Python JavaScript SQL Ajax HTML CSS Linux Web services Python Developer Trinity Health Organization Livonia MI August 2015 to December 2016 Responsibilities Extensively used Interceptors validators actions using Django17 framework Extensively used Django Technologies which includes forms templates and ORM for communication with Database in different forms Involved in the analysis design and development and testing phases of Software Development Life Cycle SDLC Used Agile SCRUM methodologies for Software Development Developed the applications using Django 17 MTV Framework which is based on Model Template View design pattern Developed Custom Tags to simplify the template code Designed UI screens using templates Ajax HTML and JSON Used JavaScript for clientside validation Developed the database tier using Django ORM Used RestAPI for sending and getting data from different applications using JSON such as task details from Work distribution Used Django framework for creating the Web Services Used JavaScriptAjax and Bootstrap to develop Interactive Webpages and Single Page Applications Used Pylint framework for unit testing of applications Developed restful Webservices using Django Rest framework in Python Used GIT for version control and used PyCharm for development Participated in User Acceptance Test Requirements Gathering etc Environment Python 27 Django 17 Django Rest framework Rest JSON JavaScript AJAX HTML CSS Bootstrap GIT Pylint MySQL PyCharm Windows Education Bachelors Skills Visual studio Django Git Html Javascript Bootstrap Nodejs Ajax Css Web server Mysql Linux Java Mongodb Version control Additional Information TECHNICAL SKILLS Operating Systems Windows Linux Languages JAVA Python2x3x Shell Script Framework Django Web framework Databases MySQL Sqlite3 MongoDB Web Technologies HTML CSS JavaScript AJAX Bootstrap Code version control tool GIT Web Server Nodejs Tools Framework Visual Studio PyCharm",
    "unique_id": "2500e676-512e-42a4-94c2-eded02ba1082"
}