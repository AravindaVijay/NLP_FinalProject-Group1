{
    "clean_data": "Full Stack JavaJ2EE Developer Full Stack span lJavaspanJ2EE span lDeveloperspan Full Stack JavaJ2EE Developer Depository Trust Clearing Corporation Jersey City NJ Work Experience Full Stack JavaJ2EE Developer Depository Trust Clearing Corporation DTTC Jersey City NJ January 2018 to Present Roles Responsibilities Involved in client requirement gathering analysis application design of Extreme Programming using agile methodology with iterative and incremental software development Worked on AngularJS controllers and created functions to interact with the RESTful Web Services using AJAX Developed Payments and Payments Return Screens using AngularJS Worked on Analysis of the Payments and Payments Return screens Developed Payment Research Tool using spring MVC architecture and its felt over using angular JS Developed Microservices and APIs using Spring Boot Consumed various SOAP and REST Webservices Worked with Datastaxs Cassandra Java API to interact with the Cassandra Cluster Used Kafka as Java Messaging Service for producing and consuming data between applications Worked on creating Spring Data Repositories for SQLNoSQL databases Wrote ATDD Tests using Cucumber and Gherkin Developed Unit Tests using Junit Mockito and PowerMock and Involved in functional integration and Performance testing Worked on converting JSON files to the parquet file format using Google GSon API Worked for Continuous Integration deployment automating build and tests using Jenkins Created customized AMIs based on already existing AWS EC2 instances by using create image functionality hence using this snapshot for disaster recovery Troubleshoot AWS EC2 Status checks including System Status checks and Instance Status check alerts Deployed Spring Boot based Micro Services Docker container using Amazon EC2 container services and using AWS admin console Implemented build stageto build the Micro Service and push the Docker Container image to the private Docker registry Developed RESTful Web Services with JAXRS using Spring Boot and Micro Services Architecture Designing configuring secure Virtual Private Cloud VPC through private and public networks in AWS and create various subnets routing table internet gateways for servers Deployed and developed the artifacts using AWS EC2 S3 cloud watch Lambda Amazon messaging services SQS and SNS and Amazon Kinesis services Worked on AMI Rehydrations Developed MicroServices based architecture to enable the application to be deployed on AWS Implemented Micro Services Architecture to divide the application into various sub modules Implemented Restful Services with JAXRS using Spring Boot and Micro Service Architecture Worked on cloud formation templates CFT creation for EC2 instance and as well as for RDS instance Used Docker to containerize the Services and APIs to run on EC2 instances Worked on deployment and Migration of legacy Java applications to the AWS cloud Involved in Unit integration bug fixing acceptance testing with test cases Code reviews Used JIRA as Work management scrum Agile Tool Involved in Test Driven Development TDD JUNIT Performance and Functional Testing Used GIT as a version control tool Interacted with the client provide feedback on the features implemented optimal solutions and tailored application to customer needs Environment Java 181716 Spring 40 Spring Boot Web Services REST SOAP Spring MVC JSON Log4j STS Kafka Mockito Angular JS 20 Apache Tomcat Maven 30 Jenkins Docker GitHub JIRA EC2 S3 VPC IAM Cloud watch Cloud Formation AWS Lambda Amazon Web Services AWS Micro Services Postman JMeter JIRA Chef Jenkins Junit Cucumber SQL Cassandra Full Stack JavaJ2EE Developer Voya Financial Windsor CT January 2016 to December 2017 Voya Financial February 2016 to September 2017 Restructure and redesigning legacy Virtual Service Center application to align it more closely with current business needs and improve users experience by utilizing spring MVC for more flexible and integrated architecture RESPONSIBILITIES Expertise in SDLC Requirements gathering Analysis Design Development and Testing of application using AGILE methodology SCRUM Involved in creation of dynamic web pages with the use of JSP and HTML Form validation using JavaScript and design changes using CSS3 Developed the business logic using spring and persistence logic using Hibernate Developed the spring AOP programming to configure logging for the application Used Spring Dependency Injection to get the Hibernate Sessions and Spring DAO Classes Developed Client applications to consume the web services based on both SOAP and REST protocol using JAXRSAPI Used JAXWS SOAP for producing web services and involved in writing programs to consume the web services using SOA with CXF and Apache CXF framework Used JAXB to marshal and unmarshal the xml to java object java objects to xml Used XPATH to navigate through Attributes and Elements in an XML Document Skillful hands on UNIX commands used to see the log files on the production server Participated in all aspects of agile SCRUM methodology for development Utilized spring MVC architecture for modernization Used Hibernate frameworks for storage architecture Used JSTL for webpage binding with service Used JMS Java Mailing Service API for mailing detailed notifications depending upon the success and failure once the backend process is completed and for mailing administrator of any system related problems Developed Micro Service to provide Restful API utilizing Spring Boot with Spring MVC Implemented Micro Services based Cloud Architecture using Spring Boot Used Angular JS framework for single page application in a very clean and maintainable way Developed responsive web application pages Used AngularJS services controllers and directives for front end UI and consumed RESTful web service API Used Nodejs to create serverside applications for Java script codes to build realtime web APIs Used IBM RSA for development Use of Collection framework for handling aggregate data Used Sonar Lint for bugs and quality issues detection Used GRADLE as build tool Custom jsp and jsp tags for web page development Used Active MQ for document archiving Operated IBM Web Sphere as Application Server Used Ajax and jquery for front end validation and request processing Worked as team lead for development Participated in code review and productionizing the Application Involved in troubleshooting issues and fault analysis Environment JDK1618 MSSQL 56 JUnit4 Eclipse Hibernate40 JMS EJB30 Apache Commons ANT Maven SVN Linux Windows JIRA AngularJs Autosys GRADLE Java JSP Spring MVC and Core JSON Servlets WebServicesRESTful Micro Services Tomcat Application server Spring JDBC Template Tomcat Server 70 TOAD SQL Developer JAVA DeveloperJ2EE developer Reliance India IN April 2014 to July 2015 Responsibilities Expertise on using Agile methodology in developing the application which includes iterative application development 2 weeksprints daily stand up meetings Sprint Retrospective Sprint Planning Story Estimates and customer reporting backlogsbugs Collaborated with the business and technical teams and took the responsibility to document the functional and technical specifications in the business requirements analysis phase Developed a Java J2EE based Web Application with complete Spring suite implementing Spring MVC and other Spring modules Developed front end pages using JSP JSTL CSS and XHTML Used JavaScript for toggling disabling the elements of dojo and creating JSON trees Developed single page applications using AngularJS and Bootstrap Extensively worked on AJAX to create interactive frontend GUI Extensively used core Java concepts like Multithreading Collections File IO and concurrency Developed session beans as part of Spring to handle business logic and deployed them on Tomcat application server Worked on CORE JAVA Collections of type Generics ArrayLists and used the core packages Developed Business components and integrated those using Spring features such as Dependency Injection auto wiring various components such as DAO layers and Service Proxy layers Implemented Hibernate as ORM and integrated to Spring using Spring ORM Responsible for implementing an API that allowed fetching enrolled person and device information from an iOS device Developed servlets and utilized to create a fast and efficient chat server Created a service for moving data from one database to the other database based on some specifications which uses Spring 30 Implemented all the components following testdriven development TDD methodology using JUnit Used JDBC API and HQL Hibernate Query Language to query the Database System and used JDBC Thin Driver to connect to the database Developed queues using AWS SQS with JMS for services to subscribe and listen events Extensively worked with the retrieval and manipulation of data from database by writing queries using SQL and PLSQL Created stored procedures packages sequences and PLSQL statements to different operations on the database Developed the RESTful web services using JAXRS Designed Test cases Test scenarios Test scripts for Unit testing and Black box perform testing Developed Log4j logs to record the application events to provide the debugging monitoring and auditing capabilities to the application Created UNIX shell scripting for periodic generation of reports Wrote rules for Skip Logic using drools which we call in JavaScript functions Used Git as a version control Used Git bash Source tree and Tortoise Git tools for version control Creating branches on the source code adding staging and committing code as a part of development Used Jira which is integrated with Issues Code Builds and Documents related to the project as a part of agile methodology Atlassian JIRA and JIRA Plugins Used JBoss as the application servers Conducted and participated code reviews and design reviews meetings Troubleshoot and fix the issues as part of Performance PreProd and Prod deployments whenever the release is committed Environment JDK 17 Multithreading Spring 4x JSP 20 Servlets 30 HTML CSS JavaScript XHTML JDBC JSTL XML XSLT AJAX RestFul Hibernate 41 Jenkins JBOSS 403SP1 JUnit 3x JSF Maven30 Log4J SQL Developer41 Linux Education Masters",
    "entities": [
        "Documents",
        "AJAX",
        "Google GSon API Worked",
        "SNS",
        "GUI",
        "Java Messaging Service",
        "XPATH",
        "Attributes",
        "UNIX",
        "Agile Tool Involved",
        "the Application Involved",
        "RestFul",
        "JMS",
        "Skip Logic",
        "IBM",
        "Multithreading Collections File IO",
        "SOAP",
        "Worked on Analysis of the Payments and Payments Return",
        "JUnit",
        "Spring Boot based",
        "Amazon",
        "Virtual Private Cloud VPC",
        "Conducted",
        "DAO",
        "Jenkins",
        "Utilized",
        "Amazon Kinesis",
        "Developed Business",
        "SOA",
        "AGILE",
        "Operated IBM Web Sphere as Application",
        "JSP",
        "JMS EJB30 Apache Commons",
        "Hibernate Developed",
        "Used Active",
        "the RESTful Web Services",
        "Developed RESTful Web Services",
        "jsp",
        "Worked",
        "Implemented Restful Services",
        "Use of Collection",
        "JBoss",
        "Performance PreProd",
        "JS Developed Microservices",
        "RDS",
        "Virtual Service Center",
        "MVC",
        "Docker Container",
        "Agile",
        "GIT",
        "Extreme Programming",
        "the Database System",
        "API",
        "Created",
        "AWS",
        "JSF",
        "Implemented Hibernate",
        "CFT",
        "JAXRS Designed Test cases Test scenarios Test",
        "java",
        "Created UNIX",
        "CXF",
        "the Micro Service",
        "the Cassandra Cluster Used Kafka",
        "SQL",
        "Instance Status",
        "GRADLE",
        "JAXRS",
        "AWS Implemented Micro Services Architecture",
        "Jenkins Created",
        "JAXRSAPI",
        "HQL Hibernate Query Language",
        "Spring Boot and Micro Service",
        "Reliance India",
        "SQS",
        "REST Webservices Worked",
        "Core JSON Servlets WebServicesRESTful Micro Services Tomcat Application",
        "AJAX Developed Payments and Payments Return",
        "JavaScript",
        "UI",
        "Developed Payment Research Tool",
        "Continuous Integration",
        "CSS",
        "Sprint Retrospective Sprint Planning Story Estimates",
        "Troubleshoot AWS EC2 Status",
        "Tomcat",
        "TDD",
        "Developed Micro Service",
        "Spring Boot and Micro Services Architecture Designing",
        "TOAD",
        "Micro Services Docker",
        "Dependency Injection",
        "Troubleshoot"
    ],
    "experience": "Experience Full Stack JavaJ2EE Developer Depository Trust Clearing Corporation DTTC Jersey City NJ January 2018 to Present Roles Responsibilities Involved in client requirement gathering analysis application design of Extreme Programming using agile methodology with iterative and incremental software development Worked on AngularJS controllers and created functions to interact with the RESTful Web Services using AJAX Developed Payments and Payments Return Screens using AngularJS Worked on Analysis of the Payments and Payments Return screens Developed Payment Research Tool using spring MVC architecture and its felt over using angular JS Developed Microservices and APIs using Spring Boot Consumed various SOAP and REST Webservices Worked with Datastaxs Cassandra Java API to interact with the Cassandra Cluster Used Kafka as Java Messaging Service for producing and consuming data between applications Worked on creating Spring Data Repositories for SQLNoSQL databases Wrote ATDD Tests using Cucumber and Gherkin Developed Unit Tests using Junit Mockito and PowerMock and Involved in functional integration and Performance testing Worked on converting JSON files to the parquet file format using Google GSon API Worked for Continuous Integration deployment automating build and tests using Jenkins Created customized AMIs based on already existing AWS EC2 instances by using create image functionality hence using this snapshot for disaster recovery Troubleshoot AWS EC2 Status checks including System Status checks and Instance Status check alerts Deployed Spring Boot based Micro Services Docker container using Amazon EC2 container services and using AWS admin console Implemented build stageto build the Micro Service and push the Docker Container image to the private Docker registry Developed RESTful Web Services with JAXRS using Spring Boot and Micro Services Architecture Designing configuring secure Virtual Private Cloud VPC through private and public networks in AWS and create various subnets routing table internet gateways for servers Deployed and developed the artifacts using AWS EC2 S3 cloud watch Lambda Amazon messaging services SQS and SNS and Amazon Kinesis services Worked on AMI Rehydrations Developed MicroServices based architecture to enable the application to be deployed on AWS Implemented Micro Services Architecture to divide the application into various sub modules Implemented Restful Services with JAXRS using Spring Boot and Micro Service Architecture Worked on cloud formation templates CFT creation for EC2 instance and as well as for RDS instance Used Docker to containerize the Services and APIs to run on EC2 instances Worked on deployment and Migration of legacy Java applications to the AWS cloud Involved in Unit integration bug fixing acceptance testing with test cases Code reviews Used JIRA as Work management scrum Agile Tool Involved in Test Driven Development TDD JUNIT Performance and Functional Testing Used GIT as a version control tool Interacted with the client provide feedback on the features implemented optimal solutions and tailored application to customer needs Environment Java 181716 Spring 40 Spring Boot Web Services REST SOAP Spring MVC JSON Log4j STS Kafka Mockito Angular JS 20 Apache Tomcat Maven 30 Jenkins Docker GitHub JIRA EC2 S3 VPC IAM Cloud watch Cloud Formation AWS Lambda Amazon Web Services AWS Micro Services Postman JMeter JIRA Chef Jenkins Junit Cucumber SQL Cassandra Full Stack JavaJ2EE Developer Voya Financial Windsor CT January 2016 to December 2017 Voya Financial February 2016 to September 2017 Restructure and redesigning legacy Virtual Service Center application to align it more closely with current business needs and improve users experience by utilizing spring MVC for more flexible and integrated architecture RESPONSIBILITIES Expertise in SDLC Requirements gathering Analysis Design Development and Testing of application using AGILE methodology SCRUM Involved in creation of dynamic web pages with the use of JSP and HTML Form validation using JavaScript and design changes using CSS3 Developed the business logic using spring and persistence logic using Hibernate Developed the spring AOP programming to configure logging for the application Used Spring Dependency Injection to get the Hibernate Sessions and Spring DAO Classes Developed Client applications to consume the web services based on both SOAP and REST protocol using JAXRSAPI Used JAXWS SOAP for producing web services and involved in writing programs to consume the web services using SOA with CXF and Apache CXF framework Used JAXB to marshal and unmarshal the xml to java object java objects to xml Used XPATH to navigate through Attributes and Elements in an XML Document Skillful hands on UNIX commands used to see the log files on the production server Participated in all aspects of agile SCRUM methodology for development Utilized spring MVC architecture for modernization Used Hibernate frameworks for storage architecture Used JSTL for webpage binding with service Used JMS Java Mailing Service API for mailing detailed notifications depending upon the success and failure once the backend process is completed and for mailing administrator of any system related problems Developed Micro Service to provide Restful API utilizing Spring Boot with Spring MVC Implemented Micro Services based Cloud Architecture using Spring Boot Used Angular JS framework for single page application in a very clean and maintainable way Developed responsive web application pages Used AngularJS services controllers and directives for front end UI and consumed RESTful web service API Used Nodejs to create serverside applications for Java script codes to build realtime web APIs Used IBM RSA for development Use of Collection framework for handling aggregate data Used Sonar Lint for bugs and quality issues detection Used GRADLE as build tool Custom jsp and jsp tags for web page development Used Active MQ for document archiving Operated IBM Web Sphere as Application Server Used Ajax and jquery for front end validation and request processing Worked as team lead for development Participated in code review and productionizing the Application Involved in troubleshooting issues and fault analysis Environment JDK1618 MSSQL 56 JUnit4 Eclipse Hibernate40 JMS EJB30 Apache Commons ANT Maven SVN Linux Windows JIRA AngularJs Autosys GRADLE Java JSP Spring MVC and Core JSON Servlets WebServicesRESTful Micro Services Tomcat Application server Spring JDBC Template Tomcat Server 70 TOAD SQL Developer JAVA DeveloperJ2EE developer Reliance India IN April 2014 to July 2015 Responsibilities Expertise on using Agile methodology in developing the application which includes iterative application development 2 weeksprints daily stand up meetings Sprint Retrospective Sprint Planning Story Estimates and customer reporting backlogsbugs Collaborated with the business and technical teams and took the responsibility to document the functional and technical specifications in the business requirements analysis phase Developed a Java J2EE based Web Application with complete Spring suite implementing Spring MVC and other Spring modules Developed front end pages using JSP JSTL CSS and XHTML Used JavaScript for toggling disabling the elements of dojo and creating JSON trees Developed single page applications using AngularJS and Bootstrap Extensively worked on AJAX to create interactive frontend GUI Extensively used core Java concepts like Multithreading Collections File IO and concurrency Developed session beans as part of Spring to handle business logic and deployed them on Tomcat application server Worked on CORE JAVA Collections of type Generics ArrayLists and used the core packages Developed Business components and integrated those using Spring features such as Dependency Injection auto wiring various components such as DAO layers and Service Proxy layers Implemented Hibernate as ORM and integrated to Spring using Spring ORM Responsible for implementing an API that allowed fetching enrolled person and device information from an iOS device Developed servlets and utilized to create a fast and efficient chat server Created a service for moving data from one database to the other database based on some specifications which uses Spring 30 Implemented all the components following testdriven development TDD methodology using JUnit Used JDBC API and HQL Hibernate Query Language to query the Database System and used JDBC Thin Driver to connect to the database Developed queues using AWS SQS with JMS for services to subscribe and listen events Extensively worked with the retrieval and manipulation of data from database by writing queries using SQL and PLSQL Created stored procedures packages sequences and PLSQL statements to different operations on the database Developed the RESTful web services using JAXRS Designed Test cases Test scenarios Test scripts for Unit testing and Black box perform testing Developed Log4j logs to record the application events to provide the debugging monitoring and auditing capabilities to the application Created UNIX shell scripting for periodic generation of reports Wrote rules for Skip Logic using drools which we call in JavaScript functions Used Git as a version control Used Git bash Source tree and Tortoise Git tools for version control Creating branches on the source code adding staging and committing code as a part of development Used Jira which is integrated with Issues Code Builds and Documents related to the project as a part of agile methodology Atlassian JIRA and JIRA Plugins Used JBoss as the application servers Conducted and participated code reviews and design reviews meetings Troubleshoot and fix the issues as part of Performance PreProd and Prod deployments whenever the release is committed Environment JDK 17 Multithreading Spring 4x JSP 20 Servlets 30 HTML CSS JavaScript XHTML JDBC JSTL XML XSLT AJAX RestFul Hibernate 41 Jenkins JBOSS 403SP1 JUnit 3x JSF Maven30 Log4J SQL Developer41 Linux Education Masters",
    "extracted_keywords": [
        "Stack",
        "JavaJ2EE",
        "Developer",
        "Full",
        "Stack",
        "span",
        "lJavaspanJ2EE",
        "span",
        "lDeveloperspan",
        "Full",
        "Stack",
        "JavaJ2EE",
        "Developer",
        "Depository",
        "Trust",
        "Clearing",
        "Corporation",
        "Jersey",
        "City",
        "NJ",
        "Work",
        "Experience",
        "Full",
        "Stack",
        "JavaJ2EE",
        "Developer",
        "Depository",
        "Trust",
        "Clearing",
        "Corporation",
        "DTTC",
        "Jersey",
        "City",
        "NJ",
        "January",
        "Present",
        "Roles",
        "Responsibilities",
        "client",
        "requirement",
        "analysis",
        "application",
        "design",
        "Extreme",
        "Programming",
        "methodology",
        "software",
        "development",
        "controllers",
        "functions",
        "RESTful",
        "Web",
        "Services",
        "AJAX",
        "Developed",
        "Payments",
        "Payments",
        "Return",
        "Screens",
        "AngularJS",
        "Analysis",
        "Payments",
        "Payments",
        "Return",
        "screens",
        "Payment",
        "Research",
        "Tool",
        "spring",
        "MVC",
        "architecture",
        "JS",
        "Developed",
        "Microservices",
        "APIs",
        "Spring",
        "Boot",
        "SOAP",
        "REST",
        "Webservices",
        "Datastaxs",
        "Cassandra",
        "Java",
        "API",
        "Cassandra",
        "Cluster",
        "Kafka",
        "Java",
        "Messaging",
        "Service",
        "data",
        "applications",
        "Spring",
        "Data",
        "Repositories",
        "SQLNoSQL",
        "databases",
        "Wrote",
        "ATDD",
        "Tests",
        "Cucumber",
        "Gherkin",
        "Developed",
        "Unit",
        "Tests",
        "Junit",
        "Mockito",
        "PowerMock",
        "integration",
        "Performance",
        "testing",
        "files",
        "file",
        "format",
        "Google",
        "GSon",
        "API",
        "Continuous",
        "Integration",
        "deployment",
        "build",
        "tests",
        "Jenkins",
        "AMIs",
        "AWS",
        "EC2",
        "instances",
        "image",
        "functionality",
        "snapshot",
        "disaster",
        "recovery",
        "Troubleshoot",
        "AWS",
        "EC2",
        "Status",
        "checks",
        "System",
        "Status",
        "checks",
        "Instance",
        "Status",
        "check",
        "Deployed",
        "Spring",
        "Boot",
        "Micro",
        "Services",
        "Docker",
        "container",
        "Amazon",
        "EC2",
        "container",
        "services",
        "AWS",
        "admin",
        "console",
        "build",
        "stageto",
        "Micro",
        "Service",
        "Docker",
        "Container",
        "image",
        "Docker",
        "registry",
        "Web",
        "Services",
        "JAXRS",
        "Spring",
        "Boot",
        "Micro",
        "Services",
        "Architecture",
        "Designing",
        "Virtual",
        "Cloud",
        "VPC",
        "networks",
        "AWS",
        "subnets",
        "table",
        "internet",
        "gateways",
        "servers",
        "artifacts",
        "AWS",
        "EC2",
        "S3",
        "cloud",
        "Lambda",
        "Amazon",
        "services",
        "SQS",
        "SNS",
        "Amazon",
        "Kinesis",
        "services",
        "AMI",
        "Rehydrations",
        "Developed",
        "MicroServices",
        "architecture",
        "application",
        "AWS",
        "Micro",
        "Services",
        "Architecture",
        "application",
        "sub",
        "modules",
        "Restful",
        "Services",
        "JAXRS",
        "Spring",
        "Boot",
        "Micro",
        "Service",
        "Architecture",
        "cloud",
        "formation",
        "CFT",
        "creation",
        "EC2",
        "instance",
        "RDS",
        "instance",
        "Docker",
        "Services",
        "APIs",
        "EC2",
        "instances",
        "deployment",
        "Migration",
        "legacy",
        "Java",
        "applications",
        "AWS",
        "cloud",
        "Unit",
        "integration",
        "bug",
        "acceptance",
        "testing",
        "test",
        "cases",
        "Code",
        "JIRA",
        "Work",
        "management",
        "Agile",
        "Tool",
        "Test",
        "Driven",
        "Development",
        "TDD",
        "JUNIT",
        "Performance",
        "Functional",
        "Testing",
        "GIT",
        "version",
        "control",
        "tool",
        "client",
        "feedback",
        "features",
        "solutions",
        "application",
        "customer",
        "Environment",
        "Java",
        "Spring",
        "Spring",
        "Boot",
        "Web",
        "Services",
        "REST",
        "SOAP",
        "Spring",
        "MVC",
        "JSON",
        "Log4j",
        "STS",
        "Kafka",
        "Mockito",
        "Angular",
        "JS",
        "Apache",
        "Tomcat",
        "Maven",
        "Jenkins",
        "Docker",
        "GitHub",
        "JIRA",
        "EC2",
        "S3",
        "VPC",
        "IAM",
        "Cloud",
        "Cloud",
        "Formation",
        "Lambda",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "Micro",
        "Services",
        "Postman",
        "JMeter",
        "JIRA",
        "Chef",
        "Jenkins",
        "Junit",
        "Cucumber",
        "SQL",
        "Cassandra",
        "Full",
        "Stack",
        "JavaJ2EE",
        "Developer",
        "Voya",
        "Financial",
        "Windsor",
        "CT",
        "January",
        "December",
        "Voya",
        "Financial",
        "February",
        "September",
        "Restructure",
        "legacy",
        "Virtual",
        "Service",
        "Center",
        "application",
        "business",
        "needs",
        "users",
        "experience",
        "spring",
        "MVC",
        "architecture",
        "RESPONSIBILITIES",
        "Expertise",
        "SDLC",
        "Requirements",
        "Analysis",
        "Design",
        "Development",
        "Testing",
        "application",
        "methodology",
        "creation",
        "web",
        "pages",
        "use",
        "JSP",
        "HTML",
        "Form",
        "validation",
        "JavaScript",
        "design",
        "changes",
        "CSS3",
        "Developed",
        "business",
        "logic",
        "spring",
        "persistence",
        "logic",
        "Hibernate",
        "spring",
        "AOP",
        "programming",
        "configure",
        "application",
        "Spring",
        "Dependency",
        "Injection",
        "Hibernate",
        "Sessions",
        "Spring",
        "DAO",
        "Classes",
        "Client",
        "applications",
        "web",
        "services",
        "SOAP",
        "REST",
        "protocol",
        "JAXRSAPI",
        "JAXWS",
        "SOAP",
        "web",
        "services",
        "programs",
        "web",
        "services",
        "SOA",
        "CXF",
        "Apache",
        "CXF",
        "framework",
        "JAXB",
        "xml",
        "object",
        "XPATH",
        "Attributes",
        "Elements",
        "XML",
        "Document",
        "hands",
        "UNIX",
        "commands",
        "log",
        "files",
        "production",
        "server",
        "aspects",
        "methodology",
        "development",
        "spring",
        "MVC",
        "architecture",
        "modernization",
        "Hibernate",
        "frameworks",
        "storage",
        "architecture",
        "JSTL",
        "webpage",
        "service",
        "JMS",
        "Java",
        "Mailing",
        "Service",
        "API",
        "notifications",
        "success",
        "failure",
        "process",
        "administrator",
        "system",
        "problems",
        "Developed",
        "Micro",
        "Service",
        "API",
        "Spring",
        "Boot",
        "Spring",
        "MVC",
        "Implemented",
        "Micro",
        "Services",
        "Cloud",
        "Architecture",
        "Spring",
        "Boot",
        "JS",
        "framework",
        "page",
        "application",
        "way",
        "web",
        "application",
        "pages",
        "services",
        "controllers",
        "directives",
        "end",
        "UI",
        "web",
        "service",
        "API",
        "Nodejs",
        "serverside",
        "applications",
        "Java",
        "script",
        "codes",
        "web",
        "APIs",
        "IBM",
        "RSA",
        "development",
        "Use",
        "Collection",
        "framework",
        "data",
        "Sonar",
        "Lint",
        "bugs",
        "quality",
        "issues",
        "detection",
        "GRADLE",
        "build",
        "tool",
        "Custom",
        "jsp",
        "jsp",
        "tags",
        "web",
        "page",
        "development",
        "MQ",
        "document",
        "IBM",
        "Web",
        "Sphere",
        "Application",
        "Server",
        "Ajax",
        "jquery",
        "end",
        "validation",
        "request",
        "processing",
        "team",
        "development",
        "code",
        "review",
        "Application",
        "troubleshooting",
        "issues",
        "analysis",
        "Environment",
        "JDK1618",
        "MSSQL",
        "JUnit4",
        "Eclipse",
        "Hibernate40",
        "JMS",
        "EJB30",
        "Apache",
        "Commons",
        "ANT",
        "Maven",
        "SVN",
        "Linux",
        "Windows",
        "JIRA",
        "AngularJs",
        "Autosys",
        "GRADLE",
        "Java",
        "JSP",
        "Spring",
        "MVC",
        "Core",
        "JSON",
        "Servlets",
        "WebServicesRESTful",
        "Micro",
        "Services",
        "Tomcat",
        "Application",
        "server",
        "Spring",
        "JDBC",
        "Template",
        "Tomcat",
        "Server",
        "TOAD",
        "SQL",
        "Developer",
        "JAVA",
        "DeveloperJ2EE",
        "developer",
        "Reliance",
        "India",
        "April",
        "July",
        "Responsibilities",
        "Expertise",
        "methodology",
        "application",
        "application",
        "development",
        "weeksprints",
        "meetings",
        "Sprint",
        "Retrospective",
        "Sprint",
        "Planning",
        "Story",
        "Estimates",
        "customer",
        "backlogsbugs",
        "business",
        "teams",
        "responsibility",
        "specifications",
        "business",
        "requirements",
        "analysis",
        "phase",
        "Java",
        "J2EE",
        "Web",
        "Application",
        "Spring",
        "suite",
        "Spring",
        "MVC",
        "Spring",
        "modules",
        "end",
        "pages",
        "JSP",
        "JSTL",
        "CSS",
        "XHTML",
        "Used",
        "JavaScript",
        "elements",
        "dojo",
        "JSON",
        "trees",
        "page",
        "applications",
        "AngularJS",
        "Bootstrap",
        "AJAX",
        "frontend",
        "GUI",
        "core",
        "Java",
        "concepts",
        "Multithreading",
        "Collections",
        "File",
        "IO",
        "concurrency",
        "session",
        "beans",
        "part",
        "Spring",
        "business",
        "logic",
        "Tomcat",
        "application",
        "server",
        "CORE",
        "JAVA",
        "Collections",
        "type",
        "Generics",
        "ArrayLists",
        "core",
        "packages",
        "Business",
        "components",
        "Spring",
        "features",
        "Dependency",
        "Injection",
        "auto",
        "wiring",
        "components",
        "DAO",
        "layers",
        "Service",
        "Proxy",
        "layers",
        "Hibernate",
        "ORM",
        "Spring",
        "Spring",
        "ORM",
        "API",
        "person",
        "device",
        "information",
        "device",
        "servlets",
        "chat",
        "server",
        "service",
        "data",
        "database",
        "database",
        "specifications",
        "Spring",
        "components",
        "testdriven",
        "development",
        "TDD",
        "methodology",
        "JUnit",
        "JDBC",
        "API",
        "HQL",
        "Hibernate",
        "Query",
        "Language",
        "Database",
        "System",
        "JDBC",
        "Thin",
        "Driver",
        "database",
        "queues",
        "AWS",
        "SQS",
        "JMS",
        "services",
        "events",
        "retrieval",
        "manipulation",
        "data",
        "database",
        "queries",
        "SQL",
        "PLSQL",
        "procedures",
        "sequences",
        "PLSQL",
        "statements",
        "operations",
        "database",
        "web",
        "services",
        "JAXRS",
        "Designed",
        "Test",
        "cases",
        "Test",
        "scenarios",
        "Test",
        "scripts",
        "Unit",
        "testing",
        "Black",
        "box",
        "perform",
        "Log4j",
        "logs",
        "application",
        "events",
        "debugging",
        "monitoring",
        "auditing",
        "capabilities",
        "application",
        "UNIX",
        "shell",
        "scripting",
        "generation",
        "reports",
        "Wrote",
        "rules",
        "Skip",
        "Logic",
        "drools",
        "JavaScript",
        "functions",
        "Git",
        "version",
        "control",
        "Git",
        "bash",
        "Source",
        "tree",
        "Tortoise",
        "Git",
        "tools",
        "version",
        "control",
        "branches",
        "source",
        "code",
        "staging",
        "code",
        "part",
        "development",
        "Jira",
        "Issues",
        "Code",
        "Builds",
        "Documents",
        "project",
        "part",
        "methodology",
        "Atlassian",
        "JIRA",
        "JIRA",
        "Plugins",
        "JBoss",
        "application",
        "code",
        "reviews",
        "design",
        "reviews",
        "meetings",
        "Troubleshoot",
        "issues",
        "part",
        "Performance",
        "PreProd",
        "Prod",
        "deployments",
        "release",
        "Environment",
        "JDK",
        "Multithreading",
        "Spring",
        "JSP",
        "Servlets",
        "HTML",
        "CSS",
        "JavaScript",
        "JDBC",
        "JSTL",
        "XML",
        "XSLT",
        "AJAX",
        "RestFul",
        "Hibernate",
        "Jenkins",
        "JBOSS",
        "JUnit",
        "JSF",
        "Maven30",
        "Log4J",
        "SQL",
        "Developer41",
        "Linux",
        "Education",
        "Masters"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T20:50:06.509280",
    "resume_data": "Full Stack JavaJ2EE Developer Full Stack span lJavaspanJ2EE span lDeveloperspan Full Stack JavaJ2EE Developer Depository Trust Clearing Corporation Jersey City NJ Work Experience Full Stack JavaJ2EE Developer Depository Trust Clearing Corporation DTTC Jersey City NJ January 2018 to Present Roles Responsibilities Involved in client requirement gathering analysis application design of Extreme Programming using agile methodology with iterative and incremental software development Worked on AngularJS controllers and created functions to interact with the RESTful Web Services using AJAX Developed Payments and Payments Return Screens using AngularJS Worked on Analysis of the Payments and Payments Return screens Developed Payment Research Tool using spring MVC architecture and its felt over using angular JS Developed Microservices and APIs using Spring Boot Consumed various SOAP and REST Webservices Worked with Datastaxs Cassandra Java API to interact with the Cassandra Cluster Used Kafka as Java Messaging Service for producing and consuming data between applications Worked on creating Spring Data Repositories for SQLNoSQL databases Wrote ATDD Tests using Cucumber and Gherkin Developed Unit Tests using Junit Mockito and PowerMock and Involved in functional integration and Performance testing Worked on converting JSON files to the parquet file format using Google GSon API Worked for Continuous Integration deployment automating build and tests using Jenkins Created customized AMIs based on already existing AWS EC2 instances by using create image functionality hence using this snapshot for disaster recovery Troubleshoot AWS EC2 Status checks including System Status checks and Instance Status check alerts Deployed Spring Boot based Micro Services Docker container using Amazon EC2 container services and using AWS admin console Implemented build stageto build the Micro Service and push the Docker Container image to the private Docker registry Developed RESTful Web Services with JAXRS using Spring Boot and Micro Services Architecture Designing configuring secure Virtual Private Cloud VPC through private and public networks in AWS and create various subnets routing table internet gateways for servers Deployed and developed the artifacts using AWS EC2 S3 cloud watch Lambda Amazon messaging services SQS and SNS and Amazon Kinesis services Worked on AMI Rehydrations Developed MicroServices based architecture to enable the application to be deployed on AWS Implemented Micro Services Architecture to divide the application into various sub modules Implemented Restful Services with JAXRS using Spring Boot and Micro Service Architecture Worked on cloud formation templates CFT creation for EC2 instance and as well as for RDS instance Used Docker to containerize the Services and APIs to run on EC2 instances Worked on deployment and Migration of legacy Java applications to the AWS cloud Involved in Unit integration bug fixing acceptance testing with test cases Code reviews Used JIRA as Work management scrum Agile Tool Involved in Test Driven Development TDD JUNIT Performance and Functional Testing Used GIT as a version control tool Interacted with the client provide feedback on the features implemented optimal solutions and tailored application to customer needs Environment Java 181716 Spring 40 Spring Boot Web Services REST SOAP Spring MVC JSON Log4j STS Kafka Mockito Angular JS 20 Apache Tomcat Maven 30 Jenkins Docker GitHub JIRA EC2 S3 VPC IAM Cloud watch Cloud Formation AWS Lambda Amazon Web Services AWS Micro Services Postman JMeter JIRA Chef Jenkins Junit Cucumber SQL Cassandra Full Stack JavaJ2EE Developer Voya Financial Windsor CT January 2016 to December 2017 Voya Financial February 2016 to September 2017 Restructure and redesigning legacy Virtual Service Center application to align it more closely with current business needs and improve users experience by utilizing spring MVC for more flexible and integrated architecture RESPONSIBILITIES Expertise in SDLC Requirements gathering Analysis Design Development and Testing of application using AGILE methodology SCRUM Involved in creation of dynamic web pages with the use of JSP and HTML Form validation using JavaScript and design changes using CSS3 Developed the business logic using spring and persistence logic using Hibernate Developed the spring AOP programming to configure logging for the application Used Spring Dependency Injection to get the Hibernate Sessions and Spring DAO Classes Developed Client applications to consume the web services based on both SOAP and REST protocol using JAXRSAPI Used JAXWS SOAP for producing web services and involved in writing programs to consume the web services using SOA with CXF and Apache CXF framework Used JAXB to marshal and unmarshal the xml to java object java objects to xml Used XPATH to navigate through Attributes and Elements in an XML Document Skillful hands on UNIX commands used to see the log files on the production server Participated in all aspects of agile SCRUM methodology for development Utilized spring MVC architecture for modernization Used Hibernate frameworks for storage architecture Used JSTL for webpage binding with service Used JMS Java Mailing Service API for mailing detailed notifications depending upon the success and failure once the backend process is completed and for mailing administrator of any system related problems Developed Micro Service to provide Restful API utilizing Spring Boot with Spring MVC Implemented Micro Services based Cloud Architecture using Spring Boot Used Angular JS framework for single page application in a very clean and maintainable way Developed responsive web application pages Used AngularJS services controllers and directives for front end UI and consumed RESTful web service API Used Nodejs to create serverside applications for Java script codes to build realtime web APIs Used IBM RSA for development Use of Collection framework for handling aggregate data Used Sonar Lint for bugs and quality issues detection Used GRADLE as build tool Custom jsp and jsp tags for web page development Used Active MQ for document archiving Operated IBM Web Sphere as Application Server Used Ajax and jquery for front end validation and request processing Worked as team lead for development Participated in code review and productionizing the Application Involved in troubleshooting issues and fault analysis Environment JDK1618 MSSQL 56 JUnit4 Eclipse Hibernate40 JMS EJB30 Apache Commons ANT Maven SVN Linux Windows JIRA AngularJs Autosys GRADLE Java JSP Spring MVC and Core JSON Servlets WebServicesRESTful Micro Services Tomcat Application server Spring JDBC Template Tomcat Server 70 TOAD SQL Developer JAVA DeveloperJ2EE developer Reliance India IN April 2014 to July 2015 Responsibilities Expertise on using Agile methodology in developing the application which includes iterative application development 2 weeksprints daily stand up meetings Sprint Retrospective Sprint Planning Story Estimates and customer reporting backlogsbugs Collaborated with the business and technical teams and took the responsibility to document the functional and technical specifications in the business requirements analysis phase Developed a Java J2EE based Web Application with complete Spring suite implementing Spring MVC and other Spring modules Developed front end pages using JSP JSTL CSS and XHTML Used JavaScript for toggling disabling the elements of dojo and creating JSON trees Developed single page applications using AngularJS and Bootstrap Extensively worked on AJAX to create interactive frontend GUI Extensively used core Java concepts like Multithreading Collections File IO and concurrency Developed session beans as part of Spring to handle business logic and deployed them on Tomcat application server Worked on CORE JAVA Collections of type Generics ArrayLists and used the core packages Developed Business components and integrated those using Spring features such as Dependency Injection auto wiring various components such as DAO layers and Service Proxy layers Implemented Hibernate as ORM and integrated to Spring using Spring ORM Responsible for implementing an API that allowed fetching enrolled person and device information from an iOS device Developed servlets and utilized to create a fast and efficient chat server Created a service for moving data from one database to the other database based on some specifications which uses Spring 30 Implemented all the components following testdriven development TDD methodology using JUnit Used JDBC API and HQL Hibernate Query Language to query the Database System and used JDBC Thin Driver to connect to the database Developed queues using AWS SQS with JMS for services to subscribe and listen events Extensively worked with the retrieval and manipulation of data from database by writing queries using SQL and PLSQL Created stored procedures packages sequences and PLSQL statements to different operations on the database Developed the RESTful web services using JAXRS Designed Test cases Test scenarios Test scripts for Unit testing and Black box perform testing Developed Log4j logs to record the application events to provide the debugging monitoring and auditing capabilities to the application Created UNIX shell scripting for periodic generation of reports Wrote rules for Skip Logic using drools which we call in JavaScript functions Used Git as a version control Used Git bash Source tree and Tortoise Git tools for version control Creating branches on the source code adding staging and committing code as a part of development Used Jira which is integrated with Issues Code Builds and Documents related to the project as a part of agile methodology Atlassian JIRA and JIRA Plugins Used JBoss as the application servers Conducted and participated code reviews and design reviews meetings Troubleshoot and fix the issues as part of Performance PreProd and Prod deployments whenever the release is committed Environment JDK 17 Multithreading Spring 4x JSP 20 Servlets 30 HTML CSS JavaScript XHTML JDBC JSTL XML XSLT AJAX RestFul Hibernate 41 Jenkins JBOSS 403SP1 JUnit 3x JSF Maven30 Log4J SQL Developer41 Linux Education Masters",
    "unique_id": "347306f6-db81-4f3b-8ed5-85624eaa895c"
}