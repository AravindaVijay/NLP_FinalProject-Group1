{
    "clean_data": "Java Full Stack Developer span lJavaspan Full Stack span lDeveloperspan Java Full Stack Developer Sentury Tire Hialeah FL Around 7 years of full stack development experience in all phases of Software Development Life Cycle SDLC which includes Analysis Design Development Documentation Testing Deployment Version Control and production support of web based enterprise business applications using the JAVAJ2EE technologies Mastery in UI Design and Development utilizing HTML5 CSS3 SASS LESS Bootstrap and AJAX that takes after W3C Web Standards Experienced in using ES6 features like arrows modules enhanced object literals promises and block scoping Proficient in developing Dynamic Single Page Application SPA using MEAN Sound knowledge on implementing Angular 2x4x with NGRX to accomplish MVVM design flow Expertise on using Router ParamMap in Angular 4 which is useful to query a ParamMap in router itself and also gives advantage on security aspects with all types Well Experienced in using Component features like Modules Templates Directives and Meta Data Good amount of Knowledge on using directives observables promises dependency injection pipes shadow Dom Expertise in writing Typescript which is useful in Angular 4x applications that advanced features like auto completion navigation and refactoring Strong knowledge in React JS framework to develop the SPA Experience in using React JS components Keys Router Forms Events plus Redux Animations and Flux concept Well Experienced for creating interactive UIs in React JS using Virtual DOM Oneway data flow JSX React Native concepts Expertise in making Custom Reusable React Components Library Well experienced in Angular JS Backbone JS Ember JS Knockout JS and Ext JS for making customize front end app development and to achieve MVC design flow Strong knowledge in developing applications for view rendering using JQuery React JS Handlebar JS Developed and deployed Micro Services based applications using Spring Boot along with Spring Rest and Node JS with Express JS and Hapi JS Expertise in Using Grunt Gulp Web pack Bower Strong Experience on working with UI testing frameworks like Karma Jasmine Protractor for Angular JS Mocha and Chai for React JS and Backbone JS Good Experience in Bug tracking tools like JIRA HP Quality Center and Bugzilla Expertise in working with JAVA 8 features like Collection API Stream API Time API Multithreading Transaction Management and Exception Handling Expertise in making Standalone production grade applications using Spring Boot Developed controllers and services for handling the requests using Spring Boot Well experienced in using Spring Boot features like Spring Boot Actuator Spring Boot JPA Spring Boot JDBC Good amount of experience in integrating Swagger documentation into a Spring Boot based Rest web service mainly by using spring fox implementation for generating the swagger documentation Expertise in SOA using Spring REST to create REST resources which has various components like JAXRS Jersey Framework Rest Easy and WADL for documenting REST APIS Good working knowledge on integration of Drools Rule Engines which corresponds to validating BRMS Business Rules Management System with Spring Bean Strong knowledge in Amazon Web Services like Amazon S3Amazon Simple Storage ServiceAmazon EC2Elastic Compute CloudAmazon Simple DB Amazon EBS Amazon cloud front Amazon SQS Amazon Elastic Load Balancing Worked with Jenkins for continuous integration and Performance improvements for the application Knowledge on various Docker components like Docker Engine Hub Machine Compose and Docker Registry Well experienced with build tools like Gradle Maven and ANT Good knowledge on package manager tools such as NPM and Bower for dependency management Hands on experience in software configurationchange control process and tools like Subversion SVN Git and CVS Expertise in logging tools like Log4j slf4j Experience in writing and executing unit test cases using JUnit and JMeter Mokito Testing Framework Strong Knowledge on automated javabased integration testing and behavioral testing of the applications using Selenium and Cucumber respectively Good experience in using Software development methodologies like AgileScrum Water Fall and Rational Application Development methodologies Authorized to work in the US for any employer Work Experience Java Full Stack Developer Sentury Tire Hialeah FL November 2018 to Present Description Sentury Tire is a subsidiary of Sentaida Group Co Ltd born in Qingdao Shandong China in 2008 Sentury Tire Co Ltd started mass production in 2009 principally engaged in passenger crossover sport utility vehicle commercial van and aircraft tires Senturys facilities cover an area of 96 million square feet with an annual capacity of 9 million tires in 2013 Responsibilities Implemented Micro Service Architecture using Mongo DB Hapi JS Angular 4 and Node JS stack and developed Single Page Applications SPA Designed the frontend using web technologies likeHTML5 CSS3 and Twitter Bootstrap framework and Angular 4 for creating grid layout responsive screen sizes and devices Developed reusable Angular 4components which are compatible with latest versions of typescript and angular CLI Configured various routes directives for grid pagination conditional validations templating dynamic loading lazy loading Shadow DOM NGRX store Created services to consume RESTAPIs using Component based architecture provided by Angular4 Made use of Angular UI grid to display treebased grids Converted the code base to use modern ECMAScript ES6 ES7 used Babel Typescript and Web pack as a module loader and used along with Angular CLI Developed Angular views to hook up models to the DOM and synchronize data with server as a SPA Made use of Angular4 Observables to make HTTP Requests and leveraged its functions to loop around results Builtin AJAX HTTP Service with observables is used extensively for making quick and incremental updates to UI of the application Developed serverside proxy using Node JS Hapi JS for an eventdriven nonblocking IO model to make an efficient application while keeping it lightweight Used NodeJS with HapiJS server to interact with the Rest services and database hosted on multiple load balanced cloud instances Made use of authentication and authorization techniques available with HapiJS and used its tools like web packs to avoid boiler plate code Utilized auto configurable documentation functionality provided by HapiJS to configure the Open API specificationSwagger using Hapiswaggered and Hapiswaggeredui Karma test runner and Jasmine test framework tool are used to perform behavioral driven testing for Angular 4 code Pushed new features live after passing tests implemented with Karma Test Runner Testing for Node JS is done using Mocha and chai Unit testing of web services is done using Spock framework by extending Groovy syntax Configured JBOSS Application server and used Oracle database to write complex PLSQL queries Designed dynamic schema through MongoDB by incorporating rich queries syntaxes and achieved data collections distributed across multiple systems for horizontal scalability as data volumes increase through Automatic Sharding Mongoose Connector is used for implementing ODM framework for Mongo DB For dependency management used the built in NPM package manager to configure the right versions of the packages Used Jenkins CICD tool for continuous integrating and deploying application on servers Configured Docker container service and build pipe line Handled all the port mappingbinding things that happen with Dockers and Containers Used Rabbit MQ for transport of data in Queue in between components of the application Configured Kibana data visualization plugin for Elastic search Log stash and created bar line and scatter plots pie charts and maps on top of large chunks of data Used Redis configuration with node server along with Cat box for caching the responses Implemented OAUTH20 authentication and authorization framework to provide the security to rest web services Installed configured and administered NoSQL database clusters in AWS Virtual Private Cloud Network for available data on cloud Implemented AWS solutions using E2C S3 RDS EBS Elastic Load Balancer Auto scaling groups Optimized volumes and EC2 instances and created monitors alarms and notifications for EC2 hosts using Cloud Watch Implemented Netflix Zuul API gateway for all the requests from the devices and websites by registering services to Eureka Configured Kubernetes in the application for automating deployment scaling and management of applications Configured DynaTrace to measure and monitor the performance of application Environment HTML5 CSS3 Twitter Bootstrap Angular4 Typescript Angular CLI NGRX ECMAES6ES7 Babel Typescript Web Pack DOM HTTP Ajax Node JS Hapi JS REST Mongo DB Oracle Redis Swagger Karma Jasmine Mocha Chai Spock Groovy JBoss ODM Mongoose Connector Kibana Elastic Search Logstach NPM Jenkins Docker Redis AWS Netflix Zuul Eureka Kubernetes DynaTrace Rabbit MQ Cat box AWS Java Full Stack Developer Royal Caribbean cruise Miami FL April 2017 to November 2018 Description Royal Caribbean International is known for driving innovation at sea Each successive class of ships is an architectural marvel and pushes the envelope of what is possible on a cruise ship such as rock climbing ice skating and surfing at sea to capture the imagination of families and adventurous vacationers alike I involved with a team to develop the application which collects and stores the Customers data and display the different questions from the various dumps according to the specific module Responsibilities Involved in developing the Single Page Micro Service Oriented Architecture Application using the Mongo Database React with Redux Angular 20 and Node JS with Express JS Involved in developing the efficient UI using HTML5 for DOM representation and CSS3LESS for good styling of the application Used the Bootstrap for the custom templating of the web pages Involved in developing custom directives for making reusable components in Angular 20 Used Angular 20 to create views to hook up models to the DOM and synchronize data with server as a Single Page Applications Developed the objects including the components using Typescript ng Modules interfaces and classes using the Arrow function Implemented Angular JS observables and listeners RxJS reactive libraries to simplify the making asynchronous calls to backend REST APIs ES6 generators were used for maintaining the concurrency between the components Multiple views were rendered by using the React JS and implemented JSX for adding XML syntax to the java script Implemented various screens for the front end using ReactJS and used various predefined components from NPM Node Package Manager and redux library Implemented React JS components Forms Events Keys Router and Animations Implemented React with Redux for statemanagement and Router for the navigation Implemented Redux to cut some complexity corners by using functional composition Implemented StoreRedux for holding the whole state tree of application and ReducerRedux for describing actions Reducers are implemented for specifying how the application state changes in response to the actions sent to the Store Implemented Web pack for bundling the modules and maintaining the libraries efficiently Angular testing was performed using the Protractor and React unit testing was performed using Mocha and Chai Developed the Rest Services on the server side using the Node JS with Express JS Implemented Node JS as a serverside proxy for an eventdriven nonblocking IO model to make the application lightweight and efficient Developed Nodejs Readable and Writable streams to process the data from the external source of the application Implemented modules into Node JS to coordinate with plans and necessities Developing RESTful web services using Node JS and Express JS and used Node JS server to interact with the Rest services and database hosted on multiple load balanced cloud instances Implemented Express JS which is fast assertive essential and moderate web framework of Node JS that helps manage a sever and routes Implemented Express JS which respond to HTTP Requests and dynamically render HTML Pages based on passing arguments to templates Implemented Axios for calling the developed RESTful services that is for making the Ajax Calls Implemented the Node Package Manager Build tool for managing the dependencies in the project OpenID Connect OIDC was implemented on the top of OAuth 20 for authorizing the Rest Services and JWT for token based authentication Used Spring IOC for the life cycle management of the bean and Java Transaction API JTA for the service layer Developed some standalone Micro services using Spring Boot micro service architectural patterns Implemented Spring Boot properties like actuators and health checkers to enhance micro service implementations Mongo database was used for handling the unstructured data and used the Mongoose Connector for the connection Mongo DB was used for heterogeneous collections of content types Implemented Log4J for logging the information and Rabbit MQ for the service of Message broker Implemented Docker for creating the custom Docker container images Implemented the Docker for packaging the application in virtual container and then the contained application is deployed to Pivotal Cloud Foundry using CLI Command Line Interface tool where service is as Infrastructure Jenkins was implemented for the Continuous delivery and for Continuous Integration Used the Junit for unit testing and Selenium for the integral testing of the application Implemented the Agile methodology for the efficient and effective completion of project Environment Redux Angular 20 HTML5 CSS3LESS Bootstrap Typescript ng Modules Arrow function Angular JS observables listeners ES6 React JS JSX ReactJS NPM React JS components Forms Events Keys Router Animations StoreRedux ReducerRedux Web pack Protractor Mocha and Chai Rest Services Node JS with Express JS Axios OpenID Connect OIDC OAuth 20 JWT Spring IOC Java Transaction API JTA Spring Boot Mongoose Connector Mongo DB Log4J Rabbit MQ Docker Pivotal Cloud Foundry Jenkins Junit Selenium and Agile methodology Java Full stack Developer Edison NJ July 2016 to April 2017 Description Consolidated Edison Inc commonly known as con Edison or con Ed is one of the largest investorowned energy companies in the United States I was involved in developing UI pages that helps customers retrieve online quotes depending on service Also worked on login field validations that help customers who are already members to retrieve their online account Responsibilities UI Web pages were developed by using HTML5 CSS3 and JavaScript frameworks like AngularJS16 Angular JS 16 is used to create Controllers to handle events triggered by clients and send request to server Angular Directives like NgModel NgApp and Ngrepeat etc were used to develop views and data binding in our application Worked with builtin Angular Filters and developed custom Angular Filters in application as per business requirements Angular scopes scopes are used to glue View and controller to send data from controller to view Angular Routes were used to navigate through views in our application Angular Directives are used to develop customized components Rest API calls and data binding is done by using Angular JS Spring MVC frame work is used to develop enterprise application and it helps to maintain loosely coupling Spring IOC is used to inject dependencies and manage the life cycle of a bean Implemented Spring Annotations Spring AOP to develop Business layer components Experienced with distributed transaction management with isolation levels with Spring JTA Exposed Stateless session beans as RESTful web services using JAXRS Developed Restful web service using JaxRs with Jersey framework Swagger is used to create interactive documentation of Rest API and to automate the test scripts OAUTH 20 authentication frame work is used to provide security to Restful web services by generating access token in order to access protected resources Spring security is used for authentication and authorization and to provide protection against attacks like session fixation clickjacking and cross site request forgery Spring batch programming is executed by using quartz scheduler Test cases are developed and implemented using Junit testing Developed our application using Service Oriented Architecture Apache camel framework is used for messageoriented middleware with rulebased routing and mediation engine Apache camel framework is used for concrete implementations of Enterprise Integration Patterns and connectivity to great variety of transports and APIs Messaging queues were developed using JMS frame work with IBMMQ to communicate between applications by sending messages Maven is used as a build tool and SVN is used to maintain version control GULP is used to build Angularjs application and protractor for testing Hibernate ORM is used to achieve persistence and make connections with MySQL Database HQL is used to retrieve data from database Hibernate EHcache is used at second level to boost the performance of application Backend interfaces are developed using stored procedures and PLSQL packages Log4jand JIRA is used for logging and debugging Pivotal Cloud foundry is used to build and deploy applications Environment AngularJS 10 HTML5 CSS3 JSON Bootstrap MAVEN Spring Boot Spring IOC Spring Batch Spring cloud AWS EHcache Jax Rs Jersey Jax WS Apache CXF Spring Batch IBMMQSVNGULPProtractor1 Pivotal cloud foundry Log4j JIRA Sr Java Developer Delta Airlines Atlanta GA September 2015 to April 2017 Description In Delta Airlines ecommerce project my role is to facilitate the enhanced features to book or cancel tickets and to do checkins through smart devices which will help Delta Airlines customers to make bookings checkins by providing them various benefits such as Ease of access Convenience make bookings faster and saving the check in time Reduce the use of sales assistant Responsibilities Developed Monolithic application based on HTML5 CSS3 LESS JQuery Bootstrap AJAX for building dynamic web pages Create the frontend JavaScript components using Backbone JS and frontend templates and used Underscores hard coded dependency in combination with Handlebar JS for frontend templating Developing standalone forms for crossbrowser and crossKey Accomplishment as Single Page Applications SPA with the use of Backbone JS Datastructuring models and collections and user interfaces are developed using Backbone JS to maintain the synchronization and to achieve MVC pattern Used Ajax for sending and retrieving data from server by giving URL to get JSON data for models and to populate models from the server Used QUnit testing framework to perform unit test on Backbone JS code and developed validations using custom generic JavaScript functions Load testing is done using JMeter for Ajax JSFRich Faces application Produced SOAP web services using Metro JAXWSRI for building the business application layer Created WSDL Web Services Description Language document for client application web services Designed and implemented Business Delegate Session Facade and DTO Design Patterns Used Hibernate along with spring for implementing Spring IOC Spring AOP and Spring ORM for back end tiers Developed beans from the existing parent beans using Spring Inheritance and extensively used various Spring Framework modules like MVC JDBC Templates Extensively used Hibernate mappings HQL EHCache Query Lazy loading Transactions and Lockings Implemented concepts of Hibernate Transaction Management Hibernate Batch Transactions and cache DB2 database used to load the application data and written PLSQL procedures complex queries to perform various data operations Experienced in implementation of JMS to exchange information over reliable channel in an asynchronous way by using Rabbit MQ as a message queue Implemented Spring Security for providing authentication and authorization for web services Focused on Test Driven Development TDD thereby creating detailed Junit along with Mockito for every single functionality before writing the functionality Responsible for Continuous Integration CI and Continuous Delivery CD process implementation using Jenkins along with Shell scripts to automate routine jobs Used Maven to build the application Performed logging using Log4j Environment HTML5 CSS3LESS JQuery Bootstrap Ajax Backbone JS Underscore JS Handlebar JS Native JS Qunit JMeter Junit JAXWS SOAP WSDL JSON Spring IOC Spring AOP Spring ORM Spring MVC JDBC Hibernate HQL EHCache Hibernate Transaction Management Hibernate Batch Transactions Jenkins Maven Log4J DB2 PLSQL JMS Rabbit MQ Jr Java Developer UPS July 2012 to August 2015 Description UPS is the worlds largest package delivery company Using advanced technology UPS provides a powerful competitive advantage that can help you earn repeat customers and grow your business This is a web application that was built to satisfy the need for developing a micro service architecture that brings in new feature and enhances the process of creating and retrieving report and existing reference data that was collected from the user Responsibilities Involved in developing the Monolithic architecture application using EJB Struts jQuery JSP by following the Waterfall Methodology Implemented the EJB and Struts Framework for developing the Form and Action Classes Prepared EJB deployment descriptors using XML and Used JAXB components for transferring the objects between the application and the database Dynamics from generation auto completion of forms and uservalidation functionalities using jQuery Configured Strutsconfigxml Tilesdefxml and properties file provided by Struts Framework for the implemented modules Implemented connectivity to databases using JDBC from servlets and JSP through Enterprise Java Beans EJB Developed Web pages using JSP and implemented Struts Validation framework for form input validations Build PLSQL functions stored procedures views with JDBC data source with connection pooling enabled Implemented JavaScript Library for simplifying the HTML document traversing and event handling The application is deployed to JBoss Application Server Environment EJB Struts XML jQuery JDBC Servlets JSP PLSQL HTML Java Script and JBoss Education Bachelors Skills Eclipse Ejb J2ee Java Hibernate HTML5 CSS3 Twitter Bootstrap Angular4 Typescript Angular CLI NGRX ECMAES6ES7 Babel Typescript Web Pack DOM HTTP Ajax Node JS Hapi JS REST Mongo DB Oracle Redis Swagger Additional Information TECHNICAL SKILLS Programming Languages C C Java PLSQL Net Web Technologies HTML5 SASS CSS3 JavaScript PHP JSON JQUERY AJAX XML SOAP REST WSDL JAXP JAXB JavaScript Frameworks JQuery Angular 2040 React JS Expressjs Backbonejs Nodejs Emberjs Handlebarsjs J2EE Technologies frameworks Servlets EJB JSF JSP JDBC REST SOAP WSDL JAXB JAXP JPA JMS  Hibernate Spring Data Spring Cloud Dump Analysis Spring MVC Spring Boot Spring Batch Web service frameworks JAXWS JAXRS Apache CXF Axis Jersey Testing technologiestools JUnit JMeter Selenium Cucumber SPock Mockito TestNg Karma Jasmine Protractor Mocha Chai Databases MySQL Oracle SQL Server NoSQL Mongo Cassandra Messaging Services JMS Active MQ Rabbit MQ IBM MQ Apache Kafka IDEs Eclipse Visual Studio IntelliJ Spring Tool Suite Sublime Text WinSCP Putty Cloud Technologies DevOps Tools AWS PCF EC2 EBS S3 Docker ECS EBS EKS SQS RDS S3 Glacier Lambda Kubernetes Build Tools ANT Maven 30 Gradle NPM Grunt Gulp Bower Jenkins Testing Tools Junit TestNG Mockito Jasmine Karma Mocha Chai Spock Protractor Version Control CVS GIT SVN Software Methodologies Agile Scrum TDD Waterfall Project Management Tools JIRA Rally Microsoft Project Operating System Windows Linux Unix MSDOS",
    "entities": [
        "Micro Services",
        "Implemented Redux",
        "Docker Engine Hub Machine Compose",
        "Analysis Design Development Documentation Testing Deployment Version Control",
        "Implemented Docker",
        "Component",
        "Delta Airlines",
        "Implemented Spring",
        "Control CVS",
        "Used Spring IOC",
        "Convenience",
        "JMS",
        "Drools Rule Engines",
        "Spring IOC",
        "Spring Inheritance",
        "Infrastructure Jenkins",
        "Edison",
        "JSX React Native concepts Expertise",
        "node",
        "Implemented React JS",
        "the Mongoose Connector",
        "Express",
        "XML",
        "Atlanta",
        "Responsibilities Developed Monolithic",
        "JUnit",
        "Sentaida Group Co Ltd",
        "Shell",
        "MQ IBM",
        "Keys Router Forms Events",
        "Dynamic Single Page Application",
        "Amazon",
        "QUnit",
        "JWT Spring",
        "HTML5 CSS3LESS Bootstrap Typescript",
        "Developed Nodejs Readable and Writable",
        "Developed",
        "Mongo",
        "NgModel NgApp",
        "jQuery Configured Strutsconfigxml Tilesdefxml",
        "ANT Good",
        "Utilized",
        "Mockito",
        "Qingdao Shandong China",
        "Responsibilities Involved",
        "Restful",
        "GULP",
        "Babel Typescript",
        "Hapiswaggered",
        "HTML5",
        "SOA",
        "Description Consolidated Edison Inc",
        "Description UPS",
        "JSP",
        "Present Description Sentury Tire",
        "Angular UI",
        "JQuery React",
        "Angular Filters",
        "DOM",
        "Customers",
        "CLI",
        "MVC",
        "JaxRs",
        "Automatic Sharding Mongoose Connector",
        "Agile",
        "EJB",
        "JAXWS JAXRS Apache",
        "Node JS",
        "BRMS Business Rules Management System",
        "Amazon S3Amazon Simple Storage ServiceAmazon",
        "Rabbit MQ",
        "Hapi JS Expertise",
        "ParamMap",
        "the Waterfall Methodology Implemented",
        "US",
        "Karma Test Runner Testing",
        "Angular CLI Developed Angular",
        "Created",
        "Responsibilities UI",
        "UI Design and Development",
        "HTML Pages",
        "Spock",
        "Express JS Involved",
        "JBOSS Application",
        "Handlebar JS",
        "Implemented AWS",
        "Developer Edison NJ",
        "Builtin AJAX HTTP Service",
        "Backbone JS",
        "React JS",
        "crossKey Accomplishment",
        "UPS",
        "Standalone",
        "Amazon Web Services",
        "ReducerRedux",
        "NPM",
        "Created WSDL Web Services Description Language",
        "the United States",
        "Custom Reusable React Components Library",
        "JMeter Mokito",
        "Typescript",
        "NGRX",
        "JDBC",
        "Angular JS Spring",
        "DTO Design Patterns Used Hibernate",
        "Redux Animations",
        "NPM Node Package",
        "StoreRedux",
        "Angular 4",
        "Express JS",
        "JIRA HP Quality Center",
        "Maven",
        "Build",
        "JWT",
        "Implemented Express",
        "CLI Command Line Interface",
        "JavaScript",
        "CVS Expertise",
        "UI",
        "Selenium",
        "Sentury Tire Co Ltd",
        "Microsoft",
        "Responsibilities Implemented Micro Service Architecture",
        "the Rest Services",
        "RxJS",
        "SVN",
        "Queue",
        "Groovy",
        "Hibernate Transaction Management Hibernate Batch Transactions",
        "Karma Jasmine",
        "the Single Page Micro Service Oriented Architecture Application",
        "REST",
        "Miami",
        "DevOps Tools AWS PCF",
        "NoSQL",
        "Responsible for Continuous Integration CI",
        "Description Royal Caribbean International",
        "Software Development Life Cycle",
        "JBoss Application Server Environment",
        "EBS",
        "MQ Cat",
        "Node",
        "EJB Struts jQuery JSP"
    ],
    "experience": "Experience in using React JS components Keys Router Forms Events plus Redux Animations and Flux concept Well Experienced for creating interactive UIs in React JS using Virtual DOM Oneway data flow JSX React Native concepts Expertise in making Custom Reusable React Components Library Well experienced in Angular JS Backbone JS Ember JS Knockout JS and Ext JS for making customize front end app development and to achieve MVC design flow Strong knowledge in developing applications for view rendering using JQuery React JS Handlebar JS Developed and deployed Micro Services based applications using Spring Boot along with Spring Rest and Node JS with Express JS and Hapi JS Expertise in Using Grunt Gulp Web pack Bower Strong Experience on working with UI testing frameworks like Karma Jasmine Protractor for Angular JS Mocha and Chai for React JS and Backbone JS Good Experience in Bug tracking tools like JIRA HP Quality Center and Bugzilla Expertise in working with JAVA 8 features like Collection API Stream API Time API Multithreading Transaction Management and Exception Handling Expertise in making Standalone production grade applications using Spring Boot Developed controllers and services for handling the requests using Spring Boot Well experienced in using Spring Boot features like Spring Boot Actuator Spring Boot JPA Spring Boot JDBC Good amount of experience in integrating Swagger documentation into a Spring Boot based Rest web service mainly by using spring fox implementation for generating the swagger documentation Expertise in SOA using Spring REST to create REST resources which has various components like JAXRS Jersey Framework Rest Easy and WADL for documenting REST APIS Good working knowledge on integration of Drools Rule Engines which corresponds to validating BRMS Business Rules Management System with Spring Bean Strong knowledge in Amazon Web Services like Amazon S3Amazon Simple Storage ServiceAmazon EC2Elastic Compute CloudAmazon Simple DB Amazon EBS Amazon cloud front Amazon SQS Amazon Elastic Load Balancing Worked with Jenkins for continuous integration and Performance improvements for the application Knowledge on various Docker components like Docker Engine Hub Machine Compose and Docker Registry Well experienced with build tools like Gradle Maven and ANT Good knowledge on package manager tools such as NPM and Bower for dependency management Hands on experience in software configurationchange control process and tools like Subversion SVN Git and CVS Expertise in logging tools like Log4j slf4j Experience in writing and executing unit test cases using JUnit and JMeter Mokito Testing Framework Strong Knowledge on automated javabased integration testing and behavioral testing of the applications using Selenium and Cucumber respectively Good experience in using Software development methodologies like AgileScrum Water Fall and Rational Application Development methodologies Authorized to work in the US for any employer Work Experience Java Full Stack Developer Sentury Tire Hialeah FL November 2018 to Present Description Sentury Tire is a subsidiary of Sentaida Group Co Ltd born in Qingdao Shandong China in 2008 Sentury Tire Co Ltd started mass production in 2009 principally engaged in passenger crossover sport utility vehicle commercial van and aircraft tires Senturys facilities cover an area of 96 million square feet with an annual capacity of 9 million tires in 2013 Responsibilities Implemented Micro Service Architecture using Mongo DB Hapi JS Angular 4 and Node JS stack and developed Single Page Applications SPA Designed the frontend using web technologies likeHTML5 CSS3 and Twitter Bootstrap framework and Angular 4 for creating grid layout responsive screen sizes and devices Developed reusable Angular 4components which are compatible with latest versions of typescript and angular CLI Configured various routes directives for grid pagination conditional validations templating dynamic loading lazy loading Shadow DOM NGRX store Created services to consume RESTAPIs using Component based architecture provided by Angular4 Made use of Angular UI grid to display treebased grids Converted the code base to use modern ECMAScript ES6 ES7 used Babel Typescript and Web pack as a module loader and used along with Angular CLI Developed Angular views to hook up models to the DOM and synchronize data with server as a SPA Made use of Angular4 Observables to make HTTP Requests and leveraged its functions to loop around results Builtin AJAX HTTP Service with observables is used extensively for making quick and incremental updates to UI of the application Developed serverside proxy using Node JS Hapi JS for an eventdriven nonblocking IO model to make an efficient application while keeping it lightweight Used NodeJS with HapiJS server to interact with the Rest services and database hosted on multiple load balanced cloud instances Made use of authentication and authorization techniques available with HapiJS and used its tools like web packs to avoid boiler plate code Utilized auto configurable documentation functionality provided by HapiJS to configure the Open API specificationSwagger using Hapiswaggered and Hapiswaggeredui Karma test runner and Jasmine test framework tool are used to perform behavioral driven testing for Angular 4 code Pushed new features live after passing tests implemented with Karma Test Runner Testing for Node JS is done using Mocha and chai Unit testing of web services is done using Spock framework by extending Groovy syntax Configured JBOSS Application server and used Oracle database to write complex PLSQL queries Designed dynamic schema through MongoDB by incorporating rich queries syntaxes and achieved data collections distributed across multiple systems for horizontal scalability as data volumes increase through Automatic Sharding Mongoose Connector is used for implementing ODM framework for Mongo DB For dependency management used the built in NPM package manager to configure the right versions of the packages Used Jenkins CICD tool for continuous integrating and deploying application on servers Configured Docker container service and build pipe line Handled all the port mappingbinding things that happen with Dockers and Containers Used Rabbit MQ for transport of data in Queue in between components of the application Configured Kibana data visualization plugin for Elastic search Log stash and created bar line and scatter plots pie charts and maps on top of large chunks of data Used Redis configuration with node server along with Cat box for caching the responses Implemented OAUTH20 authentication and authorization framework to provide the security to rest web services Installed configured and administered NoSQL database clusters in AWS Virtual Private Cloud Network for available data on cloud Implemented AWS solutions using E2C S3 RDS EBS Elastic Load Balancer Auto scaling groups Optimized volumes and EC2 instances and created monitors alarms and notifications for EC2 hosts using Cloud Watch Implemented Netflix Zuul API gateway for all the requests from the devices and websites by registering services to Eureka Configured Kubernetes in the application for automating deployment scaling and management of applications Configured DynaTrace to measure and monitor the performance of application Environment HTML5 CSS3 Twitter Bootstrap Angular4 Typescript Angular CLI NGRX ECMAES6ES7 Babel Typescript Web Pack DOM HTTP Ajax Node JS Hapi JS REST Mongo DB Oracle Redis Swagger Karma Jasmine Mocha Chai Spock Groovy JBoss ODM Mongoose Connector Kibana Elastic Search Logstach NPM Jenkins Docker Redis AWS Netflix Zuul Eureka Kubernetes DynaTrace Rabbit MQ Cat box AWS Java Full Stack Developer Royal Caribbean cruise Miami FL April 2017 to November 2018 Description Royal Caribbean International is known for driving innovation at sea Each successive class of ships is an architectural marvel and pushes the envelope of what is possible on a cruise ship such as rock climbing ice skating and surfing at sea to capture the imagination of families and adventurous vacationers alike I involved with a team to develop the application which collects and stores the Customers data and display the different questions from the various dumps according to the specific module Responsibilities Involved in developing the Single Page Micro Service Oriented Architecture Application using the Mongo Database React with Redux Angular 20 and Node JS with Express JS Involved in developing the efficient UI using HTML5 for DOM representation and CSS3LESS for good styling of the application Used the Bootstrap for the custom templating of the web pages Involved in developing custom directives for making reusable components in Angular 20 Used Angular 20 to create views to hook up models to the DOM and synchronize data with server as a Single Page Applications Developed the objects including the components using Typescript ng Modules interfaces and classes using the Arrow function Implemented Angular JS observables and listeners RxJS reactive libraries to simplify the making asynchronous calls to backend REST APIs ES6 generators were used for maintaining the concurrency between the components Multiple views were rendered by using the React JS and implemented JSX for adding XML syntax to the java script Implemented various screens for the front end using ReactJS and used various predefined components from NPM Node Package Manager and redux library Implemented React JS components Forms Events Keys Router and Animations Implemented React with Redux for statemanagement and Router for the navigation Implemented Redux to cut some complexity corners by using functional composition Implemented StoreRedux for holding the whole state tree of application and ReducerRedux for describing actions Reducers are implemented for specifying how the application state changes in response to the actions sent to the Store Implemented Web pack for bundling the modules and maintaining the libraries efficiently Angular testing was performed using the Protractor and React unit testing was performed using Mocha and Chai Developed the Rest Services on the server side using the Node JS with Express JS Implemented Node JS as a serverside proxy for an eventdriven nonblocking IO model to make the application lightweight and efficient Developed Nodejs Readable and Writable streams to process the data from the external source of the application Implemented modules into Node JS to coordinate with plans and necessities Developing RESTful web services using Node JS and Express JS and used Node JS server to interact with the Rest services and database hosted on multiple load balanced cloud instances Implemented Express JS which is fast assertive essential and moderate web framework of Node JS that helps manage a sever and routes Implemented Express JS which respond to HTTP Requests and dynamically render HTML Pages based on passing arguments to templates Implemented Axios for calling the developed RESTful services that is for making the Ajax Calls Implemented the Node Package Manager Build tool for managing the dependencies in the project OpenID Connect OIDC was implemented on the top of OAuth 20 for authorizing the Rest Services and JWT for token based authentication Used Spring IOC for the life cycle management of the bean and Java Transaction API JTA for the service layer Developed some standalone Micro services using Spring Boot micro service architectural patterns Implemented Spring Boot properties like actuators and health checkers to enhance micro service implementations Mongo database was used for handling the unstructured data and used the Mongoose Connector for the connection Mongo DB was used for heterogeneous collections of content types Implemented Log4J for logging the information and Rabbit MQ for the service of Message broker Implemented Docker for creating the custom Docker container images Implemented the Docker for packaging the application in virtual container and then the contained application is deployed to Pivotal Cloud Foundry using CLI Command Line Interface tool where service is as Infrastructure Jenkins was implemented for the Continuous delivery and for Continuous Integration Used the Junit for unit testing and Selenium for the integral testing of the application Implemented the Agile methodology for the efficient and effective completion of project Environment Redux Angular 20 HTML5 CSS3LESS Bootstrap Typescript ng Modules Arrow function Angular JS observables listeners ES6 React JS JSX ReactJS NPM React JS components Forms Events Keys Router Animations StoreRedux ReducerRedux Web pack Protractor Mocha and Chai Rest Services Node JS with Express JS Axios OpenID Connect OIDC OAuth 20 JWT Spring IOC Java Transaction API JTA Spring Boot Mongoose Connector Mongo DB Log4J Rabbit MQ Docker Pivotal Cloud Foundry Jenkins Junit Selenium and Agile methodology Java Full stack Developer Edison NJ July 2016 to April 2017 Description Consolidated Edison Inc commonly known as con Edison or con Ed is one of the largest investorowned energy companies in the United States I was involved in developing UI pages that helps customers retrieve online quotes depending on service Also worked on login field validations that help customers who are already members to retrieve their online account Responsibilities UI Web pages were developed by using HTML5 CSS3 and JavaScript frameworks like AngularJS16 Angular JS 16 is used to create Controllers to handle events triggered by clients and send request to server Angular Directives like NgModel NgApp and Ngrepeat etc were used to develop views and data binding in our application Worked with builtin Angular Filters and developed custom Angular Filters in application as per business requirements Angular scopes scopes are used to glue View and controller to send data from controller to view Angular Routes were used to navigate through views in our application Angular Directives are used to develop customized components Rest API calls and data binding is done by using Angular JS Spring MVC frame work is used to develop enterprise application and it helps to maintain loosely coupling Spring IOC is used to inject dependencies and manage the life cycle of a bean Implemented Spring Annotations Spring AOP to develop Business layer components Experienced with distributed transaction management with isolation levels with Spring JTA Exposed Stateless session beans as RESTful web services using JAXRS Developed Restful web service using JaxRs with Jersey framework Swagger is used to create interactive documentation of Rest API and to automate the test scripts OAUTH 20 authentication frame work is used to provide security to Restful web services by generating access token in order to access protected resources Spring security is used for authentication and authorization and to provide protection against attacks like session fixation clickjacking and cross site request forgery Spring batch programming is executed by using quartz scheduler Test cases are developed and implemented using Junit testing Developed our application using Service Oriented Architecture Apache camel framework is used for messageoriented middleware with rulebased routing and mediation engine Apache camel framework is used for concrete implementations of Enterprise Integration Patterns and connectivity to great variety of transports and APIs Messaging queues were developed using JMS frame work with IBMMQ to communicate between applications by sending messages Maven is used as a build tool and SVN is used to maintain version control GULP is used to build Angularjs application and protractor for testing Hibernate ORM is used to achieve persistence and make connections with MySQL Database HQL is used to retrieve data from database Hibernate EHcache is used at second level to boost the performance of application Backend interfaces are developed using stored procedures and PLSQL packages Log4jand JIRA is used for logging and debugging Pivotal Cloud foundry is used to build and deploy applications Environment AngularJS 10 HTML5 CSS3 JSON Bootstrap MAVEN Spring Boot Spring IOC Spring Batch Spring cloud AWS EHcache Jax Rs Jersey Jax WS Apache CXF Spring Batch IBMMQSVNGULPProtractor1 Pivotal cloud foundry Log4j JIRA Sr Java Developer Delta Airlines Atlanta GA September 2015 to April 2017 Description In Delta Airlines ecommerce project my role is to facilitate the enhanced features to book or cancel tickets and to do checkins through smart devices which will help Delta Airlines customers to make bookings checkins by providing them various benefits such as Ease of access Convenience make bookings faster and saving the check in time Reduce the use of sales assistant Responsibilities Developed Monolithic application based on HTML5 CSS3 LESS JQuery Bootstrap AJAX for building dynamic web pages Create the frontend JavaScript components using Backbone JS and frontend templates and used Underscores hard coded dependency in combination with Handlebar JS for frontend templating Developing standalone forms for crossbrowser and crossKey Accomplishment as Single Page Applications SPA with the use of Backbone JS Datastructuring models and collections and user interfaces are developed using Backbone JS to maintain the synchronization and to achieve MVC pattern Used Ajax for sending and retrieving data from server by giving URL to get JSON data for models and to populate models from the server Used QUnit testing framework to perform unit test on Backbone JS code and developed validations using custom generic JavaScript functions Load testing is done using JMeter for Ajax JSFRich Faces application Produced SOAP web services using Metro JAXWSRI for building the business application layer Created WSDL Web Services Description Language document for client application web services Designed and implemented Business Delegate Session Facade and DTO Design Patterns Used Hibernate along with spring for implementing Spring IOC Spring AOP and Spring ORM for back end tiers Developed beans from the existing parent beans using Spring Inheritance and extensively used various Spring Framework modules like MVC JDBC Templates Extensively used Hibernate mappings HQL EHCache Query Lazy loading Transactions and Lockings Implemented concepts of Hibernate Transaction Management Hibernate Batch Transactions and cache DB2 database used to load the application data and written PLSQL procedures complex queries to perform various data operations Experienced in implementation of JMS to exchange information over reliable channel in an asynchronous way by using Rabbit MQ as a message queue Implemented Spring Security for providing authentication and authorization for web services Focused on Test Driven Development TDD thereby creating detailed Junit along with Mockito for every single functionality before writing the functionality Responsible for Continuous Integration CI and Continuous Delivery CD process implementation using Jenkins along with Shell scripts to automate routine jobs Used Maven to build the application Performed logging using Log4j Environment HTML5 CSS3LESS JQuery Bootstrap Ajax Backbone JS Underscore JS Handlebar JS Native JS Qunit JMeter Junit JAXWS SOAP WSDL JSON Spring IOC Spring AOP Spring ORM Spring MVC JDBC Hibernate HQL EHCache Hibernate Transaction Management Hibernate Batch Transactions Jenkins Maven Log4J DB2 PLSQL JMS Rabbit MQ Jr Java Developer UPS July 2012 to August 2015 Description UPS is the worlds largest package delivery company Using advanced technology UPS provides a powerful competitive advantage that can help you earn repeat customers and grow your business This is a web application that was built to satisfy the need for developing a micro service architecture that brings in new feature and enhances the process of creating and retrieving report and existing reference data that was collected from the user Responsibilities Involved in developing the Monolithic architecture application using EJB Struts jQuery JSP by following the Waterfall Methodology Implemented the EJB and Struts Framework for developing the Form and Action Classes Prepared EJB deployment descriptors using XML and Used JAXB components for transferring the objects between the application and the database Dynamics from generation auto completion of forms and uservalidation functionalities using jQuery Configured Strutsconfigxml Tilesdefxml and properties file provided by Struts Framework for the implemented modules Implemented connectivity to databases using JDBC from servlets and JSP through Enterprise Java Beans EJB Developed Web pages using JSP and implemented Struts Validation framework for form input validations Build PLSQL functions stored procedures views with JDBC data source with connection pooling enabled Implemented JavaScript Library for simplifying the HTML document traversing and event handling The application is deployed to JBoss Application Server Environment EJB Struts XML jQuery JDBC Servlets JSP PLSQL HTML Java Script and JBoss Education Bachelors Skills Eclipse Ejb J2ee Java Hibernate HTML5 CSS3 Twitter Bootstrap Angular4 Typescript Angular CLI NGRX ECMAES6ES7 Babel Typescript Web Pack DOM HTTP Ajax Node JS Hapi JS REST Mongo DB Oracle Redis Swagger Additional Information TECHNICAL SKILLS Programming Languages C C Java PLSQL Net Web Technologies HTML5 SASS CSS3 JavaScript PHP JSON JQUERY AJAX XML SOAP REST WSDL JAXP JAXB JavaScript Frameworks JQuery Angular 2040 React JS Expressjs Backbonejs Nodejs Emberjs Handlebarsjs J2EE Technologies frameworks Servlets EJB JSF JSP JDBC REST SOAP WSDL JAXB JAXP JPA JMS   Hibernate Spring Data Spring Cloud Dump Analysis Spring MVC Spring Boot Spring Batch Web service frameworks JAXWS JAXRS Apache CXF Axis Jersey Testing technologiestools JUnit JMeter Selenium Cucumber SPock Mockito TestNg Karma Jasmine Protractor Mocha Chai Databases MySQL Oracle SQL Server NoSQL Mongo Cassandra Messaging Services JMS Active MQ Rabbit MQ IBM MQ Apache Kafka IDEs Eclipse Visual Studio IntelliJ Spring Tool Suite Sublime Text WinSCP Putty Cloud Technologies DevOps Tools AWS PCF EC2 EBS S3 Docker ECS EBS EKS SQS RDS S3 Glacier Lambda Kubernetes Build Tools ANT Maven 30 Gradle NPM Grunt Gulp Bower Jenkins Testing Tools Junit TestNG Mockito Jasmine Karma Mocha Chai Spock Protractor Version Control CVS GIT SVN Software Methodologies Agile Scrum TDD Waterfall Project Management Tools JIRA Rally Microsoft Project Operating System Windows Linux Unix MSDOS",
    "extracted_keywords": [
        "Java",
        "Full",
        "Stack",
        "Developer",
        "lJavaspan",
        "Full",
        "Stack",
        "span",
        "lDeveloperspan",
        "Java",
        "Full",
        "Stack",
        "Developer",
        "Sentury",
        "Tire",
        "Hialeah",
        "FL",
        "years",
        "stack",
        "development",
        "experience",
        "phases",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "SDLC",
        "Analysis",
        "Design",
        "Development",
        "Documentation",
        "Testing",
        "Deployment",
        "Version",
        "Control",
        "production",
        "support",
        "web",
        "enterprise",
        "business",
        "applications",
        "JAVAJ2EE",
        "technologies",
        "Mastery",
        "UI",
        "Design",
        "Development",
        "HTML5",
        "CSS3",
        "SASS",
        "Bootstrap",
        "AJAX",
        "W3C",
        "Web",
        "Standards",
        "features",
        "arrows",
        "modules",
        "object",
        "literals",
        "promises",
        "Proficient",
        "Dynamic",
        "Single",
        "Page",
        "Application",
        "SPA",
        "MEAN",
        "knowledge",
        "Angular",
        "2x4x",
        "NGRX",
        "MVVM",
        "design",
        "flow",
        "Expertise",
        "Router",
        "ParamMap",
        "Angular",
        "ParamMap",
        "router",
        "advantage",
        "security",
        "aspects",
        "types",
        "Component",
        "features",
        "Modules",
        "Templates",
        "Directives",
        "Meta",
        "Data",
        "Good",
        "amount",
        "Knowledge",
        "directives",
        "observables",
        "dependency",
        "injection",
        "pipes",
        "shadow",
        "Dom",
        "Expertise",
        "Typescript",
        "Angular",
        "4x",
        "applications",
        "features",
        "auto",
        "completion",
        "navigation",
        "knowledge",
        "React",
        "JS",
        "framework",
        "SPA",
        "Experience",
        "React",
        "JS",
        "components",
        "Keys",
        "Router",
        "Forms",
        "Events",
        "Redux",
        "Animations",
        "Flux",
        "concept",
        "UIs",
        "React",
        "JS",
        "DOM",
        "Oneway",
        "data",
        "JSX",
        "React",
        "concepts",
        "Expertise",
        "Custom",
        "Reusable",
        "React",
        "Components",
        "Library",
        "JS",
        "Backbone",
        "JS",
        "Ember",
        "JS",
        "Knockout",
        "JS",
        "Ext",
        "JS",
        "customize",
        "end",
        "app",
        "development",
        "MVC",
        "design",
        "flow",
        "knowledge",
        "applications",
        "view",
        "JQuery",
        "React",
        "JS",
        "Handlebar",
        "JS",
        "Developed",
        "Micro",
        "Services",
        "applications",
        "Spring",
        "Boot",
        "Spring",
        "Rest",
        "Node",
        "JS",
        "Express",
        "JS",
        "Hapi",
        "JS",
        "Expertise",
        "Grunt",
        "Gulp",
        "Web",
        "pack",
        "Bower",
        "Strong",
        "Experience",
        "UI",
        "testing",
        "frameworks",
        "Karma",
        "Jasmine",
        "Protractor",
        "Angular",
        "JS",
        "Mocha",
        "Chai",
        "React",
        "JS",
        "Backbone",
        "JS",
        "Good",
        "Experience",
        "Bug",
        "tracking",
        "tools",
        "JIRA",
        "HP",
        "Quality",
        "Center",
        "Bugzilla",
        "Expertise",
        "JAVA",
        "features",
        "Collection",
        "API",
        "Stream",
        "API",
        "Time",
        "API",
        "Multithreading",
        "Transaction",
        "Management",
        "Exception",
        "Handling",
        "Expertise",
        "production",
        "grade",
        "applications",
        "Spring",
        "Boot",
        "controllers",
        "services",
        "requests",
        "Spring",
        "Boot",
        "Spring",
        "Boot",
        "Spring",
        "Boot",
        "Actuator",
        "Spring",
        "Boot",
        "JPA",
        "Spring",
        "Boot",
        "JDBC",
        "Good",
        "amount",
        "experience",
        "Swagger",
        "documentation",
        "Spring",
        "Boot",
        "Rest",
        "web",
        "service",
        "spring",
        "fox",
        "implementation",
        "documentation",
        "Expertise",
        "SOA",
        "Spring",
        "REST",
        "REST",
        "resources",
        "components",
        "JAXRS",
        "Jersey",
        "Framework",
        "Rest",
        "Easy",
        "REST",
        "APIS",
        "knowledge",
        "integration",
        "Drools",
        "Rule",
        "Engines",
        "BRMS",
        "Business",
        "Rules",
        "Management",
        "System",
        "Spring",
        "Bean",
        "knowledge",
        "Amazon",
        "Web",
        "Services",
        "Amazon",
        "Simple",
        "Storage",
        "ServiceAmazon",
        "Compute",
        "CloudAmazon",
        "Simple",
        "DB",
        "Amazon",
        "EBS",
        "Amazon",
        "cloud",
        "front",
        "Amazon",
        "SQS",
        "Amazon",
        "Elastic",
        "Load",
        "Balancing",
        "Jenkins",
        "integration",
        "Performance",
        "improvements",
        "application",
        "Knowledge",
        "Docker",
        "components",
        "Docker",
        "Engine",
        "Hub",
        "Machine",
        "Compose",
        "Docker",
        "Registry",
        "build",
        "tools",
        "Gradle",
        "Maven",
        "ANT",
        "knowledge",
        "package",
        "manager",
        "tools",
        "NPM",
        "Bower",
        "dependency",
        "management",
        "Hands",
        "experience",
        "software",
        "configurationchange",
        "control",
        "process",
        "tools",
        "Subversion",
        "SVN",
        "Git",
        "CVS",
        "Expertise",
        "tools",
        "Log4j",
        "slf4j",
        "Experience",
        "writing",
        "unit",
        "test",
        "cases",
        "JUnit",
        "JMeter",
        "Mokito",
        "Testing",
        "Framework",
        "Strong",
        "Knowledge",
        "integration",
        "testing",
        "testing",
        "applications",
        "Selenium",
        "Cucumber",
        "experience",
        "Software",
        "development",
        "methodologies",
        "AgileScrum",
        "Water",
        "Fall",
        "Rational",
        "Application",
        "Development",
        "methodologies",
        "US",
        "employer",
        "Work",
        "Experience",
        "Java",
        "Full",
        "Stack",
        "Developer",
        "Sentury",
        "Tire",
        "Hialeah",
        "FL",
        "November",
        "Present",
        "Description",
        "Sentury",
        "Tire",
        "subsidiary",
        "Sentaida",
        "Group",
        "Co",
        "Ltd",
        "Qingdao",
        "Shandong",
        "China",
        "Sentury",
        "Tire",
        "Co",
        "Ltd",
        "production",
        "passenger",
        "crossover",
        "sport",
        "utility",
        "vehicle",
        "van",
        "aircraft",
        "tires",
        "Senturys",
        "facilities",
        "area",
        "feet",
        "capacity",
        "tires",
        "Responsibilities",
        "Micro",
        "Service",
        "Architecture",
        "Mongo",
        "DB",
        "Hapi",
        "JS",
        "Angular",
        "Node",
        "JS",
        "stack",
        "Single",
        "Page",
        "Applications",
        "SPA",
        "frontend",
        "web",
        "technologies",
        "likeHTML5",
        "CSS3",
        "Twitter",
        "Bootstrap",
        "framework",
        "grid",
        "screen",
        "sizes",
        "devices",
        "Angular",
        "4components",
        "versions",
        "typescript",
        "CLI",
        "Configured",
        "routes",
        "directives",
        "grid",
        "pagination",
        "validations",
        "loading",
        "loading",
        "Shadow",
        "DOM",
        "NGRX",
        "store",
        "services",
        "RESTAPIs",
        "Component",
        "architecture",
        "Angular4",
        "use",
        "Angular",
        "UI",
        "grid",
        "grids",
        "code",
        "base",
        "ECMAScript",
        "ES6",
        "ES7",
        "Babel",
        "Typescript",
        "Web",
        "pack",
        "module",
        "loader",
        "Angular",
        "CLI",
        "Developed",
        "Angular",
        "views",
        "models",
        "DOM",
        "data",
        "server",
        "SPA",
        "use",
        "Angular4",
        "Observables",
        "HTTP",
        "Requests",
        "functions",
        "results",
        "Builtin",
        "AJAX",
        "HTTP",
        "Service",
        "observables",
        "updates",
        "UI",
        "application",
        "serverside",
        "proxy",
        "Node",
        "JS",
        "Hapi",
        "JS",
        "IO",
        "model",
        "application",
        "NodeJS",
        "server",
        "Rest",
        "services",
        "database",
        "load",
        "cloud",
        "instances",
        "use",
        "authentication",
        "authorization",
        "techniques",
        "HapiJS",
        "tools",
        "web",
        "packs",
        "boiler",
        "plate",
        "code",
        "auto",
        "documentation",
        "functionality",
        "HapiJS",
        "API",
        "specificationSwagger",
        "Hapiswaggered",
        "Hapiswaggeredui",
        "Karma",
        "test",
        "runner",
        "Jasmine",
        "test",
        "framework",
        "tool",
        "testing",
        "Angular",
        "code",
        "features",
        "tests",
        "Karma",
        "Test",
        "Runner",
        "Testing",
        "Node",
        "JS",
        "Mocha",
        "chai",
        "Unit",
        "testing",
        "web",
        "services",
        "Spock",
        "framework",
        "syntax",
        "Configured",
        "JBOSS",
        "Application",
        "server",
        "Oracle",
        "database",
        "PLSQL",
        "schema",
        "MongoDB",
        "queries",
        "syntaxes",
        "data",
        "collections",
        "systems",
        "scalability",
        "data",
        "volumes",
        "Automatic",
        "Sharding",
        "Mongoose",
        "Connector",
        "ODM",
        "framework",
        "Mongo",
        "DB",
        "dependency",
        "management",
        "NPM",
        "package",
        "manager",
        "versions",
        "packages",
        "Jenkins",
        "CICD",
        "tool",
        "integrating",
        "application",
        "servers",
        "Configured",
        "Docker",
        "container",
        "service",
        "pipe",
        "line",
        "port",
        "things",
        "Dockers",
        "Containers",
        "Rabbit",
        "MQ",
        "transport",
        "data",
        "Queue",
        "components",
        "application",
        "Kibana",
        "data",
        "visualization",
        "plugin",
        "search",
        "Log",
        "stash",
        "bar",
        "line",
        "scatter",
        "pie",
        "charts",
        "maps",
        "top",
        "chunks",
        "data",
        "Redis",
        "configuration",
        "node",
        "server",
        "Cat",
        "box",
        "responses",
        "OAUTH20",
        "authentication",
        "authorization",
        "framework",
        "security",
        "rest",
        "web",
        "services",
        "NoSQL",
        "database",
        "clusters",
        "AWS",
        "Virtual",
        "Cloud",
        "Network",
        "data",
        "cloud",
        "AWS",
        "solutions",
        "E2C",
        "S3",
        "RDS",
        "EBS",
        "Elastic",
        "Load",
        "Balancer",
        "Auto",
        "scaling",
        "groups",
        "volumes",
        "EC2",
        "instances",
        "monitors",
        "alarms",
        "notifications",
        "EC2",
        "hosts",
        "Cloud",
        "Watch",
        "Netflix",
        "Zuul",
        "API",
        "gateway",
        "requests",
        "devices",
        "websites",
        "services",
        "Eureka",
        "Configured",
        "Kubernetes",
        "application",
        "deployment",
        "scaling",
        "management",
        "applications",
        "Configured",
        "DynaTrace",
        "performance",
        "application",
        "Environment",
        "HTML5",
        "CSS3",
        "Twitter",
        "Bootstrap",
        "Angular4",
        "Typescript",
        "Angular",
        "CLI",
        "NGRX",
        "ECMAES6ES7",
        "Babel",
        "Typescript",
        "Web",
        "Pack",
        "DOM",
        "HTTP",
        "Ajax",
        "Node",
        "JS",
        "Hapi",
        "JS",
        "REST",
        "Mongo",
        "DB",
        "Oracle",
        "Redis",
        "Swagger",
        "Karma",
        "Jasmine",
        "Mocha",
        "Chai",
        "Spock",
        "Groovy",
        "JBoss",
        "ODM",
        "Mongoose",
        "Connector",
        "Kibana",
        "Elastic",
        "Search",
        "Logstach",
        "NPM",
        "Jenkins",
        "Docker",
        "Redis",
        "AWS",
        "Netflix",
        "Zuul",
        "Eureka",
        "Kubernetes",
        "DynaTrace",
        "Rabbit",
        "MQ",
        "Cat",
        "box",
        "AWS",
        "Java",
        "Full",
        "Stack",
        "Developer",
        "Royal",
        "Caribbean",
        "cruise",
        "Miami",
        "FL",
        "April",
        "November",
        "Description",
        "Royal",
        "Caribbean",
        "International",
        "innovation",
        "sea",
        "class",
        "ships",
        "marvel",
        "envelope",
        "cruise",
        "ship",
        "rock",
        "ice",
        "skating",
        "sea",
        "imagination",
        "families",
        "vacationers",
        "team",
        "application",
        "stores",
        "Customers",
        "data",
        "questions",
        "dumps",
        "module",
        "Responsibilities",
        "Single",
        "Page",
        "Micro",
        "Service",
        "Oriented",
        "Architecture",
        "Application",
        "Mongo",
        "Database",
        "React",
        "Redux",
        "Angular",
        "Node",
        "JS",
        "Express",
        "JS",
        "UI",
        "HTML5",
        "DOM",
        "representation",
        "CSS3LESS",
        "styling",
        "application",
        "Bootstrap",
        "custom",
        "templating",
        "web",
        "pages",
        "custom",
        "directives",
        "components",
        "Angular",
        "Angular",
        "views",
        "models",
        "DOM",
        "data",
        "server",
        "Single",
        "Page",
        "Applications",
        "objects",
        "components",
        "Typescript",
        "ng",
        "Modules",
        "interfaces",
        "classes",
        "Arrow",
        "function",
        "JS",
        "observables",
        "listeners",
        "RxJS",
        "reactive",
        "calls",
        "REST",
        "APIs",
        "generators",
        "concurrency",
        "components",
        "views",
        "React",
        "JS",
        "JSX",
        "XML",
        "syntax",
        "java",
        "script",
        "screens",
        "end",
        "ReactJS",
        "components",
        "NPM",
        "Node",
        "Package",
        "Manager",
        "redux",
        "library",
        "React",
        "JS",
        "components",
        "Forms",
        "Events",
        "Keys",
        "Router",
        "Animations",
        "React",
        "Redux",
        "statemanagement",
        "Router",
        "navigation",
        "Redux",
        "complexity",
        "corners",
        "composition",
        "StoreRedux",
        "state",
        "tree",
        "application",
        "ReducerRedux",
        "actions",
        "Reducers",
        "application",
        "state",
        "changes",
        "response",
        "actions",
        "Store",
        "Web",
        "pack",
        "modules",
        "libraries",
        "testing",
        "Protractor",
        "React",
        "unit",
        "testing",
        "Mocha",
        "Chai",
        "Rest",
        "Services",
        "server",
        "side",
        "Node",
        "JS",
        "Express",
        "JS",
        "Node",
        "JS",
        "serverside",
        "proxy",
        "IO",
        "model",
        "application",
        "Developed",
        "Nodejs",
        "Writable",
        "streams",
        "data",
        "source",
        "application",
        "modules",
        "Node",
        "JS",
        "plans",
        "necessities",
        "web",
        "services",
        "Node",
        "JS",
        "Express",
        "JS",
        "Node",
        "JS",
        "server",
        "Rest",
        "services",
        "database",
        "load",
        "cloud",
        "instances",
        "Express",
        "JS",
        "web",
        "framework",
        "Node",
        "JS",
        "sever",
        "routes",
        "Express",
        "JS",
        "HTTP",
        "Requests",
        "HTML",
        "Pages",
        "arguments",
        "templates",
        "Axios",
        "services",
        "Calls",
        "Node",
        "Package",
        "Manager",
        "Build",
        "tool",
        "dependencies",
        "project",
        "OpenID",
        "Connect",
        "OIDC",
        "top",
        "OAuth",
        "Rest",
        "Services",
        "JWT",
        "authentication",
        "Spring",
        "IOC",
        "life",
        "cycle",
        "management",
        "bean",
        "Java",
        "Transaction",
        "API",
        "JTA",
        "service",
        "layer",
        "Micro",
        "services",
        "Spring",
        "Boot",
        "micro",
        "service",
        "patterns",
        "Spring",
        "Boot",
        "properties",
        "actuators",
        "health",
        "checkers",
        "micro",
        "service",
        "implementations",
        "Mongo",
        "database",
        "data",
        "Mongoose",
        "Connector",
        "connection",
        "Mongo",
        "DB",
        "collections",
        "content",
        "types",
        "information",
        "Rabbit",
        "MQ",
        "service",
        "Message",
        "broker",
        "Docker",
        "custom",
        "Docker",
        "container",
        "images",
        "Docker",
        "application",
        "container",
        "application",
        "Cloud",
        "Foundry",
        "CLI",
        "Command",
        "Line",
        "Interface",
        "tool",
        "service",
        "Infrastructure",
        "Jenkins",
        "delivery",
        "Continuous",
        "Integration",
        "Junit",
        "unit",
        "testing",
        "Selenium",
        "testing",
        "application",
        "methodology",
        "completion",
        "project",
        "Environment",
        "Redux",
        "Angular",
        "HTML5",
        "CSS3LESS",
        "Bootstrap",
        "Typescript",
        "ng",
        "Modules",
        "Arrow",
        "function",
        "JS",
        "observables",
        "listeners",
        "ES6",
        "React",
        "JS",
        "JSX",
        "ReactJS",
        "NPM",
        "React",
        "JS",
        "components",
        "Forms",
        "Events",
        "Keys",
        "Router",
        "Animations",
        "StoreRedux",
        "ReducerRedux",
        "Web",
        "pack",
        "Protractor",
        "Mocha",
        "Chai",
        "Rest",
        "Services",
        "Node",
        "JS",
        "Express",
        "JS",
        "Axios",
        "OpenID",
        "Connect",
        "OIDC",
        "OAuth",
        "JWT",
        "Spring",
        "IOC",
        "Java",
        "Transaction",
        "API",
        "JTA",
        "Spring",
        "Boot",
        "Mongoose",
        "Connector",
        "Mongo",
        "DB",
        "Log4J",
        "Rabbit",
        "MQ",
        "Docker",
        "Cloud",
        "Foundry",
        "Jenkins",
        "Junit",
        "Selenium",
        "methodology",
        "Java",
        "Full",
        "stack",
        "Developer",
        "Edison",
        "NJ",
        "July",
        "April",
        "Description",
        "Consolidated",
        "Edison",
        "Inc",
        "con",
        "Edison",
        "con",
        "Ed",
        "energy",
        "companies",
        "United",
        "States",
        "UI",
        "pages",
        "customers",
        "quotes",
        "service",
        "login",
        "field",
        "validations",
        "customers",
        "members",
        "account",
        "Responsibilities",
        "UI",
        "Web",
        "pages",
        "HTML5",
        "CSS3",
        "JavaScript",
        "frameworks",
        "AngularJS16",
        "JS",
        "Controllers",
        "events",
        "clients",
        "request",
        "Angular",
        "Directives",
        "NgModel",
        "NgApp",
        "Ngrepeat",
        "views",
        "data",
        "application",
        "builtin",
        "Angular",
        "Filters",
        "custom",
        "Angular",
        "Filters",
        "application",
        "business",
        "requirements",
        "scopes",
        "scopes",
        "View",
        "controller",
        "data",
        "controller",
        "Angular",
        "Routes",
        "views",
        "application",
        "Angular",
        "Directives",
        "components",
        "Rest",
        "API",
        "calls",
        "data",
        "JS",
        "Spring",
        "MVC",
        "frame",
        "work",
        "enterprise",
        "application",
        "Spring",
        "IOC",
        "dependencies",
        "life",
        "cycle",
        "bean",
        "Spring",
        "Annotations",
        "Spring",
        "AOP",
        "Business",
        "layer",
        "components",
        "transaction",
        "management",
        "isolation",
        "levels",
        "Spring",
        "JTA",
        "Stateless",
        "session",
        "beans",
        "web",
        "services",
        "JAXRS",
        "Developed",
        "Restful",
        "web",
        "service",
        "JaxRs",
        "Jersey",
        "framework",
        "Swagger",
        "documentation",
        "Rest",
        "API",
        "test",
        "scripts",
        "authentication",
        "frame",
        "work",
        "security",
        "Restful",
        "web",
        "services",
        "access",
        "order",
        "resources",
        "Spring",
        "security",
        "authentication",
        "authorization",
        "protection",
        "attacks",
        "session",
        "fixation",
        "cross",
        "site",
        "request",
        "forgery",
        "Spring",
        "batch",
        "programming",
        "quartz",
        "scheduler",
        "Test",
        "cases",
        "Junit",
        "testing",
        "application",
        "Service",
        "Oriented",
        "Architecture",
        "Apache",
        "camel",
        "framework",
        "middleware",
        "routing",
        "mediation",
        "engine",
        "Apache",
        "camel",
        "framework",
        "implementations",
        "Enterprise",
        "Integration",
        "Patterns",
        "connectivity",
        "variety",
        "transports",
        "APIs",
        "queues",
        "JMS",
        "frame",
        "work",
        "IBMMQ",
        "applications",
        "messages",
        "Maven",
        "build",
        "tool",
        "SVN",
        "version",
        "control",
        "GULP",
        "Angularjs",
        "application",
        "protractor",
        "Hibernate",
        "ORM",
        "persistence",
        "connections",
        "MySQL",
        "Database",
        "HQL",
        "data",
        "database",
        "Hibernate",
        "EHcache",
        "level",
        "performance",
        "application",
        "interfaces",
        "procedures",
        "PLSQL",
        "packages",
        "JIRA",
        "Cloud",
        "foundry",
        "applications",
        "Environment",
        "AngularJS",
        "HTML5",
        "CSS3",
        "JSON",
        "Bootstrap",
        "MAVEN",
        "Spring",
        "Boot",
        "Spring",
        "IOC",
        "Spring",
        "Batch",
        "Spring",
        "cloud",
        "AWS",
        "EHcache",
        "Jax",
        "Rs",
        "Jersey",
        "Jax",
        "WS",
        "Apache",
        "CXF",
        "Spring",
        "Batch",
        "IBMMQSVNGULPProtractor1",
        "cloud",
        "foundry",
        "Log4j",
        "JIRA",
        "Sr",
        "Java",
        "Developer",
        "Delta",
        "Airlines",
        "Atlanta",
        "GA",
        "September",
        "April",
        "Description",
        "Delta",
        "Airlines",
        "role",
        "features",
        "book",
        "tickets",
        "checkins",
        "devices",
        "Delta",
        "Airlines",
        "customers",
        "bookings",
        "checkins",
        "benefits",
        "Ease",
        "access",
        "Convenience",
        "bookings",
        "check",
        "time",
        "use",
        "sales",
        "assistant",
        "Responsibilities",
        "application",
        "HTML5",
        "JQuery",
        "Bootstrap",
        "AJAX",
        "web",
        "pages",
        "frontend",
        "JavaScript",
        "components",
        "Backbone",
        "JS",
        "frontend",
        "templates",
        "Underscores",
        "dependency",
        "combination",
        "Handlebar",
        "JS",
        "frontend",
        "forms",
        "crossbrowser",
        "Accomplishment",
        "Single",
        "Page",
        "Applications",
        "SPA",
        "use",
        "Backbone",
        "JS",
        "Datastructuring",
        "models",
        "collections",
        "user",
        "interfaces",
        "Backbone",
        "JS",
        "synchronization",
        "MVC",
        "pattern",
        "Ajax",
        "data",
        "server",
        "URL",
        "data",
        "models",
        "models",
        "server",
        "QUnit",
        "testing",
        "framework",
        "unit",
        "test",
        "Backbone",
        "JS",
        "code",
        "validations",
        "custom",
        "JavaScript",
        "functions",
        "Load",
        "testing",
        "JMeter",
        "JSFRich",
        "Faces",
        "application",
        "SOAP",
        "web",
        "services",
        "Metro",
        "JAXWSRI",
        "business",
        "application",
        "layer",
        "WSDL",
        "Web",
        "Services",
        "Description",
        "Language",
        "document",
        "client",
        "application",
        "web",
        "services",
        "Business",
        "Delegate",
        "Session",
        "Facade",
        "DTO",
        "Design",
        "Patterns",
        "Hibernate",
        "spring",
        "Spring",
        "IOC",
        "Spring",
        "AOP",
        "Spring",
        "ORM",
        "end",
        "tiers",
        "beans",
        "parent",
        "beans",
        "Spring",
        "Inheritance",
        "Spring",
        "Framework",
        "modules",
        "MVC",
        "JDBC",
        "Templates",
        "Hibernate",
        "mappings",
        "HQL",
        "EHCache",
        "Query",
        "Lazy",
        "loading",
        "Transactions",
        "Lockings",
        "concepts",
        "Hibernate",
        "Transaction",
        "Management",
        "Hibernate",
        "Batch",
        "Transactions",
        "cache",
        "DB2",
        "database",
        "application",
        "data",
        "PLSQL",
        "procedures",
        "queries",
        "data",
        "operations",
        "implementation",
        "JMS",
        "information",
        "channel",
        "way",
        "Rabbit",
        "MQ",
        "message",
        "queue",
        "Spring",
        "Security",
        "authentication",
        "authorization",
        "web",
        "services",
        "Test",
        "Driven",
        "Development",
        "TDD",
        "Junit",
        "Mockito",
        "functionality",
        "functionality",
        "Continuous",
        "Integration",
        "CI",
        "Continuous",
        "Delivery",
        "CD",
        "process",
        "implementation",
        "Jenkins",
        "Shell",
        "scripts",
        "jobs",
        "Maven",
        "application",
        "Performed",
        "Log4j",
        "Environment",
        "HTML5",
        "CSS3LESS",
        "JQuery",
        "Bootstrap",
        "Backbone",
        "JS",
        "Underscore",
        "JS",
        "Handlebar",
        "JS",
        "Native",
        "JS",
        "Qunit",
        "JMeter",
        "Junit",
        "JAXWS",
        "SOAP",
        "WSDL",
        "JSON",
        "Spring",
        "IOC",
        "Spring",
        "AOP",
        "Spring",
        "ORM",
        "Spring",
        "MVC",
        "JDBC",
        "Hibernate",
        "HQL",
        "EHCache",
        "Hibernate",
        "Transaction",
        "Management",
        "Hibernate",
        "Batch",
        "Transactions",
        "Jenkins",
        "Maven",
        "DB2",
        "PLSQL",
        "JMS",
        "Rabbit",
        "MQ",
        "Jr",
        "Java",
        "Developer",
        "UPS",
        "July",
        "August",
        "Description",
        "UPS",
        "worlds",
        "package",
        "delivery",
        "company",
        "technology",
        "UPS",
        "advantage",
        "repeat",
        "customers",
        "business",
        "web",
        "application",
        "need",
        "service",
        "architecture",
        "feature",
        "process",
        "report",
        "reference",
        "data",
        "user",
        "Responsibilities",
        "architecture",
        "application",
        "EJB",
        "Struts",
        "jQuery",
        "JSP",
        "Waterfall",
        "Methodology",
        "EJB",
        "Struts",
        "Framework",
        "Form",
        "Action",
        "Classes",
        "Prepared",
        "EJB",
        "deployment",
        "descriptors",
        "XML",
        "JAXB",
        "components",
        "objects",
        "application",
        "database",
        "Dynamics",
        "generation",
        "auto",
        "completion",
        "forms",
        "uservalidation",
        "functionalities",
        "jQuery",
        "Configured",
        "Strutsconfigxml",
        "Tilesdefxml",
        "properties",
        "file",
        "Struts",
        "Framework",
        "modules",
        "connectivity",
        "databases",
        "JDBC",
        "servlets",
        "JSP",
        "Enterprise",
        "Java",
        "Beans",
        "EJB",
        "Developed",
        "Web",
        "pages",
        "JSP",
        "Struts",
        "Validation",
        "framework",
        "form",
        "input",
        "validations",
        "Build",
        "PLSQL",
        "functions",
        "procedures",
        "views",
        "JDBC",
        "data",
        "source",
        "connection",
        "pooling",
        "Implemented",
        "JavaScript",
        "Library",
        "HTML",
        "document",
        "event",
        "application",
        "JBoss",
        "Application",
        "Server",
        "Environment",
        "EJB",
        "Struts",
        "XML",
        "jQuery",
        "JDBC",
        "Servlets",
        "JSP",
        "PLSQL",
        "HTML",
        "Java",
        "Script",
        "JBoss",
        "Education",
        "Bachelors",
        "Skills",
        "Eclipse",
        "Ejb",
        "J2ee",
        "Java",
        "Hibernate",
        "HTML5",
        "CSS3",
        "Twitter",
        "Bootstrap",
        "Angular4",
        "Typescript",
        "Angular",
        "CLI",
        "NGRX",
        "ECMAES6ES7",
        "Babel",
        "Typescript",
        "Web",
        "Pack",
        "DOM",
        "HTTP",
        "Ajax",
        "Node",
        "JS",
        "Hapi",
        "JS",
        "REST",
        "Mongo",
        "DB",
        "Oracle",
        "Redis",
        "Swagger",
        "Additional",
        "Information",
        "TECHNICAL",
        "SKILLS",
        "Programming",
        "Languages",
        "C",
        "C",
        "Java",
        "PLSQL",
        "Net",
        "Web",
        "Technologies",
        "HTML5",
        "SASS",
        "CSS3",
        "JavaScript",
        "PHP",
        "JSON",
        "JQUERY",
        "AJAX",
        "XML",
        "SOAP",
        "REST",
        "WSDL",
        "JAXP",
        "JAXB",
        "JavaScript",
        "Frameworks",
        "JQuery",
        "Angular",
        "React",
        "JS",
        "Expressjs",
        "Backbonejs",
        "Nodejs",
        "Emberjs",
        "Handlebarsjs",
        "J2EE",
        "Technologies",
        "frameworks",
        "Servlets",
        "EJB",
        "JSF",
        "JSP",
        "JDBC",
        "REST",
        "SOAP",
        "WSDL",
        "JAXB",
        "JAXP",
        "JPA",
        "JMS",
        "Hibernate",
        "Spring",
        "Data",
        "Spring",
        "Cloud",
        "Dump",
        "Analysis",
        "Spring",
        "MVC",
        "Spring",
        "Boot",
        "Spring",
        "Batch",
        "Web",
        "service",
        "JAXWS",
        "JAXRS",
        "Apache",
        "CXF",
        "Axis",
        "Jersey",
        "Testing",
        "JUnit",
        "JMeter",
        "Selenium",
        "Cucumber",
        "SPock",
        "Mockito",
        "TestNg",
        "Karma",
        "Jasmine",
        "Protractor",
        "Mocha",
        "Chai",
        "MySQL",
        "Oracle",
        "SQL",
        "Server",
        "NoSQL",
        "Mongo",
        "Cassandra",
        "Messaging",
        "Services",
        "JMS",
        "MQ",
        "Rabbit",
        "MQ",
        "IBM",
        "MQ",
        "Apache",
        "Kafka",
        "IDEs",
        "Eclipse",
        "Visual",
        "Studio",
        "IntelliJ",
        "Spring",
        "Tool",
        "Suite",
        "Sublime",
        "Text",
        "WinSCP",
        "Putty",
        "Cloud",
        "Technologies",
        "DevOps",
        "Tools",
        "AWS",
        "PCF",
        "EC2",
        "EBS",
        "S3",
        "Docker",
        "ECS",
        "EBS",
        "EKS",
        "SQS",
        "RDS",
        "S3",
        "Glacier",
        "Lambda",
        "Kubernetes",
        "Build",
        "Tools",
        "ANT",
        "Maven",
        "Gradle",
        "NPM",
        "Grunt",
        "Gulp",
        "Bower",
        "Jenkins",
        "Testing",
        "Tools",
        "Junit",
        "TestNG",
        "Mockito",
        "Jasmine",
        "Karma",
        "Mocha",
        "Chai",
        "Spock",
        "Protractor",
        "Version",
        "Control",
        "CVS",
        "GIT",
        "SVN",
        "Software",
        "Methodologies",
        "Agile",
        "Scrum",
        "TDD",
        "Waterfall",
        "Project",
        "Management",
        "Tools",
        "JIRA",
        "Rally",
        "Microsoft",
        "Project",
        "Operating",
        "System",
        "Windows",
        "Linux",
        "Unix",
        "MSDOS"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T23:00:24.200861",
    "resume_data": "Java Full Stack Developer span lJavaspan Full Stack span lDeveloperspan Java Full Stack Developer Sentury Tire Hialeah FL Around 7 years of full stack development experience in all phases of Software Development Life Cycle SDLC which includes Analysis Design Development Documentation Testing Deployment Version Control and production support of web based enterprise business applications using the JAVAJ2EE technologies Mastery in UI Design and Development utilizing HTML5 CSS3 SASS LESS Bootstrap and AJAX that takes after W3C Web Standards Experienced in using ES6 features like arrows modules enhanced object literals promises and block scoping Proficient in developing Dynamic Single Page Application SPA using MEAN Sound knowledge on implementing Angular 2x4x with NGRX to accomplish MVVM design flow Expertise on using Router ParamMap in Angular 4 which is useful to query a ParamMap in router itself and also gives advantage on security aspects with all types Well Experienced in using Component features like Modules Templates Directives and Meta Data Good amount of Knowledge on using directives observables promises dependency injection pipes shadow Dom Expertise in writing Typescript which is useful in Angular 4x applications that advanced features like auto completion navigation and refactoring Strong knowledge in React JS framework to develop the SPA Experience in using React JS components Keys Router Forms Events plus Redux Animations and Flux concept Well Experienced for creating interactive UIs in React JS using Virtual DOM Oneway data flow JSX React Native concepts Expertise in making Custom Reusable React Components Library Well experienced in Angular JS Backbone JS Ember JS Knockout JS and Ext JS for making customize front end app development and to achieve MVC design flow Strong knowledge in developing applications for view rendering using JQuery React JS Handlebar JS Developed and deployed Micro Services based applications using Spring Boot along with Spring Rest and Node JS with Express JS and Hapi JS Expertise in Using Grunt Gulp Web pack Bower Strong Experience on working with UI testing frameworks like Karma Jasmine Protractor for Angular JS Mocha and Chai for React JS and Backbone JS Good Experience in Bug tracking tools like JIRA HP Quality Center and Bugzilla Expertise in working with JAVA 8 features like Collection API Stream API Time API Multithreading Transaction Management and Exception Handling Expertise in making Standalone production grade applications using Spring Boot Developed controllers and services for handling the requests using Spring Boot Well experienced in using Spring Boot features like Spring Boot Actuator Spring Boot JPA Spring Boot JDBC Good amount of experience in integrating Swagger documentation into a Spring Boot based Rest web service mainly by using spring fox implementation for generating the swagger documentation Expertise in SOA using Spring REST to create REST resources which has various components like JAXRS Jersey Framework Rest Easy and WADL for documenting REST APIS Good working knowledge on integration of Drools Rule Engines which corresponds to validating BRMS Business Rules Management System with Spring Bean Strong knowledge in Amazon Web Services like Amazon S3Amazon Simple Storage ServiceAmazon EC2Elastic Compute CloudAmazon Simple DB Amazon EBS Amazon cloud front Amazon SQS Amazon Elastic Load Balancing Worked with Jenkins for continuous integration and Performance improvements for the application Knowledge on various Docker components like Docker Engine Hub Machine Compose and Docker Registry Well experienced with build tools like Gradle Maven and ANT Good knowledge on package manager tools such as NPM and Bower for dependency management Hands on experience in software configurationchange control process and tools like Subversion SVN Git and CVS Expertise in logging tools like Log4j slf4j Experience in writing and executing unit test cases using JUnit and JMeter Mokito Testing Framework Strong Knowledge on automated javabased integration testing and behavioral testing of the applications using Selenium and Cucumber respectively Good experience in using Software development methodologies like AgileScrum Water Fall and Rational Application Development methodologies Authorized to work in the US for any employer Work Experience Java Full Stack Developer Sentury Tire Hialeah FL November 2018 to Present Description Sentury Tire is a subsidiary of Sentaida Group Co Ltd born in Qingdao Shandong China in 2008 Sentury Tire Co Ltd started mass production in 2009 principally engaged in passenger crossover sport utility vehicle commercial van and aircraft tires Senturys facilities cover an area of 96 million square feet with an annual capacity of 9 million tires in 2013 Responsibilities Implemented Micro Service Architecture using Mongo DB Hapi JS Angular 4 and Node JS stack and developed Single Page Applications SPA Designed the frontend using web technologies likeHTML5 CSS3 and Twitter Bootstrap framework and Angular 4 for creating grid layout responsive screen sizes and devices Developed reusable Angular 4components which are compatible with latest versions of typescript and angular CLI Configured various routes directives for grid pagination conditional validations templating dynamic loading lazy loading Shadow DOM NGRX store Created services to consume RESTAPIs using Component based architecture provided by Angular4 Made use of Angular UI grid to display treebased grids Converted the code base to use modern ECMAScript ES6 ES7 used Babel Typescript and Web pack as a module loader and used along with Angular CLI Developed Angular views to hook up models to the DOM and synchronize data with server as a SPA Made use of Angular4 Observables to make HTTP Requests and leveraged its functions to loop around results Builtin AJAX HTTP Service with observables is used extensively for making quick and incremental updates to UI of the application Developed serverside proxy using Node JS Hapi JS for an eventdriven nonblocking IO model to make an efficient application while keeping it lightweight Used NodeJS with HapiJS server to interact with the Rest services and database hosted on multiple load balanced cloud instances Made use of authentication and authorization techniques available with HapiJS and used its tools like web packs to avoid boiler plate code Utilized auto configurable documentation functionality provided by HapiJS to configure the Open API specificationSwagger using Hapiswaggered and Hapiswaggeredui Karma test runner and Jasmine test framework tool are used to perform behavioral driven testing for Angular 4 code Pushed new features live after passing tests implemented with Karma Test Runner Testing for Node JS is done using Mocha and chai Unit testing of web services is done using Spock framework by extending Groovy syntax Configured JBOSS Application server and used Oracle database to write complex PLSQL queries Designed dynamic schema through MongoDB by incorporating rich queries syntaxes and achieved data collections distributed across multiple systems for horizontal scalability as data volumes increase through Automatic Sharding Mongoose Connector is used for implementing ODM framework for Mongo DB For dependency management used the built in NPM package manager to configure the right versions of the packages Used Jenkins CICD tool for continuous integrating and deploying application on servers Configured Docker container service and build pipe line Handled all the port mappingbinding things that happen with Dockers and Containers Used Rabbit MQ for transport of data in Queue in between components of the application Configured Kibana data visualization plugin for Elastic search Log stash and created bar line and scatter plots pie charts and maps on top of large chunks of data Used Redis configuration with node server along with Cat box for caching the responses Implemented OAUTH20 authentication and authorization framework to provide the security to rest web services Installed configured and administered NoSQL database clusters in AWS Virtual Private Cloud Network for available data on cloud Implemented AWS solutions using E2C S3 RDS EBS Elastic Load Balancer Auto scaling groups Optimized volumes and EC2 instances and created monitors alarms and notifications for EC2 hosts using Cloud Watch Implemented Netflix Zuul API gateway for all the requests from the devices and websites by registering services to Eureka Configured Kubernetes in the application for automating deployment scaling and management of applications Configured DynaTrace to measure and monitor the performance of application Environment HTML5 CSS3 Twitter Bootstrap Angular4 Typescript Angular CLI NGRX ECMAES6ES7 Babel Typescript Web Pack DOM HTTP Ajax Node JS Hapi JS REST Mongo DB Oracle Redis Swagger Karma Jasmine Mocha Chai Spock Groovy JBoss ODM Mongoose Connector Kibana Elastic Search Logstach NPM Jenkins Docker Redis AWS Netflix Zuul Eureka Kubernetes DynaTrace Rabbit MQ Cat box AWS Java Full Stack Developer Royal Caribbean cruise Miami FL April 2017 to November 2018 Description Royal Caribbean International is known for driving innovation at sea Each successive class of ships is an architectural marvel and pushes the envelope of what is possible on a cruise ship such as rock climbing ice skating and surfing at sea to capture the imagination of families and adventurous vacationers alike I involved with a team to develop the application which collects and stores the Customers data and display the different questions from the various dumps according to the specific module Responsibilities Involved in developing the Single Page Micro Service Oriented Architecture Application using the Mongo Database React with Redux Angular 20 and Node JS with Express JS Involved in developing the efficient UI using HTML5 for DOM representation and CSS3LESS for good styling of the application Used the Bootstrap for the custom templating of the web pages Involved in developing custom directives for making reusable components in Angular 20 Used Angular 20 to create views to hook up models to the DOM and synchronize data with server as a Single Page Applications Developed the objects including the components using Typescript ng Modules interfaces and classes using the Arrow function Implemented Angular JS observables and listeners RxJS reactive libraries to simplify the making asynchronous calls to backend REST APIs ES6 generators were used for maintaining the concurrency between the components Multiple views were rendered by using the React JS and implemented JSX for adding XML syntax to the java script Implemented various screens for the front end using ReactJS and used various predefined components from NPM Node Package Manager and redux library Implemented React JS components Forms Events Keys Router and Animations Implemented React with Redux for statemanagement and Router for the navigation Implemented Redux to cut some complexity corners by using functional composition Implemented StoreRedux for holding the whole state tree of application and ReducerRedux for describing actions Reducers are implemented for specifying how the application state changes in response to the actions sent to the Store Implemented Web pack for bundling the modules and maintaining the libraries efficiently Angular testing was performed using the Protractor and React unit testing was performed using Mocha and Chai Developed the Rest Services on the server side using the Node JS with Express JS Implemented Node JS as a serverside proxy for an eventdriven nonblocking IO model to make the application lightweight and efficient Developed Nodejs Readable and Writable streams to process the data from the external source of the application Implemented modules into Node JS to coordinate with plans and necessities Developing RESTful web services using Node JS and Express JS and used Node JS server to interact with the Rest services and database hosted on multiple load balanced cloud instances Implemented Express JS which is fast assertive essential and moderate web framework of Node JS that helps manage a sever and routes Implemented Express JS which respond to HTTP Requests and dynamically render HTML Pages based on passing arguments to templates Implemented Axios for calling the developed RESTful services that is for making the Ajax Calls Implemented the Node Package Manager Build tool for managing the dependencies in the project OpenID Connect OIDC was implemented on the top of OAuth 20 for authorizing the Rest Services and JWT for token based authentication Used Spring IOC for the life cycle management of the bean and Java Transaction API JTA for the service layer Developed some standalone Micro services using Spring Boot micro service architectural patterns Implemented Spring Boot properties like actuators and health checkers to enhance micro service implementations Mongo database was used for handling the unstructured data and used the Mongoose Connector for the connection Mongo DB was used for heterogeneous collections of content types Implemented Log4J for logging the information and Rabbit MQ for the service of Message broker Implemented Docker for creating the custom Docker container images Implemented the Docker for packaging the application in virtual container and then the contained application is deployed to Pivotal Cloud Foundry using CLI Command Line Interface tool where service is as Infrastructure Jenkins was implemented for the Continuous delivery and for Continuous Integration Used the Junit for unit testing and Selenium for the integral testing of the application Implemented the Agile methodology for the efficient and effective completion of project Environment Redux Angular 20 HTML5 CSS3LESS Bootstrap Typescript ng Modules Arrow function Angular JS observables listeners ES6 React JS JSX ReactJS NPM React JS components Forms Events Keys Router Animations StoreRedux ReducerRedux Web pack Protractor Mocha and Chai Rest Services Node JS with Express JS Axios OpenID Connect OIDC OAuth 20 JWT Spring IOC Java Transaction API JTA Spring Boot Mongoose Connector Mongo DB Log4J Rabbit MQ Docker Pivotal Cloud Foundry Jenkins Junit Selenium and Agile methodology Java Full stack Developer Edison NJ July 2016 to April 2017 Description Consolidated Edison Inc commonly known as con Edison or con Ed is one of the largest investorowned energy companies in the United States I was involved in developing UI pages that helps customers retrieve online quotes depending on service Also worked on login field validations that help customers who are already members to retrieve their online account Responsibilities UI Web pages were developed by using HTML5 CSS3 and JavaScript frameworks like AngularJS16 Angular JS 16 is used to create Controllers to handle events triggered by clients and send request to server Angular Directives like NgModel NgApp and Ngrepeat etc were used to develop views and data binding in our application Worked with builtin Angular Filters and developed custom Angular Filters in application as per business requirements Angular scopes scopes are used to glue View and controller to send data from controller to view Angular Routes were used to navigate through views in our application Angular Directives are used to develop customized components Rest API calls and data binding is done by using Angular JS Spring MVC frame work is used to develop enterprise application and it helps to maintain loosely coupling Spring IOC is used to inject dependencies and manage the life cycle of a bean Implemented Spring Annotations Spring AOP to develop Business layer components Experienced with distributed transaction management with isolation levels with Spring JTA Exposed Stateless session beans as RESTful web services using JAXRS Developed Restful web service using JaxRs with Jersey framework Swagger is used to create interactive documentation of Rest API and to automate the test scripts OAUTH 20 authentication frame work is used to provide security to Restful web services by generating access token in order to access protected resources Spring security is used for authentication and authorization and to provide protection against attacks like session fixation clickjacking and cross site request forgery Spring batch programming is executed by using quartz scheduler Test cases are developed and implemented using Junit testing Developed our application using Service Oriented Architecture Apache camel framework is used for messageoriented middleware with rulebased routing and mediation engine Apache camel framework is used for concrete implementations of Enterprise Integration Patterns and connectivity to great variety of transports and APIs Messaging queues were developed using JMS frame work with IBMMQ to communicate between applications by sending messages Maven is used as a build tool and SVN is used to maintain version control GULP is used to build Angularjs application and protractor for testing Hibernate ORM is used to achieve persistence and make connections with MySQL Database HQL is used to retrieve data from database Hibernate EHcache is used at second level to boost the performance of application Backend interfaces are developed using stored procedures and PLSQL packages Log4jand JIRA is used for logging and debugging Pivotal Cloud foundry is used to build and deploy applications Environment AngularJS 10 HTML5 CSS3 JSON Bootstrap MAVEN Spring Boot Spring IOC Spring Batch Spring cloud AWS EHcache Jax Rs Jersey Jax WS Apache CXF Spring Batch IBMMQSVNGULPProtractor1 Pivotal cloud foundry Log4j JIRA Sr Java Developer Delta Airlines Atlanta GA September 2015 to April 2017 Description In Delta Airlines ecommerce project my role is to facilitate the enhanced features to book or cancel tickets and to do checkins through smart devices which will help Delta Airlines customers to make bookings checkins by providing them various benefits such as Ease of access Convenience make bookings faster and saving the check in time Reduce the use of sales assistant Responsibilities Developed Monolithic application based on HTML5 CSS3 LESS JQuery Bootstrap AJAX for building dynamic web pages Create the frontend JavaScript components using Backbone JS and frontend templates and used Underscores hard coded dependency in combination with Handlebar JS for frontend templating Developing standalone forms for crossbrowser and crossKey Accomplishment as Single Page Applications SPA with the use of Backbone JS Datastructuring models and collections and user interfaces are developed using Backbone JS to maintain the synchronization and to achieve MVC pattern Used Ajax for sending and retrieving data from server by giving URL to get JSON data for models and to populate models from the server Used QUnit testing framework to perform unit test on Backbone JS code and developed validations using custom generic JavaScript functions Load testing is done using JMeter for Ajax JSFRich Faces application Produced SOAP web services using Metro JAXWSRI for building the business application layer Created WSDL Web Services Description Language document for client application web services Designed and implemented Business Delegate Session Facade and DTO Design Patterns Used Hibernate along with spring for implementing Spring IOC Spring AOP and Spring ORM for back end tiers Developed beans from the existing parent beans using Spring Inheritance and extensively used various Spring Framework modules like MVC JDBC Templates Extensively used Hibernate mappings HQL EHCache Query Lazy loading Transactions and Lockings Implemented concepts of Hibernate Transaction Management Hibernate Batch Transactions and cache DB2 database used to load the application data and written PLSQL procedures complex queries to perform various data operations Experienced in implementation of JMS to exchange information over reliable channel in an asynchronous way by using Rabbit MQ as a message queue Implemented Spring Security for providing authentication and authorization for web services Focused on Test Driven Development TDD thereby creating detailed Junit along with Mockito for every single functionality before writing the functionality Responsible for Continuous Integration CI and Continuous Delivery CD process implementation using Jenkins along with Shell scripts to automate routine jobs Used Maven to build the application Performed logging using Log4j Environment HTML5 CSS3LESS JQuery Bootstrap Ajax Backbone JS Underscore JS Handlebar JS Native JS Qunit JMeter Junit JAXWS SOAP WSDL JSON Spring IOC Spring AOP Spring ORM Spring MVC JDBC Hibernate HQL EHCache Hibernate Transaction Management Hibernate Batch Transactions Jenkins Maven Log4J DB2 PLSQL JMS Rabbit MQ Jr Java Developer UPS July 2012 to August 2015 Description UPS is the worlds largest package delivery company Using advanced technology UPS provides a powerful competitive advantage that can help you earn repeat customers and grow your business This is a web application that was built to satisfy the need for developing a micro service architecture that brings in new feature and enhances the process of creating and retrieving report and existing reference data that was collected from the user Responsibilities Involved in developing the Monolithic architecture application using EJB Struts jQuery JSP by following the Waterfall Methodology Implemented the EJB and Struts Framework for developing the Form and Action Classes Prepared EJB deployment descriptors using XML and Used JAXB components for transferring the objects between the application and the database Dynamics from generation auto completion of forms and uservalidation functionalities using jQuery Configured Strutsconfigxml Tilesdefxml and properties file provided by Struts Framework for the implemented modules Implemented connectivity to databases using JDBC from servlets and JSP through Enterprise Java Beans EJB Developed Web pages using JSP and implemented Struts Validation framework for form input validations Build PLSQL functions stored procedures views with JDBC data source with connection pooling enabled Implemented JavaScript Library for simplifying the HTML document traversing and event handling The application is deployed to JBoss Application Server Environment EJB Struts XML jQuery JDBC Servlets JSP PLSQL HTML Java Script and JBoss Education Bachelors Skills Eclipse Ejb J2ee Java Hibernate HTML5 CSS3 Twitter Bootstrap Angular4 Typescript Angular CLI NGRX ECMAES6ES7 Babel Typescript Web Pack DOM HTTP Ajax Node JS Hapi JS REST Mongo DB Oracle Redis Swagger Additional Information TECHNICAL SKILLS Programming Languages C C Java PLSQL Net Web Technologies HTML5 SASS CSS3 JavaScript PHP JSON JQUERY AJAX XML SOAP REST WSDL JAXP JAXB JavaScript Frameworks JQuery Angular 2040 React JS Expressjs Backbonejs Nodejs Emberjs Handlebarsjs J2EE Technologies frameworks Servlets EJB JSF JSP JDBC REST SOAP WSDL JAXB JAXP JPA JMS Spring3x4x5x Hibernate Spring Data Spring Cloud Dump Analysis Spring MVC Spring Boot Spring Batch Web service frameworks JAXWS JAXRS Apache CXF Axis Jersey Testing technologiestools JUnit JMeter Selenium Cucumber SPock Mockito TestNg Karma Jasmine Protractor Mocha Chai Databases MySQL Oracle SQL Server NoSQL Mongo Cassandra Messaging Services JMS Active MQ Rabbit MQ IBM MQ Apache Kafka IDEs Eclipse Visual Studio IntelliJ Spring Tool Suite Sublime Text WinSCP Putty Cloud Technologies DevOps Tools AWS PCF EC2 EBS S3 Docker ECS EBS EKS SQS RDS S3 Glacier Lambda Kubernetes Build Tools ANT Maven 30 Gradle NPM Grunt Gulp Bower Jenkins Testing Tools Junit TestNG Mockito Jasmine Karma Mocha Chai Spock Protractor Version Control CVS GIT SVN Software Methodologies Agile Scrum TDD Waterfall Project Management Tools JIRA Rally Microsoft Project Operating System Windows Linux Unix MSDOS",
    "unique_id": "ffdd6e82-006c-4fdd-9d2e-63a5b76af52d"
}