{
    "clean_data": "Android DeveloperArchitect Android span lDeveloperspanArchitect solution architect Dallas TX Work Experience Android DeveloperArchitect American Airlines Dallas TX April 2016 to Present Responsible for the Android app architecture design and implementation of using MVVM architecture design patterns and common solutions Converse with backend teams to create optimum integration solutions Responsible for evaluating and choosing Android mobile technologies for the implementation of each component and connections between the components Provide architectural review to shareholders for buy in and guided the team in the implementation Worked with project management to accurately estimate and scope out projects Developed the Android app using Android Oreo Version 81 Maintained Android mobile app quality in development through the continuous integration process using Jenkins CI server Working on PaaS service like OpenStack AWS and Pivotal Cloud Foundry PCF Used Jenkins as Continuous Integration tools to deploy the Spring Boot Microservices to AWS Cloud and Pivotal Cloud Foundry PCF using build pack Working with PCF Blobstore for storing and managing Application code packages Buildpacks Used SourceTree Git for code repository version control merge and commits Produced code to the highest standards while adhering to industry accepted architecture and design pattern techniques and methodologies eg MVP MVVM SOA OOP DI etc Implement RESTful web services consumption with Retrofit and RxJava parsing JSON objects with GSON Created animations in the application view animations frame animations tween animations etc Followed Google material design guidelines Analyzed and critiqued code based on both functional and technical specifications Commented on code and produced technical documentation to industry standards Ensured Android crossdevice compatibility Used Jira for documentation task tracking backlog management and meeting preparation As architect I was involved in requirement gathering UI design and development Designed the logical flow for the application for different components Participated in Scrum meetings project planning and coordinated the status sessions Developed Android native app using Java and Kotlin coding in Android Studio IDE Sr Mobile Applications DeveloperArchitect American Airlines Dallas TX December 2012 to March 2016 Worked as a part of the Innovations team as Architect Design Development and maintenance of applications services and framework functionality for AAs next generation platforms Responsible for Android app overall system architecture Exp developing architecting apps that communicate with cloud endpoints using REST Expertise with Linux Android software development tools Android Studio git Using Kotlin in developing few modules in the application Handling on debugging Android application issues and fixing the bugs Working with designing implementing software for embedded devices systems Contribute to the extension of our core Android payment service functionality to support the aforementioned areas Execute rapid prototyping to facilitate proof of concept and demonstrations for complex requirements and features Develop and test the defined requirements with high accountability while managing risks and the potential of evolving requirements Solve complex challenges specifically related to delivering Android applications and services for the unique requirements of the payment industry Working closely with other functional teams third parties and vendors to facilitate the resolution of issues Implemented the required GUI by making modifications to the XML files Used Multithreading to implement parallel processing Environment Android Studio Rx Java Kotlin GenyMotion SQLite Dagger UNIX Eclipse IDE media framework Java XML JIRA ADB Log Cat Web Services Junit Sr Java Developer American Airlines Fort Worth TX December 2012 to March 2014 Developed the presentation layer written using JSP HTML CSS and clientside validations were done using JavaScript jQuery and JSON Created the design documents with use case diagram class diagrams sequence diagrams using Rational Rose Implemented the MVC architecture using Apache Struts11 Framework Implemented Action Classes and serverside validations for account activity payment history and Transactions Implemented views using Struts tags JSTL20 and Expression Language and implemented Tiles Framework for the layout of the view Implemented session beans to handle the business logic for fund transfer loan credit card fixed deposit modules Worked with various java patterns such as Service Locator and Factory Pattern at the business layer for effective object behaviors Worked on the JAVA Collections API for handling the data objects between the business layers and the front end Worked with JAXB SAXP and XML Schema for exporting data into XML format and importing data from XML format to data base and JAXB in the web services request response data marshaling as well as the unmarshalling process Implemented the web services client to consume the thirdparty service API for validating credit cards Used XML Web Services using SOAP to transfer the amount to transfer application that is remote and global to different financial institutions Used Java Messaging Services JMS for the reliable and asynchronous exchange of important information such as payment status report Developed Unit test cases using JUnit and developed ant scripts and developed builds using Apache ANT Used Log4J to capture the log that includes runtime exceptions and used Clear Case for source code maintenance Environment HTML XHTML CSS JavaScript JDK J2EE JSP Servlet XML SOAP Oracle log4j W3C Web Sphere Application Server Sr Distributed Applications Developer Federal Reserve Bank Dallas TX March 2010 to November 2012 Check21 Web Check21 is suite of applications providing file movement and monitoring capabilities for the Federal Reserves electronic checking system all districts The main applications for this project are the DTM and EFM applications The DTM Data Transfer Manager is the hub for file movement The EFM application provides file monitoring capabilities for the files as they are moved from one location to another Responsibilities Participated in the design and development of Outgoing Files from IPD to DTM module Extensively uses Agile methodology used scrum tool for logging various time estimations and various logs of applications Activities are divided as 2 weeks Sprint Used Spring MVC Framework to develop the application Used Factory DAO Singleton and DTO and Value Object Business Delegate design patterns Created and maintained Stateless session beans for handling multiple users using EJB 20 Used Rational Rose to draw UML diagrams and to develop the Use cases Activity Diagrams Sequence Diagrams and Class Diagrams Implemented the Spring framework for Dependency Injection DIIoC Used IBM MQ Series in the project Configured MQ Connection Factory Queue names in Websphere Admin console Created MDB on receiver side to listen the messages from sender using JMS API Developed automation and process for operations and deployment of application in a message broker environment Developed Microservices to communicate using synchronous protocols HTTP and REST for implementing SOA Used Websphere V61 application server Worked on creating new reports and modify existing reports Implemented the SpringORM for Hibernate using the Hibernate Template class Designed and developed the Object Relational mapping using Hibernate to store and persist data in Oracle database Involved in writing the associations for the query in xml mapping files in Hibernate Developed SQL queries and Stored Procedures using PLSQL to retrieve and insert into multiple database schemas Developed JUNIT test cases for unit testing Intensively worked on IBM RAD7 Rational Application Developer Environment and Tools Used JIRA for tracking the Activities Tasks and Defects Used CM Synergy to manage the versions and Merge the code Worked on creating xsds and castor classes to process files Upgraded Java 12 WSAD WAS 50 to Java 15 RAD WAS 71 Fixed issues that occurred in the migration process Documented the Migration process to make it easy for future migrations Used Log4j for writing the logs including errors info etc Created ant build scripts and DOS deployment scripts to handle staging in QA Preprod environments IBM Payment Director IPD IPD is new system which replaces the existing legacy Check21 System These new applications are FRB Incoming FRB Outgoing and Fed Receipt and will take the place of the DTM application after full migration to the new IPD platform Events Notifications Handshake Messages are sent to handle monitoring and error handling of these files New reports are created to check the status of various files types Accounting Billing Cure etc and resend the files if required Responsibilities Worked on design and development of FRBIncoming FRBOutgoing FRBFedReceipt components Worked on IPD Rules Engine which handles logic to move files either to Check21 or IPD System This engine handles smooth transition from legacy to new system ie IPD Worked on File Renaming algorithm which renames the files as they arrive in the incoming folder Created Stale Notification processors which monitors the database and send notifications for any delayed files Worked on new web reports for displaying various messages Used DOJO framework for creating the web reports Worked on EJBS to handle the processing of the various messages sent by FRBIncoming Outgoing Created handlers using the JMS API for sendingprocessing messages Worked on bug fixes enhancements Created Junits and worked on creating utility classes for doing performance testing Worked on Resend Message Handlers to resend the messages and reset the processing of files if any error occurs Worked on Application server to createconfigure queues data sources listeners and resources Worked on File Handlers to create listen process files of various types Accounting Billing CureEWA and DepositDerivedPresentment files Converted the file handlers in to RESTful web Services using JAXRS API Developed JUNIT test cases for unit testing Used CM Synergy to manage the versions and Merge the code Environment Java JDK 15 J2EE Spring EJB Oracle10g JDBC Servlets JSP Javascript XML HTML DOJO UML JMS Agile Websphere 61 RAD7 IBM MQ Series Rational Rose CM Synergy SVN JIRA ANT Log4j Hibernate 25 SQL PLSQL JUnit LoadRunner JavaJ2EE Full Stack Developer Benefit Harbor Dallas TX August 2009 to February 2010 Benefit Harbor is a benefit based system which seamlessly integrates a world of benefits on one powerful system Benefit Harbor makes administration easier and accurate by providing daily transactions and generating different reports like Carrier and Cobra Files The expansive design takes group and individual benefits like Core health and welfare benefits voluntary insurance products FSAs HRAs HSAs COBRA 401k and profitsharing plans all from any provider in stride and integrates everything Responsibilities Involved in gathering the requirements from the Carrier and Group for specific products Developed Code based on incremental iterative releases using an Agile process Scrum Developed class diagrams sequence and use case diagrams using UML Rational Rose Designed UI screens using JSP HTML JSTL and used JavaScript for Client Side Validations Developed the component based presentation tier of the application using JSF Framework Configured the facesconfig xml file and provided navigation rules and managed beans Developed custom JSF components using the ICEfaces component suite Worked on POC for Spring and JSF Integration Implemented the Spring framework for Dependency Injection DIIoC Implemented DTO Business Delegate Factory and Singleton design patterns Implemented applications for different products like Health FSA Dental and Vision using POJOs according to the Carrier and Groups specifications Developed POJOs to create Carrier Files Cobra files and Invoices in the different formats like excel fixed length HIPAA regulated formats 834 Developed the application on Eclipse and used Eclipse plugin features for editing debugging compiling formatting build automation test case template generation mutatoraccessor code generation Developed Python based API RESTful Web Service using Flask SQLAlchemy and PostgreSQL Wrote Python scripts to parse JSON documents and load the data in database Worked with NoSQL database Mongo DB and worked with it to perform many different operations Created data as a service DaaS based Restful Jersey web service with Mongo DB data store running on Tomcat 9 Developed unit tests with JUnit and Mockito and have written automated regression tests using JMeter Hands on experience with Spark streaming to receive real time data making use of ApacheKafka Responsible for building components to connect to other microservices using Kafka Elastic search REST Developed CICD pipeline and build tasks to run the unit tests on Jenkins and maintained separate build in Maven for the module for easy integration to the portal build and configure with Jenkins Integration tool Used Apache Camel for Beans Binding and seamless integration with Spring Frameworks and for routing unit test Used Data Access Object DAO pattern to introduce an abstraction layer between the business logic tier and the persistent storage tier data source Performed Unit Testing Using JUnit and Load testing using LoadRunner Implemented Log4J to trace logs and to track information Environment Java 15 JSF ICEFaces Spring 25Spring 30 RC JSP JavaScript POJOs Hibernate 25 SQL PLSQL Log4j JUnit Visual Source Safe Altova XmlSpy Eclipse 34 JBOSS IBM WebSphere DB2 APACHE Axis LoadRunner Education Bachelors of Technology in Computer Science Engineering in Computer Science Engineering Jawaharlal Technological University Skills Eclipse J2ee Java Hibernate Spring Javabeans Jax Jaxrpc Jaxws jquery Jsp Servlet Servlets Api Curl Gradle Html Javascript Nodejs Jenkins Android IOS 10 years Additional Information TECHNICAL SKILLS Languages Java 18 J2EE Scala 2121 Python Web Technologies SERVLETS 31 JSP 30 JavaBeans 30 Java Servlet API 30 Frameworks Spring 43 Hibernate 43 Angular JS 2040 Spring Security 32 ApplicationWeb servers Apache Tomcat 8 IBM WebSphere 8x9x Jetty Jenkins 250 WebSphere MQ 75 Relational No SQL databases Oracle 10g11g SQL server 20142016 MySQL 57 DB2 111 MongoDB Cassandra Internet Technologies HTML 5 JavaScript 18 XML 20 CSS 3 jQuery 211 Angular JS 2040 BackBoneJS 131 PolymerJS Nodejs 60 Web Services SOAP 12 REST 20 JAXWS JAXRPC JAXRS Cloud Environments Azure AWS Netflix Eureka Mesos Kubernetes IDE Eclipse NetBeans 802 IntelliJ 20171 Spring Tool Suite STS 383 Methodologies Agile waterfall TDD TestDrivenDevelopment Scrum Build Tools Ant 110 Maven 339 Gradle 341 Bug Tracking Tools JUnit 412 JIRA 70 Bugzilla 4412 Curl 736",
    "entities": [
        "Log Cat Web Services",
        "GUI",
        "IPD Worked",
        "JBOSS IBM",
        "JSF Integration Implemented",
        "Transactions Implemented",
        "IPD System",
        "Android",
        "UNIX",
        "HTTP",
        "Architect Design Development",
        "IPD Rules Engine",
        "Working",
        "Groups",
        "Websphere V61",
        "IBM",
        "Used Java Messaging Services JMS",
        "Websphere Admin",
        "IBM RAD7 Rational Application Developer Environment and",
        "DOS",
        "Spring MVC Framework",
        "XML",
        "SOAP",
        "Worked on Application",
        "JAXWS",
        "JUnit",
        "IDE Sr Mobile Applications DeveloperArchitect American Airlines",
        "TX",
        "WebSphere",
        "Created Junits",
        "the Carrier and Group",
        "Developed",
        "Service Locator and Factory Pattern",
        "Dallas",
        "QA Preprod",
        "Hibernate Developed SQL",
        "OpenStack AWS",
        "Mockito",
        "RAD",
        "UML",
        "Responsibilities Involved",
        "Nodejs 60 Web Services SOAP",
        "Core",
        "Worked on",
        "Spring Frameworks",
        "Develop",
        "Followed Google",
        "REST Expertise",
        "Used CM Synergy",
        "API RESTful Web Service",
        "JSP",
        "Vision",
        "Android Oreo Version",
        "Used Apache Camel for Beans Binding",
        "Solve",
        "MVC",
        "Spark",
        "Agile",
        "EJB",
        "Present Responsible",
        "FRBIncoming FRBOutgoing FRBFedReceipt",
        "API",
        "Developed Microservices",
        "Created MDB",
        "Java Hibernate Spring",
        "Android DeveloperArchitect American Airlines",
        "ApacheKafka Responsible",
        "Created",
        "MVP",
        "Analyzed",
        "EFM",
        "Oracle",
        "ApplicationWeb",
        "Singleton",
        "Accounting Billing",
        "JSF",
        "Worked on Resend Message Handlers",
        "ICEfaces",
        "the JAVA Collections API",
        "Maintained Android",
        "RxJava",
        "IPD",
        "SQL",
        "Execute",
        "Value Object Business Delegate",
        "JDBC Servlets",
        "Responsibilities Worked",
        "GSON Created",
        "Rational Rose Implemented",
        "Android Studio",
        "Hibernate Template",
        "Contribute",
        "Additional Information TECHNICAL SKILLS Languages",
        "Worked on File Handlers",
        "FRBIncoming Outgoing Created",
        "Apache Struts11 Framework Implemented Action Classes",
        "Used Data Access Object DAO",
        "Working with PCF Blobstore",
        "REST Developed CICD",
        "Maven",
        "JavaBeans",
        "Developed Unit",
        "Developed Code",
        "JSON Created",
        "UI",
        "JSF Framework Configured",
        "Created Stale Notification",
        "HIPAA",
        "CSS",
        "DTO",
        "Performed Unit Testing Using JUnit",
        "REST",
        "Jenkins Integration",
        "NetBeans",
        "Relational No SQL",
        "Health FSA Dental",
        "JSP HTML CSS",
        "Computer Science Engineering Jawaharlal Technological University",
        "Mongo DB",
        "UML Rational Rose Designed UI",
        "Working on PaaS"
    ],
    "experience": "Experience Android DeveloperArchitect American Airlines Dallas TX April 2016 to Present Responsible for the Android app architecture design and implementation of using MVVM architecture design patterns and common solutions Converse with backend teams to create optimum integration solutions Responsible for evaluating and choosing Android mobile technologies for the implementation of each component and connections between the components Provide architectural review to shareholders for buy in and guided the team in the implementation Worked with project management to accurately estimate and scope out projects Developed the Android app using Android Oreo Version 81 Maintained Android mobile app quality in development through the continuous integration process using Jenkins CI server Working on PaaS service like OpenStack AWS and Pivotal Cloud Foundry PCF Used Jenkins as Continuous Integration tools to deploy the Spring Boot Microservices to AWS Cloud and Pivotal Cloud Foundry PCF using build pack Working with PCF Blobstore for storing and managing Application code packages Buildpacks Used SourceTree Git for code repository version control merge and commits Produced code to the highest standards while adhering to industry accepted architecture and design pattern techniques and methodologies eg MVP MVVM SOA OOP DI etc Implement RESTful web services consumption with Retrofit and RxJava parsing JSON objects with GSON Created animations in the application view animations frame animations tween animations etc Followed Google material design guidelines Analyzed and critiqued code based on both functional and technical specifications Commented on code and produced technical documentation to industry standards Ensured Android crossdevice compatibility Used Jira for documentation task tracking backlog management and meeting preparation As architect I was involved in requirement gathering UI design and development Designed the logical flow for the application for different components Participated in Scrum meetings project planning and coordinated the status sessions Developed Android native app using Java and Kotlin coding in Android Studio IDE Sr Mobile Applications DeveloperArchitect American Airlines Dallas TX December 2012 to March 2016 Worked as a part of the Innovations team as Architect Design Development and maintenance of applications services and framework functionality for AAs next generation platforms Responsible for Android app overall system architecture Exp developing architecting apps that communicate with cloud endpoints using REST Expertise with Linux Android software development tools Android Studio git Using Kotlin in developing few modules in the application Handling on debugging Android application issues and fixing the bugs Working with designing implementing software for embedded devices systems Contribute to the extension of our core Android payment service functionality to support the aforementioned areas Execute rapid prototyping to facilitate proof of concept and demonstrations for complex requirements and features Develop and test the defined requirements with high accountability while managing risks and the potential of evolving requirements Solve complex challenges specifically related to delivering Android applications and services for the unique requirements of the payment industry Working closely with other functional teams third parties and vendors to facilitate the resolution of issues Implemented the required GUI by making modifications to the XML files Used Multithreading to implement parallel processing Environment Android Studio Rx Java Kotlin GenyMotion SQLite Dagger UNIX Eclipse IDE media framework Java XML JIRA ADB Log Cat Web Services Junit Sr Java Developer American Airlines Fort Worth TX December 2012 to March 2014 Developed the presentation layer written using JSP HTML CSS and clientside validations were done using JavaScript jQuery and JSON Created the design documents with use case diagram class diagrams sequence diagrams using Rational Rose Implemented the MVC architecture using Apache Struts11 Framework Implemented Action Classes and serverside validations for account activity payment history and Transactions Implemented views using Struts tags JSTL20 and Expression Language and implemented Tiles Framework for the layout of the view Implemented session beans to handle the business logic for fund transfer loan credit card fixed deposit modules Worked with various java patterns such as Service Locator and Factory Pattern at the business layer for effective object behaviors Worked on the JAVA Collections API for handling the data objects between the business layers and the front end Worked with JAXB SAXP and XML Schema for exporting data into XML format and importing data from XML format to data base and JAXB in the web services request response data marshaling as well as the unmarshalling process Implemented the web services client to consume the thirdparty service API for validating credit cards Used XML Web Services using SOAP to transfer the amount to transfer application that is remote and global to different financial institutions Used Java Messaging Services JMS for the reliable and asynchronous exchange of important information such as payment status report Developed Unit test cases using JUnit and developed ant scripts and developed builds using Apache ANT Used Log4J to capture the log that includes runtime exceptions and used Clear Case for source code maintenance Environment HTML XHTML CSS JavaScript JDK J2EE JSP Servlet XML SOAP Oracle log4j W3C Web Sphere Application Server Sr Distributed Applications Developer Federal Reserve Bank Dallas TX March 2010 to November 2012 Check21 Web Check21 is suite of applications providing file movement and monitoring capabilities for the Federal Reserves electronic checking system all districts The main applications for this project are the DTM and EFM applications The DTM Data Transfer Manager is the hub for file movement The EFM application provides file monitoring capabilities for the files as they are moved from one location to another Responsibilities Participated in the design and development of Outgoing Files from IPD to DTM module Extensively uses Agile methodology used scrum tool for logging various time estimations and various logs of applications Activities are divided as 2 weeks Sprint Used Spring MVC Framework to develop the application Used Factory DAO Singleton and DTO and Value Object Business Delegate design patterns Created and maintained Stateless session beans for handling multiple users using EJB 20 Used Rational Rose to draw UML diagrams and to develop the Use cases Activity Diagrams Sequence Diagrams and Class Diagrams Implemented the Spring framework for Dependency Injection DIIoC Used IBM MQ Series in the project Configured MQ Connection Factory Queue names in Websphere Admin console Created MDB on receiver side to listen the messages from sender using JMS API Developed automation and process for operations and deployment of application in a message broker environment Developed Microservices to communicate using synchronous protocols HTTP and REST for implementing SOA Used Websphere V61 application server Worked on creating new reports and modify existing reports Implemented the SpringORM for Hibernate using the Hibernate Template class Designed and developed the Object Relational mapping using Hibernate to store and persist data in Oracle database Involved in writing the associations for the query in xml mapping files in Hibernate Developed SQL queries and Stored Procedures using PLSQL to retrieve and insert into multiple database schemas Developed JUNIT test cases for unit testing Intensively worked on IBM RAD7 Rational Application Developer Environment and Tools Used JIRA for tracking the Activities Tasks and Defects Used CM Synergy to manage the versions and Merge the code Worked on creating xsds and castor classes to process files Upgraded Java 12 WSAD WAS 50 to Java 15 RAD WAS 71 Fixed issues that occurred in the migration process Documented the Migration process to make it easy for future migrations Used Log4j for writing the logs including errors info etc Created ant build scripts and DOS deployment scripts to handle staging in QA Preprod environments IBM Payment Director IPD IPD is new system which replaces the existing legacy Check21 System These new applications are FRB Incoming FRB Outgoing and Fed Receipt and will take the place of the DTM application after full migration to the new IPD platform Events Notifications Handshake Messages are sent to handle monitoring and error handling of these files New reports are created to check the status of various files types Accounting Billing Cure etc and resend the files if required Responsibilities Worked on design and development of FRBIncoming FRBOutgoing FRBFedReceipt components Worked on IPD Rules Engine which handles logic to move files either to Check21 or IPD System This engine handles smooth transition from legacy to new system ie IPD Worked on File Renaming algorithm which renames the files as they arrive in the incoming folder Created Stale Notification processors which monitors the database and send notifications for any delayed files Worked on new web reports for displaying various messages Used DOJO framework for creating the web reports Worked on EJBS to handle the processing of the various messages sent by FRBIncoming Outgoing Created handlers using the JMS API for sendingprocessing messages Worked on bug fixes enhancements Created Junits and worked on creating utility classes for doing performance testing Worked on Resend Message Handlers to resend the messages and reset the processing of files if any error occurs Worked on Application server to createconfigure queues data sources listeners and resources Worked on File Handlers to create listen process files of various types Accounting Billing CureEWA and DepositDerivedPresentment files Converted the file handlers in to RESTful web Services using JAXRS API Developed JUNIT test cases for unit testing Used CM Synergy to manage the versions and Merge the code Environment Java JDK 15 J2EE Spring EJB Oracle10 g JDBC Servlets JSP Javascript XML HTML DOJO UML JMS Agile Websphere 61 RAD7 IBM MQ Series Rational Rose CM Synergy SVN JIRA ANT Log4j Hibernate 25 SQL PLSQL JUnit LoadRunner JavaJ2EE Full Stack Developer Benefit Harbor Dallas TX August 2009 to February 2010 Benefit Harbor is a benefit based system which seamlessly integrates a world of benefits on one powerful system Benefit Harbor makes administration easier and accurate by providing daily transactions and generating different reports like Carrier and Cobra Files The expansive design takes group and individual benefits like Core health and welfare benefits voluntary insurance products FSAs HRAs HSAs COBRA 401k and profitsharing plans all from any provider in stride and integrates everything Responsibilities Involved in gathering the requirements from the Carrier and Group for specific products Developed Code based on incremental iterative releases using an Agile process Scrum Developed class diagrams sequence and use case diagrams using UML Rational Rose Designed UI screens using JSP HTML JSTL and used JavaScript for Client Side Validations Developed the component based presentation tier of the application using JSF Framework Configured the facesconfig xml file and provided navigation rules and managed beans Developed custom JSF components using the ICEfaces component suite Worked on POC for Spring and JSF Integration Implemented the Spring framework for Dependency Injection DIIoC Implemented DTO Business Delegate Factory and Singleton design patterns Implemented applications for different products like Health FSA Dental and Vision using POJOs according to the Carrier and Groups specifications Developed POJOs to create Carrier Files Cobra files and Invoices in the different formats like excel fixed length HIPAA regulated formats 834 Developed the application on Eclipse and used Eclipse plugin features for editing debugging compiling formatting build automation test case template generation mutatoraccessor code generation Developed Python based API RESTful Web Service using Flask SQLAlchemy and PostgreSQL Wrote Python scripts to parse JSON documents and load the data in database Worked with NoSQL database Mongo DB and worked with it to perform many different operations Created data as a service DaaS based Restful Jersey web service with Mongo DB data store running on Tomcat 9 Developed unit tests with JUnit and Mockito and have written automated regression tests using JMeter Hands on experience with Spark streaming to receive real time data making use of ApacheKafka Responsible for building components to connect to other microservices using Kafka Elastic search REST Developed CICD pipeline and build tasks to run the unit tests on Jenkins and maintained separate build in Maven for the module for easy integration to the portal build and configure with Jenkins Integration tool Used Apache Camel for Beans Binding and seamless integration with Spring Frameworks and for routing unit test Used Data Access Object DAO pattern to introduce an abstraction layer between the business logic tier and the persistent storage tier data source Performed Unit Testing Using JUnit and Load testing using LoadRunner Implemented Log4J to trace logs and to track information Environment Java 15 JSF ICEFaces Spring 25Spring 30 RC JSP JavaScript POJOs Hibernate 25 SQL PLSQL Log4j JUnit Visual Source Safe Altova XmlSpy Eclipse 34 JBOSS IBM WebSphere DB2 APACHE Axis LoadRunner Education Bachelors of Technology in Computer Science Engineering in Computer Science Engineering Jawaharlal Technological University Skills Eclipse J2ee Java Hibernate Spring Javabeans Jax Jaxrpc Jaxws jquery Jsp Servlet Servlets Api Curl Gradle Html Javascript Nodejs Jenkins Android IOS 10 years Additional Information TECHNICAL SKILLS Languages Java 18 J2EE Scala 2121 Python Web Technologies SERVLETS 31 JSP 30 JavaBeans 30 Java Servlet API 30 Frameworks Spring 43 Hibernate 43 Angular JS 2040 Spring Security 32 ApplicationWeb servers Apache Tomcat 8 IBM WebSphere 8x9x Jetty Jenkins 250 WebSphere MQ 75 Relational No SQL databases Oracle 10g11 g SQL server 20142016 MySQL 57 DB2 111 MongoDB Cassandra Internet Technologies HTML 5 JavaScript 18 XML 20 CSS 3 jQuery 211 Angular JS 2040 BackBoneJS 131 PolymerJS Nodejs 60 Web Services SOAP 12 REST 20 JAXWS JAXRPC JAXRS Cloud Environments Azure AWS Netflix Eureka Mesos Kubernetes IDE Eclipse NetBeans 802 IntelliJ 20171 Spring Tool Suite STS 383 Methodologies Agile waterfall TDD TestDrivenDevelopment Scrum Build Tools Ant 110 Maven 339 Gradle 341 Bug Tracking Tools JUnit 412 JIRA 70 Bugzilla 4412 Curl 736",
    "extracted_keywords": [
        "Android",
        "DeveloperArchitect",
        "Android",
        "span",
        "lDeveloperspanArchitect",
        "solution",
        "architect",
        "Dallas",
        "TX",
        "Work",
        "Experience",
        "Android",
        "DeveloperArchitect",
        "American",
        "Airlines",
        "Dallas",
        "TX",
        "April",
        "Present",
        "Android",
        "app",
        "architecture",
        "design",
        "implementation",
        "MVVM",
        "architecture",
        "design",
        "patterns",
        "solutions",
        "Converse",
        "teams",
        "integration",
        "solutions",
        "Android",
        "technologies",
        "implementation",
        "component",
        "connections",
        "components",
        "review",
        "shareholders",
        "buy",
        "team",
        "implementation",
        "project",
        "management",
        "projects",
        "Android",
        "app",
        "Android",
        "Oreo",
        "Version",
        "Maintained",
        "Android",
        "app",
        "quality",
        "development",
        "integration",
        "process",
        "Jenkins",
        "CI",
        "server",
        "PaaS",
        "service",
        "OpenStack",
        "AWS",
        "Cloud",
        "Foundry",
        "PCF",
        "Jenkins",
        "Continuous",
        "Integration",
        "tools",
        "Spring",
        "Boot",
        "Microservices",
        "AWS",
        "Cloud",
        "Cloud",
        "Foundry",
        "PCF",
        "build",
        "pack",
        "Working",
        "PCF",
        "Blobstore",
        "Application",
        "code",
        "packages",
        "Buildpacks",
        "SourceTree",
        "Git",
        "code",
        "repository",
        "version",
        "control",
        "merge",
        "Produced",
        "code",
        "standards",
        "industry",
        "architecture",
        "design",
        "pattern",
        "techniques",
        "methodologies",
        "eg",
        "MVP",
        "MVVM",
        "SOA",
        "OOP",
        "DI",
        "Implement",
        "web",
        "services",
        "consumption",
        "Retrofit",
        "RxJava",
        "objects",
        "GSON",
        "animations",
        "application",
        "view",
        "animations",
        "frame",
        "animations",
        "animations",
        "Google",
        "material",
        "design",
        "guidelines",
        "code",
        "specifications",
        "code",
        "documentation",
        "industry",
        "standards",
        "Android",
        "crossdevice",
        "compatibility",
        "Jira",
        "documentation",
        "task",
        "backlog",
        "management",
        "meeting",
        "preparation",
        "architect",
        "requirement",
        "UI",
        "design",
        "development",
        "flow",
        "application",
        "components",
        "Scrum",
        "meetings",
        "project",
        "planning",
        "status",
        "sessions",
        "Android",
        "app",
        "Java",
        "Kotlin",
        "Android",
        "Studio",
        "IDE",
        "Sr",
        "Mobile",
        "Applications",
        "DeveloperArchitect",
        "American",
        "Airlines",
        "Dallas",
        "TX",
        "December",
        "March",
        "part",
        "Innovations",
        "team",
        "Architect",
        "Design",
        "Development",
        "maintenance",
        "applications",
        "services",
        "framework",
        "functionality",
        "AAs",
        "generation",
        "platforms",
        "Android",
        "app",
        "system",
        "architecture",
        "Exp",
        "architecting",
        "apps",
        "endpoints",
        "REST",
        "Expertise",
        "Linux",
        "Android",
        "software",
        "development",
        "tools",
        "Android",
        "Studio",
        "git",
        "Kotlin",
        "modules",
        "application",
        "Android",
        "application",
        "issues",
        "bugs",
        "software",
        "devices",
        "systems",
        "Contribute",
        "extension",
        "core",
        "Android",
        "payment",
        "service",
        "functionality",
        "areas",
        "prototyping",
        "proof",
        "concept",
        "demonstrations",
        "requirements",
        "Develop",
        "requirements",
        "accountability",
        "risks",
        "potential",
        "requirements",
        "challenges",
        "Android",
        "applications",
        "services",
        "requirements",
        "payment",
        "industry",
        "teams",
        "parties",
        "vendors",
        "resolution",
        "issues",
        "GUI",
        "modifications",
        "XML",
        "files",
        "Multithreading",
        "Environment",
        "Android",
        "Studio",
        "Rx",
        "Java",
        "Kotlin",
        "GenyMotion",
        "SQLite",
        "Dagger",
        "UNIX",
        "Eclipse",
        "IDE",
        "media",
        "framework",
        "Java",
        "XML",
        "JIRA",
        "ADB",
        "Log",
        "Cat",
        "Web",
        "Services",
        "Junit",
        "Sr",
        "Java",
        "Developer",
        "American",
        "Airlines",
        "Fort",
        "Worth",
        "TX",
        "December",
        "March",
        "presentation",
        "layer",
        "JSP",
        "HTML",
        "CSS",
        "validations",
        "JavaScript",
        "jQuery",
        "JSON",
        "design",
        "documents",
        "use",
        "case",
        "diagram",
        "class",
        "diagrams",
        "sequence",
        "diagrams",
        "Rational",
        "Rose",
        "MVC",
        "architecture",
        "Apache",
        "Struts11",
        "Framework",
        "Action",
        "Classes",
        "serverside",
        "validations",
        "account",
        "activity",
        "payment",
        "history",
        "Transactions",
        "views",
        "Struts",
        "tags",
        "JSTL20",
        "Expression",
        "Language",
        "Tiles",
        "Framework",
        "layout",
        "view",
        "session",
        "beans",
        "business",
        "logic",
        "fund",
        "transfer",
        "loan",
        "credit",
        "card",
        "deposit",
        "modules",
        "patterns",
        "Service",
        "Locator",
        "Factory",
        "Pattern",
        "business",
        "layer",
        "object",
        "behaviors",
        "JAVA",
        "Collections",
        "API",
        "data",
        "objects",
        "business",
        "layers",
        "end",
        "JAXB",
        "SAXP",
        "XML",
        "Schema",
        "data",
        "XML",
        "format",
        "data",
        "XML",
        "format",
        "data",
        "base",
        "JAXB",
        "web",
        "services",
        "response",
        "data",
        "unmarshalling",
        "process",
        "web",
        "services",
        "client",
        "thirdparty",
        "service",
        "API",
        "credit",
        "cards",
        "XML",
        "Web",
        "Services",
        "SOAP",
        "amount",
        "application",
        "institutions",
        "Java",
        "Messaging",
        "Services",
        "JMS",
        "exchange",
        "information",
        "payment",
        "status",
        "report",
        "Developed",
        "Unit",
        "test",
        "cases",
        "JUnit",
        "scripts",
        "builds",
        "Apache",
        "ANT",
        "Log4J",
        "log",
        "runtime",
        "exceptions",
        "Clear",
        "Case",
        "source",
        "code",
        "maintenance",
        "Environment",
        "HTML",
        "XHTML",
        "CSS",
        "JavaScript",
        "JDK",
        "J2EE",
        "JSP",
        "Servlet",
        "XML",
        "SOAP",
        "Oracle",
        "log4j",
        "W3C",
        "Web",
        "Sphere",
        "Application",
        "Server",
        "Sr",
        "Distributed",
        "Applications",
        "Developer",
        "Federal",
        "Reserve",
        "Bank",
        "Dallas",
        "TX",
        "March",
        "November",
        "Check21",
        "Web",
        "Check21",
        "suite",
        "applications",
        "file",
        "movement",
        "monitoring",
        "capabilities",
        "Federal",
        "Reserves",
        "checking",
        "system",
        "districts",
        "applications",
        "project",
        "DTM",
        "EFM",
        "applications",
        "DTM",
        "Data",
        "Transfer",
        "Manager",
        "hub",
        "file",
        "movement",
        "EFM",
        "application",
        "file",
        "monitoring",
        "capabilities",
        "files",
        "location",
        "Responsibilities",
        "design",
        "development",
        "Outgoing",
        "Files",
        "IPD",
        "DTM",
        "module",
        "methodology",
        "scrum",
        "tool",
        "time",
        "estimations",
        "logs",
        "applications",
        "Activities",
        "weeks",
        "Sprint",
        "Spring",
        "MVC",
        "Framework",
        "application",
        "Factory",
        "DAO",
        "Singleton",
        "DTO",
        "Value",
        "Object",
        "Business",
        "Delegate",
        "design",
        "patterns",
        "Stateless",
        "session",
        "beans",
        "users",
        "EJB",
        "Rational",
        "Rose",
        "UML",
        "diagrams",
        "Use",
        "cases",
        "Activity",
        "Diagrams",
        "Sequence",
        "Diagrams",
        "Class",
        "Diagrams",
        "Spring",
        "framework",
        "Dependency",
        "Injection",
        "DIIoC",
        "IBM",
        "MQ",
        "Series",
        "project",
        "Configured",
        "MQ",
        "Connection",
        "Factory",
        "Queue",
        "names",
        "Websphere",
        "Admin",
        "console",
        "MDB",
        "side",
        "messages",
        "sender",
        "JMS",
        "API",
        "automation",
        "process",
        "operations",
        "deployment",
        "application",
        "message",
        "broker",
        "environment",
        "Developed",
        "Microservices",
        "protocols",
        "HTTP",
        "REST",
        "SOA",
        "Used",
        "Websphere",
        "V61",
        "application",
        "server",
        "reports",
        "reports",
        "SpringORM",
        "Hibernate",
        "Hibernate",
        "Template",
        "class",
        "Object",
        "mapping",
        "Hibernate",
        "data",
        "Oracle",
        "database",
        "associations",
        "query",
        "xml",
        "mapping",
        "files",
        "Hibernate",
        "Developed",
        "SQL",
        "queries",
        "Procedures",
        "PLSQL",
        "database",
        "schemas",
        "Developed",
        "JUNIT",
        "test",
        "cases",
        "unit",
        "testing",
        "IBM",
        "RAD7",
        "Rational",
        "Application",
        "Developer",
        "Environment",
        "Tools",
        "JIRA",
        "Activities",
        "Tasks",
        "Defects",
        "CM",
        "Synergy",
        "versions",
        "code",
        "xsds",
        "castor",
        "classes",
        "files",
        "Java",
        "WSAD",
        "Java",
        "RAD",
        "issues",
        "migration",
        "process",
        "Migration",
        "process",
        "migrations",
        "Log4j",
        "logs",
        "errors",
        "info",
        "build",
        "scripts",
        "DOS",
        "deployment",
        "scripts",
        "staging",
        "QA",
        "Preprod",
        "IBM",
        "Payment",
        "Director",
        "IPD",
        "IPD",
        "system",
        "legacy",
        "Check21",
        "System",
        "applications",
        "FRB",
        "Incoming",
        "FRB",
        "Outgoing",
        "Fed",
        "Receipt",
        "place",
        "DTM",
        "application",
        "migration",
        "IPD",
        "platform",
        "Events",
        "Notifications",
        "Handshake",
        "Messages",
        "monitoring",
        "error",
        "handling",
        "files",
        "reports",
        "status",
        "files",
        "types",
        "Accounting",
        "Billing",
        "Cure",
        "files",
        "Responsibilities",
        "design",
        "development",
        "FRBIncoming",
        "components",
        "IPD",
        "Rules",
        "Engine",
        "logic",
        "files",
        "Check21",
        "IPD",
        "System",
        "engine",
        "transition",
        "legacy",
        "system",
        "IPD",
        "File",
        "Renaming",
        "algorithm",
        "files",
        "folder",
        "Stale",
        "Notification",
        "processors",
        "database",
        "notifications",
        "files",
        "web",
        "reports",
        "messages",
        "framework",
        "web",
        "reports",
        "EJBS",
        "processing",
        "messages",
        "Outgoing",
        "handlers",
        "JMS",
        "API",
        "messages",
        "bug",
        "fixes",
        "Junits",
        "utility",
        "classes",
        "performance",
        "testing",
        "Resend",
        "Message",
        "Handlers",
        "messages",
        "processing",
        "files",
        "error",
        "Application",
        "server",
        "createconfigure",
        "queues",
        "data",
        "sources",
        "listeners",
        "resources",
        "File",
        "Handlers",
        "listen",
        "process",
        "files",
        "types",
        "Accounting",
        "Billing",
        "CureEWA",
        "DepositDerivedPresentment",
        "files",
        "file",
        "handlers",
        "web",
        "Services",
        "JAXRS",
        "API",
        "Developed",
        "JUNIT",
        "test",
        "cases",
        "unit",
        "CM",
        "Synergy",
        "versions",
        "code",
        "Environment",
        "Java",
        "JDK",
        "J2EE",
        "Spring",
        "EJB",
        "Oracle10",
        "g",
        "JDBC",
        "Servlets",
        "JSP",
        "Javascript",
        "XML",
        "HTML",
        "DOJO",
        "UML",
        "JMS",
        "Agile",
        "Websphere",
        "RAD7",
        "IBM",
        "MQ",
        "Series",
        "Rational",
        "Rose",
        "CM",
        "Synergy",
        "SVN",
        "JIRA",
        "ANT",
        "Log4j",
        "Hibernate",
        "SQL",
        "PLSQL",
        "JUnit",
        "LoadRunner",
        "JavaJ2EE",
        "Full",
        "Stack",
        "Developer",
        "Benefit",
        "Harbor",
        "Dallas",
        "TX",
        "August",
        "February",
        "Benefit",
        "Harbor",
        "benefit",
        "system",
        "world",
        "benefits",
        "system",
        "Benefit",
        "Harbor",
        "administration",
        "transactions",
        "reports",
        "Carrier",
        "Cobra",
        "Files",
        "design",
        "group",
        "benefits",
        "Core",
        "health",
        "welfare",
        "benefits",
        "insurance",
        "products",
        "FSAs",
        "HRAs",
        "HSAs",
        "COBRA",
        "401k",
        "plans",
        "provider",
        "stride",
        "Responsibilities",
        "requirements",
        "Carrier",
        "Group",
        "products",
        "Developed",
        "Code",
        "releases",
        "process",
        "Scrum",
        "class",
        "diagrams",
        "sequence",
        "case",
        "diagrams",
        "UML",
        "Rational",
        "Rose",
        "UI",
        "screens",
        "JSP",
        "HTML",
        "JSTL",
        "JavaScript",
        "Client",
        "Side",
        "Validations",
        "component",
        "presentation",
        "tier",
        "application",
        "JSF",
        "Framework",
        "facesconfig",
        "xml",
        "file",
        "navigation",
        "rules",
        "beans",
        "custom",
        "JSF",
        "components",
        "ICEfaces",
        "component",
        "suite",
        "POC",
        "Spring",
        "JSF",
        "Integration",
        "Spring",
        "framework",
        "Dependency",
        "Injection",
        "DIIoC",
        "DTO",
        "Business",
        "Delegate",
        "Factory",
        "Singleton",
        "design",
        "patterns",
        "applications",
        "products",
        "Health",
        "FSA",
        "Dental",
        "Vision",
        "POJOs",
        "Carrier",
        "Groups",
        "specifications",
        "POJOs",
        "Carrier",
        "Files",
        "Cobra",
        "files",
        "Invoices",
        "formats",
        "length",
        "HIPAA",
        "formats",
        "application",
        "Eclipse",
        "Eclipse",
        "plugin",
        "features",
        "build",
        "automation",
        "test",
        "case",
        "template",
        "generation",
        "mutatoraccessor",
        "code",
        "generation",
        "Python",
        "API",
        "RESTful",
        "Web",
        "Service",
        "Flask",
        "SQLAlchemy",
        "PostgreSQL",
        "Wrote",
        "Python",
        "scripts",
        "documents",
        "data",
        "database",
        "NoSQL",
        "database",
        "Mongo",
        "DB",
        "operations",
        "data",
        "service",
        "DaaS",
        "Restful",
        "Jersey",
        "web",
        "service",
        "Mongo",
        "DB",
        "data",
        "store",
        "Tomcat",
        "unit",
        "tests",
        "JUnit",
        "Mockito",
        "regression",
        "tests",
        "JMeter",
        "Hands",
        "experience",
        "Spark",
        "streaming",
        "time",
        "data",
        "use",
        "ApacheKafka",
        "Responsible",
        "components",
        "microservices",
        "Kafka",
        "search",
        "REST",
        "CICD",
        "pipeline",
        "tasks",
        "unit",
        "Jenkins",
        "build",
        "Maven",
        "module",
        "integration",
        "build",
        "configure",
        "Jenkins",
        "Integration",
        "tool",
        "Apache",
        "Camel",
        "Beans",
        "Binding",
        "integration",
        "Spring",
        "Frameworks",
        "unit",
        "test",
        "Data",
        "Access",
        "Object",
        "DAO",
        "pattern",
        "abstraction",
        "layer",
        "business",
        "logic",
        "tier",
        "storage",
        "tier",
        "data",
        "source",
        "Performed",
        "Unit",
        "Testing",
        "JUnit",
        "Load",
        "testing",
        "LoadRunner",
        "Log4J",
        "logs",
        "information",
        "Environment",
        "Java",
        "JSF",
        "ICEFaces",
        "Spring",
        "RC",
        "JSP",
        "JavaScript",
        "POJOs",
        "Hibernate",
        "SQL",
        "PLSQL",
        "Log4j",
        "JUnit",
        "Visual",
        "Source",
        "Safe",
        "Altova",
        "XmlSpy",
        "Eclipse",
        "JBOSS",
        "IBM",
        "WebSphere",
        "DB2",
        "APACHE",
        "Axis",
        "LoadRunner",
        "Education",
        "Bachelors",
        "Technology",
        "Computer",
        "Science",
        "Engineering",
        "Computer",
        "Science",
        "Engineering",
        "Jawaharlal",
        "Technological",
        "University",
        "Skills",
        "Eclipse",
        "J2ee",
        "Java",
        "Hibernate",
        "Spring",
        "Javabeans",
        "Jax",
        "Jaxrpc",
        "Jaxws",
        "jquery",
        "Jsp",
        "Servlet",
        "Servlets",
        "Api",
        "Curl",
        "Gradle",
        "Html",
        "Javascript",
        "Nodejs",
        "Jenkins",
        "Android",
        "IOS",
        "years",
        "Information",
        "TECHNICAL",
        "SKILLS",
        "Languages",
        "Java",
        "J2EE",
        "Scala",
        "Python",
        "Web",
        "Technologies",
        "SERVLETS",
        "JSP",
        "JavaBeans",
        "Java",
        "Servlet",
        "API",
        "Frameworks",
        "Spring",
        "Hibernate",
        "Angular",
        "JS",
        "Spring",
        "Security",
        "ApplicationWeb",
        "servers",
        "Apache",
        "Tomcat",
        "IBM",
        "WebSphere",
        "8x9x",
        "Jetty",
        "Jenkins",
        "WebSphere",
        "MQ",
        "Relational",
        "SQL",
        "Oracle",
        "g",
        "SQL",
        "server",
        "MySQL",
        "DB2",
        "Cassandra",
        "Internet",
        "Technologies",
        "HTML",
        "JavaScript",
        "XML",
        "CSS",
        "jQuery",
        "Angular",
        "JS",
        "BackBoneJS",
        "Nodejs",
        "Web",
        "Services",
        "SOAP",
        "REST",
        "JAXWS",
        "JAXRPC",
        "JAXRS",
        "Cloud",
        "AWS",
        "Netflix",
        "Eureka",
        "Mesos",
        "Kubernetes",
        "IDE",
        "Eclipse",
        "NetBeans",
        "IntelliJ",
        "Spring",
        "Tool",
        "Suite",
        "STS",
        "Methodologies",
        "waterfall",
        "TDD",
        "TestDrivenDevelopment",
        "Scrum",
        "Build",
        "Tools",
        "Ant",
        "Maven",
        "Gradle",
        "Bug",
        "Tracking",
        "Tools",
        "JUnit",
        "JIRA",
        "Bugzilla",
        "Curl"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T20:28:35.196135",
    "resume_data": "Android DeveloperArchitect Android span lDeveloperspanArchitect solution architect Dallas TX Work Experience Android DeveloperArchitect American Airlines Dallas TX April 2016 to Present Responsible for the Android app architecture design and implementation of using MVVM architecture design patterns and common solutions Converse with backend teams to create optimum integration solutions Responsible for evaluating and choosing Android mobile technologies for the implementation of each component and connections between the components Provide architectural review to shareholders for buy in and guided the team in the implementation Worked with project management to accurately estimate and scope out projects Developed the Android app using Android Oreo Version 81 Maintained Android mobile app quality in development through the continuous integration process using Jenkins CI server Working on PaaS service like OpenStack AWS and Pivotal Cloud Foundry PCF Used Jenkins as Continuous Integration tools to deploy the Spring Boot Microservices to AWS Cloud and Pivotal Cloud Foundry PCF using build pack Working with PCF Blobstore for storing and managing Application code packages Buildpacks Used SourceTree Git for code repository version control merge and commits Produced code to the highest standards while adhering to industry accepted architecture and design pattern techniques and methodologies eg MVP MVVM SOA OOP DI etc Implement RESTful web services consumption with Retrofit and RxJava parsing JSON objects with GSON Created animations in the application view animations frame animations tween animations etc Followed Google material design guidelines Analyzed and critiqued code based on both functional and technical specifications Commented on code and produced technical documentation to industry standards Ensured Android crossdevice compatibility Used Jira for documentation task tracking backlog management and meeting preparation As architect I was involved in requirement gathering UI design and development Designed the logical flow for the application for different components Participated in Scrum meetings project planning and coordinated the status sessions Developed Android native app using Java and Kotlin coding in Android Studio IDE Sr Mobile Applications DeveloperArchitect American Airlines Dallas TX December 2012 to March 2016 Worked as a part of the Innovations team as Architect Design Development and maintenance of applications services and framework functionality for AAs next generation platforms Responsible for Android app overall system architecture Exp developing architecting apps that communicate with cloud endpoints using REST Expertise with Linux Android software development tools Android Studio git Using Kotlin in developing few modules in the application Handling on debugging Android application issues and fixing the bugs Working with designing implementing software for embedded devices systems Contribute to the extension of our core Android payment service functionality to support the aforementioned areas Execute rapid prototyping to facilitate proof of concept and demonstrations for complex requirements and features Develop and test the defined requirements with high accountability while managing risks and the potential of evolving requirements Solve complex challenges specifically related to delivering Android applications and services for the unique requirements of the payment industry Working closely with other functional teams third parties and vendors to facilitate the resolution of issues Implemented the required GUI by making modifications to the XML files Used Multithreading to implement parallel processing Environment Android Studio Rx Java Kotlin GenyMotion SQLite Dagger UNIX Eclipse IDE media framework Java XML JIRA ADB Log Cat Web Services Junit Sr Java Developer American Airlines Fort Worth TX December 2012 to March 2014 Developed the presentation layer written using JSP HTML CSS and clientside validations were done using JavaScript jQuery and JSON Created the design documents with use case diagram class diagrams sequence diagrams using Rational Rose Implemented the MVC architecture using Apache Struts11 Framework Implemented Action Classes and serverside validations for account activity payment history and Transactions Implemented views using Struts tags JSTL20 and Expression Language and implemented Tiles Framework for the layout of the view Implemented session beans to handle the business logic for fund transfer loan credit card fixed deposit modules Worked with various java patterns such as Service Locator and Factory Pattern at the business layer for effective object behaviors Worked on the JAVA Collections API for handling the data objects between the business layers and the front end Worked with JAXB SAXP and XML Schema for exporting data into XML format and importing data from XML format to data base and JAXB in the web services request response data marshaling as well as the unmarshalling process Implemented the web services client to consume the thirdparty service API for validating credit cards Used XML Web Services using SOAP to transfer the amount to transfer application that is remote and global to different financial institutions Used Java Messaging Services JMS for the reliable and asynchronous exchange of important information such as payment status report Developed Unit test cases using JUnit and developed ant scripts and developed builds using Apache ANT Used Log4J to capture the log that includes runtime exceptions and used Clear Case for source code maintenance Environment HTML XHTML CSS JavaScript JDK J2EE JSP Servlet XML SOAP Oracle log4j W3C Web Sphere Application Server Sr Distributed Applications Developer Federal Reserve Bank Dallas TX March 2010 to November 2012 Check21 Web Check21 is suite of applications providing file movement and monitoring capabilities for the Federal Reserves electronic checking system all districts The main applications for this project are the DTM and EFM applications The DTM Data Transfer Manager is the hub for file movement The EFM application provides file monitoring capabilities for the files as they are moved from one location to another Responsibilities Participated in the design and development of Outgoing Files from IPD to DTM module Extensively uses Agile methodology used scrum tool for logging various time estimations and various logs of applications Activities are divided as 2 weeks Sprint Used Spring MVC Framework to develop the application Used Factory DAO Singleton and DTO and Value Object Business Delegate design patterns Created and maintained Stateless session beans for handling multiple users using EJB 20 Used Rational Rose to draw UML diagrams and to develop the Use cases Activity Diagrams Sequence Diagrams and Class Diagrams Implemented the Spring framework for Dependency Injection DIIoC Used IBM MQ Series in the project Configured MQ Connection Factory Queue names in Websphere Admin console Created MDB on receiver side to listen the messages from sender using JMS API Developed automation and process for operations and deployment of application in a message broker environment Developed Microservices to communicate using synchronous protocols HTTP and REST for implementing SOA Used Websphere V61 application server Worked on creating new reports and modify existing reports Implemented the SpringORM for Hibernate using the Hibernate Template class Designed and developed the Object Relational mapping using Hibernate to store and persist data in Oracle database Involved in writing the associations for the query in xml mapping files in Hibernate Developed SQL queries and Stored Procedures using PLSQL to retrieve and insert into multiple database schemas Developed JUNIT test cases for unit testing Intensively worked on IBM RAD7 Rational Application Developer Environment and Tools Used JIRA for tracking the Activities Tasks and Defects Used CM Synergy to manage the versions and Merge the code Worked on creating xsds and castor classes to process files Upgraded Java 12 WSAD WAS 50 to Java 15 RAD WAS 71 Fixed issues that occurred in the migration process Documented the Migration process to make it easy for future migrations Used Log4j for writing the logs including errors info etc Created ant build scripts and DOS deployment scripts to handle staging in QA Preprod environments IBM Payment Director IPD IPD is new system which replaces the existing legacy Check21 System These new applications are FRB Incoming FRB Outgoing and Fed Receipt and will take the place of the DTM application after full migration to the new IPD platform Events Notifications Handshake Messages are sent to handle monitoring and error handling of these files New reports are created to check the status of various files types Accounting Billing Cure etc and resend the files if required Responsibilities Worked on design and development of FRBIncoming FRBOutgoing FRBFedReceipt components Worked on IPD Rules Engine which handles logic to move files either to Check21 or IPD System This engine handles smooth transition from legacy to new system ie IPD Worked on File Renaming algorithm which renames the files as they arrive in the incoming folder Created Stale Notification processors which monitors the database and send notifications for any delayed files Worked on new web reports for displaying various messages Used DOJO framework for creating the web reports Worked on EJBS to handle the processing of the various messages sent by FRBIncoming Outgoing Created handlers using the JMS API for sendingprocessing messages Worked on bug fixes enhancements Created Junits and worked on creating utility classes for doing performance testing Worked on Resend Message Handlers to resend the messages and reset the processing of files if any error occurs Worked on Application server to createconfigure queues data sources listeners and resources Worked on File Handlers to create listen process files of various types Accounting Billing CureEWA and DepositDerivedPresentment files Converted the file handlers in to RESTful web Services using JAXRS API Developed JUNIT test cases for unit testing Used CM Synergy to manage the versions and Merge the code Environment Java JDK 15 J2EE Spring EJB Oracle10g JDBC Servlets JSP Javascript XML HTML DOJO UML JMS Agile Websphere 61 RAD7 IBM MQ Series Rational Rose CM Synergy SVN JIRA ANT Log4j Hibernate 25 SQL PLSQL JUnit LoadRunner JavaJ2EE Full Stack Developer Benefit Harbor Dallas TX August 2009 to February 2010 Benefit Harbor is a benefit based system which seamlessly integrates a world of benefits on one powerful system Benefit Harbor makes administration easier and accurate by providing daily transactions and generating different reports like Carrier and Cobra Files The expansive design takes group and individual benefits like Core health and welfare benefits voluntary insurance products FSAs HRAs HSAs COBRA 401k and profitsharing plans all from any provider in stride and integrates everything Responsibilities Involved in gathering the requirements from the Carrier and Group for specific products Developed Code based on incremental iterative releases using an Agile process Scrum Developed class diagrams sequence and use case diagrams using UML Rational Rose Designed UI screens using JSP HTML JSTL and used JavaScript for Client Side Validations Developed the component based presentation tier of the application using JSF Framework Configured the facesconfig xml file and provided navigation rules and managed beans Developed custom JSF components using the ICEfaces component suite Worked on POC for Spring and JSF Integration Implemented the Spring framework for Dependency Injection DIIoC Implemented DTO Business Delegate Factory and Singleton design patterns Implemented applications for different products like Health FSA Dental and Vision using POJOs according to the Carrier and Groups specifications Developed POJOs to create Carrier Files Cobra files and Invoices in the different formats like excel fixed length HIPAA regulated formats 834 Developed the application on Eclipse and used Eclipse plugin features for editing debugging compiling formatting build automation test case template generation mutatoraccessor code generation Developed Python based API RESTful Web Service using Flask SQLAlchemy and PostgreSQL Wrote Python scripts to parse JSON documents and load the data in database Worked with NoSQL database Mongo DB and worked with it to perform many different operations Created data as a service DaaS based Restful Jersey web service with Mongo DB data store running on Tomcat 9 Developed unit tests with JUnit and Mockito and have written automated regression tests using JMeter Hands on experience with Spark streaming to receive real time data making use of ApacheKafka Responsible for building components to connect to other microservices using Kafka Elastic search REST Developed CICD pipeline and build tasks to run the unit tests on Jenkins and maintained separate build in Maven for the module for easy integration to the portal build and configure with Jenkins Integration tool Used Apache Camel for Beans Binding and seamless integration with Spring Frameworks and for routing unit test Used Data Access Object DAO pattern to introduce an abstraction layer between the business logic tier and the persistent storage tier data source Performed Unit Testing Using JUnit and Load testing using LoadRunner Implemented Log4J to trace logs and to track information Environment Java 15 JSF ICEFaces Spring 25Spring 30 RC JSP JavaScript POJOs Hibernate 25 SQL PLSQL Log4j JUnit Visual Source Safe Altova XmlSpy Eclipse 34 JBOSS IBM WebSphere DB2 APACHE Axis LoadRunner Education Bachelors of Technology in Computer Science Engineering in Computer Science Engineering Jawaharlal Technological University Skills Eclipse J2ee Java Hibernate Spring Javabeans Jax Jaxrpc Jaxws jquery Jsp Servlet Servlets Api Curl Gradle Html Javascript Nodejs Jenkins Android IOS 10 years Additional Information TECHNICAL SKILLS Languages Java 18 J2EE Scala 2121 Python Web Technologies SERVLETS 31 JSP 30 JavaBeans 30 Java Servlet API 30 Frameworks Spring 43 Hibernate 43 Angular JS 2040 Spring Security 32 ApplicationWeb servers Apache Tomcat 8 IBM WebSphere 8x9x Jetty Jenkins 250 WebSphere MQ 75 Relational No SQL databases Oracle 10g11g SQL server 20142016 MySQL 57 DB2 111 MongoDB Cassandra Internet Technologies HTML 5 JavaScript 18 XML 20 CSS 3 jQuery 211 Angular JS 2040 BackBoneJS 131 PolymerJS Nodejs 60 Web Services SOAP 12 REST 20 JAXWS JAXRPC JAXRS Cloud Environments Azure AWS Netflix Eureka Mesos Kubernetes IDE Eclipse NetBeans 802 IntelliJ 20171 Spring Tool Suite STS 383 Methodologies Agile waterfall TDD TestDrivenDevelopment Scrum Build Tools Ant 110 Maven 339 Gradle 341 Bug Tracking Tools JUnit 412 JIRA 70 Bugzilla 4412 Curl 736",
    "unique_id": "bfc167cc-5fba-4374-9dcd-05cbd695f8d5"
}