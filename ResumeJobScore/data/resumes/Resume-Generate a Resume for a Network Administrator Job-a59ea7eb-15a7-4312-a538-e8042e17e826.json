{
    "clean_data": "Decorator Design pattern Decorator Design pattern Decorator Design pattern Scivantage 499 Washington Blvd A seasoned CoreServer Side Java Developer with extensive experience in MultiThreading Concurrency Synchronization Thread Pool Collection Framework Data Structure Design Patterns Java Memory Model GC tuning UnixLinux etc Proficient in designing developing of high throughput high availability concurrent and fault tolerant software systemsnTier Distributed Enterprise Application in different phases of SDLC including Requirement gathering Analysis DesignArchitecture DevelopmentIntegration Build Management Enhancements Testing etc Background in eTrading pretrade capture Security LendingStock loan Order Management System Fixed Income Experienced in Low Latency Java Development GC TuningElimination JVM tuning Stack Trace Analysis Collections Sorting Algorithms etc Have knowledge of Hadoop ecosystem HDFS Big Data RDBMS HIVE HDFS MapReduce Experienced on working with Big Data and Hadoop File System HDFS Have extensive working experience in multiple BFS domains like Fixed Income Risk CCAR Regulatory Reporting Retail banking Security Lending Portfolio Management Order Management System Mortgage etc A selfmotivated enthusiast quick learner detailoriented developer experienced in delivering highquality scalable predictable and highperformance applications Work Experience Decorator Design pattern Scivantage 499 Washington Blvd May 2018 to Present New Port May 2018 Present Project Description The objective of Fixed Income project Enchiladas is to build a Debt Processing Engine which can generate OID accrual schedules for both Corporate and Municipal bonds that maymay not be OID eligible and to process Fixed Income transactions determine the purchase condition and apply the appropriate cost basis adjustments In addition the engine will also need functionality to create accrual schedules for Complex Debt instruments such as Contingent Debt Variable Rate Debt Inflation indexed Stepped Rate Paymentinkind NQSI Deferred STRIPS and Fixed Rate Capital securities This project is divided into Day 1 and Day 2 Day 1 requirements include Less Complex Debt securities and calculations Day 2 Requirements include More Complex Debt securities and calculations RESPONSIBILITIES Designed and developed the Enchiladas Fixed Income Engine The core Engine calculates the Base OID Schedule Payment Schedule Accrual schedule depending upon if the Adjustment type is Bond Premium Acquisition Premium or Market Discount Developed the OID YTM Yield to Maturity calculator using Newton Rhapson method Developed the Engine project as a library a Maven project Designed and developed the REST API using JAXRS Jersey Developed a generic ETL Framework by using Java Blocking Queue Executor Services and IO APIs Used Java Generics for developing generic Parser and Mapper classes Designed and developed user friendly User Defined Exception handling Framework Used Java IO APIs Decorator Design pattern for WritingReading tofrom multiple types of file Developed Unit test cases using Junit MockitoPower Mockito Tested REST APIs from POSTMAN Application Extensively used JAXB APIs for parsing XMLText based data files Createdmodified XSD schema for input data type POJO validation Used Class Loader to invoke the right ParserMapper dynamically Implemented Security Layer by using Web Token Authentication Filter etc Used Java 8 features like Streams Lambda Functional Interface Producer Consumer etc Used Hibernate Query Session Transaction Entity Typedef APIs for ORM mapping along with DAO for data access using Hibernate to fetch data from database Configured Hibernate Connection Factory C3P0 Attributes to handle situations like Timeout and Stale Connection etc Designed and developed Batch jobs to generate Transactions and Error reports for Day 0 and Delta Used Executor Framework JAXB ehcache Apache DBCP JDBC Collections and Apache Commons etc Implemented caching mechanism for Instrument details using Ehcache Created Maven Project using POM file to configure the project artifacts dependency management build life cycle excluding configuration files from the generated war files Performed trouble shooting including stack trace analysis and JVM tuning by changing to Heap sizes according to the requirement Managed and monitored the JVM performance by Heap Size Garbage collection taking Thread dumps Implemented the logging mechanism using Log4j framework Changed Rollover policy from TimeBasedRotationpolicy to FixedWindowRotationPolicy in order to have a fixed number of archive files over a rolling log Deployed the war file in a WebLogic portal hosted on AWS EC2 instance Managed deployment maintained lifecycle of the hosted portal instance Created AWS stack using script Handled Load balancer Cloud Formation Security group etc Createdmodified Jenkins CICD pipeline for build automation Implemented Validation frame work for validating Input Data file Developed shell scripts to automate BatchETL jobs Investigated into JIRA tickets and did analysis and provided solution for them Converted a monolithic app to microservices architecture using Spring Boot using 12factor app methodology as a POC Involved in the implementation of a Continuous Delivery pipeline with Docker Jenkins and GitHub and AWS AMIs Environment JDK 18 GlassFish AWS JAXRS Jersey Eclipse Apache IO JAXB Apache Commons maven XML Postgres Git JUnit Jenkins AWS JIRA Hibernate etc JPMC 575 Washington Blvd February 2017 to May 2018 Project Description Metadata is the key driving force for all activities in the Ecosystem All the incoming data has to have technical registration information and lineage defined before it is stored in the data reservoir UDS Unified Data Service strives to maintain information about the endtoend flow of data in the Ecosystem consisting of serviceoriented technical operational security and workload specific information associated with the data and its processes Usually Customer PII data Personally Identifiable Information is registered for a later consumption Ingestion This PII data can be shared across LOBs as well UDS Registration portal allows business user register zones which helps to connect different data sources register data domains and data sets It allows to register unified data processors and data flows as well these components will be used in ingestion application to ingest data into Hadoop environment and further data will be used for data analytics Data ingestion service allows for data to be ingested into one of the three Hadoop zones within the Hadoop data reservoir Data can come in the form of a file table or directory Hadoop Zones are as follows Hadoop Achieve Hadoop Conformed Hadoop Semantic RESPONSIBILITIES Singlehandedly createdmaintained workflow using Core Java Collection Spring Restful Spring MVC to implement CRUD functionality on functionalities at Tenant and DataSet Level Designed application modules using Microservices architecture Used Core Java Collection Framework and DAO Layer to implement this Used Spring Integration Spring Boot and Core Java to build and connect Intra applications components Createdmaintained Inmemory Junit test cases to incorporate End to End testing Also provided Junit test cases using Mockito PowerMockito mocking frameworks for portal project Createdmaintained batch jobs using Spring Batch and Spring Boot for EOD batch processing of Customer data related batch jobs Created and maintained ARM scripts for automatic checkout from bitbucket and consequent build and deployment using Jenkins maven etc Created Database objects like Tables sequence index Views GRANTS and Roles etc Maintained the DB Scripts in Gitbit bucket Usedmodified using Java 8 features like Stream Lambda Expression in the existing code Used EclEmma code coverage tools and was part of code review process Createdmaintained deployment processes of Registration Ingestion in DEVQA environment Executed queries using Hive and developed MapReduce jobs to analyze data Developed Hive queries for the analysts Utilized Apache Hadoop environment by Hortonworks Involved in loading data from LINUX and UNIX file system to HDFS Migrated existing projects from SVN to Git with commit history Created Jenkins built scripts for separate projects and pipelines Created Log4j configuration corresponding to different environment Environment JDK 18 Tomcat Eclipse Mars Spring Batch Spring Boot Spring Integration GitGit extensions Maven WinScp Putty JAXB XML Oracle SVN XSD Mockito PowerMockito JUnit Jenkins Linux JIRA Hibernate Hadoop Cloudera cluster Barclays New York NY October 2015 to January 2017 Project Description Comprehensive Capital Analysis and Review CCAR a regulatory framework was the DoddFrank implementation specified by FED Federal Reserve in order to assess regulate and supervise large Bank Holding Companies Project Octon is Barclays response to DoddFrank S165 CCAR along with the annual DoddFrank Act stress tests DFAST were designed as complementary initiatives to strengthen supervisory assessments of capital adequacy and processes through which large complex BHCs initially assess their capital needs Initially calculation are created as Hadoop jobs invoked by Monikers which represent the SQLs Later on because of the advantage of the in memory processing we have replaced the Hadoop jobs by spark processing RESPONSIBILITIES Implemented E2E End To End process consists of one or multiple Processes which in turn consists of one or more Activities or SubProcesses Designed BPMN models of the E2E process using Eclipse BPMN2 modeler configured ActivityProcess details Developed Spark programs using Scala APIs to compare the performance of Spark vs Hive and SQL Used Spark API over Hortonworks Hadoop YARN to perform analytics on data in Hive Implemented Spark using Scala and Spark SQL for faster testing and processing of data Developed WorkItemHandlers and service implementations corresponding to BPMN Models using jBPM Eclipse plugin and Core Java Developed different types of Activities eg Data publishing Data Validation ETL Report Generation Axiom Fixed Form Reports related MetaData is SFTPed to Axiom Reporting team Developed SFTP framework using JSch Java Secure Channel APIs Tested the code in Kerberos enabled platform Developed File Watcher Script for SFTP application During PPNR calculation an inhouse Model Execution Framework is used to read input monikers validate monikers perform MEF execution capture Output validate output and write to mercury Used Core Java Collections JSON jBPM Hibernate to develop WorkItemHandlers Service Implementations classes Projective RWA Risk Weighted Assets Calculations Transform are of two types Spot and Standardized WorkItem Handlers Service Implementations classes are done by using Core Java Collection JSON jBPM Hibernate etc CCAR and DAST test requires simulated stressed market data BHC bank needs to carry out the Stress Tests for total 5 scenarios 3 Fed given and 2 Internal Each scenario consists of 28 RiskFactors and each of them consists of a number of shocks values SMT Scenario Management Tool is used to generate the simulated Scenario data Used jBPM WorkFlows BPMN Modeler 2 plugins Core Java JSON Hibernate etc Static Runbook has the details of the Top level processes their child processes and the corresponding activities Static Runbook gives a reference of the ideal time to run a complete CCAR Execution from start to end Whereas Dynamic Runbook calculation provides actual time taken by each of the processesactivities Designed the Static and Dynamic Runbook and developed using Core Java Data Structure Collection RestTemplate client etc Used Multiple Predecessor logic to determine the dependency of processes Developed Context Services Moniker Services DrillDown Services etc which provides data used in Calculation and Fixed Form Reporting Developed the services using Spring RestTemplate JDBCTemplate and Core Java Developed different DAO Implementation using Spring JDBC Template in order to prepopulate the Run Details notifications etc at the start of the application Developed a tool to generate Fudged Messages and deliver it to a QueueTopic to during Unit testing of the Workflows Worked on Tomcat DB Connection Pool configuration to achieve optimum number of DB connections using Apache Commons DBCP Extensively used Git Git Extensions as the repository Used Mockito and JUnit for developing Unit Test code Developed and maintained Stored Procedure Named Query to implement WorkFlow Functionalities Used Goals and Profiles in during build to create war for specific environments using Maven Environment Core Java 17 Tomcat Eclipse PluginsBPMN modelers JBoss Drools GitGit extensions maven WinScp Putty JAXB XML Oracle Eclipse Kepler SVN XSD Mocito JUnit Jenkins Teamcity Ant Jsch Windows 7 Linux HP ALM Hibernate Goldman Sachs 30 Hudson Jersey City December 2014 to September 2015 Positions Reporting RegOps teams Large Options Positions Report LOPR is for compliance reporting to OCC The project goal is to migrate the US LOPR function to Regulatory Operations strategic infrastructure and to build an enhanced operational support model RESPONSIBILITIES Worked with Operations to analyze the OCC Reference document to understand the specification and created gap analysis document between the intended system and the existing system Generated Model classes from the Position Schema of OCC system using JAXBAPIs Designed and developed a batch application to download table data from PROD databases to flat filesby identifying business entity using Core Java Spring JDBC Spring Batch Log4j2 Multithreading Executor Service Executors DAO Framework etc Developed some File Watcher application which loads data files to some secured location using SFTP Core Java JSCH Java Secure Channel APIs Designed and developed a reconciliation tool POC which takes metadata information about previous report runs and get the report results It takes the report results as inputs and generates the delta difference This delta difference is going to be the basis of the LOPR report Used Java Collection XML parsing Java IO and Generics APIs to code classes Designed and developed application to parse Snap Shot data from OCC in the FIXML format and parsed it according to the OCC Reference manual and uploaded using JDBC batch insert to the Sybase IQ database Did coding to include issuers coded as SECTION_604 regulation under BHCA monitoring report Changed Global Report to Regulation Global Issuer to Regulation and Global Issuer to Threshold mapping Tested in Dev and UAT environment Coded change in business functionality to map Global Issuer to Regulation mapping and Global Product to Regulation mapping under the same Regulation and comments Did a POC using Spring Batch to download Production data files of size 100 GB by a single threaded application to a data file Developed Mock JUnit Test cases to mock Business functionality testing Did JUnit data validation with static Inmemory data instead of validation against database Environment Core Java 151617 JAXB XML Sybase IQ Sybase ASE DB2 Eclipse Kepler SVN XSD Mocito JUnit Maven Jenkins Teamcity Windows 7 Linux Contract First Web Service Capital One 360 Wilmington DE July 2013 to October 2014 Wilmington Delaware July 2013 Oct 2014 Project Description TranSite SASSy and IVR the three Web Service Clients communicate with Wesp Server side Wesp accesses Profile and Oracle Database to get the customer data Checkmate is used to upload and deposit check images using mobile or ATM banking RESPONSIBILITIES Devised the algorithm Coded to implement it a Contract First Web Service using SpringWS Spring MVC Spring IoC XSD JAXB DAO Framework Exception handling Collection and Core Java Used Tidal Enterprise Client to createmodify scheduled jobs in windows based agent Developed Java Server Side code used to be invoked from Tidal Clients Promoted the jobs developed in Dev Tidal environment to QA and Production environment Coded the Tax Form Generating Module for 2013 Tax year to generate tax forms for 1098 1099R1099S1099A1099C1099DIV1099INT1099MISC using Core Java Collection Framework Java Exception XML XSLT Velocity Template XSD and JAXB Used MavenGitGerrit during development code check out and local build before the code checkin Also used SVN version control system during source code management process for old style version management system Coded Unit Test cases for every Java class using JunitMocito Testing Framework In order to meet or exceed the high code coverage 90 minimum code coverage used tools like JaCoco and EclEmma Used tools like CPD PMD FindBugs to find subtle bugs in the application like duplication of code unused code improper indentation etc Coded in Java Servlets used to play the audio files needed depending upon the workflow executed for IVR application Configured both 3264 bit Tomcat instance for 32 64 bit applications Did performance tuning to the Server configuration for optimization Designed developed Server Side caching mechanism using Core Java ehCache API Collections Spring API RESTful API Tested bug fixed deployed the application Designed developed Coded the KeepAliveConnection implementation using Core Java ExecutorService MultiThreading Collection Exception Generics etc Coded and configured Server Cache implementation using ehCache to enhance the performance Implemented File based cache overflow configuration Coded customized Cache Manager Factory classes to handle configurable Disk Store Location attribute Implemented distributed Logging mechanism by using LOGback logger and appender for each of the separate interfaces and web application Coded using LOGback API and Java to implement per user Logging facility Implemented Time and Size based Roll over policy for logger Coded Logging Context set reset mechanism to facilitate the log files with different contexts Developed solution to change the log levels of independent modules dynamically using UI tool Implemented tool where users can viewdownload log files for debugging purpose for an environment without server access using RESTful API and Spring MVC Developed Resource images Externalization Framework using Spring MVC to keep resources out of the deployed war file using Spring MVC Coded Mock client interface as a backup of the actual implementation when service is down using Spring AOP Developed data access implementation using DAO Framework spring JDBC Template and SQL Named Query Coded web service client implementation using Spring MVC Restful Web Service API Retrofitted SOAP based client code implementation Used AntHillPro during DEVQAUAT built process to maintain automatic build life cycle management Environment Core Java 16 Spring MVC IoC SpringWS log4j Git Gerrit SVNSOAPJMSMQ series XML XSLT XSD AntHillPro Eclipse Mocito JUnit Maven Callable Statement Stored Procedure Velocity Framework Apache tomcat Jenkins Slave CPD PMD JaCoco FindBugs EclEmma Morgan Stanley Smith Barney NYC New York NY November 2012 to June 2013 Nov2012 June2013 Project Description MSSB 3D is an advisor platform developedintegrated as a result of the joint venture of Morgan Stanley MS 360 application and Smith Barney legacy NextGen application The main goal of the project PMR is to provide a set of Portfolio Reports through a separate application within MSSB 3D This application enables Financial Advisors FAs Brach Operations and their clients to obtain the financial and portfolio information they are accustomed to The Portfolio Reports application utilizes new and existing MSSB 3D and MS360 web services interfaces and data sources Senior Developer Wells Fargo Home Mortgage Frederick MD April 2011 to October 2012 Project Description The ASDS Asset Sales Delivery System is a system for packaging loans home mortgages for sale on the secondary market A Trade Desk Analyst requests Loan data be extracted from ASDS into the ASBE Asset Sales Best Execution system The Analysts request results in a query being sent to ASDS and ASDS responds by sending the resulting information to a file on a shared drive for access by the ASBE system or Trade Analyst The ASBE system optimizes a mix of the imported Loans into Pools which in turn helps to Trade the loans easily Developer JPMC NYC New York NY April 2010 to December 2010 Project Description Stock Loan Strategic Investments Pre trading activities has two parts Availability and Overnight Locates In Availability application the number of each security from each of the client is gathered and then the Haircut rules are applied In Overnight Locates application the endclients sends requests for Locates of the securities they trade After receiving the requests the response files are sent which will have the quantities of securities allocates Framework consists of components like Client Gateway adapters Inmemory Cache database Rule engine and JMS component and controller agent System processes feeds from different clients using adapters which supports incoming files via different protocols email ftp etcRule engine provides different rules on messages which gets persist in Database Rackson Asset Management NY August 2009 to April 2010 Description Rackson developed their own low latency etrading system for their algorithmic trading system Their trading system arguably low volume but faster than most of the contemporary Trading system available One aspect of the application was to monitor the Order Updates and accordingly place new order cancel the order resubmit the order etc In essence it was their indigenous Order Management System OMS they were developing Role Financial Solution Hub Princeton NJ December 2008 to August 2009 Description FSH is a complete solution STP which would help financial clients by integrating Front office Middle office and Back office solutions FSH has the following modules Integration Engine Business Rule Engine Reconciliation Engine Enterprise Risk Engine Accounting Engine Basel II Engine and a BPM solution Sungard Financial Parsippany NJ January 2008 to December 2008 Description Getpaid is a treasury solution suite in Accounts Receivable AR and Collections Management area It helps corporations to optimize and manage working capital particularly the credit and collections processes of the AR department It helps streamline the ordertocash process by consolidating customer invoice information automating collection tasks driving discrepancy resolution and generating advanced cash forecasts It provides an enterprisewide view of cash and working capital across accounts receivable accounts payable and treasury Infinity Business Process Automation software is a BPM tool It leverages by easy visual modeling easy integration of JavaJ2EE application with the Business Process Management framework scalability etc Cognizant Technology Solution November 2002 to December 2007 Description While in Cognizant I got chance to work for clients like Merck Metlife Credit Suisse and JPMC A Relationship Manager maintains safekeeping account by creatingexecutionreviewing of orders Handling Real Time Positions Order Entry Settlements Non Trading Orders are some of the major activities Global AD Core was a monitoring project to monitor reconciliation of the accounts portfolio management and trading applications Developed APIs for an Order Management Systems OMS for an ETrading platform Cogentech January 2002 to November 2002 Description The Web Application developed for NJDOL New Jersey Department of Labor was meant for the Judicial system Developed UI and Server side components like Action class Servlet Controller ActionForm etc using Struts JDBC JSP Wrote some utility functions used in this project ADA Software and Services April 1999 to December 2001 Description Worked in projects on Antilock Braking System ABS The software was developed in an 8 bit microcontroller Siemens C505 which with the help of another 16 bit microcontroller of Texas Instrument continuously monitor the wheel speed of the vehicle and calculate the acceleration as well The speed control is required to avoid the locked condition of the car while the speed of the car suddenly changes Education BE in Electronics and Telecommunication Engineering Jadavpur University Kolkata West Bengal Skills BEA BEA WEBLOGIC ECLIPSE EJB J2EE",
    "entities": [
        "Createdmaintained Inmemory Junit",
        "IVR",
        "Cognizant Technology Solution",
        "PROD",
        "RiskFactors",
        "Portfolio Management Order Management System Mortgage",
        "Delaware",
        "Implemented File",
        "Developed Context Services Moniker Services DrillDown Services",
        "Input Data",
        "DEVQAUAT",
        "New York",
        "STP",
        "Hortonworks Hadoop",
        "Customer",
        "ParserMapper",
        "Spring MVC Coded Mock",
        "UNIX",
        "Createdmaintained",
        "FED Federal Reserve",
        "Regulatory Operations",
        "Developer JPMC NYC New York",
        "Implemented Time and Size",
        "Sungard Financial Parsippany NJ",
        "Created Database",
        "MEF",
        "Coded Unit Test",
        "Registration Ingestion",
        "Goldman Sachs",
        "Profile",
        "Service Implementations classes Projective RWA Risk Weighted Assets Calculations Transform",
        "Mapper",
        "Spring RestTemplate JDBCTemplate",
        "Ehcache Created",
        "Handling Real Time Positions Order Entry Settlements Non Trading Orders",
        "Jenkins Slave CPD",
        "Model Execution Framework",
        "MultiThreading Concurrency Synchronization Thread Pool Collection Framework Data Structure Design Patterns",
        "Core Java Collection JSON jBPM Hibernate",
        "E2E",
        "Hadoop",
        "Personally Identifiable Information",
        "Createdmodified Jenkins CICD",
        "File Watcher",
        "Overnight Locates",
        "Merck Metlife Credit Suisse",
        "WebLogic",
        "Created Log4j",
        "Standardized WorkItem Handlers Service Implementations",
        "JUnit",
        "Wesp Server",
        "Core Java Collection Spring",
        "Present New Port",
        "Large Options Positions Report",
        "Database Rackson Asset Management",
        "GB",
        "Axiom Reporting",
        "Financial Advisors",
        "JavaJ2EE",
        "Fed",
        "Developed Mock JUnit Test",
        "XMLText",
        "LOPR",
        "POSTMAN Application",
        "CPD",
        "WritingReading",
        "Developed",
        "Streams Lambda Functional Interface Producer Consumer",
        "DAO",
        "Created Jenkins",
        "Texas Instrument",
        "Kerberos",
        "Hadoop Achieve Hadoop Conformed Hadoop Semantic RESPONSIBILITIES Singlehandedly",
        "Project Description Comprehensive Capital Analysis and Review",
        "Wilmington",
        "WorkFlow Functionalities Used Goals and Profiles",
        "Delta Used Executor Framework",
        "Global AD Core",
        "Usually Customer PII",
        "Git",
        "SQL Named Query Coded",
        "Fixed Income Risk CCAR Regulatory Reporting Retail",
        "Tenant",
        "Core Java ExecutorService MultiThreading Collection Exception Generics",
        "ETL Framework",
        "Order Management Systems OMS",
        "Heap Size Garbage",
        "Bank Holding Companies Project Octon",
        "Dev",
        "NJDOL New Jersey Department of Labor",
        "Order Management System OMS",
        "Integration Engine Business Rule Engine Reconciliation Engine Enterprise Risk Engine Accounting Engine Basel II Engine",
        "Stack Trace Analysis Collections",
        "DoddFrank",
        "Monikers",
        "Activities eg Data publishing",
        "Haircut",
        "Java Collection XML",
        "Judicial",
        "Core Java Data Structure Collection RestTemplate",
        "LOGback",
        "JBoss",
        "ALM Hibernate",
        "Mockito PowerMockito",
        "Siemens C505",
        "Portfolio Reports",
        "Barclays New York",
        "Locates of the securities they trade",
        "BFS",
        "Oracle Database",
        "Order Management System Fixed Income Experienced",
        "Corporate and Municipal",
        "Created AWS",
        "MVC",
        "the DB Scripts",
        "UnixLinux",
        "POM",
        "Spark",
        "EJB",
        "BHC bank",
        "RESPONSIBILITIES Worked with Operations",
        "LOGback API",
        "DataSet Level Designed",
        "JPMC A Relationship",
        "Tidal Clients Promoted",
        "API",
        "US",
        "Sybase",
        "QA",
        "POJO",
        "LINUX",
        "Checkmate",
        "Created",
        "Project Description Stock Loan Strategic Investments Pre",
        "AWS",
        "Server",
        "Hive Implemented Spark",
        "Data Validation ETL Report Generation Axiom Fixed Form Reports",
        "Coded",
        "JunitMocito Testing Framework",
        "Framework",
        "UDS Unified Data Service",
        "Git Git Extensions",
        "Developed File Watcher Script for SFTP",
        "Hadoop File System HDFS",
        "the Enchiladas Fixed Income Engine",
        "Morgan Stanley MS 360",
        "ASBE",
        "Education BE in Electronics and Telecommunication Engineering Jadavpur University",
        "Maven Environment",
        "Stored Procedure Named Query",
        "GitHub",
        "RESPONSIBILITIES Implemented E2E End To End",
        "Pools",
        "IO",
        "FIXML",
        "the Business Process Management",
        "The ASDS Asset Sales Delivery System",
        "Hudson Jersey City",
        "JaCoco",
        "OCC",
        "QueueTopic",
        "FSH",
        "Big Data",
        "Maven Project",
        "Hive",
        "Changed Rollover",
        "Newton Rhapson",
        "BHCA",
        "ATM",
        "Fixed Rate Capital",
        "DB",
        "CRUD",
        "Hortonworks Involved",
        "Roll",
        "Instrument",
        "Apache IO",
        "Maven",
        "Global Issuer to Regulation",
        "Bond Premium Acquisition Premium",
        "Web Service Clients",
        "Loan",
        "Developed Unit",
        "UI",
        "Front",
        "BPM",
        "XSD",
        "Infinity Business Process Automation",
        "Smith Barney",
        "XML Postgres",
        "SVN",
        "Skills BEA BEA WEBLOGIC",
        "Java Blocking Queue Executor Services",
        "OCC Reference",
        "MapReduce",
        "User Defined Exception",
        "Antilock Braking System",
        "Stream Lambda Expression",
        "Washington",
        "Decorator Design",
        "Core Java Collection Framework Java Exception XML",
        "EOD",
        "Brach Operations",
        "Implemented Validation",
        "ADA Software",
        "Wells Fargo Home",
        "SMT Scenario Management Tool",
        "Utilized Apache Hadoop",
        "Engine",
        "Distributed Enterprise Application",
        "Boot Spring Integration"
    ],
    "experience": "Experience Decorator Design pattern Scivantage 499 Washington Blvd May 2018 to Present New Port May 2018 Present Project Description The objective of Fixed Income project Enchiladas is to build a Debt Processing Engine which can generate OID accrual schedules for both Corporate and Municipal bonds that maymay not be OID eligible and to process Fixed Income transactions determine the purchase condition and apply the appropriate cost basis adjustments In addition the engine will also need functionality to create accrual schedules for Complex Debt instruments such as Contingent Debt Variable Rate Debt Inflation indexed Stepped Rate Paymentinkind NQSI Deferred STRIPS and Fixed Rate Capital securities This project is divided into Day 1 and Day 2 Day 1 requirements include Less Complex Debt securities and calculations Day 2 Requirements include More Complex Debt securities and calculations RESPONSIBILITIES Designed and developed the Enchiladas Fixed Income Engine The core Engine calculates the Base OID Schedule Payment Schedule Accrual schedule depending upon if the Adjustment type is Bond Premium Acquisition Premium or Market Discount Developed the OID YTM Yield to Maturity calculator using Newton Rhapson method Developed the Engine project as a library a Maven project Designed and developed the REST API using JAXRS Jersey Developed a generic ETL Framework by using Java Blocking Queue Executor Services and IO APIs Used Java Generics for developing generic Parser and Mapper classes Designed and developed user friendly User Defined Exception handling Framework Used Java IO APIs Decorator Design pattern for WritingReading tofrom multiple types of file Developed Unit test cases using Junit MockitoPower Mockito Tested REST APIs from POSTMAN Application Extensively used JAXB APIs for parsing XMLText based data files Createdmodified XSD schema for input data type POJO validation Used Class Loader to invoke the right ParserMapper dynamically Implemented Security Layer by using Web Token Authentication Filter etc Used Java 8 features like Streams Lambda Functional Interface Producer Consumer etc Used Hibernate Query Session Transaction Entity Typedef APIs for ORM mapping along with DAO for data access using Hibernate to fetch data from database Configured Hibernate Connection Factory C3P0 Attributes to handle situations like Timeout and Stale Connection etc Designed and developed Batch jobs to generate Transactions and Error reports for Day 0 and Delta Used Executor Framework JAXB ehcache Apache DBCP JDBC Collections and Apache Commons etc Implemented caching mechanism for Instrument details using Ehcache Created Maven Project using POM file to configure the project artifacts dependency management build life cycle excluding configuration files from the generated war files Performed trouble shooting including stack trace analysis and JVM tuning by changing to Heap sizes according to the requirement Managed and monitored the JVM performance by Heap Size Garbage collection taking Thread dumps Implemented the logging mechanism using Log4j framework Changed Rollover policy from TimeBasedRotationpolicy to FixedWindowRotationPolicy in order to have a fixed number of archive files over a rolling log Deployed the war file in a WebLogic portal hosted on AWS EC2 instance Managed deployment maintained lifecycle of the hosted portal instance Created AWS stack using script Handled Load balancer Cloud Formation Security group etc Createdmodified Jenkins CICD pipeline for build automation Implemented Validation frame work for validating Input Data file Developed shell scripts to automate BatchETL jobs Investigated into JIRA tickets and did analysis and provided solution for them Converted a monolithic app to microservices architecture using Spring Boot using 12factor app methodology as a POC Involved in the implementation of a Continuous Delivery pipeline with Docker Jenkins and GitHub and AWS AMIs Environment JDK 18 GlassFish AWS JAXRS Jersey Eclipse Apache IO JAXB Apache Commons maven XML Postgres Git JUnit Jenkins AWS JIRA Hibernate etc JPMC 575 Washington Blvd February 2017 to May 2018 Project Description Metadata is the key driving force for all activities in the Ecosystem All the incoming data has to have technical registration information and lineage defined before it is stored in the data reservoir UDS Unified Data Service strives to maintain information about the endtoend flow of data in the Ecosystem consisting of serviceoriented technical operational security and workload specific information associated with the data and its processes Usually Customer PII data Personally Identifiable Information is registered for a later consumption Ingestion This PII data can be shared across LOBs as well UDS Registration portal allows business user register zones which helps to connect different data sources register data domains and data sets It allows to register unified data processors and data flows as well these components will be used in ingestion application to ingest data into Hadoop environment and further data will be used for data analytics Data ingestion service allows for data to be ingested into one of the three Hadoop zones within the Hadoop data reservoir Data can come in the form of a file table or directory Hadoop Zones are as follows Hadoop Achieve Hadoop Conformed Hadoop Semantic RESPONSIBILITIES Singlehandedly createdmaintained workflow using Core Java Collection Spring Restful Spring MVC to implement CRUD functionality on functionalities at Tenant and DataSet Level Designed application modules using Microservices architecture Used Core Java Collection Framework and DAO Layer to implement this Used Spring Integration Spring Boot and Core Java to build and connect Intra applications components Createdmaintained Inmemory Junit test cases to incorporate End to End testing Also provided Junit test cases using Mockito PowerMockito mocking frameworks for portal project Createdmaintained batch jobs using Spring Batch and Spring Boot for EOD batch processing of Customer data related batch jobs Created and maintained ARM scripts for automatic checkout from bitbucket and consequent build and deployment using Jenkins maven etc Created Database objects like Tables sequence index Views GRANTS and Roles etc Maintained the DB Scripts in Gitbit bucket Usedmodified using Java 8 features like Stream Lambda Expression in the existing code Used EclEmma code coverage tools and was part of code review process Createdmaintained deployment processes of Registration Ingestion in DEVQA environment Executed queries using Hive and developed MapReduce jobs to analyze data Developed Hive queries for the analysts Utilized Apache Hadoop environment by Hortonworks Involved in loading data from LINUX and UNIX file system to HDFS Migrated existing projects from SVN to Git with commit history Created Jenkins built scripts for separate projects and pipelines Created Log4j configuration corresponding to different environment Environment JDK 18 Tomcat Eclipse Mars Spring Batch Spring Boot Spring Integration GitGit extensions Maven WinScp Putty JAXB XML Oracle SVN XSD Mockito PowerMockito JUnit Jenkins Linux JIRA Hibernate Hadoop Cloudera cluster Barclays New York NY October 2015 to January 2017 Project Description Comprehensive Capital Analysis and Review CCAR a regulatory framework was the DoddFrank implementation specified by FED Federal Reserve in order to assess regulate and supervise large Bank Holding Companies Project Octon is Barclays response to DoddFrank S165 CCAR along with the annual DoddFrank Act stress tests DFAST were designed as complementary initiatives to strengthen supervisory assessments of capital adequacy and processes through which large complex BHCs initially assess their capital needs Initially calculation are created as Hadoop jobs invoked by Monikers which represent the SQLs Later on because of the advantage of the in memory processing we have replaced the Hadoop jobs by spark processing RESPONSIBILITIES Implemented E2E End To End process consists of one or multiple Processes which in turn consists of one or more Activities or SubProcesses Designed BPMN models of the E2E process using Eclipse BPMN2 modeler configured ActivityProcess details Developed Spark programs using Scala APIs to compare the performance of Spark vs Hive and SQL Used Spark API over Hortonworks Hadoop YARN to perform analytics on data in Hive Implemented Spark using Scala and Spark SQL for faster testing and processing of data Developed WorkItemHandlers and service implementations corresponding to BPMN Models using jBPM Eclipse plugin and Core Java Developed different types of Activities eg Data publishing Data Validation ETL Report Generation Axiom Fixed Form Reports related MetaData is SFTPed to Axiom Reporting team Developed SFTP framework using JSch Java Secure Channel APIs Tested the code in Kerberos enabled platform Developed File Watcher Script for SFTP application During PPNR calculation an inhouse Model Execution Framework is used to read input monikers validate monikers perform MEF execution capture Output validate output and write to mercury Used Core Java Collections JSON jBPM Hibernate to develop WorkItemHandlers Service Implementations classes Projective RWA Risk Weighted Assets Calculations Transform are of two types Spot and Standardized WorkItem Handlers Service Implementations classes are done by using Core Java Collection JSON jBPM Hibernate etc CCAR and DAST test requires simulated stressed market data BHC bank needs to carry out the Stress Tests for total 5 scenarios 3 Fed given and 2 Internal Each scenario consists of 28 RiskFactors and each of them consists of a number of shocks values SMT Scenario Management Tool is used to generate the simulated Scenario data Used jBPM WorkFlows BPMN Modeler 2 plugins Core Java JSON Hibernate etc Static Runbook has the details of the Top level processes their child processes and the corresponding activities Static Runbook gives a reference of the ideal time to run a complete CCAR Execution from start to end Whereas Dynamic Runbook calculation provides actual time taken by each of the processesactivities Designed the Static and Dynamic Runbook and developed using Core Java Data Structure Collection RestTemplate client etc Used Multiple Predecessor logic to determine the dependency of processes Developed Context Services Moniker Services DrillDown Services etc which provides data used in Calculation and Fixed Form Reporting Developed the services using Spring RestTemplate JDBCTemplate and Core Java Developed different DAO Implementation using Spring JDBC Template in order to prepopulate the Run Details notifications etc at the start of the application Developed a tool to generate Fudged Messages and deliver it to a QueueTopic to during Unit testing of the Workflows Worked on Tomcat DB Connection Pool configuration to achieve optimum number of DB connections using Apache Commons DBCP Extensively used Git Git Extensions as the repository Used Mockito and JUnit for developing Unit Test code Developed and maintained Stored Procedure Named Query to implement WorkFlow Functionalities Used Goals and Profiles in during build to create war for specific environments using Maven Environment Core Java 17 Tomcat Eclipse PluginsBPMN modelers JBoss Drools GitGit extensions maven WinScp Putty JAXB XML Oracle Eclipse Kepler SVN XSD Mocito JUnit Jenkins Teamcity Ant Jsch Windows 7 Linux HP ALM Hibernate Goldman Sachs 30 Hudson Jersey City December 2014 to September 2015 Positions Reporting RegOps teams Large Options Positions Report LOPR is for compliance reporting to OCC The project goal is to migrate the US LOPR function to Regulatory Operations strategic infrastructure and to build an enhanced operational support model RESPONSIBILITIES Worked with Operations to analyze the OCC Reference document to understand the specification and created gap analysis document between the intended system and the existing system Generated Model classes from the Position Schema of OCC system using JAXBAPIs Designed and developed a batch application to download table data from PROD databases to flat filesby identifying business entity using Core Java Spring JDBC Spring Batch Log4j2 Multithreading Executor Service Executors DAO Framework etc Developed some File Watcher application which loads data files to some secured location using SFTP Core Java JSCH Java Secure Channel APIs Designed and developed a reconciliation tool POC which takes metadata information about previous report runs and get the report results It takes the report results as inputs and generates the delta difference This delta difference is going to be the basis of the LOPR report Used Java Collection XML parsing Java IO and Generics APIs to code classes Designed and developed application to parse Snap Shot data from OCC in the FIXML format and parsed it according to the OCC Reference manual and uploaded using JDBC batch insert to the Sybase IQ database Did coding to include issuers coded as SECTION_604 regulation under BHCA monitoring report Changed Global Report to Regulation Global Issuer to Regulation and Global Issuer to Threshold mapping Tested in Dev and UAT environment Coded change in business functionality to map Global Issuer to Regulation mapping and Global Product to Regulation mapping under the same Regulation and comments Did a POC using Spring Batch to download Production data files of size 100 GB by a single threaded application to a data file Developed Mock JUnit Test cases to mock Business functionality testing Did JUnit data validation with static Inmemory data instead of validation against database Environment Core Java 151617 JAXB XML Sybase IQ Sybase ASE DB2 Eclipse Kepler SVN XSD Mocito JUnit Maven Jenkins Teamcity Windows 7 Linux Contract First Web Service Capital One 360 Wilmington DE July 2013 to October 2014 Wilmington Delaware July 2013 Oct 2014 Project Description TranSite SASSy and IVR the three Web Service Clients communicate with Wesp Server side Wesp accesses Profile and Oracle Database to get the customer data Checkmate is used to upload and deposit check images using mobile or ATM banking RESPONSIBILITIES Devised the algorithm Coded to implement it a Contract First Web Service using SpringWS Spring MVC Spring IoC XSD JAXB DAO Framework Exception handling Collection and Core Java Used Tidal Enterprise Client to createmodify scheduled jobs in windows based agent Developed Java Server Side code used to be invoked from Tidal Clients Promoted the jobs developed in Dev Tidal environment to QA and Production environment Coded the Tax Form Generating Module for 2013 Tax year to generate tax forms for 1098 1099R1099S1099A1099C1099DIV1099INT1099MISC using Core Java Collection Framework Java Exception XML XSLT Velocity Template XSD and JAXB Used MavenGitGerrit during development code check out and local build before the code checkin Also used SVN version control system during source code management process for old style version management system Coded Unit Test cases for every Java class using JunitMocito Testing Framework In order to meet or exceed the high code coverage 90 minimum code coverage used tools like JaCoco and EclEmma Used tools like CPD PMD FindBugs to find subtle bugs in the application like duplication of code unused code improper indentation etc Coded in Java Servlets used to play the audio files needed depending upon the workflow executed for IVR application Configured both 3264 bit Tomcat instance for 32 64 bit applications Did performance tuning to the Server configuration for optimization Designed developed Server Side caching mechanism using Core Java ehCache API Collections Spring API RESTful API Tested bug fixed deployed the application Designed developed Coded the KeepAliveConnection implementation using Core Java ExecutorService MultiThreading Collection Exception Generics etc Coded and configured Server Cache implementation using ehCache to enhance the performance Implemented File based cache overflow configuration Coded customized Cache Manager Factory classes to handle configurable Disk Store Location attribute Implemented distributed Logging mechanism by using LOGback logger and appender for each of the separate interfaces and web application Coded using LOGback API and Java to implement per user Logging facility Implemented Time and Size based Roll over policy for logger Coded Logging Context set reset mechanism to facilitate the log files with different contexts Developed solution to change the log levels of independent modules dynamically using UI tool Implemented tool where users can viewdownload log files for debugging purpose for an environment without server access using RESTful API and Spring MVC Developed Resource images Externalization Framework using Spring MVC to keep resources out of the deployed war file using Spring MVC Coded Mock client interface as a backup of the actual implementation when service is down using Spring AOP Developed data access implementation using DAO Framework spring JDBC Template and SQL Named Query Coded web service client implementation using Spring MVC Restful Web Service API Retrofitted SOAP based client code implementation Used AntHillPro during DEVQAUAT built process to maintain automatic build life cycle management Environment Core Java 16 Spring MVC IoC SpringWS log4j Git Gerrit SVNSOAPJMSMQ series XML XSLT XSD AntHillPro Eclipse Mocito JUnit Maven Callable Statement Stored Procedure Velocity Framework Apache tomcat Jenkins Slave CPD PMD JaCoco FindBugs EclEmma Morgan Stanley Smith Barney NYC New York NY November 2012 to June 2013 Nov2012 June2013 Project Description MSSB 3D is an advisor platform developedintegrated as a result of the joint venture of Morgan Stanley MS 360 application and Smith Barney legacy NextGen application The main goal of the project PMR is to provide a set of Portfolio Reports through a separate application within MSSB 3D This application enables Financial Advisors FAs Brach Operations and their clients to obtain the financial and portfolio information they are accustomed to The Portfolio Reports application utilizes new and existing MSSB 3D and MS360 web services interfaces and data sources Senior Developer Wells Fargo Home Mortgage Frederick MD April 2011 to October 2012 Project Description The ASDS Asset Sales Delivery System is a system for packaging loans home mortgages for sale on the secondary market A Trade Desk Analyst requests Loan data be extracted from ASDS into the ASBE Asset Sales Best Execution system The Analysts request results in a query being sent to ASDS and ASDS responds by sending the resulting information to a file on a shared drive for access by the ASBE system or Trade Analyst The ASBE system optimizes a mix of the imported Loans into Pools which in turn helps to Trade the loans easily Developer JPMC NYC New York NY April 2010 to December 2010 Project Description Stock Loan Strategic Investments Pre trading activities has two parts Availability and Overnight Locates In Availability application the number of each security from each of the client is gathered and then the Haircut rules are applied In Overnight Locates application the endclients sends requests for Locates of the securities they trade After receiving the requests the response files are sent which will have the quantities of securities allocates Framework consists of components like Client Gateway adapters Inmemory Cache database Rule engine and JMS component and controller agent System processes feeds from different clients using adapters which supports incoming files via different protocols email ftp etcRule engine provides different rules on messages which gets persist in Database Rackson Asset Management NY August 2009 to April 2010 Description Rackson developed their own low latency etrading system for their algorithmic trading system Their trading system arguably low volume but faster than most of the contemporary Trading system available One aspect of the application was to monitor the Order Updates and accordingly place new order cancel the order resubmit the order etc In essence it was their indigenous Order Management System OMS they were developing Role Financial Solution Hub Princeton NJ December 2008 to August 2009 Description FSH is a complete solution STP which would help financial clients by integrating Front office Middle office and Back office solutions FSH has the following modules Integration Engine Business Rule Engine Reconciliation Engine Enterprise Risk Engine Accounting Engine Basel II Engine and a BPM solution Sungard Financial Parsippany NJ January 2008 to December 2008 Description Getpaid is a treasury solution suite in Accounts Receivable AR and Collections Management area It helps corporations to optimize and manage working capital particularly the credit and collections processes of the AR department It helps streamline the ordertocash process by consolidating customer invoice information automating collection tasks driving discrepancy resolution and generating advanced cash forecasts It provides an enterprisewide view of cash and working capital across accounts receivable accounts payable and treasury Infinity Business Process Automation software is a BPM tool It leverages by easy visual modeling easy integration of JavaJ2EE application with the Business Process Management framework scalability etc Cognizant Technology Solution November 2002 to December 2007 Description While in Cognizant I got chance to work for clients like Merck Metlife Credit Suisse and JPMC A Relationship Manager maintains safekeeping account by creatingexecutionreviewing of orders Handling Real Time Positions Order Entry Settlements Non Trading Orders are some of the major activities Global AD Core was a monitoring project to monitor reconciliation of the accounts portfolio management and trading applications Developed APIs for an Order Management Systems OMS for an ETrading platform Cogentech January 2002 to November 2002 Description The Web Application developed for NJDOL New Jersey Department of Labor was meant for the Judicial system Developed UI and Server side components like Action class Servlet Controller ActionForm etc using Struts JDBC JSP Wrote some utility functions used in this project ADA Software and Services April 1999 to December 2001 Description Worked in projects on Antilock Braking System ABS The software was developed in an 8 bit microcontroller Siemens C505 which with the help of another 16 bit microcontroller of Texas Instrument continuously monitor the wheel speed of the vehicle and calculate the acceleration as well The speed control is required to avoid the locked condition of the car while the speed of the car suddenly changes Education BE in Electronics and Telecommunication Engineering Jadavpur University Kolkata West Bengal Skills BEA BEA WEBLOGIC ECLIPSE EJB J2EE",
    "extracted_keywords": [
        "Decorator",
        "Design",
        "pattern",
        "Decorator",
        "Design",
        "pattern",
        "Decorator",
        "Design",
        "pattern",
        "Washington",
        "Blvd",
        "A",
        "CoreServer",
        "Side",
        "Java",
        "Developer",
        "experience",
        "MultiThreading",
        "Concurrency",
        "Synchronization",
        "Thread",
        "Pool",
        "Collection",
        "Framework",
        "Data",
        "Structure",
        "Design",
        "Patterns",
        "Java",
        "Memory",
        "Model",
        "GC",
        "UnixLinux",
        "Proficient",
        "developing",
        "availability",
        "concurrent",
        "software",
        "Enterprise",
        "Application",
        "phases",
        "SDLC",
        "Requirement",
        "Analysis",
        "DesignArchitecture",
        "DevelopmentIntegration",
        "Build",
        "Management",
        "Enhancements",
        "Testing",
        "Background",
        "eTrading",
        "pretrade",
        "capture",
        "Security",
        "LendingStock",
        "loan",
        "Order",
        "Management",
        "System",
        "Fixed",
        "Income",
        "Low",
        "Latency",
        "Java",
        "Development",
        "GC",
        "TuningElimination",
        "JVM",
        "Stack",
        "Trace",
        "Analysis",
        "Collections",
        "Sorting",
        "Algorithms",
        "knowledge",
        "Hadoop",
        "ecosystem",
        "HDFS",
        "Big",
        "Data",
        "RDBMS",
        "HIVE",
        "HDFS",
        "MapReduce",
        "Big",
        "Data",
        "Hadoop",
        "File",
        "System",
        "HDFS",
        "working",
        "experience",
        "BFS",
        "domains",
        "Fixed",
        "Income",
        "Risk",
        "CCAR",
        "Regulatory",
        "Reporting",
        "banking",
        "Security",
        "Lending",
        "Portfolio",
        "Management",
        "Order",
        "Management",
        "System",
        "Mortgage",
        "enthusiast",
        "learner",
        "developer",
        "highquality",
        "highperformance",
        "applications",
        "Work",
        "Experience",
        "Decorator",
        "Design",
        "pattern",
        "Washington",
        "Blvd",
        "May",
        "Present",
        "New",
        "Port",
        "May",
        "Present",
        "Project",
        "Description",
        "objective",
        "Fixed",
        "Income",
        "project",
        "Enchiladas",
        "Debt",
        "Processing",
        "Engine",
        "schedules",
        "Corporate",
        "bonds",
        "maymay",
        "Income",
        "transactions",
        "purchase",
        "condition",
        "cost",
        "basis",
        "adjustments",
        "addition",
        "engine",
        "functionality",
        "schedules",
        "Complex",
        "Debt",
        "instruments",
        "Contingent",
        "Debt",
        "Variable",
        "Rate",
        "Debt",
        "Inflation",
        "Stepped",
        "Rate",
        "Paymentinkind",
        "NQSI",
        "Deferred",
        "STRIPS",
        "Fixed",
        "Rate",
        "Capital",
        "securities",
        "project",
        "Day",
        "Day",
        "Day",
        "requirements",
        "Complex",
        "Debt",
        "securities",
        "calculations",
        "Day",
        "Requirements",
        "Complex",
        "Debt",
        "securities",
        "calculations",
        "RESPONSIBILITIES",
        "Enchiladas",
        "Fixed",
        "Income",
        "Engine",
        "core",
        "Engine",
        "Base",
        "OID",
        "Schedule",
        "Payment",
        "Schedule",
        "schedule",
        "Adjustment",
        "type",
        "Bond",
        "Premium",
        "Acquisition",
        "Premium",
        "Market",
        "Discount",
        "OID",
        "YTM",
        "Maturity",
        "calculator",
        "Newton",
        "Rhapson",
        "method",
        "Engine",
        "project",
        "library",
        "Maven",
        "project",
        "REST",
        "API",
        "JAXRS",
        "Jersey",
        "ETL",
        "Framework",
        "Java",
        "Blocking",
        "Queue",
        "Executor",
        "Services",
        "IO",
        "APIs",
        "Java",
        "Generics",
        "Parser",
        "Mapper",
        "classes",
        "user",
        "User",
        "Defined",
        "Exception",
        "Framework",
        "Java",
        "IO",
        "APIs",
        "Decorator",
        "Design",
        "pattern",
        "WritingReading",
        "types",
        "file",
        "Developed",
        "Unit",
        "test",
        "cases",
        "Junit",
        "MockitoPower",
        "Mockito",
        "Tested",
        "REST",
        "APIs",
        "POSTMAN",
        "Application",
        "JAXB",
        "APIs",
        "XMLText",
        "data",
        "Createdmodified",
        "XSD",
        "schema",
        "input",
        "data",
        "type",
        "POJO",
        "validation",
        "Class",
        "Loader",
        "ParserMapper",
        "Security",
        "Layer",
        "Web",
        "Token",
        "Authentication",
        "Filter",
        "Java",
        "features",
        "Streams",
        "Lambda",
        "Functional",
        "Interface",
        "Producer",
        "Consumer",
        "Hibernate",
        "Query",
        "Session",
        "Transaction",
        "Entity",
        "Typedef",
        "APIs",
        "ORM",
        "mapping",
        "DAO",
        "data",
        "access",
        "Hibernate",
        "data",
        "database",
        "Configured",
        "Hibernate",
        "Connection",
        "Factory",
        "C3P0",
        "Attributes",
        "situations",
        "Timeout",
        "Stale",
        "Connection",
        "Batch",
        "jobs",
        "Transactions",
        "Error",
        "Day",
        "Delta",
        "Executor",
        "Framework",
        "JAXB",
        "ehcache",
        "Apache",
        "DBCP",
        "JDBC",
        "Collections",
        "Apache",
        "Commons",
        "mechanism",
        "Instrument",
        "details",
        "Ehcache",
        "Created",
        "Maven",
        "Project",
        "POM",
        "file",
        "project",
        "dependency",
        "management",
        "build",
        "life",
        "cycle",
        "configuration",
        "files",
        "war",
        "Performed",
        "trouble",
        "stack",
        "trace",
        "analysis",
        "JVM",
        "Heap",
        "sizes",
        "requirement",
        "Managed",
        "JVM",
        "performance",
        "Heap",
        "Size",
        "Garbage",
        "collection",
        "Thread",
        "dumps",
        "logging",
        "mechanism",
        "Log4j",
        "framework",
        "Changed",
        "Rollover",
        "policy",
        "TimeBasedRotationpolicy",
        "FixedWindowRotationPolicy",
        "order",
        "number",
        "files",
        "log",
        "war",
        "file",
        "WebLogic",
        "portal",
        "AWS",
        "EC2",
        "instance",
        "deployment",
        "lifecycle",
        "instance",
        "AWS",
        "stack",
        "script",
        "Load",
        "balancer",
        "Cloud",
        "Formation",
        "Security",
        "group",
        "Createdmodified",
        "Jenkins",
        "CICD",
        "pipeline",
        "build",
        "automation",
        "Validation",
        "frame",
        "work",
        "Input",
        "Data",
        "file",
        "shell",
        "scripts",
        "BatchETL",
        "jobs",
        "JIRA",
        "tickets",
        "analysis",
        "solution",
        "app",
        "microservices",
        "architecture",
        "Spring",
        "Boot",
        "app",
        "methodology",
        "POC",
        "implementation",
        "Continuous",
        "Delivery",
        "pipeline",
        "Docker",
        "Jenkins",
        "GitHub",
        "AWS",
        "AMIs",
        "Environment",
        "JDK",
        "AWS",
        "JAXRS",
        "Jersey",
        "Eclipse",
        "Apache",
        "IO",
        "JAXB",
        "Apache",
        "Commons",
        "XML",
        "Postgres",
        "Git",
        "JUnit",
        "Jenkins",
        "AWS",
        "JIRA",
        "Hibernate",
        "JPMC",
        "Washington",
        "Blvd",
        "February",
        "May",
        "Project",
        "Description",
        "Metadata",
        "force",
        "activities",
        "Ecosystem",
        "data",
        "registration",
        "information",
        "lineage",
        "data",
        "reservoir",
        "UDS",
        "Unified",
        "Data",
        "Service",
        "information",
        "endtoend",
        "flow",
        "data",
        "Ecosystem",
        "security",
        "workload",
        "information",
        "data",
        "processes",
        "Customer",
        "PII",
        "Identifiable",
        "Information",
        "consumption",
        "Ingestion",
        "PII",
        "data",
        "LOBs",
        "UDS",
        "Registration",
        "portal",
        "business",
        "user",
        "register",
        "zones",
        "data",
        "sources",
        "data",
        "domains",
        "data",
        "sets",
        "data",
        "processors",
        "data",
        "components",
        "ingestion",
        "application",
        "data",
        "Hadoop",
        "environment",
        "data",
        "data",
        "analytics",
        "Data",
        "ingestion",
        "service",
        "data",
        "Hadoop",
        "zones",
        "Hadoop",
        "data",
        "reservoir",
        "Data",
        "form",
        "file",
        "table",
        "directory",
        "Hadoop",
        "Zones",
        "Hadoop",
        "Achieve",
        "Hadoop",
        "Conformed",
        "Hadoop",
        "Semantic",
        "RESPONSIBILITIES",
        "workflow",
        "Core",
        "Java",
        "Collection",
        "Spring",
        "Restful",
        "Spring",
        "MVC",
        "CRUD",
        "functionality",
        "functionalities",
        "Tenant",
        "DataSet",
        "Level",
        "application",
        "modules",
        "Microservices",
        "architecture",
        "Core",
        "Java",
        "Collection",
        "Framework",
        "DAO",
        "Layer",
        "Spring",
        "Integration",
        "Spring",
        "Boot",
        "Core",
        "Java",
        "Intra",
        "applications",
        "components",
        "Createdmaintained",
        "Inmemory",
        "Junit",
        "test",
        "cases",
        "End",
        "End",
        "testing",
        "Junit",
        "test",
        "cases",
        "Mockito",
        "PowerMockito",
        "frameworks",
        "project",
        "batch",
        "jobs",
        "Spring",
        "Batch",
        "Spring",
        "Boot",
        "EOD",
        "batch",
        "processing",
        "Customer",
        "data",
        "batch",
        "jobs",
        "ARM",
        "scripts",
        "checkout",
        "bitbucket",
        "build",
        "deployment",
        "Jenkins",
        "maven",
        "Created",
        "Database",
        "Tables",
        "sequence",
        "index",
        "GRANTS",
        "Roles",
        "DB",
        "Scripts",
        "Gitbit",
        "bucket",
        "Usedmodified",
        "Java",
        "features",
        "Stream",
        "Lambda",
        "Expression",
        "code",
        "EclEmma",
        "code",
        "coverage",
        "tools",
        "part",
        "code",
        "review",
        "process",
        "deployment",
        "processes",
        "Registration",
        "Ingestion",
        "DEVQA",
        "environment",
        "queries",
        "Hive",
        "MapReduce",
        "jobs",
        "data",
        "Developed",
        "Hive",
        "analysts",
        "Apache",
        "Hadoop",
        "environment",
        "Hortonworks",
        "loading",
        "data",
        "LINUX",
        "UNIX",
        "file",
        "system",
        "projects",
        "SVN",
        "Git",
        "history",
        "Jenkins",
        "scripts",
        "projects",
        "pipelines",
        "Log4j",
        "configuration",
        "environment",
        "Environment",
        "JDK",
        "Tomcat",
        "Eclipse",
        "Mars",
        "Spring",
        "Batch",
        "Spring",
        "Boot",
        "Spring",
        "Integration",
        "GitGit",
        "extensions",
        "Maven",
        "WinScp",
        "Putty",
        "JAXB",
        "XML",
        "Oracle",
        "SVN",
        "XSD",
        "Mockito",
        "PowerMockito",
        "JUnit",
        "Jenkins",
        "Linux",
        "JIRA",
        "Hibernate",
        "Hadoop",
        "Cloudera",
        "cluster",
        "Barclays",
        "New",
        "York",
        "NY",
        "October",
        "January",
        "Project",
        "Description",
        "Comprehensive",
        "Capital",
        "Analysis",
        "Review",
        "CCAR",
        "framework",
        "DoddFrank",
        "implementation",
        "FED",
        "Federal",
        "Reserve",
        "order",
        "regulate",
        "Bank",
        "Holding",
        "Companies",
        "Project",
        "Octon",
        "Barclays",
        "response",
        "DoddFrank",
        "S165",
        "CCAR",
        "DoddFrank",
        "Act",
        "stress",
        "tests",
        "DFAST",
        "initiatives",
        "assessments",
        "capital",
        "adequacy",
        "processes",
        "BHCs",
        "capital",
        "calculation",
        "Hadoop",
        "jobs",
        "Monikers",
        "SQLs",
        "advantage",
        "memory",
        "processing",
        "Hadoop",
        "jobs",
        "spark",
        "processing",
        "RESPONSIBILITIES",
        "E2E",
        "End",
        "End",
        "process",
        "Processes",
        "turn",
        "Activities",
        "SubProcesses",
        "BPMN",
        "models",
        "E2E",
        "process",
        "Eclipse",
        "BPMN2",
        "modeler",
        "ActivityProcess",
        "details",
        "Spark",
        "programs",
        "Scala",
        "APIs",
        "performance",
        "Spark",
        "Hive",
        "SQL",
        "Spark",
        "API",
        "Hortonworks",
        "Hadoop",
        "YARN",
        "analytics",
        "data",
        "Hive",
        "Spark",
        "Scala",
        "Spark",
        "SQL",
        "testing",
        "processing",
        "data",
        "WorkItemHandlers",
        "service",
        "implementations",
        "BPMN",
        "Models",
        "jBPM",
        "Eclipse",
        "plugin",
        "Core",
        "Java",
        "types",
        "Activities",
        "eg",
        "Data",
        "Data",
        "Validation",
        "ETL",
        "Report",
        "Generation",
        "Axiom",
        "Fixed",
        "Form",
        "Reports",
        "MetaData",
        "SFTPed",
        "Axiom",
        "Reporting",
        "team",
        "framework",
        "JSch",
        "Java",
        "Secure",
        "Channel",
        "APIs",
        "code",
        "Kerberos",
        "platform",
        "File",
        "Watcher",
        "Script",
        "application",
        "PPNR",
        "calculation",
        "inhouse",
        "Model",
        "Execution",
        "Framework",
        "input",
        "monikers",
        "monikers",
        "MEF",
        "execution",
        "Output",
        "validate",
        "output",
        "mercury",
        "Used",
        "Core",
        "Java",
        "Collections",
        "JSON",
        "jBPM",
        "Hibernate",
        "WorkItemHandlers",
        "Service",
        "Implementations",
        "classes",
        "RWA",
        "Risk",
        "Weighted",
        "Assets",
        "Calculations",
        "Transform",
        "types",
        "Spot",
        "Standardized",
        "WorkItem",
        "Handlers",
        "Service",
        "Implementations",
        "classes",
        "Core",
        "Java",
        "Collection",
        "JSON",
        "jBPM",
        "Hibernate",
        "CCAR",
        "DAST",
        "test",
        "market",
        "data",
        "BHC",
        "bank",
        "Stress",
        "Tests",
        "scenarios",
        "Fed",
        "scenario",
        "RiskFactors",
        "number",
        "shocks",
        "SMT",
        "Scenario",
        "Management",
        "Tool",
        "Scenario",
        "data",
        "jBPM",
        "WorkFlows",
        "BPMN",
        "Modeler",
        "Core",
        "Java",
        "JSON",
        "Hibernate",
        "Static",
        "Runbook",
        "details",
        "level",
        "child",
        "processes",
        "activities",
        "Static",
        "Runbook",
        "reference",
        "time",
        "CCAR",
        "Execution",
        "start",
        "end",
        "Runbook",
        "calculation",
        "time",
        "processesactivities",
        "Static",
        "Dynamic",
        "Runbook",
        "Core",
        "Java",
        "Data",
        "Structure",
        "Collection",
        "RestTemplate",
        "client",
        "Multiple",
        "Predecessor",
        "logic",
        "dependency",
        "processes",
        "Developed",
        "Context",
        "Services",
        "Moniker",
        "Services",
        "DrillDown",
        "Services",
        "data",
        "Calculation",
        "Fixed",
        "Form",
        "services",
        "Spring",
        "RestTemplate",
        "JDBCTemplate",
        "Core",
        "Java",
        "DAO",
        "Implementation",
        "Spring",
        "JDBC",
        "Template",
        "order",
        "Run",
        "Details",
        "notifications",
        "start",
        "application",
        "tool",
        "Fudged",
        "Messages",
        "QueueTopic",
        "Unit",
        "testing",
        "Workflows",
        "Tomcat",
        "DB",
        "Connection",
        "Pool",
        "configuration",
        "number",
        "DB",
        "connections",
        "Apache",
        "Commons",
        "DBCP",
        "Git",
        "Git",
        "Extensions",
        "repository",
        "Mockito",
        "JUnit",
        "Unit",
        "Test",
        "code",
        "Procedure",
        "Query",
        "WorkFlow",
        "Functionalities",
        "Goals",
        "Profiles",
        "build",
        "war",
        "environments",
        "Maven",
        "Environment",
        "Core",
        "Java",
        "Tomcat",
        "Eclipse",
        "modelers",
        "JBoss",
        "Drools",
        "GitGit",
        "extensions",
        "WinScp",
        "Putty",
        "JAXB",
        "XML",
        "Oracle",
        "Eclipse",
        "Kepler",
        "SVN",
        "XSD",
        "Mocito",
        "JUnit",
        "Jenkins",
        "Teamcity",
        "Ant",
        "Jsch",
        "Windows",
        "Linux",
        "HP",
        "ALM",
        "Hibernate",
        "Goldman",
        "Sachs",
        "Hudson",
        "Jersey",
        "City",
        "December",
        "September",
        "Positions",
        "RegOps",
        "teams",
        "Large",
        "Options",
        "Positions",
        "Report",
        "LOPR",
        "compliance",
        "OCC",
        "project",
        "goal",
        "US",
        "LOPR",
        "function",
        "Regulatory",
        "Operations",
        "infrastructure",
        "support",
        "model",
        "RESPONSIBILITIES",
        "Operations",
        "OCC",
        "Reference",
        "document",
        "specification",
        "gap",
        "analysis",
        "document",
        "system",
        "system",
        "Model",
        "classes",
        "Position",
        "Schema",
        "OCC",
        "system",
        "JAXBAPIs",
        "batch",
        "application",
        "table",
        "data",
        "databases",
        "filesby",
        "business",
        "entity",
        "Core",
        "Java",
        "Spring",
        "JDBC",
        "Spring",
        "Batch",
        "Log4j2",
        "Multithreading",
        "Executor",
        "Service",
        "Executors",
        "DAO",
        "Framework",
        "File",
        "Watcher",
        "application",
        "data",
        "files",
        "location",
        "SFTP",
        "Core",
        "Java",
        "JSCH",
        "Java",
        "Secure",
        "Channel",
        "APIs",
        "reconciliation",
        "tool",
        "POC",
        "information",
        "report",
        "report",
        "results",
        "report",
        "results",
        "inputs",
        "delta",
        "difference",
        "delta",
        "difference",
        "basis",
        "LOPR",
        "report",
        "Java",
        "Collection",
        "XML",
        "Java",
        "IO",
        "Generics",
        "APIs",
        "classes",
        "application",
        "Snap",
        "Shot",
        "data",
        "OCC",
        "format",
        "OCC",
        "Reference",
        "manual",
        "JDBC",
        "batch",
        "Sybase",
        "IQ",
        "database",
        "issuers",
        "SECTION_604",
        "regulation",
        "BHCA",
        "monitoring",
        "report",
        "Global",
        "Report",
        "Regulation",
        "Global",
        "Issuer",
        "Regulation",
        "Global",
        "Issuer",
        "Threshold",
        "mapping",
        "Dev",
        "environment",
        "change",
        "business",
        "functionality",
        "Global",
        "Issuer",
        "Regulation",
        "mapping",
        "Global",
        "Product",
        "Regulation",
        "mapping",
        "Regulation",
        "comments",
        "POC",
        "Spring",
        "Batch",
        "Production",
        "data",
        "files",
        "size",
        "GB",
        "application",
        "data",
        "file",
        "Developed",
        "Mock",
        "JUnit",
        "Test",
        "cases",
        "Business",
        "functionality",
        "testing",
        "JUnit",
        "data",
        "validation",
        "Inmemory",
        "data",
        "validation",
        "database",
        "Environment",
        "Core",
        "Java",
        "JAXB",
        "XML",
        "Sybase",
        "IQ",
        "Sybase",
        "ASE",
        "DB2",
        "Eclipse",
        "Kepler",
        "SVN",
        "XSD",
        "Mocito",
        "JUnit",
        "Maven",
        "Jenkins",
        "Teamcity",
        "Windows",
        "Linux",
        "Contract",
        "First",
        "Web",
        "Service",
        "Capital",
        "One",
        "Wilmington",
        "DE",
        "July",
        "October",
        "Wilmington",
        "Delaware",
        "July",
        "Oct",
        "Project",
        "Description",
        "TranSite",
        "SASSy",
        "IVR",
        "Web",
        "Service",
        "Clients",
        "Wesp",
        "Server",
        "side",
        "Wesp",
        "Profile",
        "Oracle",
        "Database",
        "customer",
        "data",
        "Checkmate",
        "deposit",
        "check",
        "images",
        "mobile",
        "ATM",
        "banking",
        "RESPONSIBILITIES",
        "algorithm",
        "Contract",
        "First",
        "Web",
        "Service",
        "Spring",
        "MVC",
        "Spring",
        "IoC",
        "XSD",
        "JAXB",
        "DAO",
        "Framework",
        "Exception",
        "Collection",
        "Core",
        "Java",
        "Enterprise",
        "Client",
        "jobs",
        "windows",
        "agent",
        "Developed",
        "Java",
        "Server",
        "Side",
        "code",
        "Clients",
        "jobs",
        "Dev",
        "Tidal",
        "environment",
        "Production",
        "environment",
        "Tax",
        "Form",
        "Generating",
        "Module",
        "Tax",
        "year",
        "tax",
        "forms",
        "Core",
        "Java",
        "Collection",
        "Framework",
        "Java",
        "Exception",
        "XML",
        "XSLT",
        "Velocity",
        "Template",
        "XSD",
        "JAXB",
        "MavenGitGerrit",
        "development",
        "code",
        "build",
        "code",
        "checkin",
        "SVN",
        "version",
        "control",
        "system",
        "source",
        "code",
        "management",
        "process",
        "style",
        "version",
        "management",
        "system",
        "Unit",
        "Test",
        "cases",
        "Java",
        "class",
        "JunitMocito",
        "Testing",
        "Framework",
        "order",
        "code",
        "coverage",
        "minimum",
        "code",
        "coverage",
        "tools",
        "JaCoco",
        "EclEmma",
        "tools",
        "CPD",
        "PMD",
        "FindBugs",
        "bugs",
        "application",
        "duplication",
        "code",
        "code",
        "indentation",
        "Java",
        "Servlets",
        "files",
        "workflow",
        "IVR",
        "application",
        "bit",
        "Tomcat",
        "instance",
        "bit",
        "applications",
        "performance",
        "Server",
        "configuration",
        "optimization",
        "Server",
        "Side",
        "mechanism",
        "Core",
        "Java",
        "ehCache",
        "API",
        "Collections",
        "Spring",
        "API",
        "API",
        "Tested",
        "bug",
        "application",
        "Coded",
        "KeepAliveConnection",
        "implementation",
        "Core",
        "Java",
        "ExecutorService",
        "MultiThreading",
        "Collection",
        "Exception",
        "Generics",
        "Server",
        "Cache",
        "implementation",
        "ehCache",
        "performance",
        "File",
        "cache",
        "overflow",
        "configuration",
        "Cache",
        "Manager",
        "Factory",
        "classes",
        "Disk",
        "Store",
        "Location",
        "attribute",
        "Logging",
        "mechanism",
        "LOGback",
        "logger",
        "interfaces",
        "web",
        "application",
        "LOGback",
        "API",
        "Java",
        "user",
        "Logging",
        "facility",
        "Time",
        "Size",
        "Roll",
        "policy",
        "Coded",
        "Logging",
        "Context",
        "reset",
        "mechanism",
        "log",
        "files",
        "contexts",
        "solution",
        "log",
        "levels",
        "modules",
        "UI",
        "tool",
        "tool",
        "users",
        "files",
        "purpose",
        "environment",
        "server",
        "access",
        "API",
        "Spring",
        "MVC",
        "Developed",
        "Resource",
        "Externalization",
        "Framework",
        "Spring",
        "MVC",
        "resources",
        "war",
        "file",
        "Spring",
        "MVC",
        "Coded",
        "Mock",
        "client",
        "interface",
        "backup",
        "implementation",
        "service",
        "Spring",
        "AOP",
        "data",
        "access",
        "implementation",
        "DAO",
        "Framework",
        "spring",
        "JDBC",
        "Template",
        "SQL",
        "Query",
        "web",
        "service",
        "client",
        "implementation",
        "Spring",
        "MVC",
        "Restful",
        "Web",
        "Service",
        "API",
        "Retrofitted",
        "SOAP",
        "client",
        "code",
        "implementation",
        "AntHillPro",
        "process",
        "build",
        "life",
        "cycle",
        "management",
        "Environment",
        "Core",
        "Java",
        "Spring",
        "MVC",
        "IoC",
        "log4j",
        "Git",
        "Gerrit",
        "SVNSOAPJMSMQ",
        "series",
        "XML",
        "XSLT",
        "XSD",
        "AntHillPro",
        "Eclipse",
        "Mocito",
        "JUnit",
        "Maven",
        "Callable",
        "Statement",
        "Stored",
        "Procedure",
        "Velocity",
        "Framework",
        "Apache",
        "tomcat",
        "Jenkins",
        "Slave",
        "CPD",
        "PMD",
        "JaCoco",
        "FindBugs",
        "EclEmma",
        "Morgan",
        "Stanley",
        "Smith",
        "Barney",
        "NYC",
        "New",
        "York",
        "NY",
        "November",
        "June",
        "Nov2012",
        "June2013",
        "Project",
        "Description",
        "MSSB",
        "3D",
        "advisor",
        "platform",
        "result",
        "venture",
        "Morgan",
        "Stanley",
        "MS",
        "application",
        "Smith",
        "Barney",
        "legacy",
        "NextGen",
        "application",
        "goal",
        "project",
        "PMR",
        "set",
        "Portfolio",
        "Reports",
        "application",
        "MSSB",
        "3D",
        "application",
        "Financial",
        "Advisors",
        "FAs",
        "Brach",
        "Operations",
        "clients",
        "portfolio",
        "information",
        "Portfolio",
        "Reports",
        "application",
        "MSSB",
        "3D",
        "MS360",
        "web",
        "services",
        "interfaces",
        "data",
        "sources",
        "Senior",
        "Developer",
        "Wells",
        "Fargo",
        "Home",
        "Mortgage",
        "Frederick",
        "MD",
        "April",
        "October",
        "Project",
        "Description",
        "ASDS",
        "Asset",
        "Sales",
        "Delivery",
        "System",
        "system",
        "packaging",
        "loans",
        "home",
        "mortgages",
        "sale",
        "market",
        "A",
        "Trade",
        "Desk",
        "Analyst",
        "Loan",
        "data",
        "ASDS",
        "ASBE",
        "Asset",
        "Sales",
        "Best",
        "Execution",
        "system",
        "Analysts",
        "results",
        "query",
        "ASDS",
        "ASDS",
        "information",
        "file",
        "drive",
        "access",
        "ASBE",
        "system",
        "Trade",
        "Analyst",
        "ASBE",
        "system",
        "mix",
        "Loans",
        "Pools",
        "turn",
        "loans",
        "Developer",
        "JPMC",
        "NYC",
        "New",
        "York",
        "NY",
        "April",
        "December",
        "Project",
        "Description",
        "Stock",
        "Loan",
        "Strategic",
        "Investments",
        "Pre",
        "trading",
        "activities",
        "parts",
        "Availability",
        "Overnight",
        "Availability",
        "application",
        "number",
        "security",
        "client",
        "Haircut",
        "rules",
        "Overnight",
        "Locates",
        "application",
        "endclients",
        "requests",
        "Locates",
        "securities",
        "requests",
        "response",
        "files",
        "quantities",
        "securities",
        "Framework",
        "components",
        "Client",
        "Gateway",
        "adapters",
        "Inmemory",
        "Cache",
        "database",
        "Rule",
        "engine",
        "JMS",
        "component",
        "controller",
        "agent",
        "System",
        "processes",
        "clients",
        "adapters",
        "files",
        "protocols",
        "email",
        "etcRule",
        "engine",
        "rules",
        "messages",
        "Database",
        "Rackson",
        "Asset",
        "Management",
        "NY",
        "August",
        "April",
        "Description",
        "Rackson",
        "latency",
        "system",
        "trading",
        "system",
        "trading",
        "system",
        "volume",
        "Trading",
        "system",
        "aspect",
        "application",
        "Order",
        "Updates",
        "order",
        "order",
        "order",
        "essence",
        "Order",
        "Management",
        "System",
        "OMS",
        "Role",
        "Financial",
        "Solution",
        "Hub",
        "Princeton",
        "NJ",
        "December",
        "August",
        "Description",
        "FSH",
        "solution",
        "STP",
        "clients",
        "office",
        "office",
        "office",
        "solutions",
        "FSH",
        "modules",
        "Integration",
        "Engine",
        "Business",
        "Rule",
        "Engine",
        "Reconciliation",
        "Engine",
        "Enterprise",
        "Risk",
        "Engine",
        "Accounting",
        "Engine",
        "Basel",
        "II",
        "Engine",
        "BPM",
        "solution",
        "Sungard",
        "Financial",
        "Parsippany",
        "NJ",
        "January",
        "December",
        "Description",
        "Getpaid",
        "treasury",
        "solution",
        "suite",
        "Accounts",
        "Receivable",
        "AR",
        "Collections",
        "Management",
        "area",
        "corporations",
        "capital",
        "credit",
        "collections",
        "processes",
        "AR",
        "department",
        "ordertocash",
        "process",
        "customer",
        "information",
        "collection",
        "tasks",
        "discrepancy",
        "resolution",
        "cash",
        "forecasts",
        "enterprisewide",
        "view",
        "cash",
        "capital",
        "accounts",
        "accounts",
        "treasury",
        "Infinity",
        "Business",
        "Process",
        "Automation",
        "software",
        "BPM",
        "tool",
        "modeling",
        "integration",
        "JavaJ2EE",
        "application",
        "Business",
        "Process",
        "Management",
        "framework",
        "scalability",
        "Cognizant",
        "Technology",
        "Solution",
        "November",
        "December",
        "Description",
        "Cognizant",
        "chance",
        "clients",
        "Merck",
        "Metlife",
        "Credit",
        "Suisse",
        "JPMC",
        "Relationship",
        "Manager",
        "account",
        "orders",
        "Real",
        "Time",
        "Positions",
        "Order",
        "Entry",
        "Settlements",
        "Non",
        "Trading",
        "Orders",
        "activities",
        "Global",
        "AD",
        "Core",
        "monitoring",
        "project",
        "reconciliation",
        "accounts",
        "portfolio",
        "management",
        "trading",
        "applications",
        "APIs",
        "Order",
        "Management",
        "Systems",
        "OMS",
        "ETrading",
        "platform",
        "Cogentech",
        "January",
        "November",
        "Description",
        "Web",
        "Application",
        "NJDOL",
        "New",
        "Jersey",
        "Department",
        "Labor",
        "system",
        "UI",
        "Server",
        "side",
        "components",
        "Action",
        "class",
        "Servlet",
        "Controller",
        "ActionForm",
        "etc",
        "Struts",
        "JDBC",
        "JSP",
        "utility",
        "functions",
        "project",
        "ADA",
        "Software",
        "Services",
        "April",
        "December",
        "Description",
        "projects",
        "Antilock",
        "Braking",
        "System",
        "ABS",
        "software",
        "bit",
        "microcontroller",
        "Siemens",
        "C505",
        "help",
        "bit",
        "microcontroller",
        "Texas",
        "Instrument",
        "wheel",
        "speed",
        "vehicle",
        "acceleration",
        "speed",
        "control",
        "condition",
        "car",
        "speed",
        "car",
        "Education",
        "Electronics",
        "Telecommunication",
        "Engineering",
        "Jadavpur",
        "University",
        "Kolkata",
        "West",
        "Bengal",
        "Skills",
        "BEA",
        "BEA",
        "WEBLOGIC",
        "ECLIPSE",
        "EJB",
        "J2EE"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T20:27:42.948930",
    "resume_data": "Decorator Design pattern Decorator Design pattern Decorator Design pattern Scivantage 499 Washington Blvd A seasoned CoreServer Side Java Developer with extensive experience in MultiThreading Concurrency Synchronization Thread Pool Collection Framework Data Structure Design Patterns Java Memory Model GC tuning UnixLinux etc Proficient in designing developing of high throughput high availability concurrent and fault tolerant software systemsnTier Distributed Enterprise Application in different phases of SDLC including Requirement gathering Analysis DesignArchitecture DevelopmentIntegration Build Management Enhancements Testing etc Background in eTrading pretrade capture Security LendingStock loan Order Management System Fixed Income Experienced in Low Latency Java Development GC TuningElimination JVM tuning Stack Trace Analysis Collections Sorting Algorithms etc Have knowledge of Hadoop ecosystem HDFS Big Data RDBMS HIVE HDFS MapReduce Experienced on working with Big Data and Hadoop File System HDFS Have extensive working experience in multiple BFS domains like Fixed Income Risk CCAR Regulatory Reporting Retail banking Security Lending Portfolio Management Order Management System Mortgage etc A selfmotivated enthusiast quick learner detailoriented developer experienced in delivering highquality scalable predictable and highperformance applications Work Experience Decorator Design pattern Scivantage 499 Washington Blvd May 2018 to Present New Port May 2018 Present Project Description The objective of Fixed Income project Enchiladas is to build a Debt Processing Engine which can generate OID accrual schedules for both Corporate and Municipal bonds that maymay not be OID eligible and to process Fixed Income transactions determine the purchase condition and apply the appropriate cost basis adjustments In addition the engine will also need functionality to create accrual schedules for Complex Debt instruments such as Contingent Debt Variable Rate Debt Inflation indexed Stepped Rate Paymentinkind NQSI Deferred STRIPS and Fixed Rate Capital securities This project is divided into Day 1 and Day 2 Day 1 requirements include Less Complex Debt securities and calculations Day 2 Requirements include More Complex Debt securities and calculations RESPONSIBILITIES Designed and developed the Enchiladas Fixed Income Engine The core Engine calculates the Base OID Schedule Payment Schedule Accrual schedule depending upon if the Adjustment type is Bond Premium Acquisition Premium or Market Discount Developed the OID YTM Yield to Maturity calculator using Newton Rhapson method Developed the Engine project as a library a Maven project Designed and developed the REST API using JAXRS Jersey Developed a generic ETL Framework by using Java Blocking Queue Executor Services and IO APIs Used Java Generics for developing generic Parser and Mapper classes Designed and developed user friendly User Defined Exception handling Framework Used Java IO APIs Decorator Design pattern for WritingReading tofrom multiple types of file Developed Unit test cases using Junit MockitoPower Mockito Tested REST APIs from POSTMAN Application Extensively used JAXB APIs for parsing XMLText based data files Createdmodified XSD schema for input data type POJO validation Used Class Loader to invoke the right ParserMapper dynamically Implemented Security Layer by using Web Token Authentication Filter etc Used Java 8 features like Streams Lambda Functional Interface Producer Consumer etc Used Hibernate Query Session Transaction Entity Typedef APIs for ORM mapping along with DAO for data access using Hibernate to fetch data from database Configured Hibernate Connection Factory C3P0 Attributes to handle situations like Timeout and Stale Connection etc Designed and developed Batch jobs to generate Transactions and Error reports for Day 0 and Delta Used Executor Framework JAXB ehcache Apache DBCP JDBC Collections and Apache Commons etc Implemented caching mechanism for Instrument details using Ehcache Created Maven Project using POM file to configure the project artifacts dependency management build life cycle excluding configuration files from the generated war files Performed trouble shooting including stack trace analysis and JVM tuning by changing to Heap sizes according to the requirement Managed and monitored the JVM performance by Heap Size Garbage collection taking Thread dumps Implemented the logging mechanism using Log4j framework Changed Rollover policy from TimeBasedRotationpolicy to FixedWindowRotationPolicy in order to have a fixed number of archive files over a rolling log Deployed the war file in a WebLogic portal hosted on AWS EC2 instance Managed deployment maintained lifecycle of the hosted portal instance Created AWS stack using script Handled Load balancer Cloud Formation Security group etc Createdmodified Jenkins CICD pipeline for build automation Implemented Validation frame work for validating Input Data file Developed shell scripts to automate BatchETL jobs Investigated into JIRA tickets and did analysis and provided solution for them Converted a monolithic app to microservices architecture using Spring Boot using 12factor app methodology as a POC Involved in the implementation of a Continuous Delivery pipeline with Docker Jenkins and GitHub and AWS AMIs Environment JDK 18 GlassFish AWS JAXRS Jersey Eclipse Apache IO JAXB Apache Commons maven XML Postgres Git JUnit Jenkins AWS JIRA Hibernate etc JPMC 575 Washington Blvd February 2017 to May 2018 Project Description Metadata is the key driving force for all activities in the Ecosystem All the incoming data has to have technical registration information and lineage defined before it is stored in the data reservoir UDS Unified Data Service strives to maintain information about the endtoend flow of data in the Ecosystem consisting of serviceoriented technical operational security and workload specific information associated with the data and its processes Usually Customer PII data Personally Identifiable Information is registered for a later consumption Ingestion This PII data can be shared across LOBs as well UDS Registration portal allows business user register zones which helps to connect different data sources register data domains and data sets It allows to register unified data processors and data flows as well these components will be used in ingestion application to ingest data into Hadoop environment and further data will be used for data analytics Data ingestion service allows for data to be ingested into one of the three Hadoop zones within the Hadoop data reservoir Data can come in the form of a file table or directory Hadoop Zones are as follows Hadoop Achieve Hadoop Conformed Hadoop Semantic RESPONSIBILITIES Singlehandedly createdmaintained workflow using Core Java Collection Spring Restful Spring MVC to implement CRUD functionality on functionalities at Tenant and DataSet Level Designed application modules using Microservices architecture Used Core Java Collection Framework and DAO Layer to implement this Used Spring Integration Spring Boot and Core Java to build and connect Intra applications components Createdmaintained Inmemory Junit test cases to incorporate End to End testing Also provided Junit test cases using Mockito PowerMockito mocking frameworks for portal project Createdmaintained batch jobs using Spring Batch and Spring Boot for EOD batch processing of Customer data related batch jobs Created and maintained ARM scripts for automatic checkout from bitbucket and consequent build and deployment using Jenkins maven etc Created Database objects like Tables sequence index Views GRANTS and Roles etc Maintained the DB Scripts in Gitbit bucket Usedmodified using Java 8 features like Stream Lambda Expression in the existing code Used EclEmma code coverage tools and was part of code review process Createdmaintained deployment processes of Registration Ingestion in DEVQA environment Executed queries using Hive and developed MapReduce jobs to analyze data Developed Hive queries for the analysts Utilized Apache Hadoop environment by Hortonworks Involved in loading data from LINUX and UNIX file system to HDFS Migrated existing projects from SVN to Git with commit history Created Jenkins built scripts for separate projects and pipelines Created Log4j configuration corresponding to different environment Environment JDK 18 Tomcat Eclipse Mars Spring Batch Spring Boot Spring Integration GitGit extensions Maven WinScp Putty JAXB XML Oracle SVN XSD Mockito PowerMockito JUnit Jenkins Linux JIRA Hibernate Hadoop Cloudera cluster Barclays New York NY October 2015 to January 2017 Project Description Comprehensive Capital Analysis and Review CCAR a regulatory framework was the DoddFrank implementation specified by FED Federal Reserve in order to assess regulate and supervise large Bank Holding Companies Project Octon is Barclays response to DoddFrank S165 CCAR along with the annual DoddFrank Act stress tests DFAST were designed as complementary initiatives to strengthen supervisory assessments of capital adequacy and processes through which large complex BHCs initially assess their capital needs Initially calculation are created as Hadoop jobs invoked by Monikers which represent the SQLs Later on because of the advantage of the in memory processing we have replaced the Hadoop jobs by spark processing RESPONSIBILITIES Implemented E2E End To End process consists of one or multiple Processes which in turn consists of one or more Activities or SubProcesses Designed BPMN models of the E2E process using Eclipse BPMN2 modeler configured ActivityProcess details Developed Spark programs using Scala APIs to compare the performance of Spark vs Hive and SQL Used Spark API over Hortonworks Hadoop YARN to perform analytics on data in Hive Implemented Spark using Scala and Spark SQL for faster testing and processing of data Developed WorkItemHandlers and service implementations corresponding to BPMN Models using jBPM Eclipse plugin and Core Java Developed different types of Activities eg Data publishing Data Validation ETL Report Generation Axiom Fixed Form Reports related MetaData is SFTPed to Axiom Reporting team Developed SFTP framework using JSch Java Secure Channel APIs Tested the code in Kerberos enabled platform Developed File Watcher Script for SFTP application During PPNR calculation an inhouse Model Execution Framework is used to read input monikers validate monikers perform MEF execution capture Output validate output and write to mercury Used Core Java Collections JSON jBPM Hibernate to develop WorkItemHandlers Service Implementations classes Projective RWA Risk Weighted Assets Calculations Transform are of two types Spot and Standardized WorkItem Handlers Service Implementations classes are done by using Core Java Collection JSON jBPM Hibernate etc CCAR and DAST test requires simulated stressed market data BHC bank needs to carry out the Stress Tests for total 5 scenarios 3 Fed given and 2 Internal Each scenario consists of 28 RiskFactors and each of them consists of a number of shocks values SMT Scenario Management Tool is used to generate the simulated Scenario data Used jBPM WorkFlows BPMN Modeler 2 plugins Core Java JSON Hibernate etc Static Runbook has the details of the Top level processes their child processes and the corresponding activities Static Runbook gives a reference of the ideal time to run a complete CCAR Execution from start to end Whereas Dynamic Runbook calculation provides actual time taken by each of the processesactivities Designed the Static and Dynamic Runbook and developed using Core Java Data Structure Collection RestTemplate client etc Used Multiple Predecessor logic to determine the dependency of processes Developed Context Services Moniker Services DrillDown Services etc which provides data used in Calculation and Fixed Form Reporting Developed the services using Spring RestTemplate JDBCTemplate and Core Java Developed different DAO Implementation using Spring JDBC Template in order to prepopulate the Run Details notifications etc at the start of the application Developed a tool to generate Fudged Messages and deliver it to a QueueTopic to during Unit testing of the Workflows Worked on Tomcat DB Connection Pool configuration to achieve optimum number of DB connections using Apache Commons DBCP Extensively used Git Git Extensions as the repository Used Mockito and JUnit for developing Unit Test code Developed and maintained Stored Procedure Named Query to implement WorkFlow Functionalities Used Goals and Profiles in during build to create war for specific environments using Maven Environment Core Java 17 Tomcat Eclipse PluginsBPMN modelers JBoss Drools GitGit extensions maven WinScp Putty JAXB XML Oracle Eclipse Kepler SVN XSD Mocito JUnit Jenkins Teamcity Ant Jsch Windows 7 Linux HP ALM Hibernate Goldman Sachs 30 Hudson Jersey City December 2014 to September 2015 Positions Reporting RegOps teams Large Options Positions Report LOPR is for compliance reporting to OCC The project goal is to migrate the US LOPR function to Regulatory Operations strategic infrastructure and to build an enhanced operational support model RESPONSIBILITIES Worked with Operations to analyze the OCC Reference document to understand the specification and created gap analysis document between the intended system and the existing system Generated Model classes from the Position Schema of OCC system using JAXBAPIs Designed and developed a batch application to download table data from PROD databases to flat filesby identifying business entity using Core Java Spring JDBC Spring Batch Log4j2 Multithreading Executor Service Executors DAO Framework etc Developed some File Watcher application which loads data files to some secured location using SFTP Core Java JSCH Java Secure Channel APIs Designed and developed a reconciliation tool POC which takes metadata information about previous report runs and get the report results It takes the report results as inputs and generates the delta difference This delta difference is going to be the basis of the LOPR report Used Java Collection XML parsing Java IO and Generics APIs to code classes Designed and developed application to parse Snap Shot data from OCC in the FIXML format and parsed it according to the OCC Reference manual and uploaded using JDBC batch insert to the Sybase IQ database Did coding to include issuers coded as SECTION_604 regulation under BHCA monitoring report Changed Global Report to Regulation Global Issuer to Regulation and Global Issuer to Threshold mapping Tested in Dev and UAT environment Coded change in business functionality to map Global Issuer to Regulation mapping and Global Product to Regulation mapping under the same Regulation and comments Did a POC using Spring Batch to download Production data files of size 100 GB by a single threaded application to a data file Developed Mock JUnit Test cases to mock Business functionality testing Did JUnit data validation with static Inmemory data instead of validation against database Environment Core Java 151617 JAXB XML Sybase IQ Sybase ASE DB2 Eclipse Kepler SVN XSD Mocito JUnit Maven Jenkins Teamcity Windows 7 Linux Contract First Web Service Capital One 360 Wilmington DE July 2013 to October 2014 Wilmington Delaware July 2013 Oct 2014 Project Description TranSite SASSy and IVR the three Web Service Clients communicate with Wesp Server side Wesp accesses Profile and Oracle Database to get the customer data Checkmate is used to upload and deposit check images using mobile or ATM banking RESPONSIBILITIES Devised the algorithm Coded to implement it a Contract First Web Service using SpringWS Spring MVC Spring IoC XSD JAXB DAO Framework Exception handling Collection and Core Java Used Tidal Enterprise Client to createmodify scheduled jobs in windows based agent Developed Java Server Side code used to be invoked from Tidal Clients Promoted the jobs developed in Dev Tidal environment to QA and Production environment Coded the Tax Form Generating Module for 2013 Tax year to generate tax forms for 1098 1099R1099S1099A1099C1099DIV1099INT1099MISC using Core Java Collection Framework Java Exception XML XSLT Velocity Template XSD and JAXB Used MavenGitGerrit during development code check out and local build before the code checkin Also used SVN version control system during source code management process for old style version management system Coded Unit Test cases for every Java class using JunitMocito Testing Framework In order to meet or exceed the high code coverage 90 minimum code coverage used tools like JaCoco and EclEmma Used tools like CPD PMD FindBugs to find subtle bugs in the application like duplication of code unused code improper indentation etc Coded in Java Servlets used to play the audio files needed depending upon the workflow executed for IVR application Configured both 3264 bit Tomcat instance for 32 64 bit applications Did performance tuning to the Server configuration for optimization Designed developed Server Side caching mechanism using Core Java ehCache API Collections Spring API RESTful API Tested bug fixed deployed the application Designed developed Coded the KeepAliveConnection implementation using Core Java ExecutorService MultiThreading Collection Exception Generics etc Coded and configured Server Cache implementation using ehCache to enhance the performance Implemented File based cache overflow configuration Coded customized Cache Manager Factory classes to handle configurable Disk Store Location attribute Implemented distributed Logging mechanism by using LOGback logger and appender for each of the separate interfaces and web application Coded using LOGback API and Java to implement per user Logging facility Implemented Time and Size based Roll over policy for logger Coded Logging Context set reset mechanism to facilitate the log files with different contexts Developed solution to change the log levels of independent modules dynamically using UI tool Implemented tool where users can viewdownload log files for debugging purpose for an environment without server access using RESTful API and Spring MVC Developed Resource images Externalization Framework using Spring MVC to keep resources out of the deployed war file using Spring MVC Coded Mock client interface as a backup of the actual implementation when service is down using Spring AOP Developed data access implementation using DAO Framework spring JDBC Template and SQL Named Query Coded web service client implementation using Spring MVC Restful Web Service API Retrofitted SOAP based client code implementation Used AntHillPro during DEVQAUAT built process to maintain automatic build life cycle management Environment Core Java 16 Spring MVC IoC SpringWS log4j Git Gerrit SVNSOAPJMSMQ series XML XSLT XSD AntHillPro Eclipse Mocito JUnit Maven Callable Statement Stored Procedure Velocity Framework Apache tomcat Jenkins Slave CPD PMD JaCoco FindBugs EclEmma Morgan Stanley Smith Barney NYC New York NY November 2012 to June 2013 Nov2012 June2013 Project Description MSSB 3D is an advisor platform developedintegrated as a result of the joint venture of Morgan Stanley MS 360 application and Smith Barney legacy NextGen application The main goal of the project PMR is to provide a set of Portfolio Reports through a separate application within MSSB 3D This application enables Financial Advisors FAs Brach Operations and their clients to obtain the financial and portfolio information they are accustomed to The Portfolio Reports application utilizes new and existing MSSB 3D and MS360 web services interfaces and data sources Senior Developer Wells Fargo Home Mortgage Frederick MD April 2011 to October 2012 Project Description The ASDS Asset Sales Delivery System is a system for packaging loans home mortgages for sale on the secondary market A Trade Desk Analyst requests Loan data be extracted from ASDS into the ASBE Asset Sales Best Execution system The Analysts request results in a query being sent to ASDS and ASDS responds by sending the resulting information to a file on a shared drive for access by the ASBE system or Trade Analyst The ASBE system optimizes a mix of the imported Loans into Pools which in turn helps to Trade the loans easily Developer JPMC NYC New York NY April 2010 to December 2010 Project Description Stock Loan Strategic Investments Pre trading activities has two parts Availability and Overnight Locates In Availability application the number of each security from each of the client is gathered and then the Haircut rules are applied In Overnight Locates application the endclients sends requests for Locates of the securities they trade After receiving the requests the response files are sent which will have the quantities of securities allocates Framework consists of components like Client Gateway adapters Inmemory Cache database Rule engine and JMS component and controller agent System processes feeds from different clients using adapters which supports incoming files via different protocols email ftp etcRule engine provides different rules on messages which gets persist in Database Rackson Asset Management NY August 2009 to April 2010 Description Rackson developed their own low latency etrading system for their algorithmic trading system Their trading system arguably low volume but faster than most of the contemporary Trading system available One aspect of the application was to monitor the Order Updates and accordingly place new order cancel the order resubmit the order etc In essence it was their indigenous Order Management System OMS they were developing Role Financial Solution Hub Princeton NJ December 2008 to August 2009 Description FSH is a complete solution STP which would help financial clients by integrating Front office Middle office and Back office solutions FSH has the following modules Integration Engine Business Rule Engine Reconciliation Engine Enterprise Risk Engine Accounting Engine Basel II Engine and a BPM solution Sungard Financial Parsippany NJ January 2008 to December 2008 Description Getpaid is a treasury solution suite in Accounts Receivable AR and Collections Management area It helps corporations to optimize and manage working capital particularly the credit and collections processes of the AR department It helps streamline the ordertocash process by consolidating customer invoice information automating collection tasks driving discrepancy resolution and generating advanced cash forecasts It provides an enterprisewide view of cash and working capital across accounts receivable accounts payable and treasury Infinity Business Process Automation software is a BPM tool It leverages by easy visual modeling easy integration of JavaJ2EE application with the Business Process Management framework scalability etc Cognizant Technology Solution November 2002 to December 2007 Description While in Cognizant I got chance to work for clients like Merck Metlife Credit Suisse and JPMC A Relationship Manager maintains safekeeping account by creatingexecutionreviewing of orders Handling Real Time Positions Order Entry Settlements Non Trading Orders are some of the major activities Global AD Core was a monitoring project to monitor reconciliation of the accounts portfolio management and trading applications Developed APIs for an Order Management Systems OMS for an ETrading platform Cogentech January 2002 to November 2002 Description The Web Application developed for NJDOL New Jersey Department of Labor was meant for the Judicial system Developed UI and Server side components like Action class Servlet Controller ActionForm etc using Struts JDBC JSP Wrote some utility functions used in this project ADA Software and Services April 1999 to December 2001 Description Worked in projects on Antilock Braking System ABS The software was developed in an 8 bit microcontroller Siemens C505 which with the help of another 16 bit microcontroller of Texas Instrument continuously monitor the wheel speed of the vehicle and calculate the acceleration as well The speed control is required to avoid the locked condition of the car while the speed of the car suddenly changes Education BE in Electronics and Telecommunication Engineering Jadavpur University Kolkata West Bengal Skills BEA BEA WEBLOGIC ECLIPSE EJB J2EE",
    "unique_id": "a59ea7eb-15a7-4312-a538-e8042e17e826"
}