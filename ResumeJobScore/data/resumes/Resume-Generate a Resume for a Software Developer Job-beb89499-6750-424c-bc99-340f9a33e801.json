{
    "clean_data": "Sr Python Developer Sr span lPythonspan span lDeveloperspan Sr Python Developer Federated Wireless Arlington VA 7 years of industrial experience working as a core Python Developer and Front endUI Developer responsible in developing interactive web applications with valuable intuitive user experiences Experience in analyzing data using Python R SQL Microsoft Excel Hive PySpark Spark SQL for Data Mining Data Cleansing Data Munging and Machine Learning Hands on experience in Designing and developing APIs for the application using Python Django MongoDB Express ReactJS and NodeJS Experience with Requests NumPy Matplotlib SciPy PySpark and Pandas python libraries during development lifecycle Developed a CLI utility to allow daily Parse database backups The utility is using Parse Rest API to export user tables into json files download into temp folder then upload these files into Amazon AWS S3 bucket I used Parse Rest AWS Boto and other python libraries Primary experience in developing APIs for the application using Python Django MongoDB Express ReactJS and NodeJS Good knowledge on developing automation software for Elasticsearch Cluster deployment Used python decorators generator list comprehensions list JSON cache pandas and NumPy for building python functions for processing of data Expertise in client scripting languages like JavaScript jQuery JSON DOJO bootstrap Angularjs Hands on Apache Spark jobs using Scala in test environment for faster data processing and used Spark SQL for querying As a Python Developer Architect Worked on various micro web applications development using Flask and SQLAlchemy Experience in AWS services S3 EC2 and deployment services Lambda and RDS DynamoDB NoSQL Beanstalk SQSand Jenkins CICD Experience in AWS Elastic Beanstalk for app deployments and worked on AWS lambda with Amazon kinesis Container management using Docker by writing Docker files and set up the automated build on Docker HUB and installed and configured Kubernetes Extensive experience includes SCM ChangeIncident Management VMware and AWS Cloud computing Jenkins pipeline preparation for WebSphere Tomcat and Docker based applications deployments Experienced in creating spark module using data frame to read data from parquet files Experience in webbased applications with extensive use of Python 27 Python 33 Python 34 Django 1413 JavaScript jQuery XML CSS3 HTML5 DHTML Experience in Automation scripts by using Selenium and Win Runner also used Test DirectorHP ALM to manage the entire Automation testing process Experience in Web development with Python and Django with good understanding of ORM and SQLAlchemy SQL ETL Linux Asynchronous task queues with Celery and RabbitMQ Devops experience with Puppet Ansible Kubernetes Chef AWS OPS Work and OpenStack Experience in python PySpark shell script oracle scheduler Luigi Oracle Pl SQL etc Good working experience in using version control systems Git and GitHub Handson experience in developing web applications and RESTful web services and APIs using Python Flask Django and PHP Authorized to work in the US for any employer Work Experience Sr Python Developer Federated Wireless Arlington VA November 2018 to Present Involved in developing webbased application using Python Django JavaScript Express ReactJS Node JS Express AJAX CSS and HTML On SWNG application initiate TDD Test Driven Development approach to update Rest API from DRF Django Rest Framework to Rest API Designed and developed an entire module called CDC change data capture in python and deployed in AWS GLUE using PySpark library and python Responsible for all clientside UI Validation and implementing Business logic based on user selection AngularJS 2 Developed internal auxiliary web apps using Python Flask framework with Angularjs and Bootstrap CSS HTML framework Created views and stored procedures which organized PDF files with additional metadata that is indexed into the Elasticsearch system Supported development of Web portals completed Database Modelling in PostgreSQL front end support in HTMLCSS jQuery Understanding of securecloud configuration Cloud Trail cloudsecurity technologies VPC Security Groups etc and cloudpermission systems IAM Implemented the Backbone JS for DOM manipulation as this is the light web framework compared to Angular JS Experience in Installing JenkinsPlugins for GIT Repository Setup SCM Polling for Immediate Build with Maven and Maven Repository and Deployment of apps using custom modules through Puppet as a CICD Process Effectively used the life cycle methods such as Initialization Mounting Updating and Unmounting and invoked them at different phases of the components life cycle to develop quality React Js user interfaces Documented the requirements including the available code which should be implemented using Spark Hive HDFS HBase and Elasticsearch Connected continuous integration system with GIT version control repository and continually build as the checkins come from the developer Involved in converting HiveSQL queries into Spark transformations using Spark RDDs Python and Scala Container management using Docker by writing Docker files and set up the automated build on Docker HUB and installed and configured Kubernetes Worked on front end frame works like CSS Bootstrap for development of Web application Golang Infrastructure Teams and Engineering Productivity utilizing Kubernetes Docker influxDB Ansible Spinnaker Worked on analyzing Hadoop stack and different big data analytic tools including Pig Hive HBase database and DynamoDB Used Amazon Elastic Beanstalk with Amazon EC2 instance to deploy Django project into AWS Configured continuous integration with Jenkins on Amazon EC2 Responsible for designing and developing REST web services in Python using Flask and flaskrestful framework Developed Serverside automation using Node JS scripting and connecting different types of SQL and NoSQL stores from Node JS Developed Scala R Python for regular expression regex project in the HadoopHive environment with LinuxWindows for big data resources Worked with AVRO Parquet and ORC file format and various compression formats like Snappy to store data into HDFS Worked on AWS services S3 EC2 and deployment services Lambda and RDS DynamoDB NoSQL Beanstalk SQSand Jenkins CICD Worked on the development of SQL and stored procedures for normalization and denormalization in MYSQL Developed Talend jobs to configure RabbitMQ for batch load on data Used Amazon Web Services AWS for improved efficiency of storage and fast access Used Celery with RabbitMQ MySQL Django and Flask to create a distributed worker framework Used automation Jenkins for continuous integration and continuous delivery CICD on Amazon EC2 Used Spark Streaming APIs to perform transformations and actions on the fly for building common Applied optimization techniques to reduce page size and load times to enhance user experience using sprites Executed MYSQL database queries from python using PythonMySQL connector and MySQL dB package to retrieve information Written Pig scripts for sorting joining and grouping the data Experienced with working on Avro Data files using Avro Serialization system Used Spark Streaming to divide streaming data into batches as an input to Spark engine for batch processing Extracted data from PostgreSQL Cassandra Redis InfluxDB and Elastic Search Wrote a Python library built on NumPy and sklearn to detect errors on daily reports Debugging the spark code using local and in cluster mode Designed and developed the framework to consume the web services hosted in AmazonEC2 Worked on implementing Spark Framework a Java based Web Frame work Worked and learned a great deal from AWS cloud services like EC2 S3 Experienced in writing live Realtime Processing and core jobs using Spark Streaming with Kafka as a Data pipeline system Installing configuring maintaining and troubleshooting a wide variety of network equipment from PCs and servers to printers and standalone devices Experienced with automation web development and engineering environment tools such as JIRA Jenkins Git Chef Selenium Utilized Python libraries like NumPy and matplotlib for generating graphical reports Python Developer Mercedes Benz Credit Reston VA April 2018 to October 2018 Created an Application was based on serviceoriented architecture and used Python Django JSF Spring Ajax HTML CSS for the frontend Developed scalable frontend user interfaces using HTML CSS and JavaScript jQuery AngularJS and Mongo DB Implemented Stable React JS components and Standalone functions to be added to any future pages Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Built Jenkins jobs to create AWS infrastructure from GitHub repos containing terraform code Wrote with objectoriented Python Flask SQL Beautiful Soup httplib2 Jinja2 HTMLCSS Bootstrap jQuery Linux Sublime Text GIT Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML CSS JavaScript and jQuery Developed backend web services using Nodejs and stored dependencies using Node Package Manager NPM Designed and Developed User Interface using frontend technologies like HTML CSS JavaScript jQuery AngularJS Bootstrap and JSON Involved in developing the AngularJS Meteor framework for the Single Page Application development Used React JS in components like JSX creating React components Virtual DOM React Props Lifecycle methods working with the React States and Events Analysis the logs data and filter required columns by Logstash configuration and send it to Elasticsearch Design and developed the test cases for REST API Involved REST API test framework development Worked on serverside applications with Django using Python programming and used python libraries like Beautiful Soup matplotlib SciPy NumPy and Built efficient Nodejs backend for client web application Implemented advanced procedures like text analytics and processing using the inmemory computing capabilities like Apache Spark written in Scala Involved in using Python MongoDB and ReactJS for the design development and deployment of the application Used Elasticsearch Framework for developing web applications using model view control architecture Used Amazon Elastic Beanstalk with Amazon EC2 instance to deploy Django project into AWS Configured continuous integration with Jenkins on Amazon EC2 Automated the existing scripts for performance calculations using NumPy and SQLAlchemy Optimization of heavy load workflows via queues RabbitMQ for enhanced performance and less downtime for stakeholders Involved in working with Webservices backend development using Python CherryPy Django and SQLAlchemy Built a delta file from full file by identifying only INSERTS UPDATES and DELETES by using python and PySpark modules and store it in S3 Automated a reporting process using Python Luigi library for task workflow and dependencies and another APIs Integrated AWSRDS Oracle and Aurora DBs to AWSHive EMR using DynamoDB with direct connect Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Developed the notification service by posting the JSON request in AWS API Gateway Validating the response in Lambda by getting the data from DynamoDB and sending the notification through AWS SNS experienced in querying data using SparkSQL on top of Spark engine for faster data sets processing Deploying application in Docker Container for custom environment and hosting in Elastic Beanstalk Developed and tested many features for dashboard using Python ROBOT framework Bootstrap CSS and JavaScript Experienced in converting business process into RDD transformations using Apache Spark and Scala Developed spark application working with Spark Context SparkSQL Data Frame Pair RDDs Troubleshooting problems related to packet or frame transfer across routers or switches using Wireshark Developed web applications and RESTful web services and APIs using Django Pyramid Maintained the Selenium and Python code and resources in source control like CVS SVN over the time for improvements and new features Worked in development of applications especially in Linux environment and familiar with all its commands PythonDjango Developer Dell Computer Corporation New York NY January 2016 to August 2017 Developed a portal to manage and entities in a content management system using Python and Django Utilized Jenkins to deploy the Django application and run unit tests Imported data from AWS S3 into Spark RDD Performed transformations and actions on RDDs Implemented system logging solution using Logstash Elasticsearch and Kibana Developing data processing tasks using PySpark such as reading data from external sources merge data perform data enrichment and load in to target data destinations Utilized pandas NumPy SciPy and nltk libraries to create unique reports and analysis Developed entire frontend and backend modules using Python on Django including Tastypieweb Framework using Git Node JS underscore JS Angular JS CSS and JavaScript Extracted log from Git using Python and performed data cleaning using regex to generate the Changelogs for comparing different software versions Worked on front end frame works like CSS Angular JS Bootstrap for development of Web application Creating custom general use modules and components which extend the elements and modules of core ReactJS Developed a fully automated continuous integration system using Git Gerrit Jenkins MySQL and custom tools developed in Python and Bash Developed REST API get post delete put functionalities for the application using Django Rest Framework Used Amazon Elastic Beanstalk with Amazon EC2 to deploy project into AWS and good experience with AWS storage services S3 Processed the Web server logs by developing MultiHop Flume agents by using Avro Sink and loaded into MongoDB for further analysis Extracted files from MongoDB through Sqoop and placed in HDFS and processed it using Hive Developed APIs in python with SQLAlchemy for ORM along with MongoDB documenting APIs in Swagger docs and deploying application over Jenkins Worked in DevOps group running Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Also gained familiarity with supporting technologies like kubernetes and Mesos Developed Spark Script with PySpark Java using PyCharm Spring Boot IDE that performs the internalization process Implemented the application using Python Spring IOC Inversion of Control Django Framework and handled the security using Python Spring Security Develop consumerbased features and applications using Python Django HTML Behavior Driven Development BDD and pairbased programming Used Python 3X NumPy spicy pandas scikitlearn seaborn and Spark 20 PySpark MLlib to develop variety of models and algorithms for analytic purposes Used Reactjs to specifically breeze the code by using a specific syntax called JSX in which Html and the JavaScript mixed making code simple Performed data processing on financial statements using NumPy Pandas Matplotlib and scikitlearn Worked with Splunk and Icinga2 for continuous monitoring on MySQL and Mongo Environments Worked in Python Integrated Development Environments like Pygame PyCharm Worked on mainly developing PySpark code using existing resources like QA code written in python Hanweck BRD to eliminate the previous flaws in design along with performance improvement Written Python Scripts to parse XML documents and load the data in database Worked with JSON based REST Web Services and Amazon Web Services AWS Python Developer Johnson Johnson New Brunswick NJ March 2012 to May 2015 Developed consumerbased features and applications using Python Django HTML and other web technologies Developed webbased application using Django framework with python concepts Built Elasticsearch Log stash and Kibana ELK to store logs and metrics into S3 bucket using Lambda function Achieved business process automation via applications developed using Git Gerrit Jenkins SQL server and custom tools developed in Python and Bash sed Reactjs framework to render the code we declare the code in the react Components then the react rendered and updated the code Developed Restful APIs using Python Flask and SQLAlchemy data models Developed webbased open stack applications using Python and Django for Big data analysis and using PySpark Developed entire frontend and backend modules using Python on Django Web Framework by implementing MVC architecture Maintain measurement website application UI with pandas and NumPy Wrote with objectoriented Python Flask SQL Beautiful Soup httplib2 Jinja2 HTMLCSS Bootstrap jQuery AJAX Linux Sublime Text GIT BuildingMaintaining Docker container clusters managed by Kubernetes Linux Bash GIT Docker on GCP Google Cloud Platform Utilized Kubernetes and Docker for the runtime environment of the CICD system to build test deploys Developed Restful APIs using Python Flask and SQLAlchemy data models as well as ensured code quality by writing unit tests using Pytest Worked in Python Integrated Development Environments like NetBeans PyDev PyCharm and Sublime Text Involved in design and implementation of Selenium WebDriver automation framework for smoke and regression test suites TestNG Developed entire frontend and backend modules using Python on Django Web Framework Used GitHub for Python source code version control Jenkins for automating the build Docker containers Used MySQL as backend database and MySQL dB of python as database connector to interact with MySQL server Education Masters Skills Git Javascript Jenkins Python Numpy",
    "entities": [
        "Python Flask",
        "REST Web Services",
        "Spark Context",
        "AWS Elastic Beanstalk",
        "ORM",
        "Designing",
        "Nodejs",
        "UI Validation",
        "PHP Authorized",
        "SQLAlchemy",
        "Python Spring Security Develop",
        "Data Mining Data Cleansing Data Munging and Machine Learning Hands",
        "Applied",
        "JSON",
        "Golang Infrastructure Teams",
        "GIT Repository Setup",
        "SQLAlchemy SQL ETL",
        "WebSphere Tomcat",
        "CVS",
        "Amazon Web Services AWS",
        "Node Package",
        "RDD",
        "Hadoop",
        "Developed User Interface",
        "Mongo DB Implemented Stable React",
        "XML",
        "HDFS Worked on AWS",
        "Python Flask SQL Beautiful Soup httplib2 Jinja2",
        "Bootstrap CSS",
        "Hive Developed",
        "DevOps",
        "Apache Spark",
        "Amazon",
        "Maven Repository and Deployment",
        "Parse Rest AWS Boto",
        "Arlington VA",
        "Python and Django Utilized Jenkins",
        "Python",
        "the Single Page Application",
        "Amazon AWS S3",
        "Developed",
        "SparkSQL",
        "Used Reactjs",
        "CSS Bootstrap",
        "Avro Data",
        "AWS S3",
        "AWS SNS",
        "Python R SQL Microsoft",
        "Mesos Developed Spark Script",
        "Scala Developed",
        "Elasticsearch Cluster",
        "Utilized",
        "PythonDjango Developer Dell Computer Corporation New York",
        "TDD Test Driven Development",
        "Puppet",
        "Git",
        "New Brunswick NJ",
        "Virtual DOM React Props Lifecycle",
        "HTML CSS JavaScript jQuery AngularJS",
        "Developed Serverside",
        "jQuery Developed",
        "Linux",
        "Database Modelling",
        "Used Elasticsearch Framework",
        "Flask",
        "Built",
        "MultiHop",
        "Spark Streaming",
        "Created an Application",
        "ORC",
        "NodeJS Good",
        "Docker",
        "DOM",
        "CSS Angular",
        "RDS",
        "PySpark Developed",
        "Celery",
        "Python Django JavaScript Express",
        "CLI",
        "MVC",
        "Docker Container",
        "Spark",
        "Scala Container",
        "GIT",
        "Node JS",
        "HTML CSS",
        "ALM",
        "Puppet Ansible Kubernetes Chef AWS OPS Work",
        "US",
        "HTML CSS JavaScript",
        "Sqoop",
        "LinuxWindows",
        "QA",
        "Python Django MongoDB Express",
        "PDF",
        "JIRA Jenkins Git Chef Selenium Utilized Python",
        "Web Frame",
        "Python Django JSF Spring Ajax HTML CSS",
        "AWS",
        "AWS Cloud computing Jenkins",
        "Built Jenkins",
        "Initialization Mounting Updating",
        "PySpark",
        "Work Experience Sr Python Developer Federated Wireless",
        "Realtime Processing",
        "JSX",
        "INSERTS UPDATES",
        "SCM ChangeIncident Management VMware",
        "Kubernetes Docker",
        "Python Developer Mercedes Benz Credit Reston VA",
        "Sublime Text Involved",
        "Standalone",
        "Python Spring IOC Inversion",
        "Elasticsearch",
        "Node JS Express AJAX CSS",
        "MySQL and Mongo Environments Worked",
        "SQL",
        "GitHub",
        "lPythonspan",
        "Kubernetes",
        "the React States and Events Analysis",
        "JS Angular JS CSS",
        "Kubernetes Extensive",
        "PySpark MLlib",
        "CICD",
        "Amazon AWS",
        "Angular JS Experience",
        "Pandas",
        "Avro Serialization",
        "Python Integrated Development Environments",
        "GitHub Handson",
        "Elasticsearch Design",
        "Maven",
        "Performed",
        "Parse Rest API",
        "GCP",
        "Spark SQL",
        "AWS Configured",
        "CDC",
        "Logstash",
        "Amazon EC2 Responsible",
        "UI",
        "Selenium",
        "Unmounting",
        "OpenStack Experience",
        "Python Developer and Front endUI Developer",
        "Amazon Web Services AWS Python Developer",
        "Parse",
        "REST",
        "NetBeans",
        "Present Involved",
        "NoSQL",
        "Developed Restful",
        "Spark Hive HDFS HBase",
        "Tastypieweb Framework",
        "Node"
    ],
    "experience": "Experience in analyzing data using Python R SQL Microsoft Excel Hive PySpark Spark SQL for Data Mining Data Cleansing Data Munging and Machine Learning Hands on experience in Designing and developing APIs for the application using Python Django MongoDB Express ReactJS and NodeJS Experience with Requests NumPy Matplotlib SciPy PySpark and Pandas python libraries during development lifecycle Developed a CLI utility to allow daily Parse database backups The utility is using Parse Rest API to export user tables into json files download into temp folder then upload these files into Amazon AWS S3 bucket I used Parse Rest AWS Boto and other python libraries Primary experience in developing APIs for the application using Python Django MongoDB Express ReactJS and NodeJS Good knowledge on developing automation software for Elasticsearch Cluster deployment Used python decorators generator list comprehensions list JSON cache pandas and NumPy for building python functions for processing of data Expertise in client scripting languages like JavaScript jQuery JSON DOJO bootstrap Angularjs Hands on Apache Spark jobs using Scala in test environment for faster data processing and used Spark SQL for querying As a Python Developer Architect Worked on various micro web applications development using Flask and SQLAlchemy Experience in AWS services S3 EC2 and deployment services Lambda and RDS DynamoDB NoSQL Beanstalk SQSand Jenkins CICD Experience in AWS Elastic Beanstalk for app deployments and worked on AWS lambda with Amazon kinesis Container management using Docker by writing Docker files and set up the automated build on Docker HUB and installed and configured Kubernetes Extensive experience includes SCM ChangeIncident Management VMware and AWS Cloud computing Jenkins pipeline preparation for WebSphere Tomcat and Docker based applications deployments Experienced in creating spark module using data frame to read data from parquet files Experience in webbased applications with extensive use of Python 27 Python 33 Python 34 Django 1413 JavaScript jQuery XML CSS3 HTML5 DHTML Experience in Automation scripts by using Selenium and Win Runner also used Test DirectorHP ALM to manage the entire Automation testing process Experience in Web development with Python and Django with good understanding of ORM and SQLAlchemy SQL ETL Linux Asynchronous task queues with Celery and RabbitMQ Devops experience with Puppet Ansible Kubernetes Chef AWS OPS Work and OpenStack Experience in python PySpark shell script oracle scheduler Luigi Oracle Pl SQL etc Good working experience in using version control systems Git and GitHub Handson experience in developing web applications and RESTful web services and APIs using Python Flask Django and PHP Authorized to work in the US for any employer Work Experience Sr Python Developer Federated Wireless Arlington VA November 2018 to Present Involved in developing webbased application using Python Django JavaScript Express ReactJS Node JS Express AJAX CSS and HTML On SWNG application initiate TDD Test Driven Development approach to update Rest API from DRF Django Rest Framework to Rest API Designed and developed an entire module called CDC change data capture in python and deployed in AWS GLUE using PySpark library and python Responsible for all clientside UI Validation and implementing Business logic based on user selection AngularJS 2 Developed internal auxiliary web apps using Python Flask framework with Angularjs and Bootstrap CSS HTML framework Created views and stored procedures which organized PDF files with additional metadata that is indexed into the Elasticsearch system Supported development of Web portals completed Database Modelling in PostgreSQL front end support in HTMLCSS jQuery Understanding of securecloud configuration Cloud Trail cloudsecurity technologies VPC Security Groups etc and cloudpermission systems IAM Implemented the Backbone JS for DOM manipulation as this is the light web framework compared to Angular JS Experience in Installing JenkinsPlugins for GIT Repository Setup SCM Polling for Immediate Build with Maven and Maven Repository and Deployment of apps using custom modules through Puppet as a CICD Process Effectively used the life cycle methods such as Initialization Mounting Updating and Unmounting and invoked them at different phases of the components life cycle to develop quality React Js user interfaces Documented the requirements including the available code which should be implemented using Spark Hive HDFS HBase and Elasticsearch Connected continuous integration system with GIT version control repository and continually build as the checkins come from the developer Involved in converting HiveSQL queries into Spark transformations using Spark RDDs Python and Scala Container management using Docker by writing Docker files and set up the automated build on Docker HUB and installed and configured Kubernetes Worked on front end frame works like CSS Bootstrap for development of Web application Golang Infrastructure Teams and Engineering Productivity utilizing Kubernetes Docker influxDB Ansible Spinnaker Worked on analyzing Hadoop stack and different big data analytic tools including Pig Hive HBase database and DynamoDB Used Amazon Elastic Beanstalk with Amazon EC2 instance to deploy Django project into AWS Configured continuous integration with Jenkins on Amazon EC2 Responsible for designing and developing REST web services in Python using Flask and flaskrestful framework Developed Serverside automation using Node JS scripting and connecting different types of SQL and NoSQL stores from Node JS Developed Scala R Python for regular expression regex project in the HadoopHive environment with LinuxWindows for big data resources Worked with AVRO Parquet and ORC file format and various compression formats like Snappy to store data into HDFS Worked on AWS services S3 EC2 and deployment services Lambda and RDS DynamoDB NoSQL Beanstalk SQSand Jenkins CICD Worked on the development of SQL and stored procedures for normalization and denormalization in MYSQL Developed Talend jobs to configure RabbitMQ for batch load on data Used Amazon Web Services AWS for improved efficiency of storage and fast access Used Celery with RabbitMQ MySQL Django and Flask to create a distributed worker framework Used automation Jenkins for continuous integration and continuous delivery CICD on Amazon EC2 Used Spark Streaming APIs to perform transformations and actions on the fly for building common Applied optimization techniques to reduce page size and load times to enhance user experience using sprites Executed MYSQL database queries from python using PythonMySQL connector and MySQL dB package to retrieve information Written Pig scripts for sorting joining and grouping the data Experienced with working on Avro Data files using Avro Serialization system Used Spark Streaming to divide streaming data into batches as an input to Spark engine for batch processing Extracted data from PostgreSQL Cassandra Redis InfluxDB and Elastic Search Wrote a Python library built on NumPy and sklearn to detect errors on daily reports Debugging the spark code using local and in cluster mode Designed and developed the framework to consume the web services hosted in AmazonEC2 Worked on implementing Spark Framework a Java based Web Frame work Worked and learned a great deal from AWS cloud services like EC2 S3 Experienced in writing live Realtime Processing and core jobs using Spark Streaming with Kafka as a Data pipeline system Installing configuring maintaining and troubleshooting a wide variety of network equipment from PCs and servers to printers and standalone devices Experienced with automation web development and engineering environment tools such as JIRA Jenkins Git Chef Selenium Utilized Python libraries like NumPy and matplotlib for generating graphical reports Python Developer Mercedes Benz Credit Reston VA April 2018 to October 2018 Created an Application was based on serviceoriented architecture and used Python Django JSF Spring Ajax HTML CSS for the frontend Developed scalable frontend user interfaces using HTML CSS and JavaScript jQuery AngularJS and Mongo DB Implemented Stable React JS components and Standalone functions to be added to any future pages Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Built Jenkins jobs to create AWS infrastructure from GitHub repos containing terraform code Wrote with objectoriented Python Flask SQL Beautiful Soup httplib2 Jinja2 HTMLCSS Bootstrap jQuery Linux Sublime Text GIT Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML CSS JavaScript and jQuery Developed backend web services using Nodejs and stored dependencies using Node Package Manager NPM Designed and Developed User Interface using frontend technologies like HTML CSS JavaScript jQuery AngularJS Bootstrap and JSON Involved in developing the AngularJS Meteor framework for the Single Page Application development Used React JS in components like JSX creating React components Virtual DOM React Props Lifecycle methods working with the React States and Events Analysis the logs data and filter required columns by Logstash configuration and send it to Elasticsearch Design and developed the test cases for REST API Involved REST API test framework development Worked on serverside applications with Django using Python programming and used python libraries like Beautiful Soup matplotlib SciPy NumPy and Built efficient Nodejs backend for client web application Implemented advanced procedures like text analytics and processing using the inmemory computing capabilities like Apache Spark written in Scala Involved in using Python MongoDB and ReactJS for the design development and deployment of the application Used Elasticsearch Framework for developing web applications using model view control architecture Used Amazon Elastic Beanstalk with Amazon EC2 instance to deploy Django project into AWS Configured continuous integration with Jenkins on Amazon EC2 Automated the existing scripts for performance calculations using NumPy and SQLAlchemy Optimization of heavy load workflows via queues RabbitMQ for enhanced performance and less downtime for stakeholders Involved in working with Webservices backend development using Python CherryPy Django and SQLAlchemy Built a delta file from full file by identifying only INSERTS UPDATES and DELETES by using python and PySpark modules and store it in S3 Automated a reporting process using Python Luigi library for task workflow and dependencies and another APIs Integrated AWSRDS Oracle and Aurora DBs to AWSHive EMR using DynamoDB with direct connect Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Developed the notification service by posting the JSON request in AWS API Gateway Validating the response in Lambda by getting the data from DynamoDB and sending the notification through AWS SNS experienced in querying data using SparkSQL on top of Spark engine for faster data sets processing Deploying application in Docker Container for custom environment and hosting in Elastic Beanstalk Developed and tested many features for dashboard using Python ROBOT framework Bootstrap CSS and JavaScript Experienced in converting business process into RDD transformations using Apache Spark and Scala Developed spark application working with Spark Context SparkSQL Data Frame Pair RDDs Troubleshooting problems related to packet or frame transfer across routers or switches using Wireshark Developed web applications and RESTful web services and APIs using Django Pyramid Maintained the Selenium and Python code and resources in source control like CVS SVN over the time for improvements and new features Worked in development of applications especially in Linux environment and familiar with all its commands PythonDjango Developer Dell Computer Corporation New York NY January 2016 to August 2017 Developed a portal to manage and entities in a content management system using Python and Django Utilized Jenkins to deploy the Django application and run unit tests Imported data from AWS S3 into Spark RDD Performed transformations and actions on RDDs Implemented system logging solution using Logstash Elasticsearch and Kibana Developing data processing tasks using PySpark such as reading data from external sources merge data perform data enrichment and load in to target data destinations Utilized pandas NumPy SciPy and nltk libraries to create unique reports and analysis Developed entire frontend and backend modules using Python on Django including Tastypieweb Framework using Git Node JS underscore JS Angular JS CSS and JavaScript Extracted log from Git using Python and performed data cleaning using regex to generate the Changelogs for comparing different software versions Worked on front end frame works like CSS Angular JS Bootstrap for development of Web application Creating custom general use modules and components which extend the elements and modules of core ReactJS Developed a fully automated continuous integration system using Git Gerrit Jenkins MySQL and custom tools developed in Python and Bash Developed REST API get post delete put functionalities for the application using Django Rest Framework Used Amazon Elastic Beanstalk with Amazon EC2 to deploy project into AWS and good experience with AWS storage services S3 Processed the Web server logs by developing MultiHop Flume agents by using Avro Sink and loaded into MongoDB for further analysis Extracted files from MongoDB through Sqoop and placed in HDFS and processed it using Hive Developed APIs in python with SQLAlchemy for ORM along with MongoDB documenting APIs in Swagger docs and deploying application over Jenkins Worked in DevOps group running Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Also gained familiarity with supporting technologies like kubernetes and Mesos Developed Spark Script with PySpark Java using PyCharm Spring Boot IDE that performs the internalization process Implemented the application using Python Spring IOC Inversion of Control Django Framework and handled the security using Python Spring Security Develop consumerbased features and applications using Python Django HTML Behavior Driven Development BDD and pairbased programming Used Python 3X NumPy spicy pandas scikitlearn seaborn and Spark 20 PySpark MLlib to develop variety of models and algorithms for analytic purposes Used Reactjs to specifically breeze the code by using a specific syntax called JSX in which Html and the JavaScript mixed making code simple Performed data processing on financial statements using NumPy Pandas Matplotlib and scikitlearn Worked with Splunk and Icinga2 for continuous monitoring on MySQL and Mongo Environments Worked in Python Integrated Development Environments like Pygame PyCharm Worked on mainly developing PySpark code using existing resources like QA code written in python Hanweck BRD to eliminate the previous flaws in design along with performance improvement Written Python Scripts to parse XML documents and load the data in database Worked with JSON based REST Web Services and Amazon Web Services AWS Python Developer Johnson Johnson New Brunswick NJ March 2012 to May 2015 Developed consumerbased features and applications using Python Django HTML and other web technologies Developed webbased application using Django framework with python concepts Built Elasticsearch Log stash and Kibana ELK to store logs and metrics into S3 bucket using Lambda function Achieved business process automation via applications developed using Git Gerrit Jenkins SQL server and custom tools developed in Python and Bash sed Reactjs framework to render the code we declare the code in the react Components then the react rendered and updated the code Developed Restful APIs using Python Flask and SQLAlchemy data models Developed webbased open stack applications using Python and Django for Big data analysis and using PySpark Developed entire frontend and backend modules using Python on Django Web Framework by implementing MVC architecture Maintain measurement website application UI with pandas and NumPy Wrote with objectoriented Python Flask SQL Beautiful Soup httplib2 Jinja2 HTMLCSS Bootstrap jQuery AJAX Linux Sublime Text GIT BuildingMaintaining Docker container clusters managed by Kubernetes Linux Bash GIT Docker on GCP Google Cloud Platform Utilized Kubernetes and Docker for the runtime environment of the CICD system to build test deploys Developed Restful APIs using Python Flask and SQLAlchemy data models as well as ensured code quality by writing unit tests using Pytest Worked in Python Integrated Development Environments like NetBeans PyDev PyCharm and Sublime Text Involved in design and implementation of Selenium WebDriver automation framework for smoke and regression test suites TestNG Developed entire frontend and backend modules using Python on Django Web Framework Used GitHub for Python source code version control Jenkins for automating the build Docker containers Used MySQL as backend database and MySQL dB of python as database connector to interact with MySQL server Education Masters Skills Git Javascript Jenkins Python Numpy",
    "extracted_keywords": [
        "Sr",
        "Python",
        "Developer",
        "Sr",
        "lPythonspan",
        "span",
        "lDeveloperspan",
        "Sr",
        "Python",
        "Developer",
        "Federated",
        "Wireless",
        "Arlington",
        "VA",
        "years",
        "experience",
        "core",
        "Python",
        "Developer",
        "Front",
        "endUI",
        "Developer",
        "web",
        "applications",
        "user",
        "Experience",
        "data",
        "Python",
        "R",
        "SQL",
        "Microsoft",
        "Excel",
        "Hive",
        "PySpark",
        "Spark",
        "SQL",
        "Data",
        "Mining",
        "Data",
        "Cleansing",
        "Data",
        "Munging",
        "Machine",
        "Learning",
        "Hands",
        "experience",
        "Designing",
        "APIs",
        "application",
        "Python",
        "Django",
        "MongoDB",
        "Express",
        "ReactJS",
        "NodeJS",
        "Experience",
        "Requests",
        "NumPy",
        "Matplotlib",
        "SciPy",
        "PySpark",
        "Pandas",
        "libraries",
        "development",
        "lifecycle",
        "CLI",
        "utility",
        "Parse",
        "database",
        "backups",
        "utility",
        "Parse",
        "Rest",
        "API",
        "user",
        "tables",
        "json",
        "files",
        "download",
        "temp",
        "folder",
        "files",
        "Amazon",
        "AWS",
        "S3",
        "bucket",
        "Parse",
        "Rest",
        "AWS",
        "Boto",
        "python",
        "experience",
        "APIs",
        "application",
        "Python",
        "Django",
        "MongoDB",
        "Express",
        "ReactJS",
        "NodeJS",
        "knowledge",
        "automation",
        "software",
        "Elasticsearch",
        "Cluster",
        "deployment",
        "python",
        "decorators",
        "generator",
        "list",
        "comprehensions",
        "JSON",
        "cache",
        "pandas",
        "NumPy",
        "python",
        "functions",
        "processing",
        "data",
        "Expertise",
        "client",
        "scripting",
        "languages",
        "JavaScript",
        "jQuery",
        "DOJO",
        "bootstrap",
        "Angularjs",
        "Hands",
        "Apache",
        "Spark",
        "jobs",
        "Scala",
        "test",
        "environment",
        "data",
        "processing",
        "Spark",
        "SQL",
        "Python",
        "Developer",
        "Architect",
        "micro",
        "web",
        "applications",
        "development",
        "Flask",
        "SQLAlchemy",
        "Experience",
        "AWS",
        "services",
        "S3",
        "EC2",
        "deployment",
        "services",
        "Lambda",
        "RDS",
        "DynamoDB",
        "NoSQL",
        "Beanstalk",
        "SQSand",
        "Jenkins",
        "CICD",
        "Experience",
        "AWS",
        "Beanstalk",
        "app",
        "deployments",
        "AWS",
        "lambda",
        "Amazon",
        "kinesis",
        "Container",
        "management",
        "Docker",
        "Docker",
        "files",
        "build",
        "Docker",
        "HUB",
        "Kubernetes",
        "experience",
        "SCM",
        "ChangeIncident",
        "Management",
        "VMware",
        "Cloud",
        "Jenkins",
        "pipeline",
        "preparation",
        "WebSphere",
        "Tomcat",
        "Docker",
        "applications",
        "deployments",
        "spark",
        "module",
        "data",
        "frame",
        "data",
        "files",
        "Experience",
        "applications",
        "use",
        "Python",
        "Python",
        "Python",
        "Django",
        "JavaScript",
        "jQuery",
        "XML",
        "CSS3",
        "HTML5",
        "DHTML",
        "Experience",
        "Automation",
        "scripts",
        "Selenium",
        "Win",
        "Runner",
        "Test",
        "ALM",
        "Automation",
        "testing",
        "process",
        "Experience",
        "Web",
        "development",
        "Python",
        "Django",
        "understanding",
        "ORM",
        "SQLAlchemy",
        "SQL",
        "ETL",
        "Linux",
        "task",
        "queues",
        "Celery",
        "RabbitMQ",
        "Devops",
        "experience",
        "Puppet",
        "Ansible",
        "Kubernetes",
        "Chef",
        "AWS",
        "OPS",
        "Work",
        "OpenStack",
        "Experience",
        "python",
        "PySpark",
        "shell",
        "script",
        "oracle",
        "scheduler",
        "Luigi",
        "Oracle",
        "Pl",
        "SQL",
        "working",
        "experience",
        "version",
        "control",
        "systems",
        "Git",
        "GitHub",
        "Handson",
        "experience",
        "web",
        "applications",
        "web",
        "services",
        "APIs",
        "Python",
        "Flask",
        "Django",
        "PHP",
        "US",
        "employer",
        "Work",
        "Experience",
        "Sr",
        "Python",
        "Developer",
        "Federated",
        "Wireless",
        "Arlington",
        "VA",
        "November",
        "Present",
        "application",
        "Python",
        "Django",
        "JavaScript",
        "Express",
        "ReactJS",
        "Node",
        "JS",
        "Express",
        "AJAX",
        "CSS",
        "HTML",
        "application",
        "TDD",
        "Test",
        "Driven",
        "Development",
        "approach",
        "Rest",
        "API",
        "DRF",
        "Django",
        "Rest",
        "Framework",
        "API",
        "module",
        "CDC",
        "change",
        "data",
        "capture",
        "python",
        "AWS",
        "GLUE",
        "PySpark",
        "library",
        "UI",
        "Validation",
        "Business",
        "logic",
        "user",
        "selection",
        "AngularJS",
        "web",
        "apps",
        "Python",
        "Flask",
        "framework",
        "Angularjs",
        "Bootstrap",
        "CSS",
        "HTML",
        "framework",
        "views",
        "procedures",
        "PDF",
        "files",
        "metadata",
        "Elasticsearch",
        "system",
        "development",
        "Web",
        "portals",
        "Database",
        "Modelling",
        "PostgreSQL",
        "end",
        "support",
        "HTMLCSS",
        "jQuery",
        "Understanding",
        "configuration",
        "Cloud",
        "Trail",
        "cloudsecurity",
        "VPC",
        "Security",
        "Groups",
        "cloudpermission",
        "systems",
        "IAM",
        "Backbone",
        "JS",
        "DOM",
        "manipulation",
        "web",
        "framework",
        "JS",
        "Experience",
        "Installing",
        "JenkinsPlugins",
        "GIT",
        "Repository",
        "Setup",
        "SCM",
        "Polling",
        "Immediate",
        "Build",
        "Maven",
        "Maven",
        "Repository",
        "Deployment",
        "apps",
        "custom",
        "modules",
        "Puppet",
        "CICD",
        "Process",
        "life",
        "cycle",
        "methods",
        "Initialization",
        "Mounting",
        "Updating",
        "Unmounting",
        "phases",
        "components",
        "life",
        "cycle",
        "quality",
        "React",
        "Js",
        "user",
        "interfaces",
        "requirements",
        "code",
        "Spark",
        "Hive",
        "HDFS",
        "HBase",
        "Elasticsearch",
        "Connected",
        "integration",
        "system",
        "GIT",
        "version",
        "control",
        "repository",
        "checkins",
        "developer",
        "HiveSQL",
        "queries",
        "Spark",
        "transformations",
        "Spark",
        "RDDs",
        "Python",
        "Scala",
        "Container",
        "management",
        "Docker",
        "Docker",
        "files",
        "build",
        "Docker",
        "HUB",
        "Kubernetes",
        "end",
        "frame",
        "CSS",
        "Bootstrap",
        "development",
        "Web",
        "application",
        "Golang",
        "Infrastructure",
        "Teams",
        "Engineering",
        "Productivity",
        "Kubernetes",
        "Docker",
        "influxDB",
        "Ansible",
        "Spinnaker",
        "Hadoop",
        "stack",
        "data",
        "tools",
        "Pig",
        "Hive",
        "HBase",
        "database",
        "DynamoDB",
        "Amazon",
        "Elastic",
        "Beanstalk",
        "Amazon",
        "EC2",
        "instance",
        "Django",
        "project",
        "AWS",
        "integration",
        "Jenkins",
        "Amazon",
        "EC2",
        "Responsible",
        "REST",
        "web",
        "services",
        "Python",
        "Flask",
        "framework",
        "Developed",
        "Serverside",
        "automation",
        "Node",
        "JS",
        "scripting",
        "types",
        "SQL",
        "NoSQL",
        "stores",
        "Node",
        "JS",
        "Developed",
        "Scala",
        "R",
        "Python",
        "expression",
        "regex",
        "project",
        "environment",
        "LinuxWindows",
        "data",
        "resources",
        "AVRO",
        "Parquet",
        "ORC",
        "file",
        "format",
        "compression",
        "formats",
        "Snappy",
        "data",
        "HDFS",
        "AWS",
        "services",
        "S3",
        "EC2",
        "deployment",
        "services",
        "Lambda",
        "RDS",
        "DynamoDB",
        "NoSQL",
        "Beanstalk",
        "SQSand",
        "Jenkins",
        "CICD",
        "development",
        "SQL",
        "procedures",
        "normalization",
        "denormalization",
        "MYSQL",
        "Developed",
        "Talend",
        "jobs",
        "configure",
        "RabbitMQ",
        "batch",
        "load",
        "data",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "efficiency",
        "storage",
        "access",
        "Celery",
        "RabbitMQ",
        "MySQL",
        "Django",
        "Flask",
        "worker",
        "framework",
        "automation",
        "Jenkins",
        "integration",
        "delivery",
        "CICD",
        "Amazon",
        "EC2",
        "Spark",
        "Streaming",
        "APIs",
        "transformations",
        "actions",
        "fly",
        "optimization",
        "techniques",
        "page",
        "size",
        "load",
        "times",
        "user",
        "experience",
        "sprites",
        "MYSQL",
        "database",
        "python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "package",
        "information",
        "Written",
        "Pig",
        "scripts",
        "data",
        "Avro",
        "Data",
        "files",
        "Avro",
        "Serialization",
        "system",
        "Spark",
        "Streaming",
        "streaming",
        "data",
        "batches",
        "input",
        "Spark",
        "engine",
        "batch",
        "processing",
        "data",
        "PostgreSQL",
        "Cassandra",
        "Redis",
        "InfluxDB",
        "Elastic",
        "Search",
        "Python",
        "library",
        "NumPy",
        "errors",
        "reports",
        "spark",
        "code",
        "cluster",
        "mode",
        "framework",
        "web",
        "services",
        "AmazonEC2",
        "Spark",
        "Framework",
        "Java",
        "Web",
        "Frame",
        "work",
        "deal",
        "AWS",
        "cloud",
        "services",
        "EC2",
        "S3",
        "Realtime",
        "Processing",
        "core",
        "jobs",
        "Spark",
        "Streaming",
        "Kafka",
        "Data",
        "pipeline",
        "system",
        "variety",
        "network",
        "equipment",
        "PCs",
        "servers",
        "printers",
        "devices",
        "automation",
        "web",
        "development",
        "engineering",
        "environment",
        "tools",
        "JIRA",
        "Jenkins",
        "Git",
        "Chef",
        "Selenium",
        "Python",
        "NumPy",
        "matplotlib",
        "reports",
        "Python",
        "Developer",
        "Mercedes",
        "Benz",
        "Credit",
        "Reston",
        "VA",
        "April",
        "October",
        "Application",
        "architecture",
        "Python",
        "Django",
        "JSF",
        "Spring",
        "Ajax",
        "HTML",
        "CSS",
        "frontend",
        "frontend",
        "user",
        "interfaces",
        "HTML",
        "CSS",
        "JavaScript",
        "jQuery",
        "AngularJS",
        "Mongo",
        "DB",
        "Stable",
        "React",
        "JS",
        "components",
        "functions",
        "pages",
        "Kubernetes",
        "platform",
        "deployment",
        "scaling",
        "operations",
        "application",
        "containers",
        "clusters",
        "hosts",
        "Jenkins",
        "jobs",
        "AWS",
        "infrastructure",
        "GitHub",
        "repos",
        "terraform",
        "code",
        "Python",
        "Flask",
        "SQL",
        "Beautiful",
        "Soup",
        "httplib2",
        "Jinja2",
        "HTMLCSS",
        "Bootstrap",
        "jQuery",
        "Linux",
        "Sublime",
        "Text",
        "GIT",
        "user",
        "interface",
        "guidelines",
        "standards",
        "development",
        "maintenance",
        "website",
        "HTML",
        "CSS",
        "JavaScript",
        "jQuery",
        "Developed",
        "web",
        "services",
        "Nodejs",
        "dependencies",
        "Node",
        "Package",
        "Manager",
        "NPM",
        "Developed",
        "User",
        "Interface",
        "frontend",
        "technologies",
        "HTML",
        "CSS",
        "JavaScript",
        "jQuery",
        "AngularJS",
        "Bootstrap",
        "JSON",
        "Meteor",
        "framework",
        "Single",
        "Page",
        "Application",
        "development",
        "React",
        "JS",
        "components",
        "JSX",
        "React",
        "components",
        "DOM",
        "React",
        "Props",
        "Lifecycle",
        "methods",
        "React",
        "States",
        "Events",
        "Analysis",
        "logs",
        "data",
        "filter",
        "columns",
        "Logstash",
        "configuration",
        "Elasticsearch",
        "Design",
        "test",
        "cases",
        "REST",
        "API",
        "REST",
        "API",
        "test",
        "framework",
        "development",
        "serverside",
        "applications",
        "Django",
        "Python",
        "programming",
        "python",
        "libraries",
        "Beautiful",
        "Soup",
        "matplotlib",
        "SciPy",
        "NumPy",
        "Nodejs",
        "backend",
        "client",
        "web",
        "application",
        "procedures",
        "text",
        "analytics",
        "processing",
        "inmemory",
        "computing",
        "capabilities",
        "Apache",
        "Spark",
        "Scala",
        "Python",
        "MongoDB",
        "ReactJS",
        "design",
        "development",
        "deployment",
        "application",
        "Elasticsearch",
        "Framework",
        "web",
        "applications",
        "model",
        "view",
        "control",
        "architecture",
        "Amazon",
        "Elastic",
        "Beanstalk",
        "Amazon",
        "EC2",
        "instance",
        "Django",
        "project",
        "AWS",
        "integration",
        "Jenkins",
        "Amazon",
        "EC2",
        "scripts",
        "performance",
        "calculations",
        "NumPy",
        "SQLAlchemy",
        "Optimization",
        "load",
        "workflows",
        "queues",
        "RabbitMQ",
        "performance",
        "downtime",
        "stakeholders",
        "Webservices",
        "development",
        "Python",
        "CherryPy",
        "Django",
        "SQLAlchemy",
        "delta",
        "file",
        "file",
        "UPDATES",
        "DELETES",
        "python",
        "PySpark",
        "modules",
        "S3",
        "reporting",
        "process",
        "Python",
        "Luigi",
        "library",
        "task",
        "workflow",
        "dependencies",
        "APIs",
        "Integrated",
        "AWSRDS",
        "Oracle",
        "Aurora",
        "DBs",
        "AWSHive",
        "EMR",
        "DynamoDB",
        "connect",
        "Launched",
        "Kubernetes",
        "platform",
        "deployment",
        "scaling",
        "operations",
        "application",
        "containers",
        "clusters",
        "hosts",
        "notification",
        "service",
        "request",
        "AWS",
        "API",
        "Gateway",
        "response",
        "Lambda",
        "data",
        "DynamoDB",
        "notification",
        "AWS",
        "SNS",
        "data",
        "SparkSQL",
        "top",
        "Spark",
        "engine",
        "data",
        "sets",
        "Deploying",
        "application",
        "Docker",
        "Container",
        "custom",
        "environment",
        "Elastic",
        "Beanstalk",
        "Developed",
        "features",
        "dashboard",
        "Python",
        "ROBOT",
        "framework",
        "Bootstrap",
        "CSS",
        "JavaScript",
        "business",
        "process",
        "RDD",
        "transformations",
        "Apache",
        "Spark",
        "Scala",
        "spark",
        "application",
        "Spark",
        "Context",
        "SparkSQL",
        "Data",
        "Frame",
        "Pair",
        "RDDs",
        "Troubleshooting",
        "problems",
        "packet",
        "frame",
        "transfer",
        "routers",
        "switches",
        "Wireshark",
        "Developed",
        "web",
        "applications",
        "web",
        "services",
        "APIs",
        "Django",
        "Pyramid",
        "Selenium",
        "Python",
        "code",
        "resources",
        "source",
        "control",
        "CVS",
        "SVN",
        "time",
        "improvements",
        "features",
        "development",
        "applications",
        "Linux",
        "environment",
        "commands",
        "PythonDjango",
        "Developer",
        "Dell",
        "Computer",
        "Corporation",
        "New",
        "York",
        "NY",
        "January",
        "August",
        "portal",
        "entities",
        "content",
        "management",
        "system",
        "Python",
        "Django",
        "Jenkins",
        "Django",
        "application",
        "unit",
        "data",
        "AWS",
        "S3",
        "Spark",
        "transformations",
        "actions",
        "RDDs",
        "system",
        "solution",
        "Logstash",
        "Elasticsearch",
        "Kibana",
        "data",
        "processing",
        "tasks",
        "PySpark",
        "data",
        "sources",
        "data",
        "data",
        "enrichment",
        "load",
        "data",
        "destinations",
        "NumPy",
        "SciPy",
        "nltk",
        "reports",
        "analysis",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Tastypieweb",
        "Framework",
        "Git",
        "Node",
        "JS",
        "JS",
        "Angular",
        "JS",
        "CSS",
        "JavaScript",
        "log",
        "Git",
        "Python",
        "data",
        "regex",
        "Changelogs",
        "software",
        "versions",
        "end",
        "frame",
        "CSS",
        "Angular",
        "JS",
        "Bootstrap",
        "development",
        "Web",
        "application",
        "custom",
        "general",
        "use",
        "modules",
        "components",
        "elements",
        "modules",
        "core",
        "ReactJS",
        "integration",
        "system",
        "Git",
        "Gerrit",
        "Jenkins",
        "MySQL",
        "custom",
        "tools",
        "Python",
        "Bash",
        "Developed",
        "REST",
        "API",
        "post",
        "functionalities",
        "application",
        "Django",
        "Rest",
        "Framework",
        "Amazon",
        "Elastic",
        "Beanstalk",
        "Amazon",
        "EC2",
        "project",
        "AWS",
        "experience",
        "AWS",
        "storage",
        "services",
        "S3",
        "Web",
        "server",
        "logs",
        "MultiHop",
        "Flume",
        "agents",
        "Avro",
        "Sink",
        "analysis",
        "files",
        "Sqoop",
        "HDFS",
        "Hive",
        "Developed",
        "APIs",
        "python",
        "SQLAlchemy",
        "ORM",
        "MongoDB",
        "APIs",
        "Swagger",
        "docs",
        "application",
        "Jenkins",
        "Worked",
        "DevOps",
        "group",
        "Jenkins",
        "Docker",
        "container",
        "EC2",
        "slaves",
        "Amazon",
        "AWS",
        "cloud",
        "configuration",
        "familiarity",
        "technologies",
        "kubernetes",
        "Mesos",
        "Developed",
        "Spark",
        "Script",
        "PySpark",
        "Java",
        "PyCharm",
        "Spring",
        "Boot",
        "IDE",
        "internalization",
        "process",
        "application",
        "Python",
        "Spring",
        "IOC",
        "Inversion",
        "Control",
        "Django",
        "Framework",
        "security",
        "Python",
        "Spring",
        "Security",
        "Develop",
        "features",
        "applications",
        "Python",
        "Django",
        "HTML",
        "Behavior",
        "Driven",
        "Development",
        "BDD",
        "programming",
        "Python",
        "3X",
        "NumPy",
        "spicy",
        "pandas",
        "Spark",
        "PySpark",
        "MLlib",
        "variety",
        "models",
        "algorithms",
        "purposes",
        "Reactjs",
        "code",
        "syntax",
        "JSX",
        "Html",
        "JavaScript",
        "code",
        "Performed",
        "data",
        "processing",
        "statements",
        "NumPy",
        "Pandas",
        "Matplotlib",
        "Worked",
        "Splunk",
        "Icinga2",
        "monitoring",
        "MySQL",
        "Mongo",
        "Environments",
        "Python",
        "Integrated",
        "Development",
        "Environments",
        "Pygame",
        "PyCharm",
        "PySpark",
        "code",
        "resources",
        "QA",
        "code",
        "python",
        "Hanweck",
        "BRD",
        "flaws",
        "design",
        "performance",
        "improvement",
        "Written",
        "Python",
        "Scripts",
        "XML",
        "documents",
        "data",
        "database",
        "JSON",
        "REST",
        "Web",
        "Services",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "Python",
        "Developer",
        "Johnson",
        "Johnson",
        "New",
        "Brunswick",
        "NJ",
        "March",
        "May",
        "Developed",
        "features",
        "applications",
        "Python",
        "Django",
        "HTML",
        "web",
        "technologies",
        "application",
        "Django",
        "framework",
        "concepts",
        "Elasticsearch",
        "Log",
        "stash",
        "Kibana",
        "ELK",
        "logs",
        "metrics",
        "S3",
        "bucket",
        "Lambda",
        "function",
        "business",
        "process",
        "automation",
        "applications",
        "Git",
        "Gerrit",
        "Jenkins",
        "SQL",
        "server",
        "custom",
        "tools",
        "Python",
        "Bash",
        "Reactjs",
        "framework",
        "code",
        "code",
        "react",
        "Components",
        "react",
        "code",
        "APIs",
        "Python",
        "Flask",
        "SQLAlchemy",
        "data",
        "models",
        "stack",
        "applications",
        "Python",
        "Django",
        "data",
        "analysis",
        "PySpark",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Web",
        "Framework",
        "MVC",
        "architecture",
        "Maintain",
        "measurement",
        "website",
        "application",
        "UI",
        "pandas",
        "NumPy",
        "Wrote",
        "Python",
        "Flask",
        "SQL",
        "Beautiful",
        "Soup",
        "httplib2",
        "Jinja2",
        "HTMLCSS",
        "Bootstrap",
        "jQuery",
        "AJAX",
        "Linux",
        "Sublime",
        "Text",
        "GIT",
        "BuildingMaintaining",
        "Docker",
        "container",
        "clusters",
        "Kubernetes",
        "Linux",
        "Bash",
        "GIT",
        "Docker",
        "GCP",
        "Google",
        "Cloud",
        "Platform",
        "Kubernetes",
        "Docker",
        "runtime",
        "environment",
        "CICD",
        "system",
        "test",
        "deploys",
        "APIs",
        "Python",
        "Flask",
        "SQLAlchemy",
        "data",
        "models",
        "code",
        "quality",
        "unit",
        "tests",
        "Pytest",
        "Worked",
        "Python",
        "Integrated",
        "Development",
        "Environments",
        "NetBeans",
        "PyDev",
        "PyCharm",
        "Sublime",
        "Text",
        "design",
        "implementation",
        "Selenium",
        "WebDriver",
        "automation",
        "framework",
        "smoke",
        "regression",
        "test",
        "TestNG",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Web",
        "Framework",
        "GitHub",
        "Python",
        "source",
        "code",
        "version",
        "control",
        "Jenkins",
        "build",
        "Docker",
        "containers",
        "MySQL",
        "database",
        "MySQL",
        "dB",
        "python",
        "database",
        "connector",
        "MySQL",
        "server",
        "Education",
        "Masters",
        "Skills",
        "Git",
        "Javascript",
        "Jenkins",
        "Python",
        "Numpy"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T22:18:16.403621",
    "resume_data": "Sr Python Developer Sr span lPythonspan span lDeveloperspan Sr Python Developer Federated Wireless Arlington VA 7 years of industrial experience working as a core Python Developer and Front endUI Developer responsible in developing interactive web applications with valuable intuitive user experiences Experience in analyzing data using Python R SQL Microsoft Excel Hive PySpark Spark SQL for Data Mining Data Cleansing Data Munging and Machine Learning Hands on experience in Designing and developing APIs for the application using Python Django MongoDB Express ReactJS and NodeJS Experience with Requests NumPy Matplotlib SciPy PySpark and Pandas python libraries during development lifecycle Developed a CLI utility to allow daily Parse database backups The utility is using Parse Rest API to export user tables into json files download into temp folder then upload these files into Amazon AWS S3 bucket I used Parse Rest AWS Boto and other python libraries Primary experience in developing APIs for the application using Python Django MongoDB Express ReactJS and NodeJS Good knowledge on developing automation software for Elasticsearch Cluster deployment Used python decorators generator list comprehensions list JSON cache pandas and NumPy for building python functions for processing of data Expertise in client scripting languages like JavaScript jQuery JSON DOJO bootstrap Angularjs Hands on Apache Spark jobs using Scala in test environment for faster data processing and used Spark SQL for querying As a Python Developer Architect Worked on various micro web applications development using Flask and SQLAlchemy Experience in AWS services S3 EC2 and deployment services Lambda and RDS DynamoDB NoSQL Beanstalk SQSand Jenkins CICD Experience in AWS Elastic Beanstalk for app deployments and worked on AWS lambda with Amazon kinesis Container management using Docker by writing Docker files and set up the automated build on Docker HUB and installed and configured Kubernetes Extensive experience includes SCM ChangeIncident Management VMware and AWS Cloud computing Jenkins pipeline preparation for WebSphere Tomcat and Docker based applications deployments Experienced in creating spark module using data frame to read data from parquet files Experience in webbased applications with extensive use of Python 27 Python 33 Python 34 Django 1413 JavaScript jQuery XML CSS3 HTML5 DHTML Experience in Automation scripts by using Selenium and Win Runner also used Test DirectorHP ALM to manage the entire Automation testing process Experience in Web development with Python and Django with good understanding of ORM and SQLAlchemy SQL ETL Linux Asynchronous task queues with Celery and RabbitMQ Devops experience with Puppet Ansible Kubernetes Chef AWS OPS Work and OpenStack Experience in python PySpark shell script oracle scheduler Luigi Oracle Pl SQL etc Good working experience in using version control systems Git and GitHub Handson experience in developing web applications and RESTful web services and APIs using Python Flask Django and PHP Authorized to work in the US for any employer Work Experience Sr Python Developer Federated Wireless Arlington VA November 2018 to Present Involved in developing webbased application using Python Django JavaScript Express ReactJS Node JS Express AJAX CSS and HTML On SWNG application initiate TDD Test Driven Development approach to update Rest API from DRF Django Rest Framework to Rest API Designed and developed an entire module called CDC change data capture in python and deployed in AWS GLUE using PySpark library and python Responsible for all clientside UI Validation and implementing Business logic based on user selection AngularJS 2 Developed internal auxiliary web apps using Python Flask framework with Angularjs and Bootstrap CSS HTML framework Created views and stored procedures which organized PDF files with additional metadata that is indexed into the Elasticsearch system Supported development of Web portals completed Database Modelling in PostgreSQL front end support in HTMLCSS jQuery Understanding of securecloud configuration Cloud Trail cloudsecurity technologies VPC Security Groups etc and cloudpermission systems IAM Implemented the Backbone JS for DOM manipulation as this is the light web framework compared to Angular JS Experience in Installing JenkinsPlugins for GIT Repository Setup SCM Polling for Immediate Build with Maven and Maven Repository and Deployment of apps using custom modules through Puppet as a CICD Process Effectively used the life cycle methods such as Initialization Mounting Updating and Unmounting and invoked them at different phases of the components life cycle to develop quality React Js user interfaces Documented the requirements including the available code which should be implemented using Spark Hive HDFS HBase and Elasticsearch Connected continuous integration system with GIT version control repository and continually build as the checkins come from the developer Involved in converting HiveSQL queries into Spark transformations using Spark RDDs Python and Scala Container management using Docker by writing Docker files and set up the automated build on Docker HUB and installed and configured Kubernetes Worked on front end frame works like CSS Bootstrap for development of Web application Golang Infrastructure Teams and Engineering Productivity utilizing Kubernetes Docker influxDB Ansible Spinnaker Worked on analyzing Hadoop stack and different big data analytic tools including Pig Hive HBase database and DynamoDB Used Amazon Elastic Beanstalk with Amazon EC2 instance to deploy Django project into AWS Configured continuous integration with Jenkins on Amazon EC2 Responsible for designing and developing REST web services in Python using Flask and flaskrestful framework Developed Serverside automation using Node JS scripting and connecting different types of SQL and NoSQL stores from Node JS Developed Scala R Python for regular expression regex project in the HadoopHive environment with LinuxWindows for big data resources Worked with AVRO Parquet and ORC file format and various compression formats like Snappy to store data into HDFS Worked on AWS services S3 EC2 and deployment services Lambda and RDS DynamoDB NoSQL Beanstalk SQSand Jenkins CICD Worked on the development of SQL and stored procedures for normalization and denormalization in MYSQL Developed Talend jobs to configure RabbitMQ for batch load on data Used Amazon Web Services AWS for improved efficiency of storage and fast access Used Celery with RabbitMQ MySQL Django and Flask to create a distributed worker framework Used automation Jenkins for continuous integration and continuous delivery CICD on Amazon EC2 Used Spark Streaming APIs to perform transformations and actions on the fly for building common Applied optimization techniques to reduce page size and load times to enhance user experience using sprites Executed MYSQL database queries from python using PythonMySQL connector and MySQL dB package to retrieve information Written Pig scripts for sorting joining and grouping the data Experienced with working on Avro Data files using Avro Serialization system Used Spark Streaming to divide streaming data into batches as an input to Spark engine for batch processing Extracted data from PostgreSQL Cassandra Redis InfluxDB and Elastic Search Wrote a Python library built on NumPy and sklearn to detect errors on daily reports Debugging the spark code using local and in cluster mode Designed and developed the framework to consume the web services hosted in AmazonEC2 Worked on implementing Spark Framework a Java based Web Frame work Worked and learned a great deal from AWS cloud services like EC2 S3 Experienced in writing live Realtime Processing and core jobs using Spark Streaming with Kafka as a Data pipeline system Installing configuring maintaining and troubleshooting a wide variety of network equipment from PCs and servers to printers and standalone devices Experienced with automation web development and engineering environment tools such as JIRA Jenkins Git Chef Selenium Utilized Python libraries like NumPy and matplotlib for generating graphical reports Python Developer Mercedes Benz Credit Reston VA April 2018 to October 2018 Created an Application was based on serviceoriented architecture and used Python Django JSF Spring Ajax HTML CSS for the frontend Developed scalable frontend user interfaces using HTML CSS and JavaScript jQuery AngularJS and Mongo DB Implemented Stable React JS components and Standalone functions to be added to any future pages Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Built Jenkins jobs to create AWS infrastructure from GitHub repos containing terraform code Wrote with objectoriented Python Flask SQL Beautiful Soup httplib2 Jinja2 HTMLCSS Bootstrap jQuery Linux Sublime Text GIT Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML CSS JavaScript and jQuery Developed backend web services using Nodejs and stored dependencies using Node Package Manager NPM Designed and Developed User Interface using frontend technologies like HTML CSS JavaScript jQuery AngularJS Bootstrap and JSON Involved in developing the AngularJS Meteor framework for the Single Page Application development Used React JS in components like JSX creating React components Virtual DOM React Props Lifecycle methods working with the React States and Events Analysis the logs data and filter required columns by Logstash configuration and send it to Elasticsearch Design and developed the test cases for REST API Involved REST API test framework development Worked on serverside applications with Django using Python programming and used python libraries like Beautiful Soup matplotlib SciPy NumPy and Built efficient Nodejs backend for client web application Implemented advanced procedures like text analytics and processing using the inmemory computing capabilities like Apache Spark written in Scala Involved in using Python MongoDB and ReactJS for the design development and deployment of the application Used Elasticsearch Framework for developing web applications using model view control architecture Used Amazon Elastic Beanstalk with Amazon EC2 instance to deploy Django project into AWS Configured continuous integration with Jenkins on Amazon EC2 Automated the existing scripts for performance calculations using NumPy and SQLAlchemy Optimization of heavy load workflows via queues RabbitMQ for enhanced performance and less downtime for stakeholders Involved in working with Webservices backend development using Python CherryPy Django and SQLAlchemy Built a delta file from full file by identifying only INSERTS UPDATES and DELETES by using python and PySpark modules and store it in S3 Automated a reporting process using Python Luigi library for task workflow and dependencies and another APIs Integrated AWSRDS Oracle and Aurora DBs to AWSHive EMR using DynamoDB with direct connect Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Developed the notification service by posting the JSON request in AWS API Gateway Validating the response in Lambda by getting the data from DynamoDB and sending the notification through AWS SNS experienced in querying data using SparkSQL on top of Spark engine for faster data sets processing Deploying application in Docker Container for custom environment and hosting in Elastic Beanstalk Developed and tested many features for dashboard using Python ROBOT framework Bootstrap CSS and JavaScript Experienced in converting business process into RDD transformations using Apache Spark and Scala Developed spark application working with Spark Context SparkSQL Data Frame Pair RDDs Troubleshooting problems related to packet or frame transfer across routers or switches using Wireshark Developed web applications and RESTful web services and APIs using Django Pyramid Maintained the Selenium and Python code and resources in source control like CVS SVN over the time for improvements and new features Worked in development of applications especially in Linux environment and familiar with all its commands PythonDjango Developer Dell Computer Corporation New York NY January 2016 to August 2017 Developed a portal to manage and entities in a content management system using Python and Django Utilized Jenkins to deploy the Django application and run unit tests Imported data from AWS S3 into Spark RDD Performed transformations and actions on RDDs Implemented system logging solution using Logstash Elasticsearch and Kibana Developing data processing tasks using PySpark such as reading data from external sources merge data perform data enrichment and load in to target data destinations Utilized pandas NumPy SciPy and nltk libraries to create unique reports and analysis Developed entire frontend and backend modules using Python on Django including Tastypieweb Framework using Git Node JS underscore JS Angular JS CSS and JavaScript Extracted log from Git using Python and performed data cleaning using regex to generate the Changelogs for comparing different software versions Worked on front end frame works like CSS Angular JS Bootstrap for development of Web application Creating custom general use modules and components which extend the elements and modules of core ReactJS Developed a fully automated continuous integration system using Git Gerrit Jenkins MySQL and custom tools developed in Python and Bash Developed REST API get post delete put functionalities for the application using Django Rest Framework Used Amazon Elastic Beanstalk with Amazon EC2 to deploy project into AWS and good experience with AWS storage services S3 Processed the Web server logs by developing MultiHop Flume agents by using Avro Sink and loaded into MongoDB for further analysis Extracted files from MongoDB through Sqoop and placed in HDFS and processed it using Hive Developed APIs in python with SQLAlchemy for ORM along with MongoDB documenting APIs in Swagger docs and deploying application over Jenkins Worked in DevOps group running Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Also gained familiarity with supporting technologies like kubernetes and Mesos Developed Spark Script with PySpark Java using PyCharm Spring Boot IDE that performs the internalization process Implemented the application using Python Spring IOC Inversion of Control Django Framework and handled the security using Python Spring Security Develop consumerbased features and applications using Python Django HTML Behavior Driven Development BDD and pairbased programming Used Python 3X NumPy spicy pandas scikitlearn seaborn and Spark 20 PySpark MLlib to develop variety of models and algorithms for analytic purposes Used Reactjs to specifically breeze the code by using a specific syntax called JSX in which Html and the JavaScript mixed making code simple Performed data processing on financial statements using NumPy Pandas Matplotlib and scikitlearn Worked with Splunk and Icinga2 for continuous monitoring on MySQL and Mongo Environments Worked in Python Integrated Development Environments like Pygame PyCharm Worked on mainly developing PySpark code using existing resources like QA code written in python Hanweck BRD to eliminate the previous flaws in design along with performance improvement Written Python Scripts to parse XML documents and load the data in database Worked with JSON based REST Web Services and Amazon Web Services AWS Python Developer Johnson Johnson New Brunswick NJ March 2012 to May 2015 Developed consumerbased features and applications using Python Django HTML and other web technologies Developed webbased application using Django framework with python concepts Built Elasticsearch Log stash and Kibana ELK to store logs and metrics into S3 bucket using Lambda function Achieved business process automation via applications developed using Git Gerrit Jenkins SQL server and custom tools developed in Python and Bash sed Reactjs framework to render the code we declare the code in the react Components then the react rendered and updated the code Developed Restful APIs using Python Flask and SQLAlchemy data models Developed webbased open stack applications using Python and Django for Big data analysis and using PySpark Developed entire frontend and backend modules using Python on Django Web Framework by implementing MVC architecture Maintain measurement website application UI with pandas and NumPy Wrote with objectoriented Python Flask SQL Beautiful Soup httplib2 Jinja2 HTMLCSS Bootstrap jQuery AJAX Linux Sublime Text GIT BuildingMaintaining Docker container clusters managed by Kubernetes Linux Bash GIT Docker on GCP Google Cloud Platform Utilized Kubernetes and Docker for the runtime environment of the CICD system to build test deploys Developed Restful APIs using Python Flask and SQLAlchemy data models as well as ensured code quality by writing unit tests using Pytest Worked in Python Integrated Development Environments like NetBeans PyDev PyCharm and Sublime Text Involved in design and implementation of Selenium WebDriver automation framework for smoke and regression test suites TestNG Developed entire frontend and backend modules using Python on Django Web Framework Used GitHub for Python source code version control Jenkins for automating the build Docker containers Used MySQL as backend database and MySQL dB of python as database connector to interact with MySQL server Education Masters Skills Git Javascript Jenkins Python Numpy",
    "unique_id": "beb89499-6750-424c-bc99-340f9a33e801"
}