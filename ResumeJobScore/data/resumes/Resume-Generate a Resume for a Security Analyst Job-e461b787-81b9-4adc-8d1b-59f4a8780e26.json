{
    "clean_data": "Full Stack Java Developer iii Full Stack span lJavaspan span lDeveloperspan iii Full Stack Java Developer iii Kroger Specialty Pharmacy Lake Mary FL Over 9 years of experience in design and development in the domain of Pharmaceutical Financial Insurance and Telecommunications applications using Internet technologies based on Java and J2EE Technologies Strong Experience in Software Development methodologies based on Agile Scrum Waterfall TDD Iterative Extensive experience in designing professional UI web applications using frontend technologies like HTMLHTML5 CSSCSS3 JavaScript XML DHTML XHTML jQuery JSON Angular JSNodejs Angular 2040and Bootstrap Implemented several design patterns such as Business Delegate Service Locator Singleton Object Factory Front Controller Factory Design pattern Singleton and Proxy Design Pattern Experience in building web applications using spring framework features like MVC AOP DAO Data Access Object SpringBoot SpringSecurity SpringJDBC templates SpringBatch Developing Applications using latest JavaJ2EE technologies such as Cassandra Java 8 Junitand Cucumber Good Exposure to implementing Service Oriented Architecture SOA using Web Services including SOAP JAXWS JAXRS SOAP UI tool andconcreteRESTful APIs Experience in using ReactJS components Forms Events Keys Router plus Redux and Flux concept Experience with Hibernate Persistence Framework and Design patterns like Singleton Factory Session Facade Business Delegate Data Access Object Data Transfer Object Expertise in working with cloud services like AWS and NoSQL databases like Cassandra MongoDB Experience with spark to handle streaming data and Scala for the batch processing and spark streaming data Mocked validated and documented Web API SwaggerPostman Hands on experience in amazon webservices which includes Cloud Formation Elastic Load Balancer ElasticBean Stalk Cloud  ServerMigration Route53 SQS VPC S3 DynamoDB EC2 Container Service Lambda Extensive experience of working with RDBMS like Oracle 11g12c MySQL SQL Server and developing Stored Procedures Triggers Views Functions and SQL Queries Executed a continuous delivery pipeline with Docker JenkinsHudsonGitHub and AWSAMIs results in generating of new docker container whenever a new GitHub branch get started Experience in deploying and configuring multitier enterprise applications on multiple servers such as Web logic Server JBoss WebSphere and Apache Tomcat Experience in TDD using JUnit framework with Mockito and Easy mock Spring Junit Runner Experienced in using Log4j and good expertise in application build tools like ANT Gradle and Maven Experience in the use of Defect Tracking Version Management Tools such as SVN CVS GIT Experience with unit testing the applications using Junit and JMeter Used various issue and bug tracking tools like JIRA Bitbucket Authorized to work in the US for any employer Work Experience Full Stack Java Developer iii Kroger Specialty Pharmacy Lake Mary FL January 2018 to Present KrogerSpecialtyPharmacy KSP is one of the highly innovative team situated in Krogers own newly remodelled Digital Group Kroger delivers Web Mobile ecommerce ApplicationsPortals that provide users a worldclass digital UI shopping experiences KSP serves physicians patients and health care providers throughout the United States with their first ever services like online drug refill options KSP Portal is extremely organized for patients to login to their own account and can look at their current Prescriptions Drug usage Refills etc in such a way that It is easy to get their order in and they are fast Theres no waiting for paperwork to move from desk to desk They can find answers very fast Highlights of the application can be the Leftnav navigation where it provides links to MyPrescriptions Sign Up Prescription history Refills Auto Refill of drugs Find a Pharmacy ManagePatients Patient Profile Page Add a Patient Patient Access DrugInfo Medication Tool box Pet medications PharmacyServices Patient Wellness Services Vaccinations Diabetic Needs FAQs Responsibilities Followed Scaled Agile Scrum Methodology for developing Web Application with a twoweek sprint Gained experience with full stack development including frontend and backend programming database management and user authentication Created WebBootstrap application using Reactjs Redux JavaScript Java Kotlin SQLServer DockerImages Nginx Kafka Zookeeper Broker Managers JUnit and Enzyme Used both Java and React to develop MVP for client for the SPA of pixel perfect UI Responsible for designingbuilding all functional aspects of the feature in both frontend and backend Developed frontend for a web application that closely mirrors the CVS pharmacy application with ReactJSNodejs JavaScriptHTML Bootstrap and CSS Developed Pharmacy Management RESTful APIs using Microservicearchitecture interacting through a combination of ApacheKafka Zookeeper message brokers and Pivotal Cloud Foundry PCF Developed Responsive Single Page Applications SPA using ReactJS and rendering pages on the server side for faster loading and updating by 3x Used Multiple repositories like Rxapp for UI on presentation layer Rxbff backend for front end API and PatientserviceAPI on service layer with Securitybff in security layer connecting with a thirdparty data base CPR DB from GitLab and Bitbucket Utilized J2EE technologies objectoriented programming and Core Java for creating new features based on business requirements to improve pharmacy workflow efficiency Having enough knowledge on GitBitbucket Yarn NpmBabel Docker etc and have rich experience in integrating Unit testing tools such as Jest Enzyme Mocha etc Used SourceTree GitGUI for creating the feature branches and merge the feature branches into Develop or Master Branches following the git lifecycle phases Used SSMS SQL Server Management Studio to get the bak files provided by third party data base CPR Used StoredProcedures for applications that needed to execute as part of a scheduling mechanisms Experienced in developing complex builds dependency management and continuous integration using Gradle Maven Ant Jenkins Artifactory Nexus and Bash shell scripting for deploying Java Kotlin applications Designed CICD processPipelines across multiple servers using Jenkins and Git Used JIRA for defect management and to keep track of bugs and issues following the swim lanes in it Prepared documentationSpikes for some of the recurring defects and resolutions and business comments for those defects Environment JAVA J2EE JDK8 Kotlin Reactjs Nodejs JavaScript HTML CSS jQuery SQL Server Microservice Architecture REST APIs Gradle Maven Jenkins PCF JUnit Enzyme GitLab Bitbucket Full Stack Java Developer CenturyLink CO June 2017 to December 2018 CenturyLink is an American Telecommunications company that provides communications and data services to residential business governmental and wholesale customers in 37 statesApriliaFiber plus is a fastmoving project which had a 45 day deliverable It contains modules like Solution engine Validation services Camunda Bpm SFDC ARM LIMSDatalake using SpringBoot project for solution Maven modulestwo flavors technology and solutionsolution engine Microservice based solution SpringBoot Java MongoDB strategic platform replica set secondary and primary preferred automation dedicated infrastructure two machines solution engine validation engine Pronghornphysical layerRest exposed APIs Responsibilities Involved in analysis and design and development of the project which is based on MVC ModelViewController Architecture and Design Patterns Participated in Scrum meetings with the team on daily basis and weekly team meetings every week Used Swagger and Postmantools in testing the Rest API endpoints and swagger gives the rich UI to test API Used JSON for the data transmission between UI and server Strong programming skills in designing and implementation of multitier applications using webbased technologies like Spring MVC and Spring Boot 158 Used SpringBoot framework to create properties for various environments and usedyml files for configuration Created SpringBoot applications to connect them to various databases and generated queries to retrieve data and modify the collections in the MongoDB Developed Microservices with SpringBoot and SpringBatch along with the test cases Experience in development and deployment of java basedREST services using SpringBoot Used Rest Controller in Spring framework to create RESTfulWebservices and JSON objects for communication Used Tomcat server for application deployment Developed WebServices to transfer data between client and server vice versa using REST WSDL and UDDI Responsible for coding NoSQL Statements and Stored procedures for back end communication and persisting of data using NoSqlBoosterMongoBooster 32 Infrastructure setup for all the network elements provided in Mongoservices module Performed CRUD Create Read Update Deleteoperations on the network elements Core_Device Evc_RR NMI_RR NID_Device UNI_RR of LIMS Module Involved in configuring JNDI properties and used Data Source objects for database communication Using RallyCA Agile central as project management tool for user stories and task assignment Developed Rest based webservices to facilitate communication between client and servers Build process with Maven tool to deploy the application in performing tasks like clean install and build Deployed Bpm files using CamundaModeler and configured LDAP to authenticate users Used Log4j API for logging in development testing and production environments Hands on experience on Operating Systems like LINUX Involved in developing reusable core libraries using core java classes and Interfaces Implemented version controlling using CVS and used Jenkins for continuous integration Wrote unit test cases using JUnit framework and unit tested the developed components Followed Git lifecycle to checkin and checkout projects from Gitlab Innovation IT via Master Dev MMP Branches Worked with configuration management groups for providing various deployment environments set up including System Integration testing Quality Control testing etc Environment J2EE JDK8 jQuery JavaScript MongoDB Spring SpringBoot NoSQL Web Services SOAP JMS REST APIs Multithreading Maven Jenkins Pivotal cloud foundryGit GitLab Camunda Bpm LDAP Log4jLinux Full Stack Java Developer PNC Financial Services Pittsburgh PA May 2016 to June 2017 PNC Financial Services Group is a financial holding company that offers services like Insurance investment and loans The application offers various features like creating new accounts managing existing accounts and personal loan applications Responsibilities Agile Methodologies SCRUM are used to improve the control over the project and reduce the dependencies on individuals as the project has significant number of teams Developed using new features of Java 18annotations Generics enhanced for loop and Enums Designed the presentation layer GUI using JavaScript JSP HTML CSS Angular 4 Customs tags and developed ClientSide validations Implemented various features of Spring framework such as Dependency Injection IOC Spring MVC Spring WebFlux frameworks Annotations and Spring Integration with Hibernate Framework Developed a Single Page Application which can switch to different components using Angular40 Added dynamic functionality to the application by implementing jQuery Nodejs Modularized frontendCSS and JavaScript code with SASS Built a realtime mouseclick user analytics web service with Nodejs Used Swagger Framework implementing the Restful API and Swagger gives the rich UI to test API Implemented Spring MVC architecture and increased modularity by allowing the separation of crosscutting concerns using spring Boot Worked on Rest Web services as well as Node Rest framework for backend services used Mongo DB NoSQL for database services Developed user interface by using the ReactJs Flux for SPA development Created Data as Service DAS based Restful Jersey web service to connect to a Mongo DB Code application components as per TDD using Hibernate Worked with Microservices related frameworks SpringRibbon Eureka for clientside load balancer andnetwork discovery Also Integrated with Spring Cloud components like EurekaRibbon and Zuul Proxy Involved in writing Spring Configuration XML file that contains declarations and business classes are wiredup to the frontend managed beans using Spring IOC pattern Worked in using React JS components Forms Events Keys Router Animations and Flux concept Involved in requirements gathering and Capacity planning for MultiDatacentre four and Cassandra Cluster used Oracle DB and MongoDB for database related activities Implemented Spring Circuit breaker pattern integrateddashboard to monitor Spring micro services Worked with Kafka Cluster using ZooKeeper Implemented RESTfulmicroservices using the Domain given design to develop the largescale backend infrastructure leveraging Spring Boot SpringIntegration Hibernate SpringDataand MVC Implemented RESTmicroservices using springboot generated metrics with method level granularity and Persistence using spring AOP and Spring Actuator Worked on Camelbased integration middleware solution for provisioning services by design and implementation of business logic and data processing routes using Apache Camel Used Microservicesarchitecture withSpring Bootbased services interacting through a combination of REST and Apache Kafka message brokers Developed testdriven development TDD strategy guiding use of theNUnittesting framework Implemented preauthentication and data base security using Springsecurity and securing application access and SpringBatch for scheduling and maintenance of batch jobs Worked on writing Scala programs using SparkSparkSQL in performing aggregations Used Microservice architecture with spring boot based services interacting through a combination of REST and Apache Kafkamessage brokers and worked with Kafka cluster using Zookeeper Developed the DAO layer for the application using spring Hibernate and developed various logics and reports using HQL and Hibernate criteria as ORM to map Java classes to data base tables Developed session entity beans and message driven beans Application Deployment on pivotal cloud foundry using CF push Designed built and deployed a multitude application utilizing almost all the AWS stack Including EC2 R53 S3 RDS DynamoDB SQS IAM and EMR focusing on highavailability fault tolerance and autoscaling Design roles and groups for users and resources using AWSIdentity Access Management IAM Good knowledge in writing ApacheSpark application using Python and Scala Used ELK for reporting monitoring logging debugging and error tracing Worked on purging logs onElasticSearch DB and Kibana 3 UI Also involved in troubleshooting logs using Log stash and Kibana Troubleshooting of different versions of MongoDB and cluster configurations to ensure highavailability in various crash scenarios and restoring roll backs to avoid loss of Data Participated in unit testing system testing and created various test scripts using JUnit Used Git as Version Control System an important component of Source Configuration Management Implemented Jenkins as Continuous Integration Server for configuring designing and administrating integrating with other system tools Developed all custom processes workflows and schemes within JIRA to accommodate the organizations needs Environment JDK18 Java Scripts HTML Angular 2040 knockoutjs Struts Junit Servlets JDBC JQUERY JSON AJAX DOM HQLBootstrapJBoss Spring Boot cloud foundryScala Spark Selenium JIRAApache Kafka Restful servicesHibernate DAO Eclipse EJB log4j NOSQL MongoDB GIT Maven Jenkins AWS Sr Java Developer Liberty Mutual Life Insurance March 2014 to April 2016 The New Business Accounting solution automates the process of Reconciliation and Balancing process The Accounting solution runs the complex accounting rules for generating Trail balance reports and accepts data feed from multiple vendor sources to automate the process of RC Responsibilities Designed and developed the application by following AgileScrum methodology involved in daily stand up and spring planning sessions as a part of Agile Scrum Used Java concepts like ObjectOrientedProgramming Exceptionhandling and DesignPatterns while developing the application modules Developed the web pages using jQuery HTML5 CSS3 Bootstrap JavaScriptJSP and implemented AngularJS directives controllers paginations and twoway bindings Utilized AWS Lambda platform to upload data into AWS S3buckets and to trigger other Lambda functionsIncluding EC2 focusing on highavailability fault tolerance and autoscaling Used AngularJS as frameworks to create single page applications SPA which can bind data to specific views and synchronize data with server using Sass Less Bootstrap AngularJS Worked on MongoDB database concepts such as locking indexes shard replicationschema design etc Expertise in Angular 20 framework and its ability to create simple and scalable code for SPA Extensive uses of AngularJS directives to get JSON data using AJAX from RESTful API and modify DOM Develop various screens for the front end using React js and used various predefined components from NPM Node Package Manager and React Redux library Worked on Jenkins for project documentation and behaviour driven development Developed the presentation layer using Model View Architecture implemented by SpringMVC which was initially done in the legacy system using Struts Used the Java Collections API extensively in the application as security protection for XML SOAP REST NodeJS ExpressJS and JSON to integrate with designs in Web Deployment Implemented Design patterns like DAO Singleton Pattern and MVC design pattern of Spring framework Building RESTful services using Microservices architecture with tools such as Spring boot Implemented Webservice client using CXF and Spring and implemented EJBsSessionbeans for business logic Configured the adapter for Event processing that can be synchronous or asynchronous and listeners within the adapter to provide support for SOAP over HTTP HTTPS and JMS transports Designed and developed the UIscreens data base design changes and changes to user access modules Developed Microservices using Spring MVC SpringBoot Spring Cloud Used a Microservices architecture with SpringBoot based services interacting through a combination of REST and SpringBoot Used Microservices are designed with the individual database and project with no dependencies Worked on RESTfulWebServices for transferring XML data between two interfaces UsedEclipseSpring Tool Suite STS for Microservices with Spring Boot deployed into AWS lambda Integrated the application with SpringMVC using Spring Boot Spring Dependency Injection and Annotations Leveraged AWS cloud services such as EC2 autoscaling and VPC Virtual Private Cloud to build secure highly scalable and flexible systems Involved in writing Oracle PLSQL Stored procedures Triggers and views Developed applications using rule engines Drools and ILOG to validate the business user roles Wrote JUNIT test cases for web serversand done Unit testing execution with JASMINE and KARMA Involved in test automation like QTP SeleniumWebDriverand Protractor Created continuous integration builds usingJenkins and deployed on WebSphere app server Used Maven tool to configure and build the application project and integrated with Jenkins Apache Mesos and Kubernetes were used as the best ecosystem to deploy and manage Microservices Involved in CICD process using GIT Jenkins job creation Maven build Create Docker image and deployment in AWS environment Involved in requirements gathering and Capacity planning for MultiDatacentre four and Cassandra Cluster used Oracle DB and MongoDB for Database related activities Involved with Sprint Planning Sprint grooming Allocation of User Stories using Jira Used Log4J API for logging and debugging Provided good coordination with QA resources for the Functional testing integration testing and End to End testing Environment Java 8 Spring MVC JavaScript jQuery JSON Spring DAO Spring Boot Spring BatchSpring Security Spring IntegrationLinux SpringHibernate integration framework JSP Oracle PLSQL MongoDB XML Spring web flow JunitGIT Maven Jenkins Microservices AWS EC2 VPC Docker REST web service HTML CSS SASS AJAX JiraAngular 20 Angular JS Java Developer Walmart Bentonville AR May 2012 to February 2014 This project is to provide Single Sign on feature for a thirdparty application which is outside Walmart network which is used by the active directory users involving Ping Federate Server in authentication process to provide a token which includes password for authenticating federation service and also several attributes such as token life time where can find these attributes in the exported agent configuration file from the federation setup Responsibilities Designed and developed the application using AGILESCRUM methodology Developed user interface using JSP with JavaBeans JSTL and Custom Tag Libraries JavaScript CSS JQuery Nodejs HTML SASS and Ajax to speed the application Working experience on Relational Databases like MySQL Oracle PLSQL SQL Server Incorporating SpringIOCDAO framework for DependencyInjection with MVC design pattern for Auto Job scheduling module Used AJAX to request JSON data through REST APIs to acquire data from server and display in sorted order Involved in J2EE Design Patterns such as Data Transfer Object DTO DAO Value Object and Template Focused on the spring components such as Dispatcher Servlets Controllers Model and View Objects Implemented Spring Bean Factory to create proxy object using AOP framework Involved in implementation of enterprise integration with Web Services and Legacy Systems using SOAP and REST Using Axis and Jersey frameworks Involved in creating Restfulweb services using JAXRS and JERSY tool Developed application using JMS for sending and receiving PointtoPoint JMS Queue messages Developed a multiuser web application using JSP Servlet JDBC Spring and Hibernate framework to provide needed functionality and assisted database developers using PLSQL for managing data with the tables in Oracle Implemented Maven Script to create JAR WAR EAR dependency JARS and deploy the entire project onto the WebLogic application Server Implemented XSD Schema DTD XML documents for web services and tested services using SOAP Experience in compiling and tuning the Linux on database servers and JPA annotations to interact with database Used CQL Cassandra Query Language to read from and write data into Cassandra database Database development required creation of new tables SQL stored procedures functions views indexes and constraints triggers and required SQL tuning to reduce the response time in the application Implemented NoSQL persistence pattern for some data within app to increase performance by indexing Used Maven for generating system builds and Jenkins for continuous integration Wrote unittesting codes using JUnit resolved bugs and other defects using Firebug and wrote JUNIT Test cases for Spring Controllers and Web Service Clients in Service Layer using Junit Used Log 4j for debugging testing and maintaining the system state Using JIRA to manage the issuesproject work flow Participated in integrationtesting bugsfixing handling change requests and code reviews Implemented Continuous Integration of automation framework using tools like Jenkins Hudson Environment Spring Hibernate Web services JAXRS JUNIT SOAP UI SQL JSP JDBC JSONxml JavaScript JQuery AJAX Html CSS PLSQL Jenkins Maven log4j Jenkins JIRA Spring IOC DTO JMS APACHE AXIS Apache CXF GIT UNIX AGILESCRUMOracle Tomcat Drools Java Developer Aetna Hartford CT November 2010 to May 2012 Aetna Inc is an American managed health care company which sells traditional and care insurance plans and related services such as medical pharmaceutical dental behavioral health longterm care and disability plans Aetna is committed to providing individuals employers health care professionals producers and others with innovative benefits products and services Responsibilities Involved in various phases of Software Development Life Cycle SDLC of the application like Requirement gathering Design Analysis and Code development Worked oneonone with client to develop layout colour scheme and layout and implemented it into a final interface design with the HTML5CSS3 Bootstrap and JavaScript Designed and developed the UI using JSP HTML HTML5 CSS and JavaScript AJAX JSON Worked on various use cases in development using Struts and testing the functionalities Involved in preparing the High Level and Detail level design of the system using J2EE Involved in the development of model library struts and form classes MVC Worked on core java using file operations to read system file downloads and to present on JSP Developed SOAP based XML web services Used different patterns like SOA MVC pattern DAO pattern and singleton Developed Stored Procedures triggered stored procedures using Hibernate in secondary project involved in developing Programmatic transactions using Hibernate Extensively worked on uploading files into CLOB and BLOBs of Oracle Data base Migrated from Ant to Maven via Ivy for dependency resolution Worked with high volume and complex PLSQLstored procedures and packages using TOAD Experience in Updating Modifying queries in Oracle 10g Used Rational Clear Case for version control and JUnit for unit testing Used quartz scheduler to process or trigger the applications on a daily basis Configured JBossapplication server and deployed the web components Developed applications using Rule EnginesJBossDrools4x Workflows Human tasks implement Business rules validations and provided Drools dashboard for Business users Provided troubleshooting and error handling support in multiple projects EnvironmentStruts Hibernate Spring EJB JSP Servlets JMS XML SOAP WSDL JDBC JavaScript UML HTML JNDI CVS Log4J Maven Windows XPLinux Websphere App server WebLogic Rational Rose Oracle Jr Developer Meridian Soft June 2009 to October 2010 This Application allows the customers to post their orders through Web Various operations relating to their orders such as expediting canceling splitting the order lines can be done through the web itself Status of their order is also displayed upon request Responsibilities Participated in system design planning estimation and implementation Involved in developing Use case diagrams Class diagrams Sequence diagrams and process flow diagrams for the modules using UML and Rational Rose Developed the presentation layer using JSP AJAX HTML CSSand client validations using JavaScript Developed and implemented the MVC Architectural Pattern using Spring Framework Effective usage of J2EE design patterns namelySession Facade Factory Method Command and Singleton to develop various base framework components in the application Modified Account View functionality to enable display of blocked accounts details that have tags This involved modifying beans JSP changes and middle tier enhancements Developed various EJBs session and entity beans for handling business logic Code implementation using java groovy refactoring peer review Developed Session Beans and DAO classes for Accounts and other Modules Extensively used Spring JDBC in data access layer to access and update information in the database Consumed Web Services using WSDL and UDDI from third party for authorizing payments tofrom customers Used JAXB API to bind XML Schema to java classes Involved in Units integration using JUnit bug fixing and User acceptance testing with test cases Used CVS for version control and Maven as a build tool Used Log4j for logging errors messages and performance logs Used JBoss Application Server to deploy application Environment Java 14 JSP Servlets Struts frame work Tag libraries Java Script CSS AJAX JDBC JNDI Oracle 8i Java beans Struts Validation frameworkJavascript xml Maven WindowsUNIX Ant JUNIT SVN QC Edit Plus Web Logic application server SQL Developer Education Bachelors Skills Java 9 years JUnit 9 years Maven 9 years MODEL VIEW CONTROLLER 9 years testing 9 years",
    "entities": [
        "the HTML5CSS3 Bootstrap",
        "Nodejs Used Swagger Framework",
        "REST Using Axis",
        "Docker JenkinsHudsonGitHub",
        "Implemented Spring Circuit",
        "Worked on RESTfulWebServices",
        "SSMS",
        "Springsecurity",
        "HTMLHTML5 CSSCSS3",
        "Evc_RR",
        "AJAX",
        "GUI",
        "jQuery Nodejs Modularized",
        "Implemented Continuous Integration",
        "ANT Gradle",
        "SQL Developer",
        "Gradle Maven Jenkins PCF",
        "Server Implemented",
        "Dispatcher Servlets Controllers Model",
        "GIT Maven Jenkins AWS Sr Java Developer Liberty Mutual Life Insurance",
        "Microservices Involved",
        "Git as",
        "Data Participated",
        "ILOG",
        "Implemented Webservice",
        "Spring IOC",
        "Rxapp for UI",
        "DAS",
        "Trail",
        "Digital Group Kroger",
        "IntegrationLinux SpringHibernate",
        "PNC Financial Services Group",
        "Facade Factory Method Command",
        "AWS S3buckets",
        "EurekaRibbon",
        "Spring Configuration XML",
        "CVS",
        "DTO DAO Value Object",
        "RESTmicroservices",
        "Operating Systems",
        "Domain",
        "java basedREST services",
        "SOAP",
        "Utilized AWS Lambda",
        "XML",
        "AGILESCRUM",
        "NOSQL",
        "CSSand",
        "WebLogic",
        "JUnit",
        "Software Development Life Cycle SDLC",
        "Created Data as Service",
        "Restful Jersey",
        "UI Responsible",
        "CLOB",
        "JavaJ2EE",
        "Oracle 11g12c",
        "ELK",
        "Auto Job",
        "WebSphere",
        "Python",
        "CSS Developed Pharmacy Management",
        "DOM Develop",
        "Oracle 10g Used Rational Clear Case",
        "Data Source",
        "DependencyInjection",
        "Developed",
        "API Implemented",
        "DAO",
        "JPA",
        "Enzyme",
        "Bash",
        "SpringBatch",
        "Oracle Data",
        "WebLogic Rational",
        "Mockito",
        "Spring MVC",
        "Create Docker",
        "American Telecommunications",
        "Responsibilities Involved",
        "Relational Databases",
        "UML",
        "LIMS Module Involved",
        "Validation",
        "Including EC2 R53 S3 RDS",
        "Sequence",
        "JSP Servlets Struts",
        "Created WebBootstrap",
        "Created SpringBoot",
        "SOA",
        "Pharmaceutical Financial Insurance and Telecommunications",
        "Gradle Maven Ant Jenkins Artifactory Nexus",
        "JNDI",
        "Web API SwaggerPostman Hands",
        "Apache Camel",
        "Oracle Implemented Maven Script",
        "JSP",
        "Model View Architecture",
        "Firebug",
        "System Integration",
        "Maven Windows",
        "ApacheSpark",
        "Provided",
        "Business Delegate Service",
        "Application Deployment",
        "Oracle PLSQL Stored",
        "Hibernate Worked with Microservices",
        "Responsibilities Participated",
        "Struts Validation",
        "GitLab",
        "Aetna Inc",
        "MVC",
        "Spring Framework Effective",
        "Mongo DB Code",
        "JSP Developed",
        "EJB",
        "API",
        "Developed Microservices",
        "US",
        "QA",
        "Walmart",
        "Drools",
        "Hibernate Persistence Framework and Design",
        "MVP",
        "AOP",
        "AWS",
        "MultiDatacentre",
        "Used Microservice",
        "Legacy Systems",
        "Aetna",
        "Singleton",
        "Followed Git",
        "Oracle DB",
        "jQuery HTML5 CSS3 Bootstrap JavaScriptJSP",
        "React JS",
        "Interfaces Implemented",
        "ApplicationsPortals",
        "Gitlab Innovation",
        "J2EE Involved",
        "CXF",
        "Tool Suite STS for Microservices",
        "SQL",
        "CPR DB",
        "GitHub",
        "Lambda Extensive",
        "UIscreens",
        "CamundaModeler",
        "React Redux",
        "DAO Singleton Pattern",
        "Bitbucket Utilized J2EE",
        "Kubernetes",
        "Software Development",
        "JAXRS",
        "the United States",
        "ZooKeeper Implemented RESTfulmicroservices",
        "The New Business Accounting",
        "Defect Tracking Version Management Tools",
        "CICD",
        "KSP",
        "Apache Tomcat",
        "AWSIdentity Access Management IAM Good",
        "SQL Server Management Studio",
        "SPA Extensive",
        "Developed Microservices with SpringBoot",
        "Involved with Sprint Planning Sprint",
        "SVN CVS GIT",
        "Reconciliation and Balancing",
        "UDDI",
        "NPM Node Package",
        "Flux",
        "KSP Portal",
        "JBoss Application Server",
        "JERSY",
        "Maven",
        "Build",
        "Web Deployment Implemented Design",
        "JASMINE",
        "lJavaspan",
        "Prescriptions Drug",
        "UI",
        "Java 18annotations Generics",
        "Proxy Design Pattern",
        "Source Configuration Management Implemented Jenkins",
        "SQS IAM",
        "GitBitbucket Yarn",
        "Custom Tag Libraries JavaScript CSS JQuery Nodejs HTML",
        "SQL Queries Executed",
        "MVC ModelViewController",
        "EnvironmentStruts Hibernate Spring",
        "Mongo DB NoSQL",
        "PharmacyServices Patient Wellness Services Vaccinations Diabetic Needs FAQs Responsibilities Followed Scaled Agile Scrum Methodology",
        "Tomcat",
        "SPA",
        "UDDI Responsible",
        "REST",
        "DTD XML",
        "Quality Control",
        "TDD",
        "NoSQL",
        "Spring micro",
        "DesignPatterns",
        "java classes Involved",
        "Maven Jenkins Microservices AWS EC2",
        "MVC Spring WebFlux",
        "Web Mobile",
        "Developed WebServices",
        "SpringIOCDAO",
        "Microservice",
        "JSP Oracle",
        "Pittsburgh",
        "Pivotal Cloud Foundry PCF Developed Responsive Single Page Applications SPA",
        "Used CQL Cassandra Query Language"
    ],
    "experience": "Experience in Software Development methodologies based on Agile Scrum Waterfall TDD Iterative Extensive experience in designing professional UI web applications using frontend technologies like HTMLHTML5 CSSCSS3 JavaScript XML DHTML XHTML jQuery JSON Angular JSNodejs Angular 2040and Bootstrap Implemented several design patterns such as Business Delegate Service Locator Singleton Object Factory Front Controller Factory Design pattern Singleton and Proxy Design Pattern Experience in building web applications using spring framework features like MVC AOP DAO Data Access Object SpringBoot SpringSecurity SpringJDBC templates SpringBatch Developing Applications using latest JavaJ2EE technologies such as Cassandra Java 8 Junitand Cucumber Good Exposure to implementing Service Oriented Architecture SOA using Web Services including SOAP JAXWS JAXRS SOAP UI tool andconcreteRESTful APIs Experience in using ReactJS components Forms Events Keys Router plus Redux and Flux concept Experience with Hibernate Persistence Framework and Design patterns like Singleton Factory Session Facade Business Delegate Data Access Object Data Transfer Object Expertise in working with cloud services like AWS and NoSQL databases like Cassandra MongoDB Experience with spark to handle streaming data and Scala for the batch processing and spark streaming data Mocked validated and documented Web API SwaggerPostman Hands on experience in amazon webservices which includes Cloud Formation Elastic Load Balancer ElasticBean Stalk Cloud   ServerMigration Route53 SQS VPC S3 DynamoDB EC2 Container Service Lambda Extensive experience of working with RDBMS like Oracle 11g12c MySQL SQL Server and developing Stored Procedures Triggers Views Functions and SQL Queries Executed a continuous delivery pipeline with Docker JenkinsHudsonGitHub and AWSAMIs results in generating of new docker container whenever a new GitHub branch get started Experience in deploying and configuring multitier enterprise applications on multiple servers such as Web logic Server JBoss WebSphere and Apache Tomcat Experience in TDD using JUnit framework with Mockito and Easy mock Spring Junit Runner Experienced in using Log4j and good expertise in application build tools like ANT Gradle and Maven Experience in the use of Defect Tracking Version Management Tools such as SVN CVS GIT Experience with unit testing the applications using Junit and JMeter Used various issue and bug tracking tools like JIRA Bitbucket Authorized to work in the US for any employer Work Experience Full Stack Java Developer iii Kroger Specialty Pharmacy Lake Mary FL January 2018 to Present KrogerSpecialtyPharmacy KSP is one of the highly innovative team situated in Krogers own newly remodelled Digital Group Kroger delivers Web Mobile ecommerce ApplicationsPortals that provide users a worldclass digital UI shopping experiences KSP serves physicians patients and health care providers throughout the United States with their first ever services like online drug refill options KSP Portal is extremely organized for patients to login to their own account and can look at their current Prescriptions Drug usage Refills etc in such a way that It is easy to get their order in and they are fast There s no waiting for paperwork to move from desk to desk They can find answers very fast Highlights of the application can be the Leftnav navigation where it provides links to MyPrescriptions Sign Up Prescription history Refills Auto Refill of drugs Find a Pharmacy ManagePatients Patient Profile Page Add a Patient Patient Access DrugInfo Medication Tool box Pet medications PharmacyServices Patient Wellness Services Vaccinations Diabetic Needs FAQs Responsibilities Followed Scaled Agile Scrum Methodology for developing Web Application with a twoweek sprint Gained experience with full stack development including frontend and backend programming database management and user authentication Created WebBootstrap application using Reactjs Redux JavaScript Java Kotlin SQLServer DockerImages Nginx Kafka Zookeeper Broker Managers JUnit and Enzyme Used both Java and React to develop MVP for client for the SPA of pixel perfect UI Responsible for designingbuilding all functional aspects of the feature in both frontend and backend Developed frontend for a web application that closely mirrors the CVS pharmacy application with ReactJSNodejs JavaScriptHTML Bootstrap and CSS Developed Pharmacy Management RESTful APIs using Microservicearchitecture interacting through a combination of ApacheKafka Zookeeper message brokers and Pivotal Cloud Foundry PCF Developed Responsive Single Page Applications SPA using ReactJS and rendering pages on the server side for faster loading and updating by 3x Used Multiple repositories like Rxapp for UI on presentation layer Rxbff backend for front end API and PatientserviceAPI on service layer with Securitybff in security layer connecting with a thirdparty data base CPR DB from GitLab and Bitbucket Utilized J2EE technologies objectoriented programming and Core Java for creating new features based on business requirements to improve pharmacy workflow efficiency Having enough knowledge on GitBitbucket Yarn NpmBabel Docker etc and have rich experience in integrating Unit testing tools such as Jest Enzyme Mocha etc Used SourceTree GitGUI for creating the feature branches and merge the feature branches into Develop or Master Branches following the git lifecycle phases Used SSMS SQL Server Management Studio to get the bak files provided by third party data base CPR Used StoredProcedures for applications that needed to execute as part of a scheduling mechanisms Experienced in developing complex builds dependency management and continuous integration using Gradle Maven Ant Jenkins Artifactory Nexus and Bash shell scripting for deploying Java Kotlin applications Designed CICD processPipelines across multiple servers using Jenkins and Git Used JIRA for defect management and to keep track of bugs and issues following the swim lanes in it Prepared documentationSpikes for some of the recurring defects and resolutions and business comments for those defects Environment JAVA J2EE JDK8 Kotlin Reactjs Nodejs JavaScript HTML CSS jQuery SQL Server Microservice Architecture REST APIs Gradle Maven Jenkins PCF JUnit Enzyme GitLab Bitbucket Full Stack Java Developer CenturyLink CO June 2017 to December 2018 CenturyLink is an American Telecommunications company that provides communications and data services to residential business governmental and wholesale customers in 37 statesApriliaFiber plus is a fastmoving project which had a 45 day deliverable It contains modules like Solution engine Validation services Camunda Bpm SFDC ARM LIMSDatalake using SpringBoot project for solution Maven modulestwo flavors technology and solutionsolution engine Microservice based solution SpringBoot Java MongoDB strategic platform replica set secondary and primary preferred automation dedicated infrastructure two machines solution engine validation engine Pronghornphysical layerRest exposed APIs Responsibilities Involved in analysis and design and development of the project which is based on MVC ModelViewController Architecture and Design Patterns Participated in Scrum meetings with the team on daily basis and weekly team meetings every week Used Swagger and Postmantools in testing the Rest API endpoints and swagger gives the rich UI to test API Used JSON for the data transmission between UI and server Strong programming skills in designing and implementation of multitier applications using webbased technologies like Spring MVC and Spring Boot 158 Used SpringBoot framework to create properties for various environments and usedyml files for configuration Created SpringBoot applications to connect them to various databases and generated queries to retrieve data and modify the collections in the MongoDB Developed Microservices with SpringBoot and SpringBatch along with the test cases Experience in development and deployment of java basedREST services using SpringBoot Used Rest Controller in Spring framework to create RESTfulWebservices and JSON objects for communication Used Tomcat server for application deployment Developed WebServices to transfer data between client and server vice versa using REST WSDL and UDDI Responsible for coding NoSQL Statements and Stored procedures for back end communication and persisting of data using NoSqlBoosterMongoBooster 32 Infrastructure setup for all the network elements provided in Mongoservices module Performed CRUD Create Read Update Deleteoperations on the network elements Core_Device Evc_RR NMI_RR NID_Device UNI_RR of LIMS Module Involved in configuring JNDI properties and used Data Source objects for database communication Using RallyCA Agile central as project management tool for user stories and task assignment Developed Rest based webservices to facilitate communication between client and servers Build process with Maven tool to deploy the application in performing tasks like clean install and build Deployed Bpm files using CamundaModeler and configured LDAP to authenticate users Used Log4j API for logging in development testing and production environments Hands on experience on Operating Systems like LINUX Involved in developing reusable core libraries using core java classes and Interfaces Implemented version controlling using CVS and used Jenkins for continuous integration Wrote unit test cases using JUnit framework and unit tested the developed components Followed Git lifecycle to checkin and checkout projects from Gitlab Innovation IT via Master Dev MMP Branches Worked with configuration management groups for providing various deployment environments set up including System Integration testing Quality Control testing etc Environment J2EE JDK8 jQuery JavaScript MongoDB Spring SpringBoot NoSQL Web Services SOAP JMS REST APIs Multithreading Maven Jenkins Pivotal cloud foundryGit GitLab Camunda Bpm LDAP Log4jLinux Full Stack Java Developer PNC Financial Services Pittsburgh PA May 2016 to June 2017 PNC Financial Services Group is a financial holding company that offers services like Insurance investment and loans The application offers various features like creating new accounts managing existing accounts and personal loan applications Responsibilities Agile Methodologies SCRUM are used to improve the control over the project and reduce the dependencies on individuals as the project has significant number of teams Developed using new features of Java 18annotations Generics enhanced for loop and Enums Designed the presentation layer GUI using JavaScript JSP HTML CSS Angular 4 Customs tags and developed ClientSide validations Implemented various features of Spring framework such as Dependency Injection IOC Spring MVC Spring WebFlux frameworks Annotations and Spring Integration with Hibernate Framework Developed a Single Page Application which can switch to different components using Angular40 Added dynamic functionality to the application by implementing jQuery Nodejs Modularized frontendCSS and JavaScript code with SASS Built a realtime mouseclick user analytics web service with Nodejs Used Swagger Framework implementing the Restful API and Swagger gives the rich UI to test API Implemented Spring MVC architecture and increased modularity by allowing the separation of crosscutting concerns using spring Boot Worked on Rest Web services as well as Node Rest framework for backend services used Mongo DB NoSQL for database services Developed user interface by using the ReactJs Flux for SPA development Created Data as Service DAS based Restful Jersey web service to connect to a Mongo DB Code application components as per TDD using Hibernate Worked with Microservices related frameworks SpringRibbon Eureka for clientside load balancer andnetwork discovery Also Integrated with Spring Cloud components like EurekaRibbon and Zuul Proxy Involved in writing Spring Configuration XML file that contains declarations and business classes are wiredup to the frontend managed beans using Spring IOC pattern Worked in using React JS components Forms Events Keys Router Animations and Flux concept Involved in requirements gathering and Capacity planning for MultiDatacentre four and Cassandra Cluster used Oracle DB and MongoDB for database related activities Implemented Spring Circuit breaker pattern integrateddashboard to monitor Spring micro services Worked with Kafka Cluster using ZooKeeper Implemented RESTfulmicroservices using the Domain given design to develop the largescale backend infrastructure leveraging Spring Boot SpringIntegration Hibernate SpringDataand MVC Implemented RESTmicroservices using springboot generated metrics with method level granularity and Persistence using spring AOP and Spring Actuator Worked on Camelbased integration middleware solution for provisioning services by design and implementation of business logic and data processing routes using Apache Camel Used Microservicesarchitecture withSpring Bootbased services interacting through a combination of REST and Apache Kafka message brokers Developed testdriven development TDD strategy guiding use of theNUnittesting framework Implemented preauthentication and data base security using Springsecurity and securing application access and SpringBatch for scheduling and maintenance of batch jobs Worked on writing Scala programs using SparkSparkSQL in performing aggregations Used Microservice architecture with spring boot based services interacting through a combination of REST and Apache Kafkamessage brokers and worked with Kafka cluster using Zookeeper Developed the DAO layer for the application using spring Hibernate and developed various logics and reports using HQL and Hibernate criteria as ORM to map Java classes to data base tables Developed session entity beans and message driven beans Application Deployment on pivotal cloud foundry using CF push Designed built and deployed a multitude application utilizing almost all the AWS stack Including EC2 R53 S3 RDS DynamoDB SQS IAM and EMR focusing on highavailability fault tolerance and autoscaling Design roles and groups for users and resources using AWSIdentity Access Management IAM Good knowledge in writing ApacheSpark application using Python and Scala Used ELK for reporting monitoring logging debugging and error tracing Worked on purging logs onElasticSearch DB and Kibana 3 UI Also involved in troubleshooting logs using Log stash and Kibana Troubleshooting of different versions of MongoDB and cluster configurations to ensure highavailability in various crash scenarios and restoring roll backs to avoid loss of Data Participated in unit testing system testing and created various test scripts using JUnit Used Git as Version Control System an important component of Source Configuration Management Implemented Jenkins as Continuous Integration Server for configuring designing and administrating integrating with other system tools Developed all custom processes workflows and schemes within JIRA to accommodate the organizations needs Environment JDK18 Java Scripts HTML Angular 2040 knockoutjs Struts Junit Servlets JDBC JQUERY JSON AJAX DOM HQLBootstrapJBoss Spring Boot cloud foundryScala Spark Selenium JIRAApache Kafka Restful servicesHibernate DAO Eclipse EJB log4j NOSQL MongoDB GIT Maven Jenkins AWS Sr Java Developer Liberty Mutual Life Insurance March 2014 to April 2016 The New Business Accounting solution automates the process of Reconciliation and Balancing process The Accounting solution runs the complex accounting rules for generating Trail balance reports and accepts data feed from multiple vendor sources to automate the process of RC Responsibilities Designed and developed the application by following AgileScrum methodology involved in daily stand up and spring planning sessions as a part of Agile Scrum Used Java concepts like ObjectOrientedProgramming Exceptionhandling and DesignPatterns while developing the application modules Developed the web pages using jQuery HTML5 CSS3 Bootstrap JavaScriptJSP and implemented AngularJS directives controllers paginations and twoway bindings Utilized AWS Lambda platform to upload data into AWS S3buckets and to trigger other Lambda functionsIncluding EC2 focusing on highavailability fault tolerance and autoscaling Used AngularJS as frameworks to create single page applications SPA which can bind data to specific views and synchronize data with server using Sass Less Bootstrap AngularJS Worked on MongoDB database concepts such as locking indexes shard replicationschema design etc Expertise in Angular 20 framework and its ability to create simple and scalable code for SPA Extensive uses of AngularJS directives to get JSON data using AJAX from RESTful API and modify DOM Develop various screens for the front end using React js and used various predefined components from NPM Node Package Manager and React Redux library Worked on Jenkins for project documentation and behaviour driven development Developed the presentation layer using Model View Architecture implemented by SpringMVC which was initially done in the legacy system using Struts Used the Java Collections API extensively in the application as security protection for XML SOAP REST NodeJS ExpressJS and JSON to integrate with designs in Web Deployment Implemented Design patterns like DAO Singleton Pattern and MVC design pattern of Spring framework Building RESTful services using Microservices architecture with tools such as Spring boot Implemented Webservice client using CXF and Spring and implemented EJBsSessionbeans for business logic Configured the adapter for Event processing that can be synchronous or asynchronous and listeners within the adapter to provide support for SOAP over HTTP HTTPS and JMS transports Designed and developed the UIscreens data base design changes and changes to user access modules Developed Microservices using Spring MVC SpringBoot Spring Cloud Used a Microservices architecture with SpringBoot based services interacting through a combination of REST and SpringBoot Used Microservices are designed with the individual database and project with no dependencies Worked on RESTfulWebServices for transferring XML data between two interfaces UsedEclipseSpring Tool Suite STS for Microservices with Spring Boot deployed into AWS lambda Integrated the application with SpringMVC using Spring Boot Spring Dependency Injection and Annotations Leveraged AWS cloud services such as EC2 autoscaling and VPC Virtual Private Cloud to build secure highly scalable and flexible systems Involved in writing Oracle PLSQL Stored procedures Triggers and views Developed applications using rule engines Drools and ILOG to validate the business user roles Wrote JUNIT test cases for web serversand done Unit testing execution with JASMINE and KARMA Involved in test automation like QTP SeleniumWebDriverand Protractor Created continuous integration builds usingJenkins and deployed on WebSphere app server Used Maven tool to configure and build the application project and integrated with Jenkins Apache Mesos and Kubernetes were used as the best ecosystem to deploy and manage Microservices Involved in CICD process using GIT Jenkins job creation Maven build Create Docker image and deployment in AWS environment Involved in requirements gathering and Capacity planning for MultiDatacentre four and Cassandra Cluster used Oracle DB and MongoDB for Database related activities Involved with Sprint Planning Sprint grooming Allocation of User Stories using Jira Used Log4J API for logging and debugging Provided good coordination with QA resources for the Functional testing integration testing and End to End testing Environment Java 8 Spring MVC JavaScript jQuery JSON Spring DAO Spring Boot Spring BatchSpring Security Spring IntegrationLinux SpringHibernate integration framework JSP Oracle PLSQL MongoDB XML Spring web flow JunitGIT Maven Jenkins Microservices AWS EC2 VPC Docker REST web service HTML CSS SASS AJAX JiraAngular 20 Angular JS Java Developer Walmart Bentonville AR May 2012 to February 2014 This project is to provide Single Sign on feature for a thirdparty application which is outside Walmart network which is used by the active directory users involving Ping Federate Server in authentication process to provide a token which includes password for authenticating federation service and also several attributes such as token life time where can find these attributes in the exported agent configuration file from the federation setup Responsibilities Designed and developed the application using AGILESCRUM methodology Developed user interface using JSP with JavaBeans JSTL and Custom Tag Libraries JavaScript CSS JQuery Nodejs HTML SASS and Ajax to speed the application Working experience on Relational Databases like MySQL Oracle PLSQL SQL Server Incorporating SpringIOCDAO framework for DependencyInjection with MVC design pattern for Auto Job scheduling module Used AJAX to request JSON data through REST APIs to acquire data from server and display in sorted order Involved in J2EE Design Patterns such as Data Transfer Object DTO DAO Value Object and Template Focused on the spring components such as Dispatcher Servlets Controllers Model and View Objects Implemented Spring Bean Factory to create proxy object using AOP framework Involved in implementation of enterprise integration with Web Services and Legacy Systems using SOAP and REST Using Axis and Jersey frameworks Involved in creating Restfulweb services using JAXRS and JERSY tool Developed application using JMS for sending and receiving PointtoPoint JMS Queue messages Developed a multiuser web application using JSP Servlet JDBC Spring and Hibernate framework to provide needed functionality and assisted database developers using PLSQL for managing data with the tables in Oracle Implemented Maven Script to create JAR WAR EAR dependency JARS and deploy the entire project onto the WebLogic application Server Implemented XSD Schema DTD XML documents for web services and tested services using SOAP Experience in compiling and tuning the Linux on database servers and JPA annotations to interact with database Used CQL Cassandra Query Language to read from and write data into Cassandra database Database development required creation of new tables SQL stored procedures functions views indexes and constraints triggers and required SQL tuning to reduce the response time in the application Implemented NoSQL persistence pattern for some data within app to increase performance by indexing Used Maven for generating system builds and Jenkins for continuous integration Wrote unittesting codes using JUnit resolved bugs and other defects using Firebug and wrote JUNIT Test cases for Spring Controllers and Web Service Clients in Service Layer using Junit Used Log 4j for debugging testing and maintaining the system state Using JIRA to manage the issuesproject work flow Participated in integrationtesting bugsfixing handling change requests and code reviews Implemented Continuous Integration of automation framework using tools like Jenkins Hudson Environment Spring Hibernate Web services JAXRS JUNIT SOAP UI SQL JSP JDBC JSONxml JavaScript JQuery AJAX Html CSS PLSQL Jenkins Maven log4j Jenkins JIRA Spring IOC DTO JMS APACHE AXIS Apache CXF GIT UNIX AGILESCRUMOracle Tomcat Drools Java Developer Aetna Hartford CT November 2010 to May 2012 Aetna Inc is an American managed health care company which sells traditional and care insurance plans and related services such as medical pharmaceutical dental behavioral health longterm care and disability plans Aetna is committed to providing individuals employers health care professionals producers and others with innovative benefits products and services Responsibilities Involved in various phases of Software Development Life Cycle SDLC of the application like Requirement gathering Design Analysis and Code development Worked oneonone with client to develop layout colour scheme and layout and implemented it into a final interface design with the HTML5CSS3 Bootstrap and JavaScript Designed and developed the UI using JSP HTML HTML5 CSS and JavaScript AJAX JSON Worked on various use cases in development using Struts and testing the functionalities Involved in preparing the High Level and Detail level design of the system using J2EE Involved in the development of model library struts and form classes MVC Worked on core java using file operations to read system file downloads and to present on JSP Developed SOAP based XML web services Used different patterns like SOA MVC pattern DAO pattern and singleton Developed Stored Procedures triggered stored procedures using Hibernate in secondary project involved in developing Programmatic transactions using Hibernate Extensively worked on uploading files into CLOB and BLOBs of Oracle Data base Migrated from Ant to Maven via Ivy for dependency resolution Worked with high volume and complex PLSQLstored procedures and packages using TOAD Experience in Updating Modifying queries in Oracle 10 g Used Rational Clear Case for version control and JUnit for unit testing Used quartz scheduler to process or trigger the applications on a daily basis Configured JBossapplication server and deployed the web components Developed applications using Rule EnginesJBossDrools4x Workflows Human tasks implement Business rules validations and provided Drools dashboard for Business users Provided troubleshooting and error handling support in multiple projects EnvironmentStruts Hibernate Spring EJB JSP Servlets JMS XML SOAP WSDL JDBC JavaScript UML HTML JNDI CVS Log4J Maven Windows XPLinux Websphere App server WebLogic Rational Rose Oracle Jr Developer Meridian Soft June 2009 to October 2010 This Application allows the customers to post their orders through Web Various operations relating to their orders such as expediting canceling splitting the order lines can be done through the web itself Status of their order is also displayed upon request Responsibilities Participated in system design planning estimation and implementation Involved in developing Use case diagrams Class diagrams Sequence diagrams and process flow diagrams for the modules using UML and Rational Rose Developed the presentation layer using JSP AJAX HTML CSSand client validations using JavaScript Developed and implemented the MVC Architectural Pattern using Spring Framework Effective usage of J2EE design patterns namelySession Facade Factory Method Command and Singleton to develop various base framework components in the application Modified Account View functionality to enable display of blocked accounts details that have tags This involved modifying beans JSP changes and middle tier enhancements Developed various EJBs session and entity beans for handling business logic Code implementation using java groovy refactoring peer review Developed Session Beans and DAO classes for Accounts and other Modules Extensively used Spring JDBC in data access layer to access and update information in the database Consumed Web Services using WSDL and UDDI from third party for authorizing payments tofrom customers Used JAXB API to bind XML Schema to java classes Involved in Units integration using JUnit bug fixing and User acceptance testing with test cases Used CVS for version control and Maven as a build tool Used Log4j for logging errors messages and performance logs Used JBoss Application Server to deploy application Environment Java 14 JSP Servlets Struts frame work Tag libraries Java Script CSS AJAX JDBC JNDI Oracle 8i Java beans Struts Validation frameworkJavascript xml Maven WindowsUNIX Ant JUNIT SVN QC Edit Plus Web Logic application server SQL Developer Education Bachelors Skills Java 9 years JUnit 9 years Maven 9 years MODEL VIEW CONTROLLER 9 years testing 9 years",
    "extracted_keywords": [
        "Stack",
        "Java",
        "Developer",
        "Full",
        "Stack",
        "span",
        "lJavaspan",
        "span",
        "lDeveloperspan",
        "Stack",
        "Java",
        "Developer",
        "iii",
        "Kroger",
        "Specialty",
        "Pharmacy",
        "Lake",
        "Mary",
        "FL",
        "years",
        "experience",
        "design",
        "development",
        "domain",
        "Pharmaceutical",
        "Financial",
        "Insurance",
        "Telecommunications",
        "applications",
        "Internet",
        "technologies",
        "Java",
        "J2EE",
        "Technologies",
        "Strong",
        "Experience",
        "Software",
        "Development",
        "methodologies",
        "Agile",
        "Scrum",
        "Waterfall",
        "TDD",
        "Iterative",
        "experience",
        "UI",
        "web",
        "applications",
        "frontend",
        "technologies",
        "HTMLHTML5",
        "CSSCSS3",
        "JavaScript",
        "XML",
        "DHTML",
        "XHTML",
        "jQuery",
        "JSON",
        "Angular",
        "JSNodejs",
        "Angular",
        "2040and",
        "Bootstrap",
        "design",
        "patterns",
        "Business",
        "Delegate",
        "Service",
        "Locator",
        "Singleton",
        "Object",
        "Factory",
        "Front",
        "Controller",
        "Factory",
        "Design",
        "pattern",
        "Singleton",
        "Proxy",
        "Design",
        "Pattern",
        "Experience",
        "building",
        "web",
        "applications",
        "spring",
        "framework",
        "features",
        "MVC",
        "AOP",
        "DAO",
        "Data",
        "Access",
        "Object",
        "SpringBoot",
        "SpringSecurity",
        "SpringJDBC",
        "SpringBatch",
        "Developing",
        "Applications",
        "JavaJ2EE",
        "technologies",
        "Cassandra",
        "Java",
        "Junitand",
        "Cucumber",
        "Good",
        "Exposure",
        "Service",
        "Oriented",
        "Architecture",
        "SOA",
        "Web",
        "Services",
        "SOAP",
        "JAXWS",
        "JAXRS",
        "SOAP",
        "UI",
        "tool",
        "APIs",
        "Experience",
        "ReactJS",
        "components",
        "Forms",
        "Events",
        "Keys",
        "Router",
        "Redux",
        "Flux",
        "concept",
        "Experience",
        "Hibernate",
        "Persistence",
        "Framework",
        "Design",
        "patterns",
        "Singleton",
        "Factory",
        "Session",
        "Facade",
        "Business",
        "Delegate",
        "Data",
        "Access",
        "Object",
        "Data",
        "Transfer",
        "Object",
        "Expertise",
        "cloud",
        "services",
        "AWS",
        "NoSQL",
        "Cassandra",
        "MongoDB",
        "Experience",
        "spark",
        "streaming",
        "data",
        "Scala",
        "batch",
        "processing",
        "streaming",
        "data",
        "Web",
        "API",
        "SwaggerPostman",
        "Hands",
        "experience",
        "amazon",
        "webservices",
        "Cloud",
        "Formation",
        "Elastic",
        "Load",
        "Balancer",
        "ElasticBean",
        "Stalk",
        "Cloud",
        "ServerMigration",
        "Route53",
        "SQS",
        "VPC",
        "S3",
        "DynamoDB",
        "EC2",
        "Container",
        "Service",
        "Lambda",
        "experience",
        "RDBMS",
        "Oracle",
        "MySQL",
        "SQL",
        "Server",
        "Stored",
        "Procedures",
        "Triggers",
        "Views",
        "Functions",
        "SQL",
        "Queries",
        "delivery",
        "pipeline",
        "Docker",
        "JenkinsHudsonGitHub",
        "AWSAMIs",
        "results",
        "docker",
        "container",
        "GitHub",
        "branch",
        "Experience",
        "enterprise",
        "applications",
        "servers",
        "Web",
        "logic",
        "Server",
        "JBoss",
        "WebSphere",
        "Apache",
        "Tomcat",
        "Experience",
        "TDD",
        "JUnit",
        "framework",
        "Mockito",
        "Easy",
        "Spring",
        "Junit",
        "Runner",
        "Log4j",
        "expertise",
        "application",
        "build",
        "tools",
        "ANT",
        "Gradle",
        "Maven",
        "Experience",
        "use",
        "Defect",
        "Tracking",
        "Version",
        "Management",
        "Tools",
        "SVN",
        "CVS",
        "GIT",
        "Experience",
        "unit",
        "applications",
        "Junit",
        "JMeter",
        "issue",
        "bug",
        "tracking",
        "tools",
        "JIRA",
        "Bitbucket",
        "US",
        "employer",
        "Work",
        "Experience",
        "Full",
        "Stack",
        "Java",
        "Developer",
        "iii",
        "Kroger",
        "Specialty",
        "Pharmacy",
        "Lake",
        "Mary",
        "FL",
        "January",
        "Present",
        "KrogerSpecialtyPharmacy",
        "KSP",
        "team",
        "Krogers",
        "Digital",
        "Group",
        "Kroger",
        "Web",
        "Mobile",
        "ecommerce",
        "ApplicationsPortals",
        "users",
        "worldclass",
        "UI",
        "shopping",
        "experiences",
        "KSP",
        "physicians",
        "patients",
        "health",
        "care",
        "providers",
        "United",
        "States",
        "services",
        "drug",
        "refill",
        "options",
        "KSP",
        "Portal",
        "patients",
        "account",
        "Prescriptions",
        "Drug",
        "usage",
        "Refills",
        "way",
        "order",
        "paperwork",
        "desk",
        "answers",
        "Highlights",
        "application",
        "Leftnav",
        "navigation",
        "links",
        "MyPrescriptions",
        "Sign",
        "Prescription",
        "history",
        "Refills",
        "Auto",
        "Refill",
        "drugs",
        "Pharmacy",
        "ManagePatients",
        "Patient",
        "Profile",
        "Page",
        "Patient",
        "Patient",
        "Access",
        "DrugInfo",
        "Medication",
        "Tool",
        "box",
        "Pet",
        "medications",
        "PharmacyServices",
        "Patient",
        "Wellness",
        "Services",
        "Vaccinations",
        "Diabetic",
        "FAQs",
        "Responsibilities",
        "Scaled",
        "Agile",
        "Scrum",
        "Methodology",
        "Web",
        "Application",
        "twoweek",
        "sprint",
        "experience",
        "stack",
        "development",
        "frontend",
        "programming",
        "database",
        "management",
        "user",
        "authentication",
        "WebBootstrap",
        "application",
        "Reactjs",
        "Redux",
        "JavaScript",
        "Java",
        "Kotlin",
        "SQLServer",
        "DockerImages",
        "Nginx",
        "Kafka",
        "Zookeeper",
        "Broker",
        "Managers",
        "JUnit",
        "Enzyme",
        "Java",
        "React",
        "MVP",
        "client",
        "SPA",
        "pixel",
        "UI",
        "aspects",
        "feature",
        "frontend",
        "frontend",
        "web",
        "application",
        "CVS",
        "pharmacy",
        "application",
        "JavaScriptHTML",
        "Bootstrap",
        "CSS",
        "Developed",
        "Pharmacy",
        "Management",
        "APIs",
        "Microservicearchitecture",
        "combination",
        "ApacheKafka",
        "Zookeeper",
        "message",
        "brokers",
        "Cloud",
        "Foundry",
        "PCF",
        "Developed",
        "Responsive",
        "Single",
        "Page",
        "Applications",
        "SPA",
        "ReactJS",
        "pages",
        "server",
        "side",
        "loading",
        "repositories",
        "Rxapp",
        "UI",
        "presentation",
        "layer",
        "Rxbff",
        "backend",
        "end",
        "API",
        "PatientserviceAPI",
        "service",
        "layer",
        "Securitybff",
        "security",
        "layer",
        "thirdparty",
        "data",
        "base",
        "CPR",
        "DB",
        "GitLab",
        "Bitbucket",
        "J2EE",
        "technologies",
        "programming",
        "Core",
        "Java",
        "features",
        "business",
        "requirements",
        "pharmacy",
        "workflow",
        "efficiency",
        "knowledge",
        "GitBitbucket",
        "Yarn",
        "NpmBabel",
        "Docker",
        "experience",
        "Unit",
        "testing",
        "tools",
        "Jest",
        "Enzyme",
        "Mocha",
        "SourceTree",
        "GitGUI",
        "feature",
        "branches",
        "feature",
        "branches",
        "Develop",
        "Master",
        "Branches",
        "git",
        "lifecycle",
        "phases",
        "SSMS",
        "SQL",
        "Server",
        "Management",
        "Studio",
        "bak",
        "files",
        "party",
        "data",
        "base",
        "CPR",
        "StoredProcedures",
        "applications",
        "part",
        "scheduling",
        "mechanisms",
        "builds",
        "dependency",
        "management",
        "integration",
        "Gradle",
        "Maven",
        "Ant",
        "Jenkins",
        "Artifactory",
        "Nexus",
        "Bash",
        "shell",
        "scripting",
        "Java",
        "Kotlin",
        "applications",
        "CICD",
        "processPipelines",
        "servers",
        "Jenkins",
        "Git",
        "Used",
        "JIRA",
        "management",
        "track",
        "bugs",
        "issues",
        "lanes",
        "documentationSpikes",
        "defects",
        "resolutions",
        "business",
        "comments",
        "defects",
        "Environment",
        "J2EE",
        "JDK8",
        "Kotlin",
        "Reactjs",
        "Nodejs",
        "JavaScript",
        "HTML",
        "CSS",
        "jQuery",
        "SQL",
        "Server",
        "Microservice",
        "Architecture",
        "REST",
        "APIs",
        "Gradle",
        "Maven",
        "Jenkins",
        "PCF",
        "JUnit",
        "Enzyme",
        "GitLab",
        "Bitbucket",
        "Full",
        "Stack",
        "Java",
        "Developer",
        "CenturyLink",
        "CO",
        "June",
        "December",
        "CenturyLink",
        "American",
        "Telecommunications",
        "company",
        "communications",
        "data",
        "services",
        "business",
        "customers",
        "statesApriliaFiber",
        "fastmoving",
        "project",
        "day",
        "modules",
        "Solution",
        "engine",
        "Validation",
        "services",
        "Camunda",
        "Bpm",
        "SFDC",
        "ARM",
        "LIMSDatalake",
        "SpringBoot",
        "project",
        "solution",
        "Maven",
        "modulestwo",
        "flavors",
        "technology",
        "solutionsolution",
        "engine",
        "Microservice",
        "solution",
        "SpringBoot",
        "Java",
        "MongoDB",
        "platform",
        "replica",
        "automation",
        "infrastructure",
        "machines",
        "solution",
        "engine",
        "validation",
        "engine",
        "Pronghornphysical",
        "APIs",
        "Responsibilities",
        "analysis",
        "design",
        "development",
        "project",
        "MVC",
        "ModelViewController",
        "Architecture",
        "Design",
        "Patterns",
        "Scrum",
        "meetings",
        "team",
        "basis",
        "team",
        "meetings",
        "week",
        "Swagger",
        "Postmantools",
        "API",
        "endpoints",
        "swagger",
        "UI",
        "API",
        "JSON",
        "data",
        "transmission",
        "UI",
        "server",
        "programming",
        "skills",
        "designing",
        "implementation",
        "applications",
        "technologies",
        "Spring",
        "MVC",
        "Spring",
        "Boot",
        "SpringBoot",
        "framework",
        "properties",
        "environments",
        "files",
        "configuration",
        "SpringBoot",
        "applications",
        "databases",
        "queries",
        "data",
        "collections",
        "Microservices",
        "SpringBoot",
        "SpringBatch",
        "test",
        "cases",
        "Experience",
        "development",
        "deployment",
        "basedREST",
        "services",
        "SpringBoot",
        "Rest",
        "Controller",
        "Spring",
        "framework",
        "RESTfulWebservices",
        "objects",
        "communication",
        "Tomcat",
        "server",
        "application",
        "deployment",
        "Developed",
        "WebServices",
        "data",
        "client",
        "server",
        "vice",
        "REST",
        "WSDL",
        "UDDI",
        "Responsible",
        "NoSQL",
        "Statements",
        "procedures",
        "end",
        "communication",
        "persisting",
        "data",
        "Infrastructure",
        "setup",
        "network",
        "elements",
        "Mongoservices",
        "module",
        "Performed",
        "CRUD",
        "Create",
        "Read",
        "Update",
        "Deleteoperations",
        "network",
        "elements",
        "Evc_RR",
        "NMI_RR",
        "NID_Device",
        "UNI_RR",
        "LIMS",
        "Module",
        "JNDI",
        "properties",
        "Data",
        "Source",
        "database",
        "communication",
        "RallyCA",
        "project",
        "management",
        "tool",
        "user",
        "stories",
        "task",
        "assignment",
        "Developed",
        "Rest",
        "webservices",
        "communication",
        "client",
        "servers",
        "Build",
        "process",
        "Maven",
        "tool",
        "application",
        "tasks",
        "install",
        "Deployed",
        "Bpm",
        "files",
        "CamundaModeler",
        "LDAP",
        "users",
        "Log4j",
        "API",
        "development",
        "testing",
        "production",
        "Hands",
        "experience",
        "Operating",
        "Systems",
        "LINUX",
        "core",
        "libraries",
        "core",
        "classes",
        "Interfaces",
        "version",
        "CVS",
        "Jenkins",
        "integration",
        "Wrote",
        "unit",
        "test",
        "cases",
        "JUnit",
        "framework",
        "unit",
        "components",
        "Git",
        "lifecycle",
        "checkin",
        "checkout",
        "projects",
        "Gitlab",
        "Innovation",
        "IT",
        "Master",
        "Dev",
        "MMP",
        "Branches",
        "configuration",
        "management",
        "groups",
        "deployment",
        "environments",
        "System",
        "Integration",
        "testing",
        "Quality",
        "Control",
        "testing",
        "Environment",
        "J2EE",
        "JDK8",
        "jQuery",
        "JavaScript",
        "MongoDB",
        "Spring",
        "SpringBoot",
        "NoSQL",
        "Web",
        "Services",
        "SOAP",
        "JMS",
        "REST",
        "APIs",
        "Multithreading",
        "Maven",
        "Jenkins",
        "cloud",
        "foundryGit",
        "GitLab",
        "Camunda",
        "Bpm",
        "LDAP",
        "Log4jLinux",
        "Full",
        "Stack",
        "Java",
        "Developer",
        "PNC",
        "Financial",
        "Services",
        "Pittsburgh",
        "PA",
        "May",
        "June",
        "PNC",
        "Financial",
        "Services",
        "Group",
        "company",
        "services",
        "Insurance",
        "investment",
        "loans",
        "application",
        "features",
        "accounts",
        "accounts",
        "loan",
        "applications",
        "Responsibilities",
        "Agile",
        "Methodologies",
        "SCRUM",
        "control",
        "project",
        "dependencies",
        "individuals",
        "project",
        "number",
        "teams",
        "features",
        "Java",
        "18annotations",
        "Generics",
        "loop",
        "Enums",
        "presentation",
        "layer",
        "GUI",
        "JavaScript",
        "JSP",
        "HTML",
        "CSS",
        "Angular",
        "Customs",
        "tags",
        "ClientSide",
        "validations",
        "features",
        "Spring",
        "framework",
        "Dependency",
        "Injection",
        "IOC",
        "Spring",
        "MVC",
        "Spring",
        "WebFlux",
        "Annotations",
        "Spring",
        "Integration",
        "Hibernate",
        "Framework",
        "Single",
        "Page",
        "Application",
        "components",
        "Angular40",
        "functionality",
        "application",
        "jQuery",
        "Nodejs",
        "JavaScript",
        "code",
        "SASS",
        "mouseclick",
        "user",
        "analytics",
        "web",
        "service",
        "Nodejs",
        "Swagger",
        "Framework",
        "API",
        "Swagger",
        "UI",
        "API",
        "Spring",
        "MVC",
        "architecture",
        "modularity",
        "separation",
        "concerns",
        "spring",
        "Boot",
        "Worked",
        "Rest",
        "Web",
        "services",
        "Node",
        "Rest",
        "framework",
        "services",
        "Mongo",
        "DB",
        "NoSQL",
        "database",
        "services",
        "user",
        "interface",
        "ReactJs",
        "Flux",
        "SPA",
        "development",
        "Data",
        "Service",
        "DAS",
        "Restful",
        "Jersey",
        "web",
        "service",
        "Mongo",
        "DB",
        "Code",
        "application",
        "components",
        "TDD",
        "Hibernate",
        "Worked",
        "Microservices",
        "frameworks",
        "SpringRibbon",
        "Eureka",
        "load",
        "balancer",
        "andnetwork",
        "discovery",
        "Spring",
        "Cloud",
        "components",
        "EurekaRibbon",
        "Zuul",
        "Proxy",
        "Spring",
        "Configuration",
        "XML",
        "file",
        "declarations",
        "business",
        "classes",
        "frontend",
        "beans",
        "Spring",
        "IOC",
        "pattern",
        "React",
        "JS",
        "components",
        "Forms",
        "Events",
        "Keys",
        "Router",
        "Animations",
        "Flux",
        "concept",
        "requirements",
        "Capacity",
        "planning",
        "MultiDatacentre",
        "Cassandra",
        "Cluster",
        "Oracle",
        "DB",
        "MongoDB",
        "database",
        "activities",
        "Spring",
        "Circuit",
        "breaker",
        "pattern",
        "Spring",
        "micro",
        "services",
        "Kafka",
        "Cluster",
        "ZooKeeper",
        "RESTfulmicroservices",
        "Domain",
        "design",
        "largescale",
        "infrastructure",
        "Spring",
        "Boot",
        "SpringIntegration",
        "Hibernate",
        "SpringDataand",
        "MVC",
        "RESTmicroservices",
        "springboot",
        "metrics",
        "method",
        "level",
        "granularity",
        "Persistence",
        "spring",
        "AOP",
        "Spring",
        "Actuator",
        "integration",
        "middleware",
        "solution",
        "services",
        "design",
        "implementation",
        "business",
        "logic",
        "data",
        "processing",
        "routes",
        "Apache",
        "Camel",
        "Microservicesarchitecture",
        "services",
        "combination",
        "REST",
        "Apache",
        "Kafka",
        "message",
        "brokers",
        "testdriven",
        "development",
        "TDD",
        "strategy",
        "use",
        "framework",
        "preauthentication",
        "data",
        "base",
        "security",
        "Springsecurity",
        "application",
        "access",
        "SpringBatch",
        "scheduling",
        "maintenance",
        "batch",
        "jobs",
        "Scala",
        "programs",
        "SparkSparkSQL",
        "aggregations",
        "Microservice",
        "architecture",
        "spring",
        "boot",
        "services",
        "combination",
        "REST",
        "Apache",
        "Kafkamessage",
        "brokers",
        "Kafka",
        "cluster",
        "Zookeeper",
        "Developed",
        "DAO",
        "layer",
        "application",
        "spring",
        "Hibernate",
        "logics",
        "reports",
        "HQL",
        "Hibernate",
        "criteria",
        "ORM",
        "Java",
        "classes",
        "data",
        "base",
        "session",
        "entity",
        "beans",
        "message",
        "beans",
        "Application",
        "Deployment",
        "cloud",
        "foundry",
        "CF",
        "push",
        "multitude",
        "application",
        "AWS",
        "stack",
        "EC2",
        "R53",
        "S3",
        "RDS",
        "DynamoDB",
        "SQS",
        "IAM",
        "EMR",
        "highavailability",
        "fault",
        "tolerance",
        "Design",
        "roles",
        "groups",
        "users",
        "resources",
        "AWSIdentity",
        "Access",
        "Management",
        "IAM",
        "knowledge",
        "ApacheSpark",
        "application",
        "Python",
        "Scala",
        "ELK",
        "monitoring",
        "debugging",
        "error",
        "tracing",
        "logs",
        "DB",
        "Kibana",
        "UI",
        "logs",
        "Log",
        "stash",
        "Kibana",
        "Troubleshooting",
        "versions",
        "MongoDB",
        "cluster",
        "configurations",
        "highavailability",
        "crash",
        "scenarios",
        "roll",
        "backs",
        "loss",
        "Data",
        "unit",
        "testing",
        "system",
        "testing",
        "test",
        "scripts",
        "JUnit",
        "Git",
        "Version",
        "Control",
        "System",
        "component",
        "Source",
        "Configuration",
        "Management",
        "Jenkins",
        "Continuous",
        "Integration",
        "Server",
        "system",
        "tools",
        "custom",
        "workflows",
        "schemes",
        "JIRA",
        "organizations",
        "Environment",
        "JDK18",
        "Java",
        "Scripts",
        "HTML",
        "Angular",
        "knockoutjs",
        "Struts",
        "Junit",
        "Servlets",
        "JDBC",
        "JQUERY",
        "JSON",
        "AJAX",
        "DOM",
        "HQLBootstrapJBoss",
        "Spring",
        "Boot",
        "cloud",
        "foundryScala",
        "Spark",
        "Selenium",
        "JIRAApache",
        "Kafka",
        "Restful",
        "DAO",
        "Eclipse",
        "EJB",
        "log4j",
        "NOSQL",
        "MongoDB",
        "GIT",
        "Maven",
        "Jenkins",
        "AWS",
        "Sr",
        "Java",
        "Developer",
        "Liberty",
        "Mutual",
        "Life",
        "Insurance",
        "March",
        "April",
        "New",
        "Business",
        "Accounting",
        "solution",
        "process",
        "Reconciliation",
        "Balancing",
        "process",
        "Accounting",
        "solution",
        "accounting",
        "rules",
        "Trail",
        "balance",
        "reports",
        "data",
        "feed",
        "vendor",
        "sources",
        "process",
        "RC",
        "Responsibilities",
        "application",
        "AgileScrum",
        "methodology",
        "stand",
        "spring",
        "planning",
        "sessions",
        "part",
        "Agile",
        "Scrum",
        "Java",
        "concepts",
        "Exceptionhandling",
        "DesignPatterns",
        "application",
        "modules",
        "web",
        "pages",
        "jQuery",
        "HTML5",
        "CSS3",
        "Bootstrap",
        "directives",
        "paginations",
        "twoway",
        "bindings",
        "AWS",
        "Lambda",
        "platform",
        "data",
        "AWS",
        "S3buckets",
        "Lambda",
        "EC2",
        "highavailability",
        "fault",
        "tolerance",
        "AngularJS",
        "frameworks",
        "page",
        "applications",
        "SPA",
        "data",
        "views",
        "data",
        "server",
        "Sass",
        "Less",
        "Bootstrap",
        "MongoDB",
        "database",
        "concepts",
        "indexes",
        "shard",
        "replicationschema",
        "design",
        "Expertise",
        "Angular",
        "framework",
        "ability",
        "code",
        "SPA",
        "uses",
        "directives",
        "data",
        "AJAX",
        "API",
        "DOM",
        "Develop",
        "screens",
        "end",
        "React",
        "components",
        "NPM",
        "Node",
        "Package",
        "Manager",
        "React",
        "Redux",
        "library",
        "Jenkins",
        "project",
        "documentation",
        "behaviour",
        "development",
        "presentation",
        "layer",
        "Model",
        "View",
        "Architecture",
        "SpringMVC",
        "legacy",
        "system",
        "Struts",
        "Java",
        "Collections",
        "API",
        "application",
        "security",
        "protection",
        "XML",
        "SOAP",
        "REST",
        "NodeJS",
        "ExpressJS",
        "JSON",
        "designs",
        "Web",
        "Deployment",
        "Design",
        "patterns",
        "DAO",
        "Singleton",
        "Pattern",
        "MVC",
        "design",
        "pattern",
        "Spring",
        "framework",
        "services",
        "Microservices",
        "architecture",
        "tools",
        "Spring",
        "boot",
        "Webservice",
        "client",
        "CXF",
        "Spring",
        "EJBsSessionbeans",
        "business",
        "logic",
        "adapter",
        "Event",
        "processing",
        "listeners",
        "adapter",
        "support",
        "SOAP",
        "HTTP",
        "HTTPS",
        "JMS",
        "UIscreens",
        "data",
        "base",
        "design",
        "changes",
        "changes",
        "user",
        "access",
        "modules",
        "Microservices",
        "Spring",
        "MVC",
        "SpringBoot",
        "Spring",
        "Cloud",
        "Microservices",
        "architecture",
        "SpringBoot",
        "services",
        "combination",
        "REST",
        "SpringBoot",
        "Used",
        "Microservices",
        "database",
        "project",
        "dependencies",
        "RESTfulWebServices",
        "XML",
        "data",
        "interfaces",
        "Tool",
        "Suite",
        "STS",
        "Microservices",
        "Spring",
        "Boot",
        "AWS",
        "lambda",
        "application",
        "SpringMVC",
        "Spring",
        "Boot",
        "Spring",
        "Dependency",
        "Injection",
        "Annotations",
        "AWS",
        "cloud",
        "services",
        "EC2",
        "autoscaling",
        "VPC",
        "Virtual",
        "Cloud",
        "systems",
        "Oracle",
        "PLSQL",
        "procedures",
        "Triggers",
        "applications",
        "rule",
        "engines",
        "Drools",
        "business",
        "user",
        "roles",
        "Wrote",
        "JUNIT",
        "test",
        "cases",
        "web",
        "serversand",
        "Unit",
        "testing",
        "execution",
        "JASMINE",
        "KARMA",
        "test",
        "automation",
        "QTP",
        "SeleniumWebDriverand",
        "Protractor",
        "integration",
        "usingJenkins",
        "WebSphere",
        "app",
        "server",
        "Maven",
        "tool",
        "application",
        "project",
        "Jenkins",
        "Apache",
        "Mesos",
        "Kubernetes",
        "ecosystem",
        "Microservices",
        "CICD",
        "process",
        "GIT",
        "Jenkins",
        "job",
        "creation",
        "Maven",
        "Create",
        "Docker",
        "image",
        "deployment",
        "AWS",
        "environment",
        "requirements",
        "Capacity",
        "planning",
        "MultiDatacentre",
        "Cassandra",
        "Cluster",
        "Oracle",
        "DB",
        "MongoDB",
        "Database",
        "activities",
        "Sprint",
        "Planning",
        "Sprint",
        "Allocation",
        "User",
        "Stories",
        "Jira",
        "API",
        "coordination",
        "QA",
        "resources",
        "testing",
        "integration",
        "testing",
        "End",
        "End",
        "Environment",
        "Java",
        "Spring",
        "MVC",
        "JavaScript",
        "jQuery",
        "JSON",
        "Spring",
        "DAO",
        "Spring",
        "Boot",
        "Spring",
        "BatchSpring",
        "Security",
        "Spring",
        "IntegrationLinux",
        "SpringHibernate",
        "integration",
        "framework",
        "JSP",
        "Oracle",
        "PLSQL",
        "MongoDB",
        "XML",
        "Spring",
        "web",
        "flow",
        "JunitGIT",
        "Maven",
        "Jenkins",
        "Microservices",
        "EC2",
        "VPC",
        "Docker",
        "REST",
        "web",
        "service",
        "HTML",
        "CSS",
        "SASS",
        "AJAX",
        "JiraAngular",
        "JS",
        "Java",
        "Developer",
        "Walmart",
        "Bentonville",
        "AR",
        "May",
        "February",
        "project",
        "Single",
        "Sign",
        "feature",
        "thirdparty",
        "application",
        "Walmart",
        "network",
        "directory",
        "users",
        "Ping",
        "Federate",
        "Server",
        "authentication",
        "process",
        "token",
        "password",
        "authenticating",
        "federation",
        "service",
        "attributes",
        "life",
        "time",
        "attributes",
        "agent",
        "configuration",
        "file",
        "federation",
        "setup",
        "Responsibilities",
        "application",
        "AGILESCRUM",
        "methodology",
        "user",
        "interface",
        "JSP",
        "JavaBeans",
        "JSTL",
        "Custom",
        "Tag",
        "JavaScript",
        "CSS",
        "JQuery",
        "Nodejs",
        "HTML",
        "SASS",
        "Ajax",
        "application",
        "Working",
        "experience",
        "Relational",
        "Databases",
        "MySQL",
        "Oracle",
        "PLSQL",
        "SQL",
        "Server",
        "framework",
        "DependencyInjection",
        "MVC",
        "design",
        "pattern",
        "Auto",
        "Job",
        "scheduling",
        "module",
        "AJAX",
        "JSON",
        "data",
        "REST",
        "APIs",
        "data",
        "server",
        "display",
        "order",
        "J2EE",
        "Design",
        "Patterns",
        "Data",
        "Transfer",
        "Object",
        "DTO",
        "DAO",
        "Value",
        "Object",
        "Template",
        "spring",
        "components",
        "Dispatcher",
        "Servlets",
        "Controllers",
        "Model",
        "View",
        "Spring",
        "Bean",
        "Factory",
        "object",
        "AOP",
        "framework",
        "implementation",
        "enterprise",
        "integration",
        "Web",
        "Services",
        "Legacy",
        "Systems",
        "SOAP",
        "REST",
        "Axis",
        "Jersey",
        "frameworks",
        "Restfulweb",
        "services",
        "JAXRS",
        "JERSY",
        "tool",
        "application",
        "JMS",
        "PointtoPoint",
        "JMS",
        "Queue",
        "messages",
        "multiuser",
        "web",
        "application",
        "JSP",
        "Servlet",
        "JDBC",
        "Spring",
        "Hibernate",
        "framework",
        "functionality",
        "database",
        "developers",
        "PLSQL",
        "data",
        "tables",
        "Oracle",
        "Maven",
        "Script",
        "JAR",
        "WAR",
        "EAR",
        "dependency",
        "JARS",
        "project",
        "WebLogic",
        "application",
        "Server",
        "XSD",
        "Schema",
        "DTD",
        "XML",
        "documents",
        "web",
        "services",
        "services",
        "Experience",
        "Linux",
        "database",
        "servers",
        "JPA",
        "annotations",
        "database",
        "CQL",
        "Cassandra",
        "Query",
        "Language",
        "data",
        "Cassandra",
        "database",
        "Database",
        "development",
        "creation",
        "tables",
        "SQL",
        "procedures",
        "functions",
        "views",
        "indexes",
        "constraints",
        "triggers",
        "SQL",
        "response",
        "time",
        "application",
        "NoSQL",
        "persistence",
        "pattern",
        "data",
        "app",
        "performance",
        "indexing",
        "Maven",
        "generating",
        "system",
        "builds",
        "Jenkins",
        "integration",
        "Wrote",
        "unittesting",
        "codes",
        "JUnit",
        "bugs",
        "defects",
        "Firebug",
        "JUNIT",
        "Test",
        "cases",
        "Spring",
        "Controllers",
        "Web",
        "Service",
        "Clients",
        "Service",
        "Layer",
        "Junit",
        "Used",
        "Log",
        "4j",
        "testing",
        "system",
        "state",
        "JIRA",
        "issuesproject",
        "work",
        "flow",
        "change",
        "requests",
        "code",
        "reviews",
        "Continuous",
        "Integration",
        "automation",
        "framework",
        "tools",
        "Jenkins",
        "Hudson",
        "Environment",
        "Spring",
        "Hibernate",
        "Web",
        "services",
        "JAXRS",
        "JUNIT",
        "SOAP",
        "UI",
        "SQL",
        "JSP",
        "JDBC",
        "JSONxml",
        "JavaScript",
        "JQuery",
        "AJAX",
        "Html",
        "CSS",
        "PLSQL",
        "Jenkins",
        "Maven",
        "log4j",
        "Jenkins",
        "JIRA",
        "Spring",
        "IOC",
        "DTO",
        "JMS",
        "APACHE",
        "AXIS",
        "Apache",
        "CXF",
        "GIT",
        "UNIX",
        "AGILESCRUMOracle",
        "Tomcat",
        "Drools",
        "Java",
        "Developer",
        "Aetna",
        "Hartford",
        "CT",
        "November",
        "May",
        "Aetna",
        "Inc",
        "American",
        "health",
        "care",
        "company",
        "care",
        "insurance",
        "plans",
        "services",
        "health",
        "longterm",
        "care",
        "disability",
        "plans",
        "Aetna",
        "individuals",
        "employers",
        "health",
        "care",
        "professionals",
        "producers",
        "others",
        "benefits",
        "products",
        "services",
        "Responsibilities",
        "phases",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "SDLC",
        "application",
        "Requirement",
        "Design",
        "Analysis",
        "Code",
        "development",
        "Worked",
        "oneonone",
        "client",
        "scheme",
        "layout",
        "interface",
        "design",
        "HTML5CSS3",
        "Bootstrap",
        "JavaScript",
        "UI",
        "JSP",
        "HTML",
        "HTML5",
        "CSS",
        "JavaScript",
        "AJAX",
        "JSON",
        "use",
        "cases",
        "development",
        "Struts",
        "functionalities",
        "High",
        "Level",
        "Detail",
        "level",
        "design",
        "system",
        "J2EE",
        "development",
        "model",
        "library",
        "struts",
        "form",
        "classes",
        "MVC",
        "core",
        "file",
        "operations",
        "system",
        "file",
        "downloads",
        "JSP",
        "Developed",
        "SOAP",
        "XML",
        "web",
        "services",
        "patterns",
        "SOA",
        "MVC",
        "pattern",
        "DAO",
        "pattern",
        "singleton",
        "Developed",
        "Stored",
        "Procedures",
        "procedures",
        "Hibernate",
        "project",
        "transactions",
        "Hibernate",
        "files",
        "CLOB",
        "BLOBs",
        "Oracle",
        "Data",
        "base",
        "Ant",
        "Maven",
        "Ivy",
        "dependency",
        "resolution",
        "volume",
        "procedures",
        "packages",
        "TOAD",
        "Experience",
        "Modifying",
        "queries",
        "Oracle",
        "g",
        "Rational",
        "Clear",
        "Case",
        "version",
        "control",
        "JUnit",
        "unit",
        "testing",
        "quartz",
        "scheduler",
        "applications",
        "basis",
        "Configured",
        "JBossapplication",
        "server",
        "web",
        "components",
        "applications",
        "Rule",
        "EnginesJBossDrools4x",
        "Workflows",
        "Human",
        "tasks",
        "Business",
        "rules",
        "validations",
        "Drools",
        "dashboard",
        "Business",
        "users",
        "troubleshooting",
        "error",
        "handling",
        "support",
        "projects",
        "EnvironmentStruts",
        "Hibernate",
        "Spring",
        "EJB",
        "JSP",
        "Servlets",
        "JMS",
        "XML",
        "SOAP",
        "WSDL",
        "JDBC",
        "JavaScript",
        "UML",
        "HTML",
        "JNDI",
        "CVS",
        "Log4J",
        "Maven",
        "Windows",
        "XPLinux",
        "Websphere",
        "App",
        "server",
        "WebLogic",
        "Rational",
        "Rose",
        "Oracle",
        "Jr",
        "Developer",
        "Meridian",
        "Soft",
        "June",
        "October",
        "Application",
        "customers",
        "orders",
        "Web",
        "operations",
        "orders",
        "splitting",
        "order",
        "lines",
        "web",
        "Status",
        "order",
        "request",
        "Responsibilities",
        "system",
        "design",
        "planning",
        "estimation",
        "implementation",
        "Use",
        "case",
        "diagrams",
        "Class",
        "diagrams",
        "Sequence",
        "diagrams",
        "process",
        "flow",
        "diagrams",
        "modules",
        "UML",
        "Rational",
        "Rose",
        "presentation",
        "layer",
        "JSP",
        "AJAX",
        "HTML",
        "CSSand",
        "client",
        "validations",
        "JavaScript",
        "Developed",
        "MVC",
        "Architectural",
        "Pattern",
        "Spring",
        "Framework",
        "usage",
        "J2EE",
        "design",
        "patterns",
        "namelySession",
        "Facade",
        "Factory",
        "Method",
        "Command",
        "Singleton",
        "base",
        "framework",
        "components",
        "application",
        "Modified",
        "Account",
        "View",
        "functionality",
        "display",
        "details",
        "tags",
        "beans",
        "JSP",
        "changes",
        "tier",
        "enhancements",
        "EJBs",
        "session",
        "entity",
        "beans",
        "business",
        "logic",
        "Code",
        "implementation",
        "refactoring",
        "peer",
        "review",
        "Developed",
        "Session",
        "Beans",
        "DAO",
        "classes",
        "Accounts",
        "Modules",
        "Spring",
        "JDBC",
        "data",
        "access",
        "layer",
        "information",
        "database",
        "Consumed",
        "Web",
        "Services",
        "WSDL",
        "UDDI",
        "party",
        "payments",
        "customers",
        "JAXB",
        "API",
        "XML",
        "Schema",
        "classes",
        "Units",
        "integration",
        "JUnit",
        "bug",
        "fixing",
        "User",
        "acceptance",
        "testing",
        "test",
        "cases",
        "CVS",
        "version",
        "control",
        "Maven",
        "build",
        "tool",
        "Log4j",
        "errors",
        "messages",
        "performance",
        "logs",
        "JBoss",
        "Application",
        "Server",
        "application",
        "Environment",
        "Java",
        "JSP",
        "Servlets",
        "Struts",
        "frame",
        "work",
        "Tag",
        "Java",
        "Script",
        "CSS",
        "AJAX",
        "JDBC",
        "JNDI",
        "Oracle",
        "8i",
        "Java",
        "Struts",
        "Validation",
        "frameworkJavascript",
        "xml",
        "Maven",
        "WindowsUNIX",
        "Ant",
        "JUNIT",
        "SVN",
        "QC",
        "Edit",
        "Web",
        "Logic",
        "application",
        "server",
        "SQL",
        "Developer",
        "Education",
        "Bachelors",
        "Skills",
        "Java",
        "years",
        "JUnit",
        "years",
        "Maven",
        "years",
        "MODEL",
        "VIEW",
        "years",
        "years"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T21:27:45.527277",
    "resume_data": "Full Stack Java Developer iii Full Stack span lJavaspan span lDeveloperspan iii Full Stack Java Developer iii Kroger Specialty Pharmacy Lake Mary FL Over 9 years of experience in design and development in the domain of Pharmaceutical Financial Insurance and Telecommunications applications using Internet technologies based on Java and J2EE Technologies Strong Experience in Software Development methodologies based on Agile Scrum Waterfall TDD Iterative Extensive experience in designing professional UI web applications using frontend technologies like HTMLHTML5 CSSCSS3 JavaScript XML DHTML XHTML jQuery JSON Angular JSNodejs Angular 2040and Bootstrap Implemented several design patterns such as Business Delegate Service Locator Singleton Object Factory Front Controller Factory Design pattern Singleton and Proxy Design Pattern Experience in building web applications using spring framework features like MVC AOP DAO Data Access Object SpringBoot SpringSecurity SpringJDBC templates SpringBatch Developing Applications using latest JavaJ2EE technologies such as Cassandra Java 8 Junitand Cucumber Good Exposure to implementing Service Oriented Architecture SOA using Web Services including SOAP JAXWS JAXRS SOAP UI tool andconcreteRESTful APIs Experience in using ReactJS components Forms Events Keys Router plus Redux and Flux concept Experience with Hibernate Persistence Framework and Design patterns like Singleton Factory Session Facade Business Delegate Data Access Object Data Transfer Object Expertise in working with cloud services like AWS and NoSQL databases like Cassandra MongoDB Experience with spark to handle streaming data and Scala for the batch processing and spark streaming data Mocked validated and documented Web API SwaggerPostman Hands on experience in amazon webservices which includes Cloud Formation Elastic Load Balancer ElasticBean Stalk Cloud watchIAM ServerMigration Route53 SQS VPC S3 DynamoDB EC2 Container Service Lambda Extensive experience of working with RDBMS like Oracle 11g12c MySQL SQL Server and developing Stored Procedures Triggers Views Functions and SQL Queries Executed a continuous delivery pipeline with Docker JenkinsHudsonGitHub and AWSAMIs results in generating of new docker container whenever a new GitHub branch get started Experience in deploying and configuring multitier enterprise applications on multiple servers such as Web logic Server JBoss WebSphere and Apache Tomcat Experience in TDD using JUnit framework with Mockito and Easy mock Spring Junit Runner Experienced in using Log4j and good expertise in application build tools like ANT Gradle and Maven Experience in the use of Defect Tracking Version Management Tools such as SVN CVS GIT Experience with unit testing the applications using Junit and JMeter Used various issue and bug tracking tools like JIRA Bitbucket Authorized to work in the US for any employer Work Experience Full Stack Java Developer iii Kroger Specialty Pharmacy Lake Mary FL January 2018 to Present KrogerSpecialtyPharmacy KSP is one of the highly innovative team situated in Krogers own newly remodelled Digital Group Kroger delivers Web Mobile ecommerce ApplicationsPortals that provide users a worldclass digital UI shopping experiences KSP serves physicians patients and health care providers throughout the United States with their first ever services like online drug refill options KSP Portal is extremely organized for patients to login to their own account and can look at their current Prescriptions Drug usage Refills etc in such a way that It is easy to get their order in and they are fast Theres no waiting for paperwork to move from desk to desk They can find answers very fast Highlights of the application can be the Leftnav navigation where it provides links to MyPrescriptions Sign Up Prescription history Refills Auto Refill of drugs Find a Pharmacy ManagePatients Patient Profile Page Add a Patient Patient Access DrugInfo Medication Tool box Pet medications PharmacyServices Patient Wellness Services Vaccinations Diabetic Needs FAQs Responsibilities Followed Scaled Agile Scrum Methodology for developing Web Application with a twoweek sprint Gained experience with full stack development including frontend and backend programming database management and user authentication Created WebBootstrap application using Reactjs Redux JavaScript Java Kotlin SQLServer DockerImages Nginx Kafka Zookeeper Broker Managers JUnit and Enzyme Used both Java and React to develop MVP for client for the SPA of pixel perfect UI Responsible for designingbuilding all functional aspects of the feature in both frontend and backend Developed frontend for a web application that closely mirrors the CVS pharmacy application with ReactJSNodejs JavaScriptHTML Bootstrap and CSS Developed Pharmacy Management RESTful APIs using Microservicearchitecture interacting through a combination of ApacheKafka Zookeeper message brokers and Pivotal Cloud Foundry PCF Developed Responsive Single Page Applications SPA using ReactJS and rendering pages on the server side for faster loading and updating by 3x Used Multiple repositories like Rxapp for UI on presentation layer Rxbff backend for front end API and PatientserviceAPI on service layer with Securitybff in security layer connecting with a thirdparty data base CPR DB from GitLab and Bitbucket Utilized J2EE technologies objectoriented programming and Core Java for creating new features based on business requirements to improve pharmacy workflow efficiency Having enough knowledge on GitBitbucket Yarn NpmBabel Docker etc and have rich experience in integrating Unit testing tools such as Jest Enzyme Mocha etc Used SourceTree GitGUI for creating the feature branches and merge the feature branches into Develop or Master Branches following the git lifecycle phases Used SSMS SQL Server Management Studio to get the bak files provided by third party data base CPR Used StoredProcedures for applications that needed to execute as part of a scheduling mechanisms Experienced in developing complex builds dependency management and continuous integration using Gradle Maven Ant Jenkins Artifactory Nexus and Bash shell scripting for deploying Java Kotlin applications Designed CICD processPipelines across multiple servers using Jenkins and Git Used JIRA for defect management and to keep track of bugs and issues following the swim lanes in it Prepared documentationSpikes for some of the recurring defects and resolutions and business comments for those defects Environment JAVA J2EE JDK8 Kotlin Reactjs Nodejs JavaScript HTML CSS jQuery SQL Server Microservice Architecture REST APIs Gradle Maven Jenkins PCF JUnit Enzyme GitLab Bitbucket Full Stack Java Developer CenturyLink CO June 2017 to December 2018 CenturyLink is an American Telecommunications company that provides communications and data services to residential business governmental and wholesale customers in 37 statesApriliaFiber plus is a fastmoving project which had a 45 day deliverable It contains modules like Solution engine Validation services Camunda Bpm SFDC ARM LIMSDatalake using SpringBoot project for solution Maven modulestwo flavors technology and solutionsolution engine Microservice based solution SpringBoot Java MongoDB strategic platform replica set secondary and primary preferred automation dedicated infrastructure two machines solution engine validation engine Pronghornphysical layerRest exposed APIs Responsibilities Involved in analysis and design and development of the project which is based on MVC ModelViewController Architecture and Design Patterns Participated in Scrum meetings with the team on daily basis and weekly team meetings every week Used Swagger and Postmantools in testing the Rest API endpoints and swagger gives the rich UI to test API Used JSON for the data transmission between UI and server Strong programming skills in designing and implementation of multitier applications using webbased technologies like Spring MVC and Spring Boot 158 Used SpringBoot framework to create properties for various environments and usedyml files for configuration Created SpringBoot applications to connect them to various databases and generated queries to retrieve data and modify the collections in the MongoDB Developed Microservices with SpringBoot and SpringBatch along with the test cases Experience in development and deployment of java basedREST services using SpringBoot Used Rest Controller in Spring framework to create RESTfulWebservices and JSON objects for communication Used Tomcat server for application deployment Developed WebServices to transfer data between client and server vice versa using REST WSDL and UDDI Responsible for coding NoSQL Statements and Stored procedures for back end communication and persisting of data using NoSqlBoosterMongoBooster 32 Infrastructure setup for all the network elements provided in Mongoservices module Performed CRUD Create Read Update Deleteoperations on the network elements Core_Device Evc_RR NMI_RR NID_Device UNI_RR of LIMS Module Involved in configuring JNDI properties and used Data Source objects for database communication Using RallyCA Agile central as project management tool for user stories and task assignment Developed Rest based webservices to facilitate communication between client and servers Build process with Maven tool to deploy the application in performing tasks like clean install and build Deployed Bpm files using CamundaModeler and configured LDAP to authenticate users Used Log4j API for logging in development testing and production environments Hands on experience on Operating Systems like LINUX Involved in developing reusable core libraries using core java classes and Interfaces Implemented version controlling using CVS and used Jenkins for continuous integration Wrote unit test cases using JUnit framework and unit tested the developed components Followed Git lifecycle to checkin and checkout projects from Gitlab Innovation IT via Master Dev MMP Branches Worked with configuration management groups for providing various deployment environments set up including System Integration testing Quality Control testing etc Environment J2EE JDK8 jQuery JavaScript MongoDB Spring SpringBoot NoSQL Web Services SOAP JMS REST APIs Multithreading Maven Jenkins Pivotal cloud foundryGit GitLab Camunda Bpm LDAP Log4jLinux Full Stack Java Developer PNC Financial Services Pittsburgh PA May 2016 to June 2017 PNC Financial Services Group is a financial holding company that offers services like Insurance investment and loans The application offers various features like creating new accounts managing existing accounts and personal loan applications Responsibilities Agile Methodologies SCRUM are used to improve the control over the project and reduce the dependencies on individuals as the project has significant number of teams Developed using new features of Java 18annotations Generics enhanced for loop and Enums Designed the presentation layer GUI using JavaScript JSP HTML CSS Angular 4 Customs tags and developed ClientSide validations Implemented various features of Spring framework such as Dependency Injection IOC Spring MVC Spring WebFlux frameworks Annotations and Spring Integration with Hibernate Framework Developed a Single Page Application which can switch to different components using Angular40 Added dynamic functionality to the application by implementing jQuery Nodejs Modularized frontendCSS and JavaScript code with SASS Built a realtime mouseclick user analytics web service with Nodejs Used Swagger Framework implementing the Restful API and Swagger gives the rich UI to test API Implemented Spring MVC architecture and increased modularity by allowing the separation of crosscutting concerns using spring Boot Worked on Rest Web services as well as Node Rest framework for backend services used Mongo DB NoSQL for database services Developed user interface by using the ReactJs Flux for SPA development Created Data as Service DAS based Restful Jersey web service to connect to a Mongo DB Code application components as per TDD using Hibernate Worked with Microservices related frameworks SpringRibbon Eureka for clientside load balancer andnetwork discovery Also Integrated with Spring Cloud components like EurekaRibbon and Zuul Proxy Involved in writing Spring Configuration XML file that contains declarations and business classes are wiredup to the frontend managed beans using Spring IOC pattern Worked in using React JS components Forms Events Keys Router Animations and Flux concept Involved in requirements gathering and Capacity planning for MultiDatacentre four and Cassandra Cluster used Oracle DB and MongoDB for database related activities Implemented Spring Circuit breaker pattern integrateddashboard to monitor Spring micro services Worked with Kafka Cluster using ZooKeeper Implemented RESTfulmicroservices using the Domain given design to develop the largescale backend infrastructure leveraging Spring Boot SpringIntegration Hibernate SpringDataand MVC Implemented RESTmicroservices using springboot generated metrics with method level granularity and Persistence using spring AOP and Spring Actuator Worked on Camelbased integration middleware solution for provisioning services by design and implementation of business logic and data processing routes using Apache Camel Used Microservicesarchitecture withSpring Bootbased services interacting through a combination of REST and Apache Kafka message brokers Developed testdriven development TDD strategy guiding use of theNUnittesting framework Implemented preauthentication and data base security using Springsecurity and securing application access and SpringBatch for scheduling and maintenance of batch jobs Worked on writing Scala programs using SparkSparkSQL in performing aggregations Used Microservice architecture with spring boot based services interacting through a combination of REST and Apache Kafkamessage brokers and worked with Kafka cluster using Zookeeper Developed the DAO layer for the application using spring Hibernate and developed various logics and reports using HQL and Hibernate criteria as ORM to map Java classes to data base tables Developed session entity beans and message driven beans Application Deployment on pivotal cloud foundry using CF push Designed built and deployed a multitude application utilizing almost all the AWS stack Including EC2 R53 S3 RDS DynamoDB SQS IAM and EMR focusing on highavailability fault tolerance and autoscaling Design roles and groups for users and resources using AWSIdentity Access Management IAM Good knowledge in writing ApacheSpark application using Python and Scala Used ELK for reporting monitoring logging debugging and error tracing Worked on purging logs onElasticSearch DB and Kibana 3 UI Also involved in troubleshooting logs using Log stash and Kibana Troubleshooting of different versions of MongoDB and cluster configurations to ensure highavailability in various crash scenarios and restoring roll backs to avoid loss of Data Participated in unit testing system testing and created various test scripts using JUnit Used Git as Version Control System an important component of Source Configuration Management Implemented Jenkins as Continuous Integration Server for configuring designing and administrating integrating with other system tools Developed all custom processes workflows and schemes within JIRA to accommodate the organizations needs Environment JDK18 Java Scripts HTML Angular 2040 knockoutjs Struts Junit Servlets JDBC JQUERY JSON AJAX DOM HQLBootstrapJBoss Spring Boot cloud foundryScala Spark Selenium JIRAApache Kafka Restful servicesHibernate DAO Eclipse EJB log4j NOSQL MongoDB GIT Maven Jenkins AWS Sr Java Developer Liberty Mutual Life Insurance March 2014 to April 2016 The New Business Accounting solution automates the process of Reconciliation and Balancing process The Accounting solution runs the complex accounting rules for generating Trail balance reports and accepts data feed from multiple vendor sources to automate the process of RC Responsibilities Designed and developed the application by following AgileScrum methodology involved in daily stand up and spring planning sessions as a part of Agile Scrum Used Java concepts like ObjectOrientedProgramming Exceptionhandling and DesignPatterns while developing the application modules Developed the web pages using jQuery HTML5 CSS3 Bootstrap JavaScriptJSP and implemented AngularJS directives controllers paginations and twoway bindings Utilized AWS Lambda platform to upload data into AWS S3buckets and to trigger other Lambda functionsIncluding EC2 focusing on highavailability fault tolerance and autoscaling Used AngularJS as frameworks to create single page applications SPA which can bind data to specific views and synchronize data with server using Sass Less Bootstrap AngularJS Worked on MongoDB database concepts such as locking indexes shard replicationschema design etc Expertise in Angular 20 framework and its ability to create simple and scalable code for SPA Extensive uses of AngularJS directives to get JSON data using AJAX from RESTful API and modify DOM Develop various screens for the front end using React js and used various predefined components from NPM Node Package Manager and React Redux library Worked on Jenkins for project documentation and behaviour driven development Developed the presentation layer using Model View Architecture implemented by SpringMVC which was initially done in the legacy system using Struts Used the Java Collections API extensively in the application as security protection for XML SOAP REST NodeJS ExpressJS and JSON to integrate with designs in Web Deployment Implemented Design patterns like DAO Singleton Pattern and MVC design pattern of Spring framework Building RESTful services using Microservices architecture with tools such as Spring boot Implemented Webservice client using CXF and Spring and implemented EJBsSessionbeans for business logic Configured the adapter for Event processing that can be synchronous or asynchronous and listeners within the adapter to provide support for SOAP over HTTP HTTPS and JMS transports Designed and developed the UIscreens data base design changes and changes to user access modules Developed Microservices using Spring MVC SpringBoot Spring Cloud Used a Microservices architecture with SpringBoot based services interacting through a combination of REST and SpringBoot Used Microservices are designed with the individual database and project with no dependencies Worked on RESTfulWebServices for transferring XML data between two interfaces UsedEclipseSpring Tool Suite STS for Microservices with Spring Boot deployed into AWS lambda Integrated the application with SpringMVC using Spring Boot Spring Dependency Injection and Annotations Leveraged AWS cloud services such as EC2 autoscaling and VPC Virtual Private Cloud to build secure highly scalable and flexible systems Involved in writing Oracle PLSQL Stored procedures Triggers and views Developed applications using rule engines Drools and ILOG to validate the business user roles Wrote JUNIT test cases for web serversand done Unit testing execution with JASMINE and KARMA Involved in test automation like QTP SeleniumWebDriverand Protractor Created continuous integration builds usingJenkins and deployed on WebSphere app server Used Maven tool to configure and build the application project and integrated with Jenkins Apache Mesos and Kubernetes were used as the best ecosystem to deploy and manage Microservices Involved in CICD process using GIT Jenkins job creation Maven build Create Docker image and deployment in AWS environment Involved in requirements gathering and Capacity planning for MultiDatacentre four and Cassandra Cluster used Oracle DB and MongoDB for Database related activities Involved with Sprint Planning Sprint grooming Allocation of User Stories using Jira Used Log4J API for logging and debugging Provided good coordination with QA resources for the Functional testing integration testing and End to End testing Environment Java 8 Spring MVC JavaScript jQuery JSON Spring DAO Spring Boot Spring BatchSpring Security Spring IntegrationLinux SpringHibernate integration framework JSP Oracle PLSQL MongoDB XML Spring web flow JunitGIT Maven Jenkins Microservices AWS EC2 VPC Docker REST web service HTML CSS SASS AJAX JiraAngular 20 Angular JS Java Developer Walmart Bentonville AR May 2012 to February 2014 This project is to provide Single Sign on feature for a thirdparty application which is outside Walmart network which is used by the active directory users involving Ping Federate Server in authentication process to provide a token which includes password for authenticating federation service and also several attributes such as token life time where can find these attributes in the exported agent configuration file from the federation setup Responsibilities Designed and developed the application using AGILESCRUM methodology Developed user interface using JSP with JavaBeans JSTL and Custom Tag Libraries JavaScript CSS JQuery Nodejs HTML SASS and Ajax to speed the application Working experience on Relational Databases like MySQL Oracle PLSQL SQL Server Incorporating SpringIOCDAO framework for DependencyInjection with MVC design pattern for Auto Job scheduling module Used AJAX to request JSON data through REST APIs to acquire data from server and display in sorted order Involved in J2EE Design Patterns such as Data Transfer Object DTO DAO Value Object and Template Focused on the spring components such as Dispatcher Servlets Controllers Model and View Objects Implemented Spring Bean Factory to create proxy object using AOP framework Involved in implementation of enterprise integration with Web Services and Legacy Systems using SOAP and REST Using Axis and Jersey frameworks Involved in creating Restfulweb services using JAXRS and JERSY tool Developed application using JMS for sending and receiving PointtoPoint JMS Queue messages Developed a multiuser web application using JSP Servlet JDBC Spring and Hibernate framework to provide needed functionality and assisted database developers using PLSQL for managing data with the tables in Oracle Implemented Maven Script to create JAR WAR EAR dependency JARS and deploy the entire project onto the WebLogic application Server Implemented XSD Schema DTD XML documents for web services and tested services using SOAP Experience in compiling and tuning the Linux on database servers and JPA annotations to interact with database Used CQL Cassandra Query Language to read from and write data into Cassandra database Database development required creation of new tables SQL stored procedures functions views indexes and constraints triggers and required SQL tuning to reduce the response time in the application Implemented NoSQL persistence pattern for some data within app to increase performance by indexing Used Maven for generating system builds and Jenkins for continuous integration Wrote unittesting codes using JUnit resolved bugs and other defects using Firebug and wrote JUNIT Test cases for Spring Controllers and Web Service Clients in Service Layer using Junit Used Log 4j for debugging testing and maintaining the system state Using JIRA to manage the issuesproject work flow Participated in integrationtesting bugsfixing handling change requests and code reviews Implemented Continuous Integration of automation framework using tools like Jenkins Hudson Environment Spring Hibernate Web services JAXRS JUNIT SOAP UI SQL JSP JDBC JSONxml JavaScript JQuery AJAX Html CSS PLSQL Jenkins Maven log4j Jenkins JIRA Spring IOC DTO JMS APACHE AXIS Apache CXF GIT UNIX AGILESCRUMOracle Tomcat Drools Java Developer Aetna Hartford CT November 2010 to May 2012 Aetna Inc is an American managed health care company which sells traditional and care insurance plans and related services such as medical pharmaceutical dental behavioral health longterm care and disability plans Aetna is committed to providing individuals employers health care professionals producers and others with innovative benefits products and services Responsibilities Involved in various phases of Software Development Life Cycle SDLC of the application like Requirement gathering Design Analysis and Code development Worked oneonone with client to develop layout colour scheme and layout and implemented it into a final interface design with the HTML5CSS3 Bootstrap and JavaScript Designed and developed the UI using JSP HTML HTML5 CSS and JavaScript AJAX JSON Worked on various use cases in development using Struts and testing the functionalities Involved in preparing the High Level and Detail level design of the system using J2EE Involved in the development of model library struts and form classes MVC Worked on core java using file operations to read system file downloads and to present on JSP Developed SOAP based XML web services Used different patterns like SOA MVC pattern DAO pattern and singleton Developed Stored Procedures triggered stored procedures using Hibernate in secondary project involved in developing Programmatic transactions using Hibernate Extensively worked on uploading files into CLOB and BLOBs of Oracle Data base Migrated from Ant to Maven via Ivy for dependency resolution Worked with high volume and complex PLSQLstored procedures and packages using TOAD Experience in Updating Modifying queries in Oracle 10g Used Rational Clear Case for version control and JUnit for unit testing Used quartz scheduler to process or trigger the applications on a daily basis Configured JBossapplication server and deployed the web components Developed applications using Rule EnginesJBossDrools4x Workflows Human tasks implement Business rules validations and provided Drools dashboard for Business users Provided troubleshooting and error handling support in multiple projects EnvironmentStruts Hibernate Spring EJB JSP Servlets JMS XML SOAP WSDL JDBC JavaScript UML HTML JNDI CVS Log4J Maven Windows XPLinux Websphere App server WebLogic Rational Rose Oracle Jr Developer Meridian Soft June 2009 to October 2010 This Application allows the customers to post their orders through Web Various operations relating to their orders such as expediting canceling splitting the order lines can be done through the web itself Status of their order is also displayed upon request Responsibilities Participated in system design planning estimation and implementation Involved in developing Use case diagrams Class diagrams Sequence diagrams and process flow diagrams for the modules using UML and Rational Rose Developed the presentation layer using JSP AJAX HTML CSSand client validations using JavaScript Developed and implemented the MVC Architectural Pattern using Spring Framework Effective usage of J2EE design patterns namelySession Facade Factory Method Command and Singleton to develop various base framework components in the application Modified Account View functionality to enable display of blocked accounts details that have tags This involved modifying beans JSP changes and middle tier enhancements Developed various EJBs session and entity beans for handling business logic Code implementation using java groovy refactoring peer review Developed Session Beans and DAO classes for Accounts and other Modules Extensively used Spring JDBC in data access layer to access and update information in the database Consumed Web Services using WSDL and UDDI from third party for authorizing payments tofrom customers Used JAXB API to bind XML Schema to java classes Involved in Units integration using JUnit bug fixing and User acceptance testing with test cases Used CVS for version control and Maven as a build tool Used Log4j for logging errors messages and performance logs Used JBoss Application Server to deploy application Environment Java 14 JSP Servlets Struts frame work Tag libraries Java Script CSS AJAX JDBC JNDI Oracle 8i Java beans Struts Validation frameworkJavascript xml Maven WindowsUNIX Ant JUNIT SVN QC Edit Plus Web Logic application server SQL Developer Education Bachelors Skills Java 9 years JUnit 9 years Maven 9 years MODEL VIEW CONTROLLER 9 years testing 9 years",
    "unique_id": "e461b787-81b9-4adc-8d1b-59f4a8780e26"
}