{
    "clean_data": "Sr JavaJEE Programmer Sr span lJavaspanJEE Programmer Sr JavaJEE Programmer Dish Network Work Experience Sr JavaJEE Programmer Dish Network Englewood CO February 2018 to Present Description Axiom is a proprietary webbased tool created for agents to input and modify sales orders for direct and indirect sales partners within DISH Network This application can be accessed by direct sales agents partner agents retailer agents The design was created with versatility to accommodate the differences in each agents selling techniques Axiom calls several SOAP and REST services to perform various operations like credit check address check appointment scheduling generate invoice payment etcand also to store or retrieve customers data from database Responsibilities Developed the application using Spring Framework that leverages classical ModelView Controller MVCarchitecture Designing and implementing the User Interface using JavaScript JQuery HTML CSS Bootstrap andAjax Developed classes using core java multithreading concurrency memory management and some spring IOC Used spring dependency injection annotations and Spring MVC components to implement business layer and navigation part of application Participated in designing the user interface for the application using JavaScript JQuery and Java Server Pages JSP Implemented Tiles Framework for the views layout Worked with JAXB SAXP and XML Schemafor exporting data into XML format and importing data from XML format to data base and JAXB in the web services request response data marshalling as well as marshaling process Implemented the web services client to consume the thirdparty service API for validating credit cards Used XML Web Services using SOAP to transfer the amount to transfer application that is remote and global to different financial institutions Involved in the database retrieval and connections establishment to the Oracle Server database Involved in creating test cases using JUnit strictly following Agilemethodology Provided production support for the application and providing quick resolution for the issues that are faced inproduction Deployed Applications on Apache Tomcat Server and Used Gradle to configure build and deploy the Modules Also integrated these scripts with Jenkins Involved in unit testing troubleshooting and debugging Modifying existing programs with enhancements Involved in fixing bugs the bugs or defects in the application Used Log4J to capture the log that includes runtime exceptions and used GitHub for source code maintenance Environment J2EE Java Spring MVC Tiles JSP Git Jenkins SOAP WSDLOracle JavaScript JQuery HTML CSS BootstrapAjax Gradle Tomcat and Jenkins JavaJEE Programmer Mutual of Omaha Omaha NE July 2016 to January 2018 Description Mutual of Omaha is an insurance is a financial services company which is an automated multiapplication system by which customers can have quick processing of loans It consists of the modules such as Authorization Audit Trails that reduce the manual load on the staff and Payment module that provide convenience and control for the customers when applying for loan Responsibilities Implemented the project in Agile methodology and participated actively in daily standup calls Developed user interactive web pages using HTML5CSS3 JavaScript Angular and Nodejs Worked with Angular to generate various components routes services pipes and structured the application All the functionality of the application is implemented using Spring IOCSpring Boot Spring transactions and Spring security modules Configured beans using Spring IOC for dependency injection and breaking down the backend logic functionality with Spring AOP concept Used Spring Security for user authentication and API authorization Configured Spring MVC for the data transfer between frontend and midtier to handle request from the client Implemented Microservices using Spring Boot to enabled discovery using Netflix Eureka Server Implemented circuit breaker patterns in Spring BootMicroservices application using Hystrix to monitor the services using Hystrix Dashboard and load balancing among the servers was implemented using Spring Ribbon Worked on Swagger API and autogenerated documentation for all REST calls Developed RESTful web services using JAXRS annotations to specify the type of data produced or consumed validate the user requests mapping user requests and to pass input parameters Worked on establishing links between web services using HATEOS from Spring based application Used Hibernate as ORM tool for mapping cache HQL and relationship of each table in database to Java objects Worked with NoSQL database to compose and execute MongoDB scripts to insert and update database by utilizing aspects like replica sets shading and clever document design Implemented a distributed messaging queue to integrate with MongoDB using Kafka and Zookeeper Implemented realtime data pipeline as part of enterprise messaging pattern using Kafka and Spark Streaming Working with Amazon Web Services AWS like EBS EBS Cloud Formation Auto Scaling S3 and Route53 Worked on creating the Docker containers and Docker consoles for managing the application lifecycle Performed Unit testing on angular applications using tools like Jasmine And implemented POM based testing automation testing framework utilizing Java testing and Selenium WebDriver Used Gradle build tool to build and deployed application on JBoss application server Used Log4j to log the information to track the problem User stories and defects are maintained in Jira tool And used GIT repository to push the code and interact with other developers throughout the company Environment Agile Java 18 J2EE HTML5 CSS3 Angular 40 Nodejs Spring Boot 15 Spring Security 31 RESTful Swagger Hibernate 435 MongoDB 30 Docker AWS Apache Kafka JBoss AS 7 Jasmine Selenium Log4j 2 GIT Gradle Jenkins Jr Java Developer Derron IT India IN March 2015 to January 2016 Description It is an internal project developed as a fully Webbased system It deals with managing and tracking of all the issues which arise either prior to or after the release of various software solutions The system should also provide the facility to send Email notifications to stakeholders whenever an issue is raised or an existing one is updated It provides timely escalation to the concerned authority Responsibilities Involved in the Requirements collection Analysis from the business team Created the design documents with use case diagram class diagrams and sequence diagrams using Rational Rose Implemented the MVC architecture using Apache Struts12 Framework Implemented Action Classes and serverside validations for account activity payment history and Transactions Implemented views using Struts tags JSTL20 and Expression Language Implemented Tiles Framework for the views layout Implemented session beans to handle business logic for fund transfer loan credit card fixed deposit modules Worked with JAXB SAXP and XML Schema for exporting data into XML format and importing data from XML format to data base and JAXB in the web services request response data marshalling as well as marshaling process Implemented the web services client to consume the thirdparty service API for validating credit cards Used XMLWeb Services using SOAP to transfer the amount to transfer application that is remote and global to different financial institutions Used Java Messaging Services JMS for reliable and asynchronous exchange of important information such as payment status report Used Log4J to capture the log that includes runtime exceptions Used Clear Case for source code maintenance Environment J2EE Java Struts Tiles JSP JNDI Clear Case SOAP WSDL UDDI JAXB JAXP Schema XST EJB 20 ANT JavaScript JMS Rational Rose WSAD DB 2 Education Masters",
    "entities": [
        "GIT",
        "Nodejs Worked with Angular",
        "Responsibilities Developed",
        "Spring Framework",
        "Spark Streaming Working",
        "Developed",
        "API",
        "Present Description Axiom",
        "India",
        "Transactions Implemented",
        "Hystrix",
        "Spring MVC",
        "Jenkins Involved",
        "Created",
        "Omaha",
        "Responsibilities Involved",
        "Apache Struts12 Framework Implemented Action Classes",
        "JBoss AS",
        "Spring BootMicroservices",
        "Spring IOC",
        "Authorization Audit Trails",
        "Sr",
        "Swagger Hibernate 435",
        "Netflix",
        "Performed Unit",
        "Amazon Web Services AWS",
        "Requirements",
        "DISH Network",
        "Responsibilities Implemented",
        "MVC Tiles",
        "REST",
        "SOAP",
        "Axiom",
        "XML",
        "GitHub",
        "Used Spring Security",
        "Worked",
        "NoSQL",
        "JBoss",
        "Rational Rose Implemented",
        "JUnit",
        "Implemented Microservices",
        "JAXRS",
        "JSP Git Jenkins",
        "Zookeeper Implemented",
        "Used Java Messaging Services",
        "Oracle Server",
        "MVC",
        "POM",
        "Agile",
        "Network Englewood CO"
    ],
    "experience": "Experience Sr JavaJEE Programmer Dish Network Englewood CO February 2018 to Present Description Axiom is a proprietary webbased tool created for agents to input and modify sales orders for direct and indirect sales partners within DISH Network This application can be accessed by direct sales agents partner agents retailer agents The design was created with versatility to accommodate the differences in each agents selling techniques Axiom calls several SOAP and REST services to perform various operations like credit check address check appointment scheduling generate invoice payment etcand also to store or retrieve customers data from database Responsibilities Developed the application using Spring Framework that leverages classical ModelView Controller MVCarchitecture Designing and implementing the User Interface using JavaScript JQuery HTML CSS Bootstrap andAjax Developed classes using core java multithreading concurrency memory management and some spring IOC Used spring dependency injection annotations and Spring MVC components to implement business layer and navigation part of application Participated in designing the user interface for the application using JavaScript JQuery and Java Server Pages JSP Implemented Tiles Framework for the views layout Worked with JAXB SAXP and XML Schemafor exporting data into XML format and importing data from XML format to data base and JAXB in the web services request response data marshalling as well as marshaling process Implemented the web services client to consume the thirdparty service API for validating credit cards Used XML Web Services using SOAP to transfer the amount to transfer application that is remote and global to different financial institutions Involved in the database retrieval and connections establishment to the Oracle Server database Involved in creating test cases using JUnit strictly following Agilemethodology Provided production support for the application and providing quick resolution for the issues that are faced inproduction Deployed Applications on Apache Tomcat Server and Used Gradle to configure build and deploy the Modules Also integrated these scripts with Jenkins Involved in unit testing troubleshooting and debugging Modifying existing programs with enhancements Involved in fixing bugs the bugs or defects in the application Used Log4J to capture the log that includes runtime exceptions and used GitHub for source code maintenance Environment J2EE Java Spring MVC Tiles JSP Git Jenkins SOAP WSDLOracle JavaScript JQuery HTML CSS BootstrapAjax Gradle Tomcat and Jenkins JavaJEE Programmer Mutual of Omaha Omaha NE July 2016 to January 2018 Description Mutual of Omaha is an insurance is a financial services company which is an automated multiapplication system by which customers can have quick processing of loans It consists of the modules such as Authorization Audit Trails that reduce the manual load on the staff and Payment module that provide convenience and control for the customers when applying for loan Responsibilities Implemented the project in Agile methodology and participated actively in daily standup calls Developed user interactive web pages using HTML5CSS3 JavaScript Angular and Nodejs Worked with Angular to generate various components routes services pipes and structured the application All the functionality of the application is implemented using Spring IOCSpring Boot Spring transactions and Spring security modules Configured beans using Spring IOC for dependency injection and breaking down the backend logic functionality with Spring AOP concept Used Spring Security for user authentication and API authorization Configured Spring MVC for the data transfer between frontend and midtier to handle request from the client Implemented Microservices using Spring Boot to enabled discovery using Netflix Eureka Server Implemented circuit breaker patterns in Spring BootMicroservices application using Hystrix to monitor the services using Hystrix Dashboard and load balancing among the servers was implemented using Spring Ribbon Worked on Swagger API and autogenerated documentation for all REST calls Developed RESTful web services using JAXRS annotations to specify the type of data produced or consumed validate the user requests mapping user requests and to pass input parameters Worked on establishing links between web services using HATEOS from Spring based application Used Hibernate as ORM tool for mapping cache HQL and relationship of each table in database to Java objects Worked with NoSQL database to compose and execute MongoDB scripts to insert and update database by utilizing aspects like replica sets shading and clever document design Implemented a distributed messaging queue to integrate with MongoDB using Kafka and Zookeeper Implemented realtime data pipeline as part of enterprise messaging pattern using Kafka and Spark Streaming Working with Amazon Web Services AWS like EBS EBS Cloud Formation Auto Scaling S3 and Route53 Worked on creating the Docker containers and Docker consoles for managing the application lifecycle Performed Unit testing on angular applications using tools like Jasmine And implemented POM based testing automation testing framework utilizing Java testing and Selenium WebDriver Used Gradle build tool to build and deployed application on JBoss application server Used Log4j to log the information to track the problem User stories and defects are maintained in Jira tool And used GIT repository to push the code and interact with other developers throughout the company Environment Agile Java 18 J2EE HTML5 CSS3 Angular 40 Nodejs Spring Boot 15 Spring Security 31 RESTful Swagger Hibernate 435 MongoDB 30 Docker AWS Apache Kafka JBoss AS 7 Jasmine Selenium Log4j 2 GIT Gradle Jenkins Jr Java Developer Derron IT India IN March 2015 to January 2016 Description It is an internal project developed as a fully Webbased system It deals with managing and tracking of all the issues which arise either prior to or after the release of various software solutions The system should also provide the facility to send Email notifications to stakeholders whenever an issue is raised or an existing one is updated It provides timely escalation to the concerned authority Responsibilities Involved in the Requirements collection Analysis from the business team Created the design documents with use case diagram class diagrams and sequence diagrams using Rational Rose Implemented the MVC architecture using Apache Struts12 Framework Implemented Action Classes and serverside validations for account activity payment history and Transactions Implemented views using Struts tags JSTL20 and Expression Language Implemented Tiles Framework for the views layout Implemented session beans to handle business logic for fund transfer loan credit card fixed deposit modules Worked with JAXB SAXP and XML Schema for exporting data into XML format and importing data from XML format to data base and JAXB in the web services request response data marshalling as well as marshaling process Implemented the web services client to consume the thirdparty service API for validating credit cards Used XMLWeb Services using SOAP to transfer the amount to transfer application that is remote and global to different financial institutions Used Java Messaging Services JMS for reliable and asynchronous exchange of important information such as payment status report Used Log4J to capture the log that includes runtime exceptions Used Clear Case for source code maintenance Environment J2EE Java Struts Tiles JSP JNDI Clear Case SOAP WSDL UDDI JAXB JAXP Schema XST EJB 20 ANT JavaScript JMS Rational Rose WSAD DB 2 Education Masters",
    "extracted_keywords": [
        "Sr",
        "JavaJEE",
        "Programmer",
        "Sr",
        "span",
        "lJavaspanJEE",
        "Programmer",
        "Sr",
        "JavaJEE",
        "Programmer",
        "Dish",
        "Network",
        "Work",
        "Experience",
        "Sr",
        "JavaJEE",
        "Programmer",
        "Dish",
        "Network",
        "Englewood",
        "CO",
        "February",
        "Present",
        "Description",
        "Axiom",
        "tool",
        "agents",
        "sales",
        "orders",
        "sales",
        "partners",
        "DISH",
        "Network",
        "application",
        "sales",
        "agents",
        "partner",
        "agents",
        "retailer",
        "agents",
        "design",
        "versatility",
        "differences",
        "agents",
        "techniques",
        "Axiom",
        "SOAP",
        "REST",
        "services",
        "operations",
        "credit",
        "check",
        "address",
        "appointment",
        "scheduling",
        "invoice",
        "payment",
        "etcand",
        "customers",
        "data",
        "database",
        "Responsibilities",
        "application",
        "Spring",
        "Framework",
        "ModelView",
        "Controller",
        "MVCarchitecture",
        "Designing",
        "User",
        "Interface",
        "JavaScript",
        "JQuery",
        "HTML",
        "CSS",
        "Bootstrap",
        "classes",
        "core",
        "concurrency",
        "memory",
        "management",
        "spring",
        "IOC",
        "spring",
        "dependency",
        "injection",
        "annotations",
        "Spring",
        "MVC",
        "components",
        "business",
        "layer",
        "navigation",
        "part",
        "application",
        "user",
        "interface",
        "application",
        "JavaScript",
        "JQuery",
        "Java",
        "Server",
        "Pages",
        "JSP",
        "Tiles",
        "Framework",
        "views",
        "layout",
        "JAXB",
        "SAXP",
        "XML",
        "Schemafor",
        "data",
        "XML",
        "format",
        "data",
        "XML",
        "format",
        "data",
        "base",
        "JAXB",
        "web",
        "services",
        "response",
        "data",
        "marshaling",
        "process",
        "web",
        "services",
        "client",
        "thirdparty",
        "service",
        "API",
        "credit",
        "cards",
        "XML",
        "Web",
        "Services",
        "SOAP",
        "amount",
        "application",
        "institutions",
        "database",
        "retrieval",
        "connections",
        "establishment",
        "Oracle",
        "Server",
        "database",
        "test",
        "cases",
        "JUnit",
        "Agilemethodology",
        "production",
        "support",
        "application",
        "resolution",
        "issues",
        "inproduction",
        "Deployed",
        "Applications",
        "Apache",
        "Tomcat",
        "Server",
        "Gradle",
        "build",
        "Modules",
        "scripts",
        "Jenkins",
        "unit",
        "testing",
        "troubleshooting",
        "Modifying",
        "programs",
        "enhancements",
        "bugs",
        "bugs",
        "defects",
        "application",
        "Log4J",
        "log",
        "runtime",
        "exceptions",
        "GitHub",
        "source",
        "code",
        "maintenance",
        "Environment",
        "J2EE",
        "Java",
        "Spring",
        "MVC",
        "Tiles",
        "JSP",
        "Git",
        "Jenkins",
        "SOAP",
        "WSDLOracle",
        "JavaScript",
        "JQuery",
        "HTML",
        "CSS",
        "BootstrapAjax",
        "Gradle",
        "Tomcat",
        "Jenkins",
        "JavaJEE",
        "Programmer",
        "Mutual",
        "Omaha",
        "Omaha",
        "NE",
        "July",
        "January",
        "Description",
        "Mutual",
        "Omaha",
        "insurance",
        "services",
        "company",
        "multiapplication",
        "system",
        "customers",
        "processing",
        "loans",
        "modules",
        "Authorization",
        "Audit",
        "Trails",
        "load",
        "staff",
        "Payment",
        "module",
        "convenience",
        "control",
        "customers",
        "loan",
        "Responsibilities",
        "project",
        "methodology",
        "standup",
        "user",
        "web",
        "pages",
        "HTML5CSS3",
        "JavaScript",
        "Angular",
        "Nodejs",
        "Angular",
        "components",
        "services",
        "pipes",
        "application",
        "functionality",
        "application",
        "Spring",
        "IOCSpring",
        "Boot",
        "Spring",
        "transactions",
        "Spring",
        "security",
        "modules",
        "beans",
        "Spring",
        "IOC",
        "dependency",
        "injection",
        "logic",
        "functionality",
        "Spring",
        "AOP",
        "concept",
        "Spring",
        "Security",
        "user",
        "authentication",
        "API",
        "authorization",
        "Configured",
        "Spring",
        "MVC",
        "data",
        "transfer",
        "frontend",
        "midtier",
        "request",
        "client",
        "Microservices",
        "Spring",
        "Boot",
        "discovery",
        "Netflix",
        "Eureka",
        "Server",
        "circuit",
        "breaker",
        "patterns",
        "Spring",
        "BootMicroservices",
        "application",
        "Hystrix",
        "services",
        "Hystrix",
        "Dashboard",
        "load",
        "servers",
        "Spring",
        "Ribbon",
        "Swagger",
        "API",
        "documentation",
        "REST",
        "web",
        "services",
        "JAXRS",
        "annotations",
        "type",
        "data",
        "validate",
        "user",
        "mapping",
        "user",
        "requests",
        "input",
        "parameters",
        "links",
        "web",
        "services",
        "HATEOS",
        "Spring",
        "application",
        "Hibernate",
        "ORM",
        "tool",
        "mapping",
        "cache",
        "HQL",
        "relationship",
        "table",
        "database",
        "Java",
        "objects",
        "NoSQL",
        "database",
        "MongoDB",
        "scripts",
        "database",
        "aspects",
        "replica",
        "sets",
        "shading",
        "document",
        "design",
        "queue",
        "MongoDB",
        "Kafka",
        "Zookeeper",
        "data",
        "pipeline",
        "part",
        "enterprise",
        "pattern",
        "Kafka",
        "Spark",
        "Streaming",
        "Working",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "EBS",
        "EBS",
        "Cloud",
        "Formation",
        "Auto",
        "Scaling",
        "S3",
        "Route53",
        "Docker",
        "containers",
        "Docker",
        "application",
        "lifecycle",
        "Performed",
        "Unit",
        "testing",
        "applications",
        "tools",
        "Jasmine",
        "POM",
        "testing",
        "automation",
        "testing",
        "framework",
        "Java",
        "testing",
        "Selenium",
        "WebDriver",
        "Gradle",
        "tool",
        "application",
        "JBoss",
        "application",
        "server",
        "Log4j",
        "information",
        "problem",
        "User",
        "stories",
        "defects",
        "Jira",
        "tool",
        "GIT",
        "repository",
        "code",
        "developers",
        "company",
        "Environment",
        "Agile",
        "Java",
        "J2EE",
        "HTML5",
        "CSS3",
        "Angular",
        "Nodejs",
        "Spring",
        "Boot",
        "Spring",
        "Security",
        "Swagger",
        "Hibernate",
        "Docker",
        "AWS",
        "Apache",
        "Kafka",
        "JBoss",
        "Jasmine",
        "Selenium",
        "Log4j",
        "GIT",
        "Gradle",
        "Jenkins",
        "Jr",
        "Java",
        "Developer",
        "Derron",
        "IT",
        "India",
        "March",
        "January",
        "Description",
        "project",
        "system",
        "managing",
        "tracking",
        "issues",
        "release",
        "software",
        "solutions",
        "system",
        "facility",
        "Email",
        "notifications",
        "stakeholders",
        "issue",
        "one",
        "escalation",
        "authority",
        "Responsibilities",
        "Requirements",
        "collection",
        "Analysis",
        "business",
        "team",
        "design",
        "documents",
        "use",
        "case",
        "diagram",
        "class",
        "diagrams",
        "sequence",
        "diagrams",
        "Rational",
        "Rose",
        "MVC",
        "architecture",
        "Apache",
        "Struts12",
        "Framework",
        "Action",
        "Classes",
        "serverside",
        "validations",
        "account",
        "activity",
        "payment",
        "history",
        "Transactions",
        "views",
        "Struts",
        "tags",
        "JSTL20",
        "Expression",
        "Language",
        "Tiles",
        "Framework",
        "views",
        "session",
        "beans",
        "business",
        "logic",
        "fund",
        "transfer",
        "loan",
        "credit",
        "card",
        "deposit",
        "modules",
        "JAXB",
        "SAXP",
        "XML",
        "Schema",
        "data",
        "XML",
        "format",
        "data",
        "XML",
        "format",
        "data",
        "base",
        "JAXB",
        "web",
        "services",
        "response",
        "data",
        "marshaling",
        "process",
        "web",
        "services",
        "client",
        "thirdparty",
        "service",
        "API",
        "credit",
        "cards",
        "XMLWeb",
        "Services",
        "SOAP",
        "amount",
        "application",
        "institutions",
        "Java",
        "Messaging",
        "Services",
        "JMS",
        "exchange",
        "information",
        "payment",
        "status",
        "report",
        "Log4J",
        "log",
        "runtime",
        "exceptions",
        "Clear",
        "Case",
        "source",
        "code",
        "maintenance",
        "Environment",
        "J2EE",
        "Java",
        "Struts",
        "JSP",
        "JNDI",
        "Clear",
        "Case",
        "SOAP",
        "WSDL",
        "UDDI",
        "JAXB",
        "JAXP",
        "Schema",
        "XST",
        "EJB",
        "ANT",
        "JavaScript",
        "JMS",
        "Rational",
        "Rose",
        "WSAD",
        "DB",
        "Education",
        "Masters"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T19:49:59.171730",
    "resume_data": "Sr JavaJEE Programmer Sr span lJavaspanJEE Programmer Sr JavaJEE Programmer Dish Network Work Experience Sr JavaJEE Programmer Dish Network Englewood CO February 2018 to Present Description Axiom is a proprietary webbased tool created for agents to input and modify sales orders for direct and indirect sales partners within DISH Network This application can be accessed by direct sales agents partner agents retailer agents The design was created with versatility to accommodate the differences in each agents selling techniques Axiom calls several SOAP and REST services to perform various operations like credit check address check appointment scheduling generate invoice payment etcand also to store or retrieve customers data from database Responsibilities Developed the application using Spring Framework that leverages classical ModelView Controller MVCarchitecture Designing and implementing the User Interface using JavaScript JQuery HTML CSS Bootstrap andAjax Developed classes using core java multithreading concurrency memory management and some spring IOC Used spring dependency injection annotations and Spring MVC components to implement business layer and navigation part of application Participated in designing the user interface for the application using JavaScript JQuery and Java Server Pages JSP Implemented Tiles Framework for the views layout Worked with JAXB SAXP and XML Schemafor exporting data into XML format and importing data from XML format to data base and JAXB in the web services request response data marshalling as well as marshaling process Implemented the web services client to consume the thirdparty service API for validating credit cards Used XML Web Services using SOAP to transfer the amount to transfer application that is remote and global to different financial institutions Involved in the database retrieval and connections establishment to the Oracle Server database Involved in creating test cases using JUnit strictly following Agilemethodology Provided production support for the application and providing quick resolution for the issues that are faced inproduction Deployed Applications on Apache Tomcat Server and Used Gradle to configure build and deploy the Modules Also integrated these scripts with Jenkins Involved in unit testing troubleshooting and debugging Modifying existing programs with enhancements Involved in fixing bugs the bugs or defects in the application Used Log4J to capture the log that includes runtime exceptions and used GitHub for source code maintenance Environment J2EE Java Spring MVC Tiles JSP Git Jenkins SOAP WSDLOracle JavaScript JQuery HTML CSS BootstrapAjax Gradle Tomcat and Jenkins JavaJEE Programmer Mutual of Omaha Omaha NE July 2016 to January 2018 Description Mutual of Omaha is an insurance is a financial services company which is an automated multiapplication system by which customers can have quick processing of loans It consists of the modules such as Authorization Audit Trails that reduce the manual load on the staff and Payment module that provide convenience and control for the customers when applying for loan Responsibilities Implemented the project in Agile methodology and participated actively in daily standup calls Developed user interactive web pages using HTML5CSS3 JavaScript Angular and Nodejs Worked with Angular to generate various components routes services pipes and structured the application All the functionality of the application is implemented using Spring IOCSpring Boot Spring transactions and Spring security modules Configured beans using Spring IOC for dependency injection and breaking down the backend logic functionality with Spring AOP concept Used Spring Security for user authentication and API authorization Configured Spring MVC for the data transfer between frontend and midtier to handle request from the client Implemented Microservices using Spring Boot to enabled discovery using Netflix Eureka Server Implemented circuit breaker patterns in Spring BootMicroservices application using Hystrix to monitor the services using Hystrix Dashboard and load balancing among the servers was implemented using Spring Ribbon Worked on Swagger API and autogenerated documentation for all REST calls Developed RESTful web services using JAXRS annotations to specify the type of data produced or consumed validate the user requests mapping user requests and to pass input parameters Worked on establishing links between web services using HATEOS from Spring based application Used Hibernate as ORM tool for mapping cache HQL and relationship of each table in database to Java objects Worked with NoSQL database to compose and execute MongoDB scripts to insert and update database by utilizing aspects like replica sets shading and clever document design Implemented a distributed messaging queue to integrate with MongoDB using Kafka and Zookeeper Implemented realtime data pipeline as part of enterprise messaging pattern using Kafka and Spark Streaming Working with Amazon Web Services AWS like EBS EBS Cloud Formation Auto Scaling S3 and Route53 Worked on creating the Docker containers and Docker consoles for managing the application lifecycle Performed Unit testing on angular applications using tools like Jasmine And implemented POM based testing automation testing framework utilizing Java testing and Selenium WebDriver Used Gradle build tool to build and deployed application on JBoss application server Used Log4j to log the information to track the problem User stories and defects are maintained in Jira tool And used GIT repository to push the code and interact with other developers throughout the company Environment Agile Java 18 J2EE HTML5 CSS3 Angular 40 Nodejs Spring Boot 15 Spring Security 31 RESTful Swagger Hibernate 435 MongoDB 30 Docker AWS Apache Kafka JBoss AS 7 Jasmine Selenium Log4j 2 GIT Gradle Jenkins Jr Java Developer Derron IT India IN March 2015 to January 2016 Description It is an internal project developed as a fully Webbased system It deals with managing and tracking of all the issues which arise either prior to or after the release of various software solutions The system should also provide the facility to send Email notifications to stakeholders whenever an issue is raised or an existing one is updated It provides timely escalation to the concerned authority Responsibilities Involved in the Requirements collection Analysis from the business team Created the design documents with use case diagram class diagrams and sequence diagrams using Rational Rose Implemented the MVC architecture using Apache Struts12 Framework Implemented Action Classes and serverside validations for account activity payment history and Transactions Implemented views using Struts tags JSTL20 and Expression Language Implemented Tiles Framework for the views layout Implemented session beans to handle business logic for fund transfer loan credit card fixed deposit modules Worked with JAXB SAXP and XML Schema for exporting data into XML format and importing data from XML format to data base and JAXB in the web services request response data marshalling as well as marshaling process Implemented the web services client to consume the thirdparty service API for validating credit cards Used XMLWeb Services using SOAP to transfer the amount to transfer application that is remote and global to different financial institutions Used Java Messaging Services JMS for reliable and asynchronous exchange of important information such as payment status report Used Log4J to capture the log that includes runtime exceptions Used Clear Case for source code maintenance Environment J2EE Java Struts Tiles JSP JNDI Clear Case SOAP WSDL UDDI JAXB JAXP Schema XST EJB 20 ANT JavaScript JMS Rational Rose WSAD DB 2 Education Masters",
    "unique_id": "3ecc7a33-8acb-4148-992c-58eb7c05c5fb"
}