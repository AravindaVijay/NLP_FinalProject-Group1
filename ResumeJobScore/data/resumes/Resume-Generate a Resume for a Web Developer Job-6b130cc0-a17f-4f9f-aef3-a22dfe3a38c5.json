{
    "clean_data": "Senior DevOpsGolang Developer Senior DevOpsGolang span lDeveloperspan McLean VA To blaze a career in Application Software Development and Management that will enable me to effectively use my qualifications in project management programming and team building to develop optimum synergies for the organization Authorized to work in the US for any employer Work Experience Senior DevOpsGolang Developer Boston MA January 2017 to Present Designed and supported the technological infrastructure for the tech stack using AWS Built patched AMIs for Jenkins Slaves using packer and updated the references in Jenkins Supported the application team with account creation SSH troubleshooting and AWS access Modified the NGINX config to log the real IPaddresses of users accessing the web server Used AWS OpsWorks for setting up SSH jump hostsbastion to increase system security Wrote Cloud Formation templates to set up the entire stack EC2 Instances Auto Scaling groups RDS Route53 Security Groups Network ACL Subnets for the application Designed and Implemented an asynchronous Python lambda snapshot process using SQS Architected the entire infrastructure using AWS VPC Subnets Security Groups ACLS Wrote Puppet 3 configuration management modules using Roles Facter and Hiera to provision Designed a proof of concept to write a backpressure web handler in GO based on percentiles Dockerized MongoDB 32 and setup a replica set with persisted data in a Docker network Programmed the invoicing web application using Golang and PostgreSQL as the backend Utilized Go Channels and Routines to enhance the performance of the invoicing application Contributed source code in Golang to developing an automation framework for AWS CFN Setup Rancher management platform with Kubernetes as the orchestration framework for running Docker containers in all environments Implemented the automation framework around AWS Cloudformation using Go 18 Relied on my expertise in Java programming to troubleshoot the application and find errors Made suggestions to upgrade the AWS EC2 instance type to a more compute intensive family Setup log exports to Papertrail and Sumo logic for the Rancher host nodes using stdio output Used AWS CodeDeploy and Salt Stack to provision the EC2 instances install the application Utilized Sumo Logic to collect logs and troubleshoot production related application issues Setup Cloudwatch log forwarder to Sumo Logic endpoint using a Python Lambda function Employed Logic Monitor for performance monitoring of the production environment Wrote Bash shell scripts to automate routine patching and process CLI outputs from the API Used Git for storing automation code and followed the Git work flow for committing changes Setup group S3 bucket permissions using IAM groups and policies based on names of teams Contributed to a Puppet implementation of the CIS Docker hardening guide covering all parts Senior PythonDevOps Engineer SOLTRA Arlington VA December 2016 to January 2017 Worked on the CTXEdge 210 Cyber Threat exchange platform acquired by NC4Soltra Improved the backend data model using Django 19 models with Mongoengine ORM Comfortable on the Linux Ubuntu CentOS command line and always learning Linux Thorough knowledge of SSH Agents and Proxy Commands to access systems behind FW Wrote Ansible roles and play books to deploy code on to SoltraCTX hosted solutions Setup Kubernetes cluster Master Minion on AWSUbuntu using CFN and Ansible Crafted Cloud Formation templates to automate the test staging and UAT environments Created an asynchronous snapshot and move to west region process using Lambda and SQS Worked on the STIX to Snort rule conversion and the REST API Plugin with Soltra Edge Setup Jenkins build processes for deploying the code base on Test and Staging systems Supported users on the test and staging boxes by providing ssh access and troubleshooting Wrote packer scripts to create CentOS 68 and 71 AMIS used as release ova appliance Was involved in setting up replica sets for high availability using Mongodb 32 in the West Implemented Fabric jobs to deploy release artifacts on to the staging and test environments Proficient with Shell Scripting and Python Object Oriented ProgrammingScripting Used JIRA for Sprint Planning and Confluence for documenting processes and findings Senior PythonDevOps Engineer SOLTRA Tampa FL October 2016 to November 2016 PS This project was shut down since an acquisition did not go through Worked on the Edge 2930 Cyber Threat exchange platform being developed by Soltra Designed the backend data model using Django 19 models with Mongoengine ORM Wrote asynchronous task processing pipelines using MongoDB for queuing and Celery Gained domain knowledge on TAXII STIX and CybOX technical specifications for Cyber Security information sharing Setup VMware Fusion and converted the the production VM for development purposes Implemented a Rest API using Django Rest Framework 33 and DJoser for authentication Wrote React components to develop the front end with WebPack as the bundler and Redux On joining the team studied the devops process for development boxes and streamlined it Wrote Ansible scripts for setting up Nginx UWsgi app server and the Mongo database Designed and implemented Mongodb Map Reduce jobs to aggregate statistics for threat data Developed the system using Ubuntu 154 and deployed the code on CentOS version 70 Configured Circus to control the websocket server and asynchronous celery processes Used Mongodb to implement the data model for storing STIXCybox threat and Config data Met up with government and nongovernmental customers to discuss product features Followed the Github Flow process to develop code with the team and manage reviews Wrote Python generators for achieving better performance in the search system Set up separate Docker container for Mongodb Uwsgi App server and the Nginx Server Comfortable on the Linux command line and with Git subcommand usage Cloud Application ArchitectTech LeadDevOps American Technology Consulting Clive IA October 2014 to September 2016 Serviced Clients such as Capital One WhichWinery Inc and DTCCSoltra Solutions Provided technical design guidance on application development and system integration Used Django 18 Python 30 to develop an internal fraud monitoring dashboard and a CMS Only worked on RedHat for deployment and Ubuntu Linux 1504 for local box development Comfortable on the Linux command line and with system administration tasks Acted as a subject matter expert on a Request for proposal RFP whether to go with an inhouse versus shared Connex switch for better throughput and fraud integration Chaired weekly team grooming meetings to focus on sprint targets and achievements Debugged Django views using Python debugger Pdb Used Postman to test single functions Setup AWS Cloud Watch Monitoring for Lambda jobs to create snapshots in the East region and copy them over to the West region Connected the Django application to AWS ElastiCache for better system performance Developed a Rest API using Django Rest framework exposing the application functionality Improved the response time by implementing asynchronous tasks using Celery RabbitMQ Migrated the application and infrastructure to US West region in AWS for disaster recovery Setup Redis server for session management and replaced the slower default Django database Improved the system performance by caching frequently requested data using Memcached Created Amazon S3 buckets for storing media and provided the proper ACL settings Set up an Elastic load balancer to route traffic to various EC2 instances as per the availability Architected the analytics system to be scalable and highly available using AWS and S3 Mentored and setup training classes for new hires and junior staff to bring them up to speed Installed Zabbix server on RedHat 7 and agents on the virtual machines to be monitored Configured a hot standby PostgreSQL slave server in a different region to increase reliability Used Cassandra 12 database for storing log data and ElasticSearch Kibana for visualization Implemented Python code to run Spark jobs on fraud data in Cassandra using PySpark Conducted frequent grooming sessions with the business team to elicit requirements Wrote data migration scripts utilizing SQLAlchemy to convert the data into the new structure Implemented Django CMS templates to create an internal content management system Configured Supervisor to control and monitor the Nginx server and the UWSGI App server Implemented ETL automation tasks that load plain CSV and XML file data into the database Wrote Chef scripts for provisioning systems and deploying builds on three pipelines Setup continuous delivery using Jenkins and three pipelines one for dev staging and prod Comfortable with the AWS CLI to perform all tasks and write automation scripts using it Wrote Bash shell SFTP scripts to handle system administration and regular file transfers Lead all Aspects of Development from coding designing and testing in an Agile System Wrote Python unit tests to test the functionality and generated test reports using Nose Tuned Redhat 7 by first measuring results from iostats vmstat and top using sysctl interface Configured NGINX 12 webserver and tweaked it for high performance utilizing caching Used Metl Pygrametl for Extraction transformation and loading data from legacy systems Implemented Python 30 scripts for data mangling ETL daily monetary transaction files Understood and used Django migrations to propagate model changes to the database schema Used Git for version control utilizing the internal github repository and git flow for reviews Setup local box using Docker containers for the web and application server and the db server Senior SystemsSoftware Engineer V HewlettPackard Fort Collins CO April 2013 to October 2014 Worked on the HP Helion Enterprise Cloud Platform startup cloud initiative Developed a highly resilient and scalable multitenant monitoring systems for the cloud Setup Bamboo 51 Continuous integration server for building testing and deploying code Learned how to interrupt the Linux boot process via the GRUB loader and acquire root shell Setup a cloud with OpenStack neutron which included the network and the subnets within it Utilized Python 30 for writing cloud monitoring service MonascaAgent for HELION project Implemented a proof of concept while migrating from Vertica DB to Cassandra for metrics Tuned the Linux kernel to meet optimized application performance using sycsctl and top All development was done using Ubuntu Linux 1504 Eclipse Java and Sublime Python Wrote Ansible configuration scripts to automate and provision Linux systems in HP Cloud Customized OpenStack Horizon templates using HTML5 CSS and Javascript Wrote Multithreaded Python code for performance testing the Monasca Rest Api Researched and provided a detail comparison list between Cassandra and other NoSql DBs Used Vagrant to setup the development stack machine and the monitoring machine Converted existing Monasca Java persistence module into Python 30 code Used CQLEngine ORM to insert and retrieve monitoring data into Cassandra cluster Developed Monasca UI using Horizon dashboard Django to display metrics and events Used Kafka to publish metrics from the Monitoring API and the Threshold Engine Setup services to run under different run levels in Redhat and CentOS using updatercd Used Keystone for authentication authN and high level authorization authZ Wrote cloud monitoring components for collecting system metrics using Nagios Plugins Familiar with Oracle VirtualBox to create Kernel based Virtual machines for testing Developed highspeed metrics processing and querying using REST API and Python Wrote system administration tasks using Python and Fabric to get system metrics Utilized MySQL 50 for storing config data and HP Vertica for Metrics and Alarms data Implemented the Monasca notification engine using Python 30 with OOPS concepts Used Apache Tornado web server as the forwarder to collect the metrics from the collector Metrics were stored into Influxdb and then displayed using Grafana on the front end Senior Service Information Developer IV HewlettPackard Mount Laurel NJ August 2011 to April 2013 Architected designed and developed multitier systems using JavaJ2EE and Rest Services Collaborated with Business Analysts and Stakeholders to refine business requirements Used Python 30 to parse through legacy flat files and load data into Oracle 11g SqlAlchemy Provided Technical support for OS software to other teams within the HealthCare division Implemented Python 30 Regular Expressions to parse through huge metadata repository Demonstrated use of mETL with Python and DB2 to extract transform and load legacy data Utilized Spring MVC for implementing MVC pattern in the Social welfare application Persisted data using Hibernate DAO Pattern and Spring AOP Transaction Management Used Hadoop MongoDB and Python 30 to implement Person match in Legacy Conversion Implemented Role based security in the welfare application using Spring Security Led the team as Tech Lead overseeing a team of 11 developers and assigning related work Implemented Batch Generation of EBT checks using J2EEJava JMS and EJB 30 MDB Wrote Jython automation scripts for J2EE application deployment and WAS administration Engaged in the analysis design development and testing phases of the software solution Delegated tasks to junior programmers to successfully adhere to deadline Utilized IBM Rational Software Architect to design the Entity model and Class model Applied technical knowledge to provide maintenance solutions to production system Automated testing end to end business functionality using WatirSelenium GUI scripts Worked with cross functional teams and set priorities reflecting business interests Spearheaded Notice generation framework using Oracle AQ HP Exstream and COCCI Utilized Java 16 POJO to write Business Process Objects and Service Layer code Designed SQL Procedure automation using Java 16 and Hibernate as the ORM Used C language to process large files in UNIX and convert legacy system data Utilized Perl 5 to obtain delta between OOTB configuration files and customized files Used Jython 221 to read Java class file attributes to generate front end code Very comfortable on the UnixLinux and FreeBSD command line interface Wrote Python scripts to read data from Excel files and generate XML configuration files Utilized H2Dev Oracle 11g Test and IBM DB2 databases for development and testing Setup Jenkins continuous integration for Development and Release purposes Led regular code reviews and timely completion of end to end Business Flows Programmer Analyst II University of Pennsylvania Philadelphia PA October 2008 to August 2011 Programmed in CSTL for implementing language recognition modules for NLP research Maintained the external relations website using JSP Servlets Spring MVC Hibernate Aggressively learned shell commands and implemented piping and redirection on FreeBSD Supported System administration tasks and acted as a backup for the System Admin team Used C and BoostGIL for video image processing for extracting snapshots of a video Used Perl one liners to search and replace text in files to calculate totals for number columns Gathered business requirements and translated them into technical specifications Administered Jboss 50 and created queues for messaging between client and MDBs Formulated Statistical Classification algorithm for Gigaword and implemented it in Perl The algorithm was designed to primarily work with unstructured text and game scores Created and Tested the language identifier program on different data sets Plotted the data points to show the accuracy of the code with relevance to bigramngram language detection The Statistical Algorithm used certain text information to discriminatively determine the type Wrote Perl scripts to process text files that were used for Gigaword Publications by LDC Implemented PDF invoice generation using Java 16 JSP JBoss messaging and Spring MVC Used Python 30 for generating word frequency lists over different language corpora Primarily worked on UNIX FreeBSD Linux Ubuntu based systems Utilized Java 15 to write design and implement a parts of speech tagger using NLP Used NLTK to write Python NLP Natural language processing programs for text corpora Designed and developed internal Linguistic Corpora portal using Django and MySQL 55 Used R classification tools and methodologies SVM for training and validating the model Implemented a word break correction program using Python 27 for Korean language Designed the entity relationship model and utilized MySQL as the RDBMS Processed huge text files 40MB for Linguistic Publications using Perl Regex Processing Tested language identification models using C and Python 30 NumPy and Pandas Wrote Bigram language identification discriminative models in the realm of machine learning Software Engineer I Siemens Medical Solutions Malvern PA January 2007 to September 2008 Developed Multitier Enterprise Clinical solutions using Java 15 and J2EE 14 Adopted ANT and XML for automating software build processes of all product modules Unit tested code using Junit and Junitee framework Understood and applied the Software Development Life Cycle on daily basis Used IBM Websphere as the runtime environment and Eclipse 32 as the frontend GUI Applied Objectoriented design concepts to solve business problems Used TIBCO Business Works for event processing and HL7 to XML transformation Used Microsoft SQL Server as the Relational Database Management System Oversaw System Integration AIT of Soarian Clinicals JDI Module InternCoop Tools and Methodologies Siemens Medical Solutions Malvern PA August 2006 to January 2007 Used Rational ClearCase Configuration management system and version control Used Rational ClearQuest Defect tracking tool Information Systems Intern Saint Josephs University Philadelphia PA February 2005 to August 2006 Developed and maintained the university website using JSP and Servlets Supervised the Data Processing Lab and Administered the Windows 2000 Server Used Weblogic 81 as the Application Server for the graduate admissions website Managed Talisma A complete ECRM package and troubleshoot issues Wrote BashKorn shell scripts and used UNIXSolaris as the Operating system Automated daily backups using MSDOS batch file scripts Used C for programming tasks assigned Geographic Information System GIS Intern National Institute of Oceanography Panjim Ga June 2002 to August 2004 Implemented a Geographic Information System using ArcGIS and ArcSDE Family Developed a web application for querying ocean and marine data using HTML and PHP Worked with the ERDAS Imagine and MapInfo family of Products Analyzed data and designed an ERmodel scanned and digitized maps Implemented the data model using Oracle 8i relational database management system Utilized both Redhat Linux and Windows for developing and testing the web app Wrote Perl Scripts to load data from flat files to MysqlTesting and OracleProd Filtered specific data using pipeline processing with SED and AWK Used Jakarta Tomcat to Test the website before deployment Wrote Bash shell scripts to automate the deployment of Web application SOCIAL WELFARE PROGRAMS Worked with Medicaid General Assistance Temporary Assistance for Needy Families and Food Assistance programs at the New Jersey CASS project within HP IDEAS OO design OO programming Extreme programming Agile Testfirst design Relational databases Byte code engineering Java Assist Tool Code reviews Code Optimization Data structures and Algorithms Able to quickly become productive in languages and frameworks which I have never used before Education MSE in Executive Masters in Technology Management in EMTM University of Pennsylvania Wharton Business School Philadelphia PA June 2013 MS in Computer Science in Computer Science Saint Josephs University Philadelphia PA December 2006 BE in Computer Science and Engineering in Computer Science and Engineering Padre Conceio College of Engineering July 2003 Skills Bash 6 years Java 10 years Perl 6 years Python 9 years testing 7 years Additional Information SOFTWARE SKILLS Operating Systems UNIX FreeBSD Ubuntu CentOS WIN 7 IBM AIX MAC OS X RDBMS Oracle11g IBM DB2 MSSQL server 2005 MySQL 50 H2 Languages Java 16 Python 30 CC STL Boost Libraries Scripting Korn Bash AWK Sed Perl 510 Ruby 200 Distributed Computing J2EE 14 EJB 30 Java EE 6 Web Technologies XML XSLT PHP ASP JSP Servlets JavaScript HTML5 App Web Servers Tomcat 42 IIS IBM Websphere 70 JBOSS 50 WebLogic 81 Geographical Info Systems Imagine Erdas ArcGIS Family Web Frameworks Struts Hibernate 401 Spring 321 jQuery 141 Development Tools Neatbeans 7 Eclipse 37 IBM RSAUML IntelliJ Release Tools AnthillPro 3 CruiseControl 25 Hudson Maven Jenkins Testing Framework JUnit 44 JunitEE 110 Selenium and Watir Versioning Tools Clearcase Subversion 179 PVCS GIT Messaging Frameworks Oracle AQ MDB Message Drive beans TIBCO EMSRV Document Automation HP ExstreamPDF Generation Engine WebServices Soap Rest WebServices Monitoring Tools Zabbix Monasca API NoSQL MongoDB 32 and Cassandra ETL Tools Metl Petl Pygrametl",
    "entities": [
        "DJoser",
        "AMIS",
        "Optimization Data",
        "Software Engineer I Siemens Medical Solutions Malvern",
        "Request",
        "EMTM University",
        "Formulated Statistical Classification",
        "RedHat",
        "Cassandra",
        "Persisted",
        "Utilized Sumo Logic",
        "NLP Used NLTK",
        "Methodologies Siemens Medical Solutions Malvern",
        "SSH Agents",
        "UNIX",
        "the Application Server",
        "Applied",
        "Python NLP Natural",
        "PHP ASP JSP",
        "Frameworks Oracle AQ",
        "Cyber Security",
        "OpenStack",
        "IBM",
        "Linguistic Publications",
        "Soltra Edge Setup Jenkins",
        "the Threshold Engine Setup",
        "Skills Bash",
        "XML",
        "Sumo",
        "SED",
        "Influxdb",
        "MAC",
        "AWS VPC Subnets Security Groups ACLS Wrote Puppet",
        "Spring Security Led",
        "Application Software Development and Management",
        "Installed Zabbix",
        "Architected",
        "WatirSelenium",
        "Business Process Objects and Service Layer code Designed SQL Procedure",
        "Maintained",
        "Utilized Go Channels",
        "WebLogic",
        "Setup Cloudwatch",
        "Automated",
        "JavaJ2EE",
        "Amazon",
        "UAT",
        "ElastiCache",
        "Medicaid",
        "GRUB",
        "LDC Implemented",
        "the Relational Database Management System Oversaw System Integration AIT of",
        "Byte",
        "Products Analyzed",
        "Philadelphia",
        "Setup VMware Fusion",
        "Developer Boston",
        "Mongo",
        "Developed",
        "Used IBM Websphere",
        "Gigaword",
        "Used AWS CodeDeploy",
        "Soarian Clinicals JDI Module InternCoop Tools",
        "Utilized",
        "Oracle 11",
        "Oracle 8i",
        "Puppet",
        "Test and Staging systems Supported",
        "Git",
        "Windows",
        "WebPack",
        "PVCS",
        "Memcached Created",
        "Nose Tuned Redhat",
        "Oracle VirtualBox",
        "Intern National Institute of Oceanography Panjim Ga",
        "Employed Logic Monitor",
        "Soltra",
        "MSDOS",
        "CruiseControl 25",
        "JSP",
        "the Software Development Life Cycle",
        "Mongoengine",
        "Capital One WhichWinery Inc",
        "Acted",
        "Shell Scripting",
        "Docker",
        "MysqlTesting",
        "GO",
        "CLI",
        "Config",
        "MVC",
        "UnixLinux",
        "Spark",
        "AWK",
        "Wrote React",
        "210 Cyber Threat",
        "EJB",
        "Business Flows Programmer Analyst II University",
        "Supported System",
        "Geographic Information System",
        "American Technology Consulting Clive",
        "CSV",
        "the Nginx Server Comfortable",
        "Legacy Conversion Implemented Role",
        "US",
        "Implemented Python",
        "NGINX",
        "Vertica",
        "PDF",
        "Rest Services Collaborated with Business Analysts",
        "STIXCybox",
        "IA",
        "PySpark Conducted",
        "NoSql",
        "Created",
        "AWS",
        "The Statistical Algorithm",
        "UNIXSolaris",
        "JSP Servlets Spring MVC Hibernate Aggressively",
        "PS",
        "Used TIBCO Business Works",
        "CC STL Boost Libraries",
        "Oracle AQ HP Exstream",
        "ERmodel",
        "Gigaword Publications",
        "NC4Soltra Improved",
        "Cloud Application ArchitectTech",
        "HTML",
        "DTCCSoltra Solutions Provided",
        "Keystone",
        "SQS Architected",
        "Utilized IBM Rational Software Architect",
        "Kubernetes",
        "Nginx",
        "NLP",
        "SSH",
        "Computer Science in Computer Science Saint Josephs University",
        "ACL",
        "Rancher",
        "Geographical Info Systems Imagine Erdas ArcGIS",
        "Spring AOP Transaction Management Used Hadoop",
        "CFN",
        "HTML5 CSS",
        "WIN",
        "Virtual",
        "Golang",
        "Hudson Maven Jenkins Testing Framework JUnit 44",
        "ETL",
        "RedHat 7",
        "Jenkins Supported",
        "Utilized Spring",
        "Release Tools AnthillPro",
        "Snort",
        "FW Wrote Ansible",
        "SqlAlchemy Provided Technical",
        "ANT",
        "the Github Flow",
        "Papertrail",
        "Hibernate DAO Pattern",
        "Microsoft",
        "CMS",
        "Mongodb Uwsgi App",
        "Nginx UWsgi",
        "HP IDEAS OO design OO programming Extreme programming Agile Testfirst",
        "authZ Wrote",
        "the West Implemented Fabric",
        "the Data Processing Lab and Administered the Windows 2000",
        "HealthCare",
        "Connex",
        "Cyber Threat",
        "Kernel",
        "Setup",
        "OOTB",
        "Sumo Logic",
        "CSTL",
        "Food Assistance",
        "SVM",
        "Horizon"
    ],
    "experience": "Experience Senior DevOpsGolang Developer Boston MA January 2017 to Present Designed and supported the technological infrastructure for the tech stack using AWS Built patched AMIs for Jenkins Slaves using packer and updated the references in Jenkins Supported the application team with account creation SSH troubleshooting and AWS access Modified the NGINX config to log the real IPaddresses of users accessing the web server Used AWS OpsWorks for setting up SSH jump hostsbastion to increase system security Wrote Cloud Formation templates to set up the entire stack EC2 Instances Auto Scaling groups RDS Route53 Security Groups Network ACL Subnets for the application Designed and Implemented an asynchronous Python lambda snapshot process using SQS Architected the entire infrastructure using AWS VPC Subnets Security Groups ACLS Wrote Puppet 3 configuration management modules using Roles Facter and Hiera to provision Designed a proof of concept to write a backpressure web handler in GO based on percentiles Dockerized MongoDB 32 and setup a replica set with persisted data in a Docker network Programmed the invoicing web application using Golang and PostgreSQL as the backend Utilized Go Channels and Routines to enhance the performance of the invoicing application Contributed source code in Golang to developing an automation framework for AWS CFN Setup Rancher management platform with Kubernetes as the orchestration framework for running Docker containers in all environments Implemented the automation framework around AWS Cloudformation using Go 18 Relied on my expertise in Java programming to troubleshoot the application and find errors Made suggestions to upgrade the AWS EC2 instance type to a more compute intensive family Setup log exports to Papertrail and Sumo logic for the Rancher host nodes using stdio output Used AWS CodeDeploy and Salt Stack to provision the EC2 instances install the application Utilized Sumo Logic to collect logs and troubleshoot production related application issues Setup Cloudwatch log forwarder to Sumo Logic endpoint using a Python Lambda function Employed Logic Monitor for performance monitoring of the production environment Wrote Bash shell scripts to automate routine patching and process CLI outputs from the API Used Git for storing automation code and followed the Git work flow for committing changes Setup group S3 bucket permissions using IAM groups and policies based on names of teams Contributed to a Puppet implementation of the CIS Docker hardening guide covering all parts Senior PythonDevOps Engineer SOLTRA Arlington VA December 2016 to January 2017 Worked on the CTXEdge 210 Cyber Threat exchange platform acquired by NC4Soltra Improved the backend data model using Django 19 models with Mongoengine ORM Comfortable on the Linux Ubuntu CentOS command line and always learning Linux Thorough knowledge of SSH Agents and Proxy Commands to access systems behind FW Wrote Ansible roles and play books to deploy code on to SoltraCTX hosted solutions Setup Kubernetes cluster Master Minion on AWSUbuntu using CFN and Ansible Crafted Cloud Formation templates to automate the test staging and UAT environments Created an asynchronous snapshot and move to west region process using Lambda and SQS Worked on the STIX to Snort rule conversion and the REST API Plugin with Soltra Edge Setup Jenkins build processes for deploying the code base on Test and Staging systems Supported users on the test and staging boxes by providing ssh access and troubleshooting Wrote packer scripts to create CentOS 68 and 71 AMIS used as release ova appliance Was involved in setting up replica sets for high availability using Mongodb 32 in the West Implemented Fabric jobs to deploy release artifacts on to the staging and test environments Proficient with Shell Scripting and Python Object Oriented ProgrammingScripting Used JIRA for Sprint Planning and Confluence for documenting processes and findings Senior PythonDevOps Engineer SOLTRA Tampa FL October 2016 to November 2016 PS This project was shut down since an acquisition did not go through Worked on the Edge 2930 Cyber Threat exchange platform being developed by Soltra Designed the backend data model using Django 19 models with Mongoengine ORM Wrote asynchronous task processing pipelines using MongoDB for queuing and Celery Gained domain knowledge on TAXII STIX and CybOX technical specifications for Cyber Security information sharing Setup VMware Fusion and converted the the production VM for development purposes Implemented a Rest API using Django Rest Framework 33 and DJoser for authentication Wrote React components to develop the front end with WebPack as the bundler and Redux On joining the team studied the devops process for development boxes and streamlined it Wrote Ansible scripts for setting up Nginx UWsgi app server and the Mongo database Designed and implemented Mongodb Map Reduce jobs to aggregate statistics for threat data Developed the system using Ubuntu 154 and deployed the code on CentOS version 70 Configured Circus to control the websocket server and asynchronous celery processes Used Mongodb to implement the data model for storing STIXCybox threat and Config data Met up with government and nongovernmental customers to discuss product features Followed the Github Flow process to develop code with the team and manage reviews Wrote Python generators for achieving better performance in the search system Set up separate Docker container for Mongodb Uwsgi App server and the Nginx Server Comfortable on the Linux command line and with Git subcommand usage Cloud Application ArchitectTech LeadDevOps American Technology Consulting Clive IA October 2014 to September 2016 Serviced Clients such as Capital One WhichWinery Inc and DTCCSoltra Solutions Provided technical design guidance on application development and system integration Used Django 18 Python 30 to develop an internal fraud monitoring dashboard and a CMS Only worked on RedHat for deployment and Ubuntu Linux 1504 for local box development Comfortable on the Linux command line and with system administration tasks Acted as a subject matter expert on a Request for proposal RFP whether to go with an inhouse versus shared Connex switch for better throughput and fraud integration Chaired weekly team grooming meetings to focus on sprint targets and achievements Debugged Django views using Python debugger Pdb Used Postman to test single functions Setup AWS Cloud Watch Monitoring for Lambda jobs to create snapshots in the East region and copy them over to the West region Connected the Django application to AWS ElastiCache for better system performance Developed a Rest API using Django Rest framework exposing the application functionality Improved the response time by implementing asynchronous tasks using Celery RabbitMQ Migrated the application and infrastructure to US West region in AWS for disaster recovery Setup Redis server for session management and replaced the slower default Django database Improved the system performance by caching frequently requested data using Memcached Created Amazon S3 buckets for storing media and provided the proper ACL settings Set up an Elastic load balancer to route traffic to various EC2 instances as per the availability Architected the analytics system to be scalable and highly available using AWS and S3 Mentored and setup training classes for new hires and junior staff to bring them up to speed Installed Zabbix server on RedHat 7 and agents on the virtual machines to be monitored Configured a hot standby PostgreSQL slave server in a different region to increase reliability Used Cassandra 12 database for storing log data and ElasticSearch Kibana for visualization Implemented Python code to run Spark jobs on fraud data in Cassandra using PySpark Conducted frequent grooming sessions with the business team to elicit requirements Wrote data migration scripts utilizing SQLAlchemy to convert the data into the new structure Implemented Django CMS templates to create an internal content management system Configured Supervisor to control and monitor the Nginx server and the UWSGI App server Implemented ETL automation tasks that load plain CSV and XML file data into the database Wrote Chef scripts for provisioning systems and deploying builds on three pipelines Setup continuous delivery using Jenkins and three pipelines one for dev staging and prod Comfortable with the AWS CLI to perform all tasks and write automation scripts using it Wrote Bash shell SFTP scripts to handle system administration and regular file transfers Lead all Aspects of Development from coding designing and testing in an Agile System Wrote Python unit tests to test the functionality and generated test reports using Nose Tuned Redhat 7 by first measuring results from iostats vmstat and top using sysctl interface Configured NGINX 12 webserver and tweaked it for high performance utilizing caching Used Metl Pygrametl for Extraction transformation and loading data from legacy systems Implemented Python 30 scripts for data mangling ETL daily monetary transaction files Understood and used Django migrations to propagate model changes to the database schema Used Git for version control utilizing the internal github repository and git flow for reviews Setup local box using Docker containers for the web and application server and the db server Senior SystemsSoftware Engineer V HewlettPackard Fort Collins CO April 2013 to October 2014 Worked on the HP Helion Enterprise Cloud Platform startup cloud initiative Developed a highly resilient and scalable multitenant monitoring systems for the cloud Setup Bamboo 51 Continuous integration server for building testing and deploying code Learned how to interrupt the Linux boot process via the GRUB loader and acquire root shell Setup a cloud with OpenStack neutron which included the network and the subnets within it Utilized Python 30 for writing cloud monitoring service MonascaAgent for HELION project Implemented a proof of concept while migrating from Vertica DB to Cassandra for metrics Tuned the Linux kernel to meet optimized application performance using sycsctl and top All development was done using Ubuntu Linux 1504 Eclipse Java and Sublime Python Wrote Ansible configuration scripts to automate and provision Linux systems in HP Cloud Customized OpenStack Horizon templates using HTML5 CSS and Javascript Wrote Multithreaded Python code for performance testing the Monasca Rest Api Researched and provided a detail comparison list between Cassandra and other NoSql DBs Used Vagrant to setup the development stack machine and the monitoring machine Converted existing Monasca Java persistence module into Python 30 code Used CQLEngine ORM to insert and retrieve monitoring data into Cassandra cluster Developed Monasca UI using Horizon dashboard Django to display metrics and events Used Kafka to publish metrics from the Monitoring API and the Threshold Engine Setup services to run under different run levels in Redhat and CentOS using updatercd Used Keystone for authentication authN and high level authorization authZ Wrote cloud monitoring components for collecting system metrics using Nagios Plugins Familiar with Oracle VirtualBox to create Kernel based Virtual machines for testing Developed highspeed metrics processing and querying using REST API and Python Wrote system administration tasks using Python and Fabric to get system metrics Utilized MySQL 50 for storing config data and HP Vertica for Metrics and Alarms data Implemented the Monasca notification engine using Python 30 with OOPS concepts Used Apache Tornado web server as the forwarder to collect the metrics from the collector Metrics were stored into Influxdb and then displayed using Grafana on the front end Senior Service Information Developer IV HewlettPackard Mount Laurel NJ August 2011 to April 2013 Architected designed and developed multitier systems using JavaJ2EE and Rest Services Collaborated with Business Analysts and Stakeholders to refine business requirements Used Python 30 to parse through legacy flat files and load data into Oracle 11 g SqlAlchemy Provided Technical support for OS software to other teams within the HealthCare division Implemented Python 30 Regular Expressions to parse through huge metadata repository Demonstrated use of mETL with Python and DB2 to extract transform and load legacy data Utilized Spring MVC for implementing MVC pattern in the Social welfare application Persisted data using Hibernate DAO Pattern and Spring AOP Transaction Management Used Hadoop MongoDB and Python 30 to implement Person match in Legacy Conversion Implemented Role based security in the welfare application using Spring Security Led the team as Tech Lead overseeing a team of 11 developers and assigning related work Implemented Batch Generation of EBT checks using J2EEJava JMS and EJB 30 MDB Wrote Jython automation scripts for J2EE application deployment and WAS administration Engaged in the analysis design development and testing phases of the software solution Delegated tasks to junior programmers to successfully adhere to deadline Utilized IBM Rational Software Architect to design the Entity model and Class model Applied technical knowledge to provide maintenance solutions to production system Automated testing end to end business functionality using WatirSelenium GUI scripts Worked with cross functional teams and set priorities reflecting business interests Spearheaded Notice generation framework using Oracle AQ HP Exstream and COCCI Utilized Java 16 POJO to write Business Process Objects and Service Layer code Designed SQL Procedure automation using Java 16 and Hibernate as the ORM Used C language to process large files in UNIX and convert legacy system data Utilized Perl 5 to obtain delta between OOTB configuration files and customized files Used Jython 221 to read Java class file attributes to generate front end code Very comfortable on the UnixLinux and FreeBSD command line interface Wrote Python scripts to read data from Excel files and generate XML configuration files Utilized H2Dev Oracle 11 g Test and IBM DB2 databases for development and testing Setup Jenkins continuous integration for Development and Release purposes Led regular code reviews and timely completion of end to end Business Flows Programmer Analyst II University of Pennsylvania Philadelphia PA October 2008 to August 2011 Programmed in CSTL for implementing language recognition modules for NLP research Maintained the external relations website using JSP Servlets Spring MVC Hibernate Aggressively learned shell commands and implemented piping and redirection on FreeBSD Supported System administration tasks and acted as a backup for the System Admin team Used C and BoostGIL for video image processing for extracting snapshots of a video Used Perl one liners to search and replace text in files to calculate totals for number columns Gathered business requirements and translated them into technical specifications Administered Jboss 50 and created queues for messaging between client and MDBs Formulated Statistical Classification algorithm for Gigaword and implemented it in Perl The algorithm was designed to primarily work with unstructured text and game scores Created and Tested the language identifier program on different data sets Plotted the data points to show the accuracy of the code with relevance to bigramngram language detection The Statistical Algorithm used certain text information to discriminatively determine the type Wrote Perl scripts to process text files that were used for Gigaword Publications by LDC Implemented PDF invoice generation using Java 16 JSP JBoss messaging and Spring MVC Used Python 30 for generating word frequency lists over different language corpora Primarily worked on UNIX FreeBSD Linux Ubuntu based systems Utilized Java 15 to write design and implement a parts of speech tagger using NLP Used NLTK to write Python NLP Natural language processing programs for text corpora Designed and developed internal Linguistic Corpora portal using Django and MySQL 55 Used R classification tools and methodologies SVM for training and validating the model Implemented a word break correction program using Python 27 for Korean language Designed the entity relationship model and utilized MySQL as the RDBMS Processed huge text files 40 MB for Linguistic Publications using Perl Regex Processing Tested language identification models using C and Python 30 NumPy and Pandas Wrote Bigram language identification discriminative models in the realm of machine learning Software Engineer I Siemens Medical Solutions Malvern PA January 2007 to September 2008 Developed Multitier Enterprise Clinical solutions using Java 15 and J2EE 14 Adopted ANT and XML for automating software build processes of all product modules Unit tested code using Junit and Junitee framework Understood and applied the Software Development Life Cycle on daily basis Used IBM Websphere as the runtime environment and Eclipse 32 as the frontend GUI Applied Objectoriented design concepts to solve business problems Used TIBCO Business Works for event processing and HL7 to XML transformation Used Microsoft SQL Server as the Relational Database Management System Oversaw System Integration AIT of Soarian Clinicals JDI Module InternCoop Tools and Methodologies Siemens Medical Solutions Malvern PA August 2006 to January 2007 Used Rational ClearCase Configuration management system and version control Used Rational ClearQuest Defect tracking tool Information Systems Intern Saint Josephs University Philadelphia PA February 2005 to August 2006 Developed and maintained the university website using JSP and Servlets Supervised the Data Processing Lab and Administered the Windows 2000 Server Used Weblogic 81 as the Application Server for the graduate admissions website Managed Talisma A complete ECRM package and troubleshoot issues Wrote BashKorn shell scripts and used UNIXSolaris as the Operating system Automated daily backups using MSDOS batch file scripts Used C for programming tasks assigned Geographic Information System GIS Intern National Institute of Oceanography Panjim Ga June 2002 to August 2004 Implemented a Geographic Information System using ArcGIS and ArcSDE Family Developed a web application for querying ocean and marine data using HTML and PHP Worked with the ERDAS Imagine and MapInfo family of Products Analyzed data and designed an ERmodel scanned and digitized maps Implemented the data model using Oracle 8i relational database management system Utilized both Redhat Linux and Windows for developing and testing the web app Wrote Perl Scripts to load data from flat files to MysqlTesting and OracleProd Filtered specific data using pipeline processing with SED and AWK Used Jakarta Tomcat to Test the website before deployment Wrote Bash shell scripts to automate the deployment of Web application SOCIAL WELFARE PROGRAMS Worked with Medicaid General Assistance Temporary Assistance for Needy Families and Food Assistance programs at the New Jersey CASS project within HP IDEAS OO design OO programming Extreme programming Agile Testfirst design Relational databases Byte code engineering Java Assist Tool Code reviews Code Optimization Data structures and Algorithms Able to quickly become productive in languages and frameworks which I have never used before Education MSE in Executive Masters in Technology Management in EMTM University of Pennsylvania Wharton Business School Philadelphia PA June 2013 MS in Computer Science in Computer Science Saint Josephs University Philadelphia PA December 2006 BE in Computer Science and Engineering in Computer Science and Engineering Padre Conceio College of Engineering July 2003 Skills Bash 6 years Java 10 years Perl 6 years Python 9 years testing 7 years Additional Information SOFTWARE SKILLS Operating Systems UNIX FreeBSD Ubuntu CentOS WIN 7 IBM AIX MAC OS X RDBMS Oracle11 g IBM DB2 MSSQL server 2005 MySQL 50 H2 Languages Java 16 Python 30 CC STL Boost Libraries Scripting Korn Bash AWK Sed Perl 510 Ruby 200 Distributed Computing J2EE 14 EJB 30 Java EE 6 Web Technologies XML XSLT PHP ASP JSP Servlets JavaScript HTML5 App Web Servers Tomcat 42 IIS IBM Websphere 70 JBOSS 50 WebLogic 81 Geographical Info Systems Imagine Erdas ArcGIS Family Web Frameworks Struts Hibernate 401 Spring 321 jQuery 141 Development Tools Neatbeans 7 Eclipse 37 IBM RSAUML IntelliJ Release Tools AnthillPro 3 CruiseControl 25 Hudson Maven Jenkins Testing Framework JUnit 44 JunitEE 110 Selenium and Watir Versioning Tools Clearcase Subversion 179 PVCS GIT Messaging Frameworks Oracle AQ MDB Message Drive beans TIBCO EMSRV Document Automation HP ExstreamPDF Generation Engine WebServices Soap Rest WebServices Monitoring Tools Zabbix Monasca API NoSQL MongoDB 32 and Cassandra ETL Tools Metl Petl Pygrametl",
    "extracted_keywords": [
        "DevOpsGolang",
        "Developer",
        "Senior",
        "DevOpsGolang",
        "span",
        "lDeveloperspan",
        "McLean",
        "VA",
        "career",
        "Application",
        "Software",
        "Development",
        "Management",
        "qualifications",
        "project",
        "management",
        "programming",
        "team",
        "building",
        "synergies",
        "organization",
        "US",
        "employer",
        "Work",
        "Experience",
        "Senior",
        "DevOpsGolang",
        "Developer",
        "Boston",
        "MA",
        "January",
        "Present",
        "infrastructure",
        "tech",
        "stack",
        "AWS",
        "AMIs",
        "Jenkins",
        "Slaves",
        "packer",
        "references",
        "Jenkins",
        "application",
        "team",
        "account",
        "creation",
        "SSH",
        "troubleshooting",
        "AWS",
        "access",
        "NGINX",
        "config",
        "IPaddresses",
        "users",
        "web",
        "server",
        "AWS",
        "OpsWorks",
        "SSH",
        "jump",
        "hostsbastion",
        "system",
        "security",
        "Wrote",
        "Cloud",
        "Formation",
        "stack",
        "EC2",
        "Instances",
        "Auto",
        "Scaling",
        "groups",
        "RDS",
        "Route53",
        "Security",
        "Groups",
        "Network",
        "ACL",
        "Subnets",
        "application",
        "Python",
        "lambda",
        "snapshot",
        "process",
        "SQS",
        "infrastructure",
        "AWS",
        "VPC",
        "Subnets",
        "Security",
        "Groups",
        "ACLS",
        "Puppet",
        "configuration",
        "management",
        "modules",
        "Roles",
        "Facter",
        "Hiera",
        "provision",
        "proof",
        "concept",
        "backpressure",
        "web",
        "handler",
        "GO",
        "percentiles",
        "Dockerized",
        "MongoDB",
        "replica",
        "data",
        "Docker",
        "network",
        "invoicing",
        "web",
        "application",
        "Golang",
        "PostgreSQL",
        "Go",
        "Channels",
        "Routines",
        "performance",
        "invoicing",
        "application",
        "Contributed",
        "source",
        "code",
        "Golang",
        "automation",
        "framework",
        "AWS",
        "CFN",
        "Setup",
        "Rancher",
        "management",
        "platform",
        "Kubernetes",
        "orchestration",
        "framework",
        "Docker",
        "containers",
        "environments",
        "automation",
        "framework",
        "AWS",
        "Cloudformation",
        "Go",
        "expertise",
        "Java",
        "programming",
        "application",
        "errors",
        "suggestions",
        "AWS",
        "EC2",
        "instance",
        "type",
        "compute",
        "family",
        "Setup",
        "log",
        "exports",
        "Papertrail",
        "Sumo",
        "logic",
        "Rancher",
        "host",
        "nodes",
        "stdio",
        "output",
        "AWS",
        "CodeDeploy",
        "Salt",
        "Stack",
        "provision",
        "EC2",
        "instances",
        "application",
        "Sumo",
        "Logic",
        "logs",
        "troubleshoot",
        "production",
        "application",
        "issues",
        "Setup",
        "Cloudwatch",
        "log",
        "forwarder",
        "Sumo",
        "Logic",
        "endpoint",
        "Python",
        "Lambda",
        "Logic",
        "Monitor",
        "performance",
        "monitoring",
        "production",
        "environment",
        "Wrote",
        "Bash",
        "scripts",
        "patching",
        "process",
        "CLI",
        "outputs",
        "API",
        "Git",
        "automation",
        "code",
        "Git",
        "work",
        "flow",
        "changes",
        "Setup",
        "group",
        "S3",
        "bucket",
        "permissions",
        "IAM",
        "groups",
        "policies",
        "names",
        "teams",
        "Puppet",
        "implementation",
        "CIS",
        "Docker",
        "guide",
        "parts",
        "Senior",
        "PythonDevOps",
        "Engineer",
        "SOLTRA",
        "Arlington",
        "VA",
        "December",
        "January",
        "CTXEdge",
        "Cyber",
        "Threat",
        "exchange",
        "platform",
        "NC4Soltra",
        "data",
        "model",
        "Django",
        "models",
        "Mongoengine",
        "ORM",
        "Comfortable",
        "Linux",
        "Ubuntu",
        "CentOS",
        "command",
        "line",
        "Linux",
        "Thorough",
        "knowledge",
        "SSH",
        "Agents",
        "Proxy",
        "Commands",
        "access",
        "systems",
        "FW",
        "Wrote",
        "roles",
        "books",
        "code",
        "SoltraCTX",
        "solutions",
        "Setup",
        "Kubernetes",
        "cluster",
        "Master",
        "Minion",
        "AWSUbuntu",
        "CFN",
        "Ansible",
        "Cloud",
        "Formation",
        "test",
        "staging",
        "environments",
        "snapshot",
        "west",
        "region",
        "process",
        "Lambda",
        "SQS",
        "STIX",
        "Snort",
        "rule",
        "conversion",
        "REST",
        "API",
        "Plugin",
        "Soltra",
        "Edge",
        "Setup",
        "Jenkins",
        "processes",
        "code",
        "base",
        "Test",
        "Staging",
        "systems",
        "users",
        "test",
        "staging",
        "boxes",
        "ssh",
        "access",
        "Wrote",
        "packer",
        "scripts",
        "CentOS",
        "AMIS",
        "release",
        "appliance",
        "replica",
        "sets",
        "availability",
        "Mongodb",
        "West",
        "Fabric",
        "jobs",
        "release",
        "artifacts",
        "staging",
        "test",
        "environments",
        "Shell",
        "Scripting",
        "Python",
        "Object",
        "Oriented",
        "ProgrammingScripting",
        "JIRA",
        "Sprint",
        "Planning",
        "Confluence",
        "documenting",
        "processes",
        "Senior",
        "PythonDevOps",
        "Engineer",
        "SOLTRA",
        "Tampa",
        "FL",
        "October",
        "November",
        "PS",
        "project",
        "acquisition",
        "Worked",
        "Edge",
        "Cyber",
        "Threat",
        "exchange",
        "platform",
        "Soltra",
        "data",
        "model",
        "Django",
        "models",
        "Mongoengine",
        "ORM",
        "task",
        "pipelines",
        "Celery",
        "domain",
        "knowledge",
        "TAXII",
        "STIX",
        "CybOX",
        "specifications",
        "Cyber",
        "Security",
        "information",
        "Setup",
        "VMware",
        "Fusion",
        "production",
        "VM",
        "development",
        "purposes",
        "Rest",
        "API",
        "Django",
        "Rest",
        "Framework",
        "DJoser",
        "authentication",
        "Wrote",
        "React",
        "components",
        "end",
        "WebPack",
        "bundler",
        "Redux",
        "team",
        "devops",
        "process",
        "development",
        "boxes",
        "scripts",
        "Nginx",
        "UWsgi",
        "app",
        "server",
        "Mongo",
        "database",
        "Mongodb",
        "Map",
        "jobs",
        "statistics",
        "threat",
        "data",
        "system",
        "Ubuntu",
        "code",
        "CentOS",
        "version",
        "Configured",
        "Circus",
        "websocket",
        "server",
        "celery",
        "processes",
        "Mongodb",
        "data",
        "model",
        "STIXCybox",
        "threat",
        "Config",
        "data",
        "Met",
        "government",
        "customers",
        "product",
        "features",
        "Github",
        "Flow",
        "process",
        "code",
        "team",
        "reviews",
        "Wrote",
        "Python",
        "generators",
        "performance",
        "search",
        "system",
        "Docker",
        "container",
        "Mongodb",
        "Uwsgi",
        "App",
        "server",
        "Nginx",
        "Server",
        "Comfortable",
        "Linux",
        "command",
        "line",
        "Git",
        "subcommand",
        "usage",
        "Cloud",
        "Application",
        "ArchitectTech",
        "LeadDevOps",
        "American",
        "Technology",
        "Consulting",
        "Clive",
        "IA",
        "October",
        "September",
        "Serviced",
        "Clients",
        "Capital",
        "One",
        "WhichWinery",
        "Inc",
        "DTCCSoltra",
        "Solutions",
        "design",
        "guidance",
        "application",
        "development",
        "system",
        "integration",
        "Django",
        "Python",
        "fraud",
        "monitoring",
        "dashboard",
        "CMS",
        "RedHat",
        "deployment",
        "Ubuntu",
        "Linux",
        "box",
        "development",
        "Comfortable",
        "Linux",
        "command",
        "line",
        "system",
        "administration",
        "tasks",
        "matter",
        "expert",
        "Request",
        "proposal",
        "RFP",
        "inhouse",
        "Connex",
        "switch",
        "throughput",
        "fraud",
        "integration",
        "team",
        "meetings",
        "sprint",
        "targets",
        "achievements",
        "Django",
        "Python",
        "Pdb",
        "Postman",
        "functions",
        "Setup",
        "AWS",
        "Cloud",
        "Watch",
        "Monitoring",
        "Lambda",
        "jobs",
        "snapshots",
        "East",
        "region",
        "West",
        "region",
        "Django",
        "application",
        "AWS",
        "ElastiCache",
        "system",
        "performance",
        "Rest",
        "API",
        "Django",
        "Rest",
        "framework",
        "application",
        "functionality",
        "response",
        "time",
        "tasks",
        "Celery",
        "RabbitMQ",
        "application",
        "infrastructure",
        "US",
        "West",
        "region",
        "AWS",
        "disaster",
        "recovery",
        "Setup",
        "Redis",
        "server",
        "session",
        "management",
        "default",
        "Django",
        "database",
        "system",
        "performance",
        "data",
        "Memcached",
        "Created",
        "Amazon",
        "S3",
        "buckets",
        "media",
        "ACL",
        "settings",
        "load",
        "balancer",
        "traffic",
        "EC2",
        "instances",
        "availability",
        "analytics",
        "system",
        "AWS",
        "S3",
        "Mentored",
        "setup",
        "training",
        "classes",
        "hires",
        "staff",
        "Installed",
        "Zabbix",
        "server",
        "RedHat",
        "agents",
        "machines",
        "Configured",
        "standby",
        "PostgreSQL",
        "slave",
        "server",
        "region",
        "reliability",
        "Cassandra",
        "database",
        "log",
        "data",
        "ElasticSearch",
        "Kibana",
        "visualization",
        "Python",
        "code",
        "Spark",
        "jobs",
        "fraud",
        "data",
        "Cassandra",
        "PySpark",
        "grooming",
        "sessions",
        "business",
        "team",
        "requirements",
        "Wrote",
        "data",
        "migration",
        "scripts",
        "SQLAlchemy",
        "data",
        "structure",
        "Django",
        "CMS",
        "content",
        "management",
        "system",
        "Configured",
        "Supervisor",
        "Nginx",
        "server",
        "UWSGI",
        "App",
        "server",
        "ETL",
        "automation",
        "tasks",
        "CSV",
        "XML",
        "file",
        "data",
        "database",
        "Wrote",
        "Chef",
        "systems",
        "builds",
        "pipelines",
        "Setup",
        "delivery",
        "Jenkins",
        "pipelines",
        "dev",
        "staging",
        "prod",
        "Comfortable",
        "AWS",
        "CLI",
        "tasks",
        "automation",
        "scripts",
        "Wrote",
        "Bash",
        "shell",
        "SFTP",
        "scripts",
        "system",
        "administration",
        "file",
        "transfers",
        "Aspects",
        "Development",
        "testing",
        "Agile",
        "System",
        "Wrote",
        "Python",
        "unit",
        "functionality",
        "test",
        "reports",
        "Nose",
        "Redhat",
        "results",
        "iostats",
        "vmstat",
        "sysctl",
        "interface",
        "Configured",
        "NGINX",
        "webserver",
        "performance",
        "Metl",
        "Pygrametl",
        "Extraction",
        "transformation",
        "loading",
        "data",
        "legacy",
        "systems",
        "Python",
        "scripts",
        "data",
        "ETL",
        "transaction",
        "files",
        "Understood",
        "Django",
        "migrations",
        "model",
        "changes",
        "database",
        "schema",
        "Git",
        "version",
        "control",
        "github",
        "repository",
        "git",
        "flow",
        "reviews",
        "Setup",
        "box",
        "Docker",
        "containers",
        "web",
        "application",
        "server",
        "db",
        "server",
        "Senior",
        "SystemsSoftware",
        "Engineer",
        "V",
        "HewlettPackard",
        "Fort",
        "Collins",
        "CO",
        "April",
        "October",
        "HP",
        "Helion",
        "Enterprise",
        "Cloud",
        "Platform",
        "cloud",
        "initiative",
        "monitoring",
        "systems",
        "cloud",
        "Setup",
        "Bamboo",
        "integration",
        "server",
        "building",
        "testing",
        "code",
        "Linux",
        "boot",
        "process",
        "GRUB",
        "loader",
        "root",
        "shell",
        "Setup",
        "cloud",
        "OpenStack",
        "neutron",
        "network",
        "subnets",
        "Python",
        "cloud",
        "monitoring",
        "service",
        "MonascaAgent",
        "HELION",
        "project",
        "proof",
        "concept",
        "Vertica",
        "DB",
        "Cassandra",
        "metrics",
        "Linux",
        "kernel",
        "application",
        "performance",
        "sycsctl",
        "development",
        "Ubuntu",
        "Linux",
        "Eclipse",
        "Java",
        "Sublime",
        "Python",
        "Wrote",
        "Ansible",
        "configuration",
        "scripts",
        "automate",
        "provision",
        "Linux",
        "systems",
        "HP",
        "Cloud",
        "Customized",
        "OpenStack",
        "Horizon",
        "HTML5",
        "CSS",
        "Javascript",
        "Multithreaded",
        "Python",
        "code",
        "performance",
        "Monasca",
        "Rest",
        "Api",
        "detail",
        "comparison",
        "list",
        "Cassandra",
        "NoSql",
        "DBs",
        "Vagrant",
        "development",
        "stack",
        "machine",
        "monitoring",
        "machine",
        "Monasca",
        "Java",
        "persistence",
        "module",
        "Python",
        "code",
        "CQLEngine",
        "ORM",
        "data",
        "Cassandra",
        "cluster",
        "Developed",
        "Monasca",
        "UI",
        "Horizon",
        "dashboard",
        "Django",
        "metrics",
        "events",
        "Kafka",
        "metrics",
        "Monitoring",
        "API",
        "Threshold",
        "Engine",
        "Setup",
        "services",
        "run",
        "levels",
        "Redhat",
        "CentOS",
        "updatercd",
        "Keystone",
        "authentication",
        "authN",
        "level",
        "authorization",
        "authZ",
        "cloud",
        "components",
        "system",
        "metrics",
        "Nagios",
        "Plugins",
        "Familiar",
        "Oracle",
        "VirtualBox",
        "Kernel",
        "machines",
        "highspeed",
        "metrics",
        "processing",
        "REST",
        "API",
        "Python",
        "Wrote",
        "system",
        "administration",
        "tasks",
        "Python",
        "Fabric",
        "system",
        "metrics",
        "MySQL",
        "config",
        "data",
        "HP",
        "Vertica",
        "Metrics",
        "Alarms",
        "data",
        "Monasca",
        "notification",
        "engine",
        "Python",
        "concepts",
        "Apache",
        "Tornado",
        "web",
        "server",
        "forwarder",
        "metrics",
        "collector",
        "Metrics",
        "Influxdb",
        "Grafana",
        "end",
        "Senior",
        "Service",
        "Information",
        "Developer",
        "IV",
        "HewlettPackard",
        "Mount",
        "Laurel",
        "NJ",
        "August",
        "April",
        "Architected",
        "systems",
        "JavaJ2EE",
        "Rest",
        "Services",
        "Business",
        "Analysts",
        "Stakeholders",
        "business",
        "requirements",
        "Python",
        "files",
        "load",
        "data",
        "Oracle",
        "g",
        "SqlAlchemy",
        "support",
        "OS",
        "software",
        "teams",
        "HealthCare",
        "division",
        "Python",
        "Regular",
        "Expressions",
        "metadata",
        "repository",
        "use",
        "mETL",
        "Python",
        "DB2",
        "transform",
        "legacy",
        "data",
        "Spring",
        "MVC",
        "MVC",
        "pattern",
        "welfare",
        "application",
        "data",
        "Hibernate",
        "DAO",
        "Pattern",
        "Spring",
        "AOP",
        "Transaction",
        "Management",
        "Hadoop",
        "MongoDB",
        "Python",
        "Person",
        "match",
        "Legacy",
        "Conversion",
        "Implemented",
        "Role",
        "security",
        "welfare",
        "application",
        "Spring",
        "Security",
        "team",
        "Tech",
        "Lead",
        "team",
        "developers",
        "work",
        "Batch",
        "Generation",
        "EBT",
        "checks",
        "J2EEJava",
        "JMS",
        "EJB",
        "MDB",
        "Wrote",
        "Jython",
        "automation",
        "scripts",
        "J2EE",
        "application",
        "deployment",
        "WAS",
        "administration",
        "analysis",
        "design",
        "development",
        "phases",
        "software",
        "solution",
        "Delegated",
        "tasks",
        "programmers",
        "deadline",
        "IBM",
        "Rational",
        "Software",
        "Architect",
        "Entity",
        "model",
        "Class",
        "model",
        "knowledge",
        "maintenance",
        "solutions",
        "production",
        "system",
        "testing",
        "business",
        "functionality",
        "WatirSelenium",
        "GUI",
        "scripts",
        "cross",
        "teams",
        "priorities",
        "business",
        "interests",
        "Notice",
        "generation",
        "framework",
        "Oracle",
        "AQ",
        "HP",
        "Exstream",
        "COCCI",
        "Java",
        "POJO",
        "Business",
        "Process",
        "Objects",
        "Service",
        "Layer",
        "code",
        "SQL",
        "Procedure",
        "automation",
        "Java",
        "Hibernate",
        "ORM",
        "C",
        "language",
        "files",
        "UNIX",
        "legacy",
        "system",
        "data",
        "Perl",
        "delta",
        "OOTB",
        "configuration",
        "files",
        "files",
        "Jython",
        "Java",
        "class",
        "file",
        "attributes",
        "end",
        "code",
        "UnixLinux",
        "command",
        "line",
        "interface",
        "Wrote",
        "Python",
        "scripts",
        "data",
        "Excel",
        "files",
        "XML",
        "configuration",
        "files",
        "H2Dev",
        "Oracle",
        "g",
        "Test",
        "IBM",
        "DB2",
        "development",
        "testing",
        "Setup",
        "Jenkins",
        "integration",
        "Development",
        "Release",
        "purposes",
        "code",
        "reviews",
        "completion",
        "end",
        "Business",
        "Flows",
        "Programmer",
        "Analyst",
        "II",
        "University",
        "Pennsylvania",
        "Philadelphia",
        "PA",
        "October",
        "August",
        "CSTL",
        "language",
        "recognition",
        "modules",
        "NLP",
        "research",
        "relations",
        "website",
        "JSP",
        "Servlets",
        "Spring",
        "MVC",
        "Hibernate",
        "Aggressively",
        "shell",
        "commands",
        "piping",
        "redirection",
        "FreeBSD",
        "Supported",
        "System",
        "administration",
        "tasks",
        "backup",
        "System",
        "Admin",
        "team",
        "C",
        "BoostGIL",
        "video",
        "image",
        "processing",
        "snapshots",
        "video",
        "Perl",
        "liners",
        "text",
        "files",
        "totals",
        "number",
        "columns",
        "business",
        "requirements",
        "specifications",
        "Jboss",
        "queues",
        "client",
        "MDBs",
        "Formulated",
        "Statistical",
        "Classification",
        "algorithm",
        "Gigaword",
        "Perl",
        "algorithm",
        "text",
        "game",
        "scores",
        "language",
        "identifier",
        "program",
        "data",
        "sets",
        "data",
        "points",
        "accuracy",
        "code",
        "relevance",
        "language",
        "detection",
        "Statistical",
        "Algorithm",
        "text",
        "information",
        "type",
        "Wrote",
        "Perl",
        "scripts",
        "text",
        "files",
        "Gigaword",
        "Publications",
        "LDC",
        "PDF",
        "invoice",
        "generation",
        "Java",
        "JSP",
        "JBoss",
        "messaging",
        "Spring",
        "MVC",
        "Python",
        "word",
        "frequency",
        "lists",
        "language",
        "corpora",
        "UNIX",
        "FreeBSD",
        "Linux",
        "Ubuntu",
        "systems",
        "Java",
        "design",
        "parts",
        "speech",
        "tagger",
        "NLP",
        "NLTK",
        "Python",
        "NLP",
        "language",
        "processing",
        "programs",
        "text",
        "corpora",
        "Linguistic",
        "Corpora",
        "portal",
        "Django",
        "MySQL",
        "R",
        "classification",
        "tools",
        "methodologies",
        "SVM",
        "training",
        "model",
        "word",
        "break",
        "correction",
        "program",
        "Python",
        "language",
        "entity",
        "relationship",
        "model",
        "MySQL",
        "RDBMS",
        "text",
        "files",
        "MB",
        "Linguistic",
        "Publications",
        "Perl",
        "Regex",
        "Processing",
        "language",
        "identification",
        "models",
        "C",
        "Python",
        "NumPy",
        "Pandas",
        "Wrote",
        "Bigram",
        "language",
        "identification",
        "discriminative",
        "models",
        "realm",
        "machine",
        "Software",
        "Engineer",
        "Siemens",
        "Medical",
        "Solutions",
        "Malvern",
        "PA",
        "January",
        "September",
        "Developed",
        "Multitier",
        "Enterprise",
        "solutions",
        "Java",
        "J2EE",
        "Adopted",
        "ANT",
        "XML",
        "software",
        "build",
        "processes",
        "product",
        "modules",
        "Unit",
        "code",
        "Junit",
        "Junitee",
        "framework",
        "Understood",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "basis",
        "IBM",
        "Websphere",
        "runtime",
        "environment",
        "Eclipse",
        "frontend",
        "GUI",
        "Objectoriented",
        "design",
        "concepts",
        "business",
        "problems",
        "TIBCO",
        "Business",
        "Works",
        "event",
        "processing",
        "HL7",
        "transformation",
        "Microsoft",
        "SQL",
        "Server",
        "Relational",
        "Database",
        "Management",
        "System",
        "Oversaw",
        "System",
        "Integration",
        "AIT",
        "Soarian",
        "Clinicals",
        "JDI",
        "Module",
        "InternCoop",
        "Tools",
        "Methodologies",
        "Siemens",
        "Medical",
        "Solutions",
        "Malvern",
        "PA",
        "August",
        "January",
        "Used",
        "Rational",
        "ClearCase",
        "Configuration",
        "management",
        "system",
        "version",
        "control",
        "Rational",
        "ClearQuest",
        "Defect",
        "tracking",
        "tool",
        "Information",
        "Systems",
        "Intern",
        "Saint",
        "Josephs",
        "University",
        "Philadelphia",
        "PA",
        "February",
        "August",
        "Developed",
        "university",
        "website",
        "JSP",
        "Servlets",
        "Data",
        "Processing",
        "Lab",
        "Windows",
        "Server",
        "Weblogic",
        "Application",
        "Server",
        "admissions",
        "website",
        "Managed",
        "Talisma",
        "ECRM",
        "package",
        "troubleshoot",
        "issues",
        "Wrote",
        "BashKorn",
        "shell",
        "scripts",
        "UNIXSolaris",
        "Operating",
        "system",
        "backups",
        "MSDOS",
        "batch",
        "file",
        "scripts",
        "C",
        "programming",
        "tasks",
        "Geographic",
        "Information",
        "System",
        "GIS",
        "Intern",
        "National",
        "Institute",
        "Oceanography",
        "Panjim",
        "Ga",
        "June",
        "August",
        "Geographic",
        "Information",
        "System",
        "ArcGIS",
        "ArcSDE",
        "Family",
        "web",
        "application",
        "ocean",
        "data",
        "HTML",
        "PHP",
        "ERDAS",
        "Imagine",
        "MapInfo",
        "family",
        "Products",
        "data",
        "ERmodel",
        "maps",
        "data",
        "model",
        "Oracle",
        "database",
        "management",
        "system",
        "Redhat",
        "Linux",
        "Windows",
        "web",
        "app",
        "Wrote",
        "Perl",
        "Scripts",
        "data",
        "files",
        "MysqlTesting",
        "OracleProd",
        "data",
        "pipeline",
        "processing",
        "SED",
        "AWK",
        "Jakarta",
        "Tomcat",
        "website",
        "deployment",
        "Wrote",
        "Bash",
        "shell",
        "scripts",
        "deployment",
        "Web",
        "application",
        "SOCIAL",
        "WELFARE",
        "PROGRAMS",
        "Medicaid",
        "General",
        "Assistance",
        "Temporary",
        "Assistance",
        "Needy",
        "Families",
        "Food",
        "Assistance",
        "programs",
        "New",
        "Jersey",
        "CASS",
        "project",
        "HP",
        "IDEAS",
        "OO",
        "design",
        "OO",
        "programming",
        "Extreme",
        "programming",
        "Agile",
        "Testfirst",
        "design",
        "Relational",
        "Byte",
        "code",
        "engineering",
        "Java",
        "Assist",
        "Tool",
        "Code",
        "Code",
        "Optimization",
        "Data",
        "structures",
        "Algorithms",
        "languages",
        "frameworks",
        "Education",
        "MSE",
        "Executive",
        "Masters",
        "Technology",
        "Management",
        "EMTM",
        "University",
        "Pennsylvania",
        "Wharton",
        "Business",
        "School",
        "Philadelphia",
        "PA",
        "June",
        "MS",
        "Computer",
        "Science",
        "Computer",
        "Science",
        "Saint",
        "Josephs",
        "University",
        "Philadelphia",
        "PA",
        "December",
        "Computer",
        "Science",
        "Engineering",
        "Computer",
        "Science",
        "Engineering",
        "Padre",
        "Conceio",
        "College",
        "Engineering",
        "July",
        "Skills",
        "Bash",
        "years",
        "Java",
        "years",
        "Perl",
        "years",
        "Python",
        "years",
        "years",
        "Additional",
        "Information",
        "SOFTWARE",
        "SKILLS",
        "Operating",
        "Systems",
        "UNIX",
        "FreeBSD",
        "Ubuntu",
        "CentOS",
        "WIN",
        "IBM",
        "AIX",
        "MAC",
        "OS",
        "X",
        "RDBMS",
        "Oracle11",
        "g",
        "IBM",
        "DB2",
        "MSSQL",
        "server",
        "MySQL",
        "H2",
        "Languages",
        "Java",
        "Python",
        "CC",
        "STL",
        "Boost",
        "Scripting",
        "Korn",
        "Bash",
        "AWK",
        "Sed",
        "Perl",
        "Ruby",
        "Computing",
        "J2EE",
        "EJB",
        "Java",
        "EE",
        "Web",
        "Technologies",
        "XML",
        "XSLT",
        "PHP",
        "ASP",
        "JSP",
        "Servlets",
        "JavaScript",
        "HTML5",
        "App",
        "Web",
        "Servers",
        "Tomcat",
        "IIS",
        "IBM",
        "Websphere",
        "JBOSS",
        "WebLogic",
        "Geographical",
        "Info",
        "Systems",
        "Imagine",
        "Erdas",
        "ArcGIS",
        "Family",
        "Web",
        "Frameworks",
        "Struts",
        "Hibernate",
        "Spring",
        "jQuery",
        "Development",
        "Tools",
        "Neatbeans",
        "Eclipse",
        "IBM",
        "RSAUML",
        "IntelliJ",
        "Release",
        "Tools",
        "AnthillPro",
        "CruiseControl",
        "Hudson",
        "Maven",
        "Jenkins",
        "Testing",
        "Framework",
        "JUnit",
        "Selenium",
        "Watir",
        "Versioning",
        "Tools",
        "Clearcase",
        "Subversion",
        "PVCS",
        "GIT",
        "Messaging",
        "Frameworks",
        "Oracle",
        "AQ",
        "MDB",
        "Message",
        "Drive",
        "TIBCO",
        "EMSRV",
        "Document",
        "Automation",
        "HP",
        "ExstreamPDF",
        "Generation",
        "Engine",
        "WebServices",
        "Soap",
        "Rest",
        "WebServices",
        "Monitoring",
        "Tools",
        "Zabbix",
        "Monasca",
        "API",
        "NoSQL",
        "MongoDB",
        "Cassandra",
        "ETL",
        "Tools",
        "Metl",
        "Petl",
        "Pygrametl"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T23:06:24.925801",
    "resume_data": "Senior DevOpsGolang Developer Senior DevOpsGolang span lDeveloperspan McLean VA To blaze a career in Application Software Development and Management that will enable me to effectively use my qualifications in project management programming and team building to develop optimum synergies for the organization Authorized to work in the US for any employer Work Experience Senior DevOpsGolang Developer Boston MA January 2017 to Present Designed and supported the technological infrastructure for the tech stack using AWS Built patched AMIs for Jenkins Slaves using packer and updated the references in Jenkins Supported the application team with account creation SSH troubleshooting and AWS access Modified the NGINX config to log the real IPaddresses of users accessing the web server Used AWS OpsWorks for setting up SSH jump hostsbastion to increase system security Wrote Cloud Formation templates to set up the entire stack EC2 Instances Auto Scaling groups RDS Route53 Security Groups Network ACL Subnets for the application Designed and Implemented an asynchronous Python lambda snapshot process using SQS Architected the entire infrastructure using AWS VPC Subnets Security Groups ACLS Wrote Puppet 3 configuration management modules using Roles Facter and Hiera to provision Designed a proof of concept to write a backpressure web handler in GO based on percentiles Dockerized MongoDB 32 and setup a replica set with persisted data in a Docker network Programmed the invoicing web application using Golang and PostgreSQL as the backend Utilized Go Channels and Routines to enhance the performance of the invoicing application Contributed source code in Golang to developing an automation framework for AWS CFN Setup Rancher management platform with Kubernetes as the orchestration framework for running Docker containers in all environments Implemented the automation framework around AWS Cloudformation using Go 18 Relied on my expertise in Java programming to troubleshoot the application and find errors Made suggestions to upgrade the AWS EC2 instance type to a more compute intensive family Setup log exports to Papertrail and Sumo logic for the Rancher host nodes using stdio output Used AWS CodeDeploy and Salt Stack to provision the EC2 instances install the application Utilized Sumo Logic to collect logs and troubleshoot production related application issues Setup Cloudwatch log forwarder to Sumo Logic endpoint using a Python Lambda function Employed Logic Monitor for performance monitoring of the production environment Wrote Bash shell scripts to automate routine patching and process CLI outputs from the API Used Git for storing automation code and followed the Git work flow for committing changes Setup group S3 bucket permissions using IAM groups and policies based on names of teams Contributed to a Puppet implementation of the CIS Docker hardening guide covering all parts Senior PythonDevOps Engineer SOLTRA Arlington VA December 2016 to January 2017 Worked on the CTXEdge 210 Cyber Threat exchange platform acquired by NC4Soltra Improved the backend data model using Django 19 models with Mongoengine ORM Comfortable on the Linux Ubuntu CentOS command line and always learning Linux Thorough knowledge of SSH Agents and Proxy Commands to access systems behind FW Wrote Ansible roles and play books to deploy code on to SoltraCTX hosted solutions Setup Kubernetes cluster Master Minion on AWSUbuntu using CFN and Ansible Crafted Cloud Formation templates to automate the test staging and UAT environments Created an asynchronous snapshot and move to west region process using Lambda and SQS Worked on the STIX to Snort rule conversion and the REST API Plugin with Soltra Edge Setup Jenkins build processes for deploying the code base on Test and Staging systems Supported users on the test and staging boxes by providing ssh access and troubleshooting Wrote packer scripts to create CentOS 68 and 71 AMIS used as release ova appliance Was involved in setting up replica sets for high availability using Mongodb 32 in the West Implemented Fabric jobs to deploy release artifacts on to the staging and test environments Proficient with Shell Scripting and Python Object Oriented ProgrammingScripting Used JIRA for Sprint Planning and Confluence for documenting processes and findings Senior PythonDevOps Engineer SOLTRA Tampa FL October 2016 to November 2016 PS This project was shut down since an acquisition did not go through Worked on the Edge 2930 Cyber Threat exchange platform being developed by Soltra Designed the backend data model using Django 19 models with Mongoengine ORM Wrote asynchronous task processing pipelines using MongoDB for queuing and Celery Gained domain knowledge on TAXII STIX and CybOX technical specifications for Cyber Security information sharing Setup VMware Fusion and converted the the production VM for development purposes Implemented a Rest API using Django Rest Framework 33 and DJoser for authentication Wrote React components to develop the front end with WebPack as the bundler and Redux On joining the team studied the devops process for development boxes and streamlined it Wrote Ansible scripts for setting up Nginx UWsgi app server and the Mongo database Designed and implemented Mongodb Map Reduce jobs to aggregate statistics for threat data Developed the system using Ubuntu 154 and deployed the code on CentOS version 70 Configured Circus to control the websocket server and asynchronous celery processes Used Mongodb to implement the data model for storing STIXCybox threat and Config data Met up with government and nongovernmental customers to discuss product features Followed the Github Flow process to develop code with the team and manage reviews Wrote Python generators for achieving better performance in the search system Set up separate Docker container for Mongodb Uwsgi App server and the Nginx Server Comfortable on the Linux command line and with Git subcommand usage Cloud Application ArchitectTech LeadDevOps American Technology Consulting Clive IA October 2014 to September 2016 Serviced Clients such as Capital One WhichWinery Inc and DTCCSoltra Solutions Provided technical design guidance on application development and system integration Used Django 18 Python 30 to develop an internal fraud monitoring dashboard and a CMS Only worked on RedHat for deployment and Ubuntu Linux 1504 for local box development Comfortable on the Linux command line and with system administration tasks Acted as a subject matter expert on a Request for proposal RFP whether to go with an inhouse versus shared Connex switch for better throughput and fraud integration Chaired weekly team grooming meetings to focus on sprint targets and achievements Debugged Django views using Python debugger Pdb Used Postman to test single functions Setup AWS Cloud Watch Monitoring for Lambda jobs to create snapshots in the East region and copy them over to the West region Connected the Django application to AWS ElastiCache for better system performance Developed a Rest API using Django Rest framework exposing the application functionality Improved the response time by implementing asynchronous tasks using Celery RabbitMQ Migrated the application and infrastructure to US West region in AWS for disaster recovery Setup Redis server for session management and replaced the slower default Django database Improved the system performance by caching frequently requested data using Memcached Created Amazon S3 buckets for storing media and provided the proper ACL settings Set up an Elastic load balancer to route traffic to various EC2 instances as per the availability Architected the analytics system to be scalable and highly available using AWS and S3 Mentored and setup training classes for new hires and junior staff to bring them up to speed Installed Zabbix server on RedHat 7 and agents on the virtual machines to be monitored Configured a hot standby PostgreSQL slave server in a different region to increase reliability Used Cassandra 12 database for storing log data and ElasticSearch Kibana for visualization Implemented Python code to run Spark jobs on fraud data in Cassandra using PySpark Conducted frequent grooming sessions with the business team to elicit requirements Wrote data migration scripts utilizing SQLAlchemy to convert the data into the new structure Implemented Django CMS templates to create an internal content management system Configured Supervisor to control and monitor the Nginx server and the UWSGI App server Implemented ETL automation tasks that load plain CSV and XML file data into the database Wrote Chef scripts for provisioning systems and deploying builds on three pipelines Setup continuous delivery using Jenkins and three pipelines one for dev staging and prod Comfortable with the AWS CLI to perform all tasks and write automation scripts using it Wrote Bash shell SFTP scripts to handle system administration and regular file transfers Lead all Aspects of Development from coding designing and testing in an Agile System Wrote Python unit tests to test the functionality and generated test reports using Nose Tuned Redhat 7 by first measuring results from iostats vmstat and top using sysctl interface Configured NGINX 12 webserver and tweaked it for high performance utilizing caching Used Metl Pygrametl for Extraction transformation and loading data from legacy systems Implemented Python 30 scripts for data mangling ETL daily monetary transaction files Understood and used Django migrations to propagate model changes to the database schema Used Git for version control utilizing the internal github repository and git flow for reviews Setup local box using Docker containers for the web and application server and the db server Senior SystemsSoftware Engineer V HewlettPackard Fort Collins CO April 2013 to October 2014 Worked on the HP Helion Enterprise Cloud Platform startup cloud initiative Developed a highly resilient and scalable multitenant monitoring systems for the cloud Setup Bamboo 51 Continuous integration server for building testing and deploying code Learned how to interrupt the Linux boot process via the GRUB loader and acquire root shell Setup a cloud with OpenStack neutron which included the network and the subnets within it Utilized Python 30 for writing cloud monitoring service MonascaAgent for HELION project Implemented a proof of concept while migrating from Vertica DB to Cassandra for metrics Tuned the Linux kernel to meet optimized application performance using sycsctl and top All development was done using Ubuntu Linux 1504 Eclipse Java and Sublime Python Wrote Ansible configuration scripts to automate and provision Linux systems in HP Cloud Customized OpenStack Horizon templates using HTML5 CSS and Javascript Wrote Multithreaded Python code for performance testing the Monasca Rest Api Researched and provided a detail comparison list between Cassandra and other NoSql DBs Used Vagrant to setup the development stack machine and the monitoring machine Converted existing Monasca Java persistence module into Python 30 code Used CQLEngine ORM to insert and retrieve monitoring data into Cassandra cluster Developed Monasca UI using Horizon dashboard Django to display metrics and events Used Kafka to publish metrics from the Monitoring API and the Threshold Engine Setup services to run under different run levels in Redhat and CentOS using updatercd Used Keystone for authentication authN and high level authorization authZ Wrote cloud monitoring components for collecting system metrics using Nagios Plugins Familiar with Oracle VirtualBox to create Kernel based Virtual machines for testing Developed highspeed metrics processing and querying using REST API and Python Wrote system administration tasks using Python and Fabric to get system metrics Utilized MySQL 50 for storing config data and HP Vertica for Metrics and Alarms data Implemented the Monasca notification engine using Python 30 with OOPS concepts Used Apache Tornado web server as the forwarder to collect the metrics from the collector Metrics were stored into Influxdb and then displayed using Grafana on the front end Senior Service Information Developer IV HewlettPackard Mount Laurel NJ August 2011 to April 2013 Architected designed and developed multitier systems using JavaJ2EE and Rest Services Collaborated with Business Analysts and Stakeholders to refine business requirements Used Python 30 to parse through legacy flat files and load data into Oracle 11g SqlAlchemy Provided Technical support for OS software to other teams within the HealthCare division Implemented Python 30 Regular Expressions to parse through huge metadata repository Demonstrated use of mETL with Python and DB2 to extract transform and load legacy data Utilized Spring MVC for implementing MVC pattern in the Social welfare application Persisted data using Hibernate DAO Pattern and Spring AOP Transaction Management Used Hadoop MongoDB and Python 30 to implement Person match in Legacy Conversion Implemented Role based security in the welfare application using Spring Security Led the team as Tech Lead overseeing a team of 11 developers and assigning related work Implemented Batch Generation of EBT checks using J2EEJava JMS and EJB 30 MDB Wrote Jython automation scripts for J2EE application deployment and WAS administration Engaged in the analysis design development and testing phases of the software solution Delegated tasks to junior programmers to successfully adhere to deadline Utilized IBM Rational Software Architect to design the Entity model and Class model Applied technical knowledge to provide maintenance solutions to production system Automated testing end to end business functionality using WatirSelenium GUI scripts Worked with cross functional teams and set priorities reflecting business interests Spearheaded Notice generation framework using Oracle AQ HP Exstream and COCCI Utilized Java 16 POJO to write Business Process Objects and Service Layer code Designed SQL Procedure automation using Java 16 and Hibernate as the ORM Used C language to process large files in UNIX and convert legacy system data Utilized Perl 5 to obtain delta between OOTB configuration files and customized files Used Jython 221 to read Java class file attributes to generate front end code Very comfortable on the UnixLinux and FreeBSD command line interface Wrote Python scripts to read data from Excel files and generate XML configuration files Utilized H2Dev Oracle 11g Test and IBM DB2 databases for development and testing Setup Jenkins continuous integration for Development and Release purposes Led regular code reviews and timely completion of end to end Business Flows Programmer Analyst II University of Pennsylvania Philadelphia PA October 2008 to August 2011 Programmed in CSTL for implementing language recognition modules for NLP research Maintained the external relations website using JSP Servlets Spring MVC Hibernate Aggressively learned shell commands and implemented piping and redirection on FreeBSD Supported System administration tasks and acted as a backup for the System Admin team Used C and BoostGIL for video image processing for extracting snapshots of a video Used Perl one liners to search and replace text in files to calculate totals for number columns Gathered business requirements and translated them into technical specifications Administered Jboss 50 and created queues for messaging between client and MDBs Formulated Statistical Classification algorithm for Gigaword and implemented it in Perl The algorithm was designed to primarily work with unstructured text and game scores Created and Tested the language identifier program on different data sets Plotted the data points to show the accuracy of the code with relevance to bigramngram language detection The Statistical Algorithm used certain text information to discriminatively determine the type Wrote Perl scripts to process text files that were used for Gigaword Publications by LDC Implemented PDF invoice generation using Java 16 JSP JBoss messaging and Spring MVC Used Python 30 for generating word frequency lists over different language corpora Primarily worked on UNIX FreeBSD Linux Ubuntu based systems Utilized Java 15 to write design and implement a parts of speech tagger using NLP Used NLTK to write Python NLP Natural language processing programs for text corpora Designed and developed internal Linguistic Corpora portal using Django and MySQL 55 Used R classification tools and methodologies SVM for training and validating the model Implemented a word break correction program using Python 27 for Korean language Designed the entity relationship model and utilized MySQL as the RDBMS Processed huge text files 40MB for Linguistic Publications using Perl Regex Processing Tested language identification models using C and Python 30 NumPy and Pandas Wrote Bigram language identification discriminative models in the realm of machine learning Software Engineer I Siemens Medical Solutions Malvern PA January 2007 to September 2008 Developed Multitier Enterprise Clinical solutions using Java 15 and J2EE 14 Adopted ANT and XML for automating software build processes of all product modules Unit tested code using Junit and Junitee framework Understood and applied the Software Development Life Cycle on daily basis Used IBM Websphere as the runtime environment and Eclipse 32 as the frontend GUI Applied Objectoriented design concepts to solve business problems Used TIBCO Business Works for event processing and HL7 to XML transformation Used Microsoft SQL Server as the Relational Database Management System Oversaw System Integration AIT of Soarian Clinicals JDI Module InternCoop Tools and Methodologies Siemens Medical Solutions Malvern PA August 2006 to January 2007 Used Rational ClearCase Configuration management system and version control Used Rational ClearQuest Defect tracking tool Information Systems Intern Saint Josephs University Philadelphia PA February 2005 to August 2006 Developed and maintained the university website using JSP and Servlets Supervised the Data Processing Lab and Administered the Windows 2000 Server Used Weblogic 81 as the Application Server for the graduate admissions website Managed Talisma A complete ECRM package and troubleshoot issues Wrote BashKorn shell scripts and used UNIXSolaris as the Operating system Automated daily backups using MSDOS batch file scripts Used C for programming tasks assigned Geographic Information System GIS Intern National Institute of Oceanography Panjim Ga June 2002 to August 2004 Implemented a Geographic Information System using ArcGIS and ArcSDE Family Developed a web application for querying ocean and marine data using HTML and PHP Worked with the ERDAS Imagine and MapInfo family of Products Analyzed data and designed an ERmodel scanned and digitized maps Implemented the data model using Oracle 8i relational database management system Utilized both Redhat Linux and Windows for developing and testing the web app Wrote Perl Scripts to load data from flat files to MysqlTesting and OracleProd Filtered specific data using pipeline processing with SED and AWK Used Jakarta Tomcat to Test the website before deployment Wrote Bash shell scripts to automate the deployment of Web application SOCIAL WELFARE PROGRAMS Worked with Medicaid General Assistance Temporary Assistance for Needy Families and Food Assistance programs at the New Jersey CASS project within HP IDEAS OO design OO programming Extreme programming Agile Testfirst design Relational databases Byte code engineering Java Assist Tool Code reviews Code Optimization Data structures and Algorithms Able to quickly become productive in languages and frameworks which I have never used before Education MSE in Executive Masters in Technology Management in EMTM University of Pennsylvania Wharton Business School Philadelphia PA June 2013 MS in Computer Science in Computer Science Saint Josephs University Philadelphia PA December 2006 BE in Computer Science and Engineering in Computer Science and Engineering Padre Conceio College of Engineering July 2003 Skills Bash 6 years Java 10 years Perl 6 years Python 9 years testing 7 years Additional Information SOFTWARE SKILLS Operating Systems UNIX FreeBSD Ubuntu CentOS WIN 7 IBM AIX MAC OS X RDBMS Oracle11g IBM DB2 MSSQL server 2005 MySQL 50 H2 Languages Java 16 Python 30 CC STL Boost Libraries Scripting Korn Bash AWK Sed Perl 510 Ruby 200 Distributed Computing J2EE 14 EJB 30 Java EE 6 Web Technologies XML XSLT PHP ASP JSP Servlets JavaScript HTML5 App Web Servers Tomcat 42 IIS IBM Websphere 70 JBOSS 50 WebLogic 81 Geographical Info Systems Imagine Erdas ArcGIS Family Web Frameworks Struts Hibernate 401 Spring 321 jQuery 141 Development Tools Neatbeans 7 Eclipse 37 IBM RSAUML IntelliJ Release Tools AnthillPro 3 CruiseControl 25 Hudson Maven Jenkins Testing Framework JUnit 44 JunitEE 110 Selenium and Watir Versioning Tools Clearcase Subversion 179 PVCS GIT Messaging Frameworks Oracle AQ MDB Message Drive beans TIBCO EMSRV Document Automation HP ExstreamPDF Generation Engine WebServices Soap Rest WebServices Monitoring Tools Zabbix Monasca API NoSQL MongoDB 32 and Cassandra ETL Tools Metl Petl Pygrametl",
    "unique_id": "6b130cc0-a17f-4f9f-aef3-a22dfe3a38c5"
}