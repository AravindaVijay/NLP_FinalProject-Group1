{
    "clean_data": "Python Developer span lPythonspan span lDeveloperspan Python Developer Experian PLC Costa Mesa CA Authorized to work in the US for any employer Work Experience Python Developer Experian PLC Costa Mesa CA January 2018 to Present Description Experian PLC is consumer credit reporting agency which collects and aggregates information on over 200 million US individual consumers and more than 20 million US businesses It is one of the Big Three creditreporting agencies alongside TransUnion and Equifax Experian sells decision analytic and marketing assistance to businesses Consumer services include online access to credit history and products that protect against fraud and Identity Theft Social Media Batch Support is the application which incorporates Yelp social media presence of multiple businesses and returns a score and coverage analysis for a requesting client Social Media Batch Support allows corporate users to take client input of multiple businesses and returns information detailing businesses that that have a presence on Yelp relative to business that are found in Experian BIS database It also returns scores that consist of average scores per million reviews and social media score which basically is a quantified metric of the presences of each business that has a review on Yelp Originally the Social Media Batch Support project was designed for manual usage I ran and executed the Social Media Batch Support modified the scripts in the project for automation purposes I also took part in developing and designing the frontend application logic of Social Media Batch Support using Angular 6 TypeScript HTML5 CSS3 Bootstrap Roles Responsibilities Executed the project made modifications updates and managed version control using GitBash command prompt and Pycharm IDE Managed joined and create various business csv record files using the Python Pandas library and UNIX shell scripts Created SQL Alchemybased transactional framework integrates seamlessly into Bloomberg Application Service BAS layer the framework allows for a tactical switch between ORM and nonORM approaches on the fly when talking to an RDBMS Developed a python script that converted float values into integer values in specific columns of the final csv output file Developed a python script that converted the final csv output file into a fixed width text file using Pythons Tabular library if client requested a fixed width output file instead of a csv file Developed UNIX scripts to extract records found in different files and compared for debugging purposes Modified the Python scripts to handle exceptions and log those exceptions to a file using the Python Logging library for automation purpose Interacted with the YelpAWS API using Gitbash and s3cmd command line tool to push and extract data Responsible for debugging and troubleshooting the application Designed and Developed various Angular 6 Components ngModule Services observablepromises Directives and Pipes via TypeScript Developed a python script that converted the report text file that is used for the coverage analysis into a csv file using the builtin csv module Developed a python script to calculate and optimize the memory usage of each csv and text file loaded into memory using Pandas module Environment AWS Python 27 Pycharm Gitbash s3cmd Python Logging Python Pandas Python Tabular Unix Angular 6 Typescript HTML5 CSS3 and Bootstrap Python Full Stack Developer SunTrust Banks Inc Somerset NJ July 2017 to January 2018 Description SunTrust Banks Inc is an American bank holding company banks primary businesses include deposits lending credit cards as well as trust and investment services SunTrust Banks also provides corporate and investment banking capital market services mortgage banking and wealth management they needed a team of seven developers to design and create an application to assist them in managing and perform such task effectively SunAnalytics is an application which incorporates credit analysis with the extension of communicates secure customer information for each level of analysis process It allows banks to book loans faster with better consistency transparency and bring the standard to the analysis process for each lender and borrower It has functionality for managing risk for management as it can keep track of all the outstanding exposure and allows corporate users to analyze the company cash flow The application is mainly for corporate users in credit analysis process with different roles and permissions to engage in specific activities on the web application I designed and developed the frontend and serversideREST API application logic of SunAnalytics using Angular2 TypeScript HTML5 CSS3 Bootstrap and Django Roles Responsibilities Developed this project using MongoDB Angular 2 TypeScript Django HTML5 CSS3 BootStrap Designed and Developed various Angular 2 Component ngModule Services observablepromises Directive and Pipes using TypeScript Used Angular 2 CLI commands for productivity and globalgeneric building blocks Designed and developed a responsive UI page using BootStrap Developed the application RESTful API server using Django REST Framework designing and developing various endpoints defining Models Serializers ViewSets and register corresponding URLs to the endpoints using DRF Routers Connected the database and application REST API via Django MongoDB Database Engine and PyMongo Manipulated the MongoDB database via bulk write operations and implemented authentication and certificate validation using PyMongo and Python Builtin SSL Module Created methods get post put delete to make requests to the API server and tested Restful API using Postman Developed and performed test cases using jasmine and Karma in the unit test Developed mock API consumer objects via test cases using Python Unittest Module Familiar in updating accessing and version controlling the code using Git and used Git Bash to run the Git commands Automated configuration and deployment to an Apache Tomcat server using Ubuntu and Bash Shell Scripting Environment Angular2 MongoDB TypeScript HTML5 CSS3 BootStrap Postman Karma Jasmine Git GitBash Django REST Framework Python Unittest Pycharm Pymongo Python SSL Apache Tomcat Ubuntu Bash Shell Scripting Python Developer Metro Health Staten Island NY September 2015 to June 2017 Description The Metro Health System is one of the biggest most complete social insurance suppliers in Northeast Ohio serving the medicinal needs of the Greater Cleveland community for about 170 years A webbased interface was developed which permits the doctors to give proficient successful care to patients influenced with incessant illnesses Furthermore gives a health data administration programming which computerized basic capacities including report imaging and administration doctor inquiry diagram examination and finishing discharge data electronic medical record and so forth I worked on doctor inquiry module which provides a schedule and appointment reminder that helps doctors to schedule appointments with their patients and send appointment reminders to reduce noshows There is also a builtin messaging feature which allows doctors to communicate with their billers patients and employees Roles Responsibilities Involved in the various phases of SDLC Software Development Life Cycle like Requirements gathering Analysis Design and implementation of the project Created this project using MongoDB Django Django REST API PyMongo Python Pandas HTML5 CSS3 Bootstrap Designed and Developed various endpoints defining Models Serializers ViewSets and register corresponding URLs to the endpoints using DRF Routers Designed and developed a responsive UI page using BootStrap Connected the database and the application server by using the Django MongoDB engine driver and PyMongo library and created a RESTful API server with Django REST API framework Created CRUD methods getpostputdelete to make requests to the API server and tested Restful API using Postman Developed and performed test cases using the Python Unittest Module Responsible for debugging and troubleshooting the web application Created data analysis models with Pandas to organize appointment and medical records Developed a web spider using Scrapy to extract the data and processed it through Elasticsearch a search engine used to search for patient documents in the doctor inquiry module Automated configuration and deployment to an Apache Tomcat server using Ubuntu and Bash Shell Scripting Environment Django REST Framework DRF PyMongo MongoDB Python Pandas HTML5 CSS3 BootStrap Atom Postman Python Unittest GitBash Pycharm Elaticsearch Scrapy Apache Tomcat Ubuntu Bash Shell Scripting Python Developer CURE Auto Insurance Princeton NJ December 2012 to August 2015 Description Cure Auto Insurance is the auto insurance service provider and decided to upgrade the existing Auto Insurance Management System which is fully automated and integrated application for managing the Policy plans Agent Commission Payment issues and Settlements This Insurance Management System is to response the information of clients policy details and premium rates and monitors the policies for delayed payments It manages different claims per policies claim settlements and allows coverage verifications I worked on the clients modules where customer can get a quote view their packages change the coverage verify premium differences and they have an option to choose the premium years Once the quote is generated they can get it through an email or a print service The customer can also choose to find an agent based on residential zip code of the customer and choose from the list of available agents and get a quote from them Roles Responsibilities Developed the insurance management system using R packages Django Web Framework Python opensource modules such as Scikitlearn pandas numpy and Matplotlib Developed Statistical tests in R ranging from Correlation to One Sample tTest to Wilcoxon Signed Rank Test for testing the normal distribution of data set samples and how their variables vary in tandem from their mean Created Linear Polynomial and Logistic Regression Models to predict the risk and likelihood that a client will file a claim based off the information of clients and generated quotes and premiums using Python opensource modules such as Scikitlearn pandas numpy and Matplotlib Designed and Developed various endpoints defining Models Serializers ViewSets and register corresponding URLs to the endpoints using DRF Routers Connected the database and the application server by using the Django PostgreSQL engine driver and Psycopg2 library and created a RESTful API server with Django REST API framework Created methods get post put delete to make requests to the API server and tested Restful API using Postman Developed Authentication and Security using Djangos builtin authentication Developed Frontend templates for management system using Angular2 HTML5 Typescript and Bootstrap Deployed the application using Ubuntu and Apache Tomcat Created clientsideGUI part of application using kivy Environment RStudio PostgreSQL Enthought Canopy Python Scikitlearn Python Matplotlibpyplot Python numpy Python pandas GitHub desktop GitBash Python Unittest PostgreSQL Server Ubuntu kivy Python Developer The LPL Financial New Brunswick NJ March 2010 to November 2012 Description The LPL Financial is a nations leading financial institution that offer an integrated platform of proprietary technology brokerage and investment advisor services The Advisor Portal is a web application used by institution advisors to manage portfolios high net clients Institute advisors can publish and update contents to the dashboard of the site They can also use the application to create proposal for clients compare proposals data analysis and create backtesting data Clients were able to monitor service progress and gain reports through the application Roles Responsibilities Assisted in the Advisor Portal application development using Flask Web Framework and JavaScript Designed and wrote serverside web application logic developed back end templates and components to connect with third party applications using Flask web framework along with Jinja2 Connected the database and the application server by using the FlaskSQLAlchemy MySQL engine driver and pymysql library Created a RESTful API server with Django REST API framework Developed Advisor Portal front end using ReactJS HTML5 and Bootstrap Utilized frontend development testing using Jasmine Deploy the Advisor Portal application and Automated using Docker Responsible for issue and bug tracking during development of application using JIRA Developed backend serverside application logic using Nodejs to integrate it with API Environment Django Flask Jinja2 SQL Enthought Canopy Python Scikitlearn Python Matplotlibpyplot Python numpy Python pandas GitHub Desktop Python Unittest SQL Server Postman ReactJS HTML5 Bootstrap Docker Jasmine NodeJS Education INFORMATION TECHNOLOGY AND PROGRAMMING KEISER UNIVERSITY Skills ASP Android Javascript MySQL PHP",
    "entities": [
        "SDLC Software Development Life Cycle like Requirements gathering Analysis Design",
        "SunTrust Banks",
        "Pandas",
        "PROGRAMMING KEISER UNIVERSITY",
        "BootStrap Developed",
        "Identity Theft Social",
        "The LPL Financial",
        "Developed",
        "API",
        "Institute",
        "Description SunTrust Banks Inc",
        "ORM",
        "US",
        "Django REST Framework",
        "Settlements This Insurance Management System",
        "Ubuntu and Apache Tomcat Created",
        "GitHub Desktop Python",
        "NodeJS Education INFORMATION TECHNOLOGY",
        "Nodejs",
        "Pycharm IDE Managed",
        "Advisor Portal",
        "Present Description Experian PLC",
        "GitBash",
        "UNIX",
        "Created",
        "Created CRUD",
        "Yelp",
        "Created Linear Polynomial and Logistic Regression Models",
        "The Metro Health System",
        "Git",
        "Postman Developed Authentication",
        "Pandas HTML5 CSS3 Bootstrap Designed",
        "BootStrap Connected",
        "Social Media Batch Support",
        "Postman Developed",
        "PyMongo",
        "Scrapy",
        "Pandas HTML5",
        "SunAnalytics",
        "TypeScript",
        "TransUnion",
        "Bootstrap Utilized",
        "Experian",
        "Bloomberg Application Service BAS",
        "Builtin SSL Module Created",
        "BootStrap Postman Karma",
        "the Python Unittest Module Responsible",
        "GitHub",
        "DRF Routers Designed",
        "Created SQL Alchemybased",
        "Flask",
        "Created a RESTful API",
        "API Environment Django Flask",
        "DRF Routers Connected",
        "lPythonspan",
        "Ubuntu and Bash Shell Scripting Environment Django REST Framework DRF PyMongo",
        "Wilcoxon Signed Rank Test",
        "Description Cure Auto Insurance",
        "Directives and Pipes",
        "Auto Insurance Management System",
        "Automated",
        "CLI",
        "nonORM",
        "Greater Cleveland",
        "Flask Web Framework",
        "Ubuntu and Bash Shell Scripting Environment",
        "Yelp Originally the Social Media Batch Support"
    ],
    "experience": "Experience Python Developer Experian PLC Costa Mesa CA January 2018 to Present Description Experian PLC is consumer credit reporting agency which collects and aggregates information on over 200 million US individual consumers and more than 20 million US businesses It is one of the Big Three creditreporting agencies alongside TransUnion and Equifax Experian sells decision analytic and marketing assistance to businesses Consumer services include online access to credit history and products that protect against fraud and Identity Theft Social Media Batch Support is the application which incorporates Yelp social media presence of multiple businesses and returns a score and coverage analysis for a requesting client Social Media Batch Support allows corporate users to take client input of multiple businesses and returns information detailing businesses that that have a presence on Yelp relative to business that are found in Experian BIS database It also returns scores that consist of average scores per million reviews and social media score which basically is a quantified metric of the presences of each business that has a review on Yelp Originally the Social Media Batch Support project was designed for manual usage I ran and executed the Social Media Batch Support modified the scripts in the project for automation purposes I also took part in developing and designing the frontend application logic of Social Media Batch Support using Angular 6 TypeScript HTML5 CSS3 Bootstrap Roles Responsibilities Executed the project made modifications updates and managed version control using GitBash command prompt and Pycharm IDE Managed joined and create various business csv record files using the Python Pandas library and UNIX shell scripts Created SQL Alchemybased transactional framework integrates seamlessly into Bloomberg Application Service BAS layer the framework allows for a tactical switch between ORM and nonORM approaches on the fly when talking to an RDBMS Developed a python script that converted float values into integer values in specific columns of the final csv output file Developed a python script that converted the final csv output file into a fixed width text file using Pythons Tabular library if client requested a fixed width output file instead of a csv file Developed UNIX scripts to extract records found in different files and compared for debugging purposes Modified the Python scripts to handle exceptions and log those exceptions to a file using the Python Logging library for automation purpose Interacted with the YelpAWS API using Gitbash and s3cmd command line tool to push and extract data Responsible for debugging and troubleshooting the application Designed and Developed various Angular 6 Components ngModule Services observablepromises Directives and Pipes via TypeScript Developed a python script that converted the report text file that is used for the coverage analysis into a csv file using the builtin csv module Developed a python script to calculate and optimize the memory usage of each csv and text file loaded into memory using Pandas module Environment AWS Python 27 Pycharm Gitbash s3cmd Python Logging Python Pandas Python Tabular Unix Angular 6 Typescript HTML5 CSS3 and Bootstrap Python Full Stack Developer SunTrust Banks Inc Somerset NJ July 2017 to January 2018 Description SunTrust Banks Inc is an American bank holding company banks primary businesses include deposits lending credit cards as well as trust and investment services SunTrust Banks also provides corporate and investment banking capital market services mortgage banking and wealth management they needed a team of seven developers to design and create an application to assist them in managing and perform such task effectively SunAnalytics is an application which incorporates credit analysis with the extension of communicates secure customer information for each level of analysis process It allows banks to book loans faster with better consistency transparency and bring the standard to the analysis process for each lender and borrower It has functionality for managing risk for management as it can keep track of all the outstanding exposure and allows corporate users to analyze the company cash flow The application is mainly for corporate users in credit analysis process with different roles and permissions to engage in specific activities on the web application I designed and developed the frontend and serversideREST API application logic of SunAnalytics using Angular2 TypeScript HTML5 CSS3 Bootstrap and Django Roles Responsibilities Developed this project using MongoDB Angular 2 TypeScript Django HTML5 CSS3 BootStrap Designed and Developed various Angular 2 Component ngModule Services observablepromises Directive and Pipes using TypeScript Used Angular 2 CLI commands for productivity and globalgeneric building blocks Designed and developed a responsive UI page using BootStrap Developed the application RESTful API server using Django REST Framework designing and developing various endpoints defining Models Serializers ViewSets and register corresponding URLs to the endpoints using DRF Routers Connected the database and application REST API via Django MongoDB Database Engine and PyMongo Manipulated the MongoDB database via bulk write operations and implemented authentication and certificate validation using PyMongo and Python Builtin SSL Module Created methods get post put delete to make requests to the API server and tested Restful API using Postman Developed and performed test cases using jasmine and Karma in the unit test Developed mock API consumer objects via test cases using Python Unittest Module Familiar in updating accessing and version controlling the code using Git and used Git Bash to run the Git commands Automated configuration and deployment to an Apache Tomcat server using Ubuntu and Bash Shell Scripting Environment Angular2 MongoDB TypeScript HTML5 CSS3 BootStrap Postman Karma Jasmine Git GitBash Django REST Framework Python Unittest Pycharm Pymongo Python SSL Apache Tomcat Ubuntu Bash Shell Scripting Python Developer Metro Health Staten Island NY September 2015 to June 2017 Description The Metro Health System is one of the biggest most complete social insurance suppliers in Northeast Ohio serving the medicinal needs of the Greater Cleveland community for about 170 years A webbased interface was developed which permits the doctors to give proficient successful care to patients influenced with incessant illnesses Furthermore gives a health data administration programming which computerized basic capacities including report imaging and administration doctor inquiry diagram examination and finishing discharge data electronic medical record and so forth I worked on doctor inquiry module which provides a schedule and appointment reminder that helps doctors to schedule appointments with their patients and send appointment reminders to reduce noshows There is also a builtin messaging feature which allows doctors to communicate with their billers patients and employees Roles Responsibilities Involved in the various phases of SDLC Software Development Life Cycle like Requirements gathering Analysis Design and implementation of the project Created this project using MongoDB Django Django REST API PyMongo Python Pandas HTML5 CSS3 Bootstrap Designed and Developed various endpoints defining Models Serializers ViewSets and register corresponding URLs to the endpoints using DRF Routers Designed and developed a responsive UI page using BootStrap Connected the database and the application server by using the Django MongoDB engine driver and PyMongo library and created a RESTful API server with Django REST API framework Created CRUD methods getpostputdelete to make requests to the API server and tested Restful API using Postman Developed and performed test cases using the Python Unittest Module Responsible for debugging and troubleshooting the web application Created data analysis models with Pandas to organize appointment and medical records Developed a web spider using Scrapy to extract the data and processed it through Elasticsearch a search engine used to search for patient documents in the doctor inquiry module Automated configuration and deployment to an Apache Tomcat server using Ubuntu and Bash Shell Scripting Environment Django REST Framework DRF PyMongo MongoDB Python Pandas HTML5 CSS3 BootStrap Atom Postman Python Unittest GitBash Pycharm Elaticsearch Scrapy Apache Tomcat Ubuntu Bash Shell Scripting Python Developer CURE Auto Insurance Princeton NJ December 2012 to August 2015 Description Cure Auto Insurance is the auto insurance service provider and decided to upgrade the existing Auto Insurance Management System which is fully automated and integrated application for managing the Policy plans Agent Commission Payment issues and Settlements This Insurance Management System is to response the information of clients policy details and premium rates and monitors the policies for delayed payments It manages different claims per policies claim settlements and allows coverage verifications I worked on the clients modules where customer can get a quote view their packages change the coverage verify premium differences and they have an option to choose the premium years Once the quote is generated they can get it through an email or a print service The customer can also choose to find an agent based on residential zip code of the customer and choose from the list of available agents and get a quote from them Roles Responsibilities Developed the insurance management system using R packages Django Web Framework Python opensource modules such as Scikitlearn pandas numpy and Matplotlib Developed Statistical tests in R ranging from Correlation to One Sample tTest to Wilcoxon Signed Rank Test for testing the normal distribution of data set samples and how their variables vary in tandem from their mean Created Linear Polynomial and Logistic Regression Models to predict the risk and likelihood that a client will file a claim based off the information of clients and generated quotes and premiums using Python opensource modules such as Scikitlearn pandas numpy and Matplotlib Designed and Developed various endpoints defining Models Serializers ViewSets and register corresponding URLs to the endpoints using DRF Routers Connected the database and the application server by using the Django PostgreSQL engine driver and Psycopg2 library and created a RESTful API server with Django REST API framework Created methods get post put delete to make requests to the API server and tested Restful API using Postman Developed Authentication and Security using Djangos builtin authentication Developed Frontend templates for management system using Angular2 HTML5 Typescript and Bootstrap Deployed the application using Ubuntu and Apache Tomcat Created clientsideGUI part of application using kivy Environment RStudio PostgreSQL Enthought Canopy Python Scikitlearn Python Matplotlibpyplot Python numpy Python pandas GitHub desktop GitBash Python Unittest PostgreSQL Server Ubuntu kivy Python Developer The LPL Financial New Brunswick NJ March 2010 to November 2012 Description The LPL Financial is a nations leading financial institution that offer an integrated platform of proprietary technology brokerage and investment advisor services The Advisor Portal is a web application used by institution advisors to manage portfolios high net clients Institute advisors can publish and update contents to the dashboard of the site They can also use the application to create proposal for clients compare proposals data analysis and create backtesting data Clients were able to monitor service progress and gain reports through the application Roles Responsibilities Assisted in the Advisor Portal application development using Flask Web Framework and JavaScript Designed and wrote serverside web application logic developed back end templates and components to connect with third party applications using Flask web framework along with Jinja2 Connected the database and the application server by using the FlaskSQLAlchemy MySQL engine driver and pymysql library Created a RESTful API server with Django REST API framework Developed Advisor Portal front end using ReactJS HTML5 and Bootstrap Utilized frontend development testing using Jasmine Deploy the Advisor Portal application and Automated using Docker Responsible for issue and bug tracking during development of application using JIRA Developed backend serverside application logic using Nodejs to integrate it with API Environment Django Flask Jinja2 SQL Enthought Canopy Python Scikitlearn Python Matplotlibpyplot Python numpy Python pandas GitHub Desktop Python Unittest SQL Server Postman ReactJS HTML5 Bootstrap Docker Jasmine NodeJS Education INFORMATION TECHNOLOGY AND PROGRAMMING KEISER UNIVERSITY Skills ASP Android Javascript MySQL PHP",
    "extracted_keywords": [
        "Python",
        "Developer",
        "lPythonspan",
        "span",
        "lDeveloperspan",
        "Python",
        "Developer",
        "Experian",
        "PLC",
        "Costa",
        "Mesa",
        "CA",
        "Authorized",
        "US",
        "employer",
        "Work",
        "Experience",
        "Python",
        "Developer",
        "Experian",
        "PLC",
        "Costa",
        "Mesa",
        "CA",
        "January",
        "Present",
        "Description",
        "Experian",
        "PLC",
        "consumer",
        "credit",
        "reporting",
        "agency",
        "information",
        "US",
        "consumers",
        "US",
        "businesses",
        "Big",
        "Three",
        "creditreporting",
        "agencies",
        "TransUnion",
        "Equifax",
        "Experian",
        "decision",
        "marketing",
        "assistance",
        "businesses",
        "Consumer",
        "services",
        "access",
        "credit",
        "history",
        "products",
        "fraud",
        "Identity",
        "Theft",
        "Social",
        "Media",
        "Batch",
        "Support",
        "application",
        "Yelp",
        "media",
        "presence",
        "businesses",
        "score",
        "coverage",
        "analysis",
        "client",
        "Social",
        "Media",
        "Batch",
        "Support",
        "users",
        "client",
        "input",
        "businesses",
        "information",
        "businesses",
        "presence",
        "Yelp",
        "business",
        "BIS",
        "database",
        "scores",
        "scores",
        "reviews",
        "media",
        "score",
        "metric",
        "presences",
        "business",
        "review",
        "Yelp",
        "Social",
        "Media",
        "Batch",
        "Support",
        "project",
        "usage",
        "Social",
        "Media",
        "Batch",
        "Support",
        "scripts",
        "project",
        "automation",
        "purposes",
        "part",
        "frontend",
        "application",
        "logic",
        "Social",
        "Media",
        "Batch",
        "Support",
        "Angular",
        "TypeScript",
        "HTML5",
        "CSS3",
        "Bootstrap",
        "Roles",
        "Responsibilities",
        "project",
        "modifications",
        "updates",
        "version",
        "control",
        "GitBash",
        "command",
        "prompt",
        "Pycharm",
        "IDE",
        "Managed",
        "business",
        "csv",
        "record",
        "files",
        "Python",
        "Pandas",
        "library",
        "UNIX",
        "shell",
        "scripts",
        "SQL",
        "framework",
        "integrates",
        "Bloomberg",
        "Application",
        "Service",
        "BAS",
        "layer",
        "framework",
        "switch",
        "ORM",
        "nonORM",
        "approaches",
        "fly",
        "RDBMS",
        "python",
        "script",
        "float",
        "values",
        "values",
        "columns",
        "output",
        "file",
        "python",
        "script",
        "output",
        "file",
        "width",
        "text",
        "file",
        "Pythons",
        "Tabular",
        "library",
        "client",
        "width",
        "output",
        "file",
        "file",
        "UNIX",
        "scripts",
        "records",
        "files",
        "purposes",
        "Python",
        "scripts",
        "exceptions",
        "exceptions",
        "file",
        "Python",
        "Logging",
        "library",
        "automation",
        "purpose",
        "API",
        "Gitbash",
        "s3cmd",
        "command",
        "line",
        "tool",
        "data",
        "application",
        "Angular",
        "Components",
        "ngModule",
        "Services",
        "Directives",
        "Pipes",
        "TypeScript",
        "python",
        "script",
        "report",
        "text",
        "file",
        "coverage",
        "analysis",
        "file",
        "module",
        "python",
        "script",
        "memory",
        "usage",
        "csv",
        "text",
        "file",
        "memory",
        "Pandas",
        "module",
        "Environment",
        "AWS",
        "Python",
        "Pycharm",
        "Gitbash",
        "s3cmd",
        "Python",
        "Logging",
        "Python",
        "Pandas",
        "Python",
        "Tabular",
        "Unix",
        "Angular",
        "Typescript",
        "HTML5",
        "CSS3",
        "Bootstrap",
        "Python",
        "Stack",
        "Developer",
        "SunTrust",
        "Banks",
        "Inc",
        "Somerset",
        "NJ",
        "July",
        "January",
        "Description",
        "SunTrust",
        "Banks",
        "Inc",
        "bank",
        "company",
        "banks",
        "businesses",
        "deposits",
        "lending",
        "credit",
        "cards",
        "trust",
        "investment",
        "services",
        "SunTrust",
        "Banks",
        "investment",
        "banking",
        "capital",
        "market",
        "services",
        "mortgage",
        "banking",
        "wealth",
        "management",
        "team",
        "developers",
        "application",
        "task",
        "SunAnalytics",
        "application",
        "credit",
        "analysis",
        "extension",
        "communicates",
        "customer",
        "information",
        "level",
        "analysis",
        "process",
        "banks",
        "book",
        "loans",
        "consistency",
        "transparency",
        "standard",
        "analysis",
        "process",
        "lender",
        "borrower",
        "functionality",
        "risk",
        "management",
        "track",
        "exposure",
        "users",
        "company",
        "cash",
        "flow",
        "application",
        "users",
        "credit",
        "analysis",
        "process",
        "roles",
        "permissions",
        "activities",
        "web",
        "application",
        "frontend",
        "serversideREST",
        "API",
        "application",
        "logic",
        "SunAnalytics",
        "Angular2",
        "TypeScript",
        "HTML5",
        "CSS3",
        "Bootstrap",
        "Django",
        "Roles",
        "Responsibilities",
        "project",
        "Angular",
        "TypeScript",
        "Django",
        "HTML5",
        "CSS3",
        "BootStrap",
        "Angular",
        "Component",
        "ngModule",
        "Services",
        "Directive",
        "Pipes",
        "TypeScript",
        "Angular",
        "CLI",
        "commands",
        "productivity",
        "building",
        "blocks",
        "UI",
        "page",
        "BootStrap",
        "application",
        "API",
        "server",
        "Django",
        "REST",
        "Framework",
        "designing",
        "endpoints",
        "Models",
        "Serializers",
        "ViewSets",
        "URLs",
        "endpoints",
        "DRF",
        "Routers",
        "database",
        "application",
        "REST",
        "API",
        "Django",
        "MongoDB",
        "Database",
        "Engine",
        "PyMongo",
        "database",
        "bulk",
        "write",
        "operations",
        "authentication",
        "certificate",
        "validation",
        "PyMongo",
        "Python",
        "Builtin",
        "SSL",
        "Module",
        "methods",
        "post",
        "requests",
        "API",
        "server",
        "API",
        "Postman",
        "Developed",
        "test",
        "cases",
        "jasmine",
        "Karma",
        "unit",
        "test",
        "API",
        "consumer",
        "objects",
        "test",
        "cases",
        "Python",
        "Unittest",
        "Module",
        "Familiar",
        "accessing",
        "version",
        "code",
        "Git",
        "Git",
        "Bash",
        "Git",
        "Automated",
        "configuration",
        "deployment",
        "Apache",
        "Tomcat",
        "server",
        "Ubuntu",
        "Bash",
        "Shell",
        "Scripting",
        "Environment",
        "Angular2",
        "MongoDB",
        "TypeScript",
        "HTML5",
        "CSS3",
        "BootStrap",
        "Postman",
        "Karma",
        "Jasmine",
        "Git",
        "GitBash",
        "Django",
        "REST",
        "Framework",
        "Python",
        "Unittest",
        "Pycharm",
        "Pymongo",
        "Python",
        "SSL",
        "Apache",
        "Tomcat",
        "Ubuntu",
        "Bash",
        "Shell",
        "Scripting",
        "Python",
        "Developer",
        "Metro",
        "Health",
        "Staten",
        "Island",
        "NY",
        "September",
        "June",
        "Description",
        "Metro",
        "Health",
        "System",
        "insurance",
        "suppliers",
        "Northeast",
        "Ohio",
        "needs",
        "Greater",
        "Cleveland",
        "community",
        "years",
        "interface",
        "doctors",
        "care",
        "patients",
        "illnesses",
        "health",
        "data",
        "administration",
        "programming",
        "capacities",
        "report",
        "imaging",
        "administration",
        "doctor",
        "inquiry",
        "diagram",
        "examination",
        "discharge",
        "data",
        "record",
        "doctor",
        "inquiry",
        "module",
        "schedule",
        "appointment",
        "reminder",
        "doctors",
        "appointments",
        "patients",
        "appointment",
        "reminders",
        "noshows",
        "feature",
        "doctors",
        "billers",
        "patients",
        "employees",
        "Roles",
        "Responsibilities",
        "phases",
        "SDLC",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "Requirements",
        "Analysis",
        "Design",
        "implementation",
        "project",
        "project",
        "Django",
        "Django",
        "REST",
        "API",
        "PyMongo",
        "Python",
        "Pandas",
        "HTML5",
        "CSS3",
        "Bootstrap",
        "endpoints",
        "Models",
        "Serializers",
        "ViewSets",
        "URLs",
        "endpoints",
        "DRF",
        "Routers",
        "UI",
        "page",
        "BootStrap",
        "Connected",
        "database",
        "application",
        "server",
        "Django",
        "MongoDB",
        "engine",
        "driver",
        "PyMongo",
        "library",
        "API",
        "server",
        "Django",
        "REST",
        "API",
        "framework",
        "Created",
        "CRUD",
        "methods",
        "requests",
        "API",
        "server",
        "API",
        "Postman",
        "Developed",
        "test",
        "cases",
        "Python",
        "Unittest",
        "Module",
        "web",
        "application",
        "data",
        "analysis",
        "models",
        "Pandas",
        "appointment",
        "records",
        "web",
        "spider",
        "Scrapy",
        "data",
        "Elasticsearch",
        "search",
        "engine",
        "documents",
        "doctor",
        "inquiry",
        "module",
        "Automated",
        "configuration",
        "deployment",
        "Apache",
        "Tomcat",
        "server",
        "Ubuntu",
        "Bash",
        "Shell",
        "Scripting",
        "Environment",
        "Django",
        "REST",
        "Framework",
        "DRF",
        "PyMongo",
        "MongoDB",
        "Python",
        "Pandas",
        "HTML5",
        "CSS3",
        "BootStrap",
        "Atom",
        "Postman",
        "Python",
        "Unittest",
        "GitBash",
        "Pycharm",
        "Elaticsearch",
        "Scrapy",
        "Apache",
        "Tomcat",
        "Ubuntu",
        "Bash",
        "Shell",
        "Scripting",
        "Python",
        "Developer",
        "CURE",
        "Auto",
        "Insurance",
        "Princeton",
        "NJ",
        "December",
        "August",
        "Description",
        "Cure",
        "Auto",
        "Insurance",
        "auto",
        "insurance",
        "service",
        "provider",
        "Auto",
        "Insurance",
        "Management",
        "System",
        "application",
        "Policy",
        "Agent",
        "Commission",
        "Payment",
        "issues",
        "Settlements",
        "Insurance",
        "Management",
        "System",
        "information",
        "clients",
        "policy",
        "details",
        "premium",
        "rates",
        "policies",
        "payments",
        "claims",
        "policies",
        "settlements",
        "coverage",
        "verifications",
        "clients",
        "modules",
        "customer",
        "quote",
        "view",
        "packages",
        "coverage",
        "premium",
        "differences",
        "option",
        "years",
        "quote",
        "email",
        "print",
        "service",
        "customer",
        "agent",
        "zip",
        "code",
        "customer",
        "list",
        "agents",
        "quote",
        "Roles",
        "Responsibilities",
        "insurance",
        "management",
        "system",
        "R",
        "packages",
        "Django",
        "Web",
        "Framework",
        "Python",
        "modules",
        "Scikitlearn",
        "pandas",
        "numpy",
        "Matplotlib",
        "tests",
        "R",
        "Correlation",
        "Sample",
        "tTest",
        "Wilcoxon",
        "Signed",
        "Rank",
        "Test",
        "distribution",
        "data",
        "samples",
        "variables",
        "tandem",
        "Linear",
        "Polynomial",
        "Logistic",
        "Regression",
        "Models",
        "risk",
        "likelihood",
        "client",
        "claim",
        "information",
        "clients",
        "quotes",
        "premiums",
        "Python",
        "modules",
        "Scikitlearn",
        "pandas",
        "numpy",
        "Matplotlib",
        "endpoints",
        "Models",
        "Serializers",
        "ViewSets",
        "URLs",
        "endpoints",
        "DRF",
        "Routers",
        "database",
        "application",
        "server",
        "Django",
        "PostgreSQL",
        "engine",
        "driver",
        "library",
        "API",
        "server",
        "Django",
        "REST",
        "API",
        "framework",
        "methods",
        "post",
        "requests",
        "API",
        "server",
        "API",
        "Postman",
        "Developed",
        "Authentication",
        "Security",
        "Djangos",
        "builtin",
        "authentication",
        "Frontend",
        "management",
        "system",
        "Angular2",
        "HTML5",
        "Typescript",
        "Bootstrap",
        "application",
        "Ubuntu",
        "Apache",
        "Tomcat",
        "clientsideGUI",
        "part",
        "application",
        "kivy",
        "Environment",
        "RStudio",
        "PostgreSQL",
        "Enthought",
        "Canopy",
        "Python",
        "Scikitlearn",
        "Python",
        "Matplotlibpyplot",
        "Python",
        "Python",
        "GitHub",
        "desktop",
        "GitBash",
        "Python",
        "Unittest",
        "PostgreSQL",
        "Server",
        "Ubuntu",
        "kivy",
        "Python",
        "Developer",
        "LPL",
        "Financial",
        "New",
        "Brunswick",
        "NJ",
        "March",
        "November",
        "Description",
        "LPL",
        "Financial",
        "nations",
        "institution",
        "platform",
        "technology",
        "brokerage",
        "investment",
        "advisor",
        "services",
        "Advisor",
        "Portal",
        "web",
        "application",
        "institution",
        "advisors",
        "portfolios",
        "clients",
        "Institute",
        "advisors",
        "contents",
        "dashboard",
        "site",
        "application",
        "proposal",
        "clients",
        "proposals",
        "data",
        "analysis",
        "data",
        "Clients",
        "service",
        "progress",
        "reports",
        "application",
        "Roles",
        "Responsibilities",
        "Advisor",
        "Portal",
        "application",
        "development",
        "Flask",
        "Web",
        "Framework",
        "JavaScript",
        "serverside",
        "web",
        "application",
        "logic",
        "end",
        "templates",
        "components",
        "party",
        "applications",
        "Flask",
        "web",
        "framework",
        "Jinja2",
        "Connected",
        "database",
        "application",
        "server",
        "FlaskSQLAlchemy",
        "MySQL",
        "engine",
        "driver",
        "pymysql",
        "library",
        "API",
        "server",
        "Django",
        "REST",
        "API",
        "framework",
        "Developed",
        "Advisor",
        "Portal",
        "end",
        "ReactJS",
        "HTML5",
        "Bootstrap",
        "frontend",
        "development",
        "testing",
        "Jasmine",
        "Deploy",
        "Advisor",
        "Portal",
        "application",
        "Automated",
        "Docker",
        "Responsible",
        "issue",
        "bug",
        "tracking",
        "development",
        "application",
        "JIRA",
        "Developed",
        "serverside",
        "application",
        "logic",
        "Nodejs",
        "API",
        "Environment",
        "Django",
        "Flask",
        "Jinja2",
        "SQL",
        "Enthought",
        "Canopy",
        "Python",
        "Scikitlearn",
        "Python",
        "Matplotlibpyplot",
        "Python",
        "Python",
        "GitHub",
        "Desktop",
        "Python",
        "Unittest",
        "SQL",
        "Server",
        "Postman",
        "ReactJS",
        "HTML5",
        "Bootstrap",
        "Docker",
        "Jasmine",
        "NodeJS",
        "Education",
        "INFORMATION",
        "TECHNOLOGY",
        "PROGRAMMING",
        "KEISER",
        "UNIVERSITY",
        "Skills",
        "ASP",
        "Android",
        "Javascript",
        "MySQL",
        "PHP"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T20:19:16.352017",
    "resume_data": "Python Developer span lPythonspan span lDeveloperspan Python Developer Experian PLC Costa Mesa CA Authorized to work in the US for any employer Work Experience Python Developer Experian PLC Costa Mesa CA January 2018 to Present Description Experian PLC is consumer credit reporting agency which collects and aggregates information on over 200 million US individual consumers and more than 20 million US businesses It is one of the Big Three creditreporting agencies alongside TransUnion and Equifax Experian sells decision analytic and marketing assistance to businesses Consumer services include online access to credit history and products that protect against fraud and Identity Theft Social Media Batch Support is the application which incorporates Yelp social media presence of multiple businesses and returns a score and coverage analysis for a requesting client Social Media Batch Support allows corporate users to take client input of multiple businesses and returns information detailing businesses that that have a presence on Yelp relative to business that are found in Experian BIS database It also returns scores that consist of average scores per million reviews and social media score which basically is a quantified metric of the presences of each business that has a review on Yelp Originally the Social Media Batch Support project was designed for manual usage I ran and executed the Social Media Batch Support modified the scripts in the project for automation purposes I also took part in developing and designing the frontend application logic of Social Media Batch Support using Angular 6 TypeScript HTML5 CSS3 Bootstrap Roles Responsibilities Executed the project made modifications updates and managed version control using GitBash command prompt and Pycharm IDE Managed joined and create various business csv record files using the Python Pandas library and UNIX shell scripts Created SQL Alchemybased transactional framework integrates seamlessly into Bloomberg Application Service BAS layer the framework allows for a tactical switch between ORM and nonORM approaches on the fly when talking to an RDBMS Developed a python script that converted float values into integer values in specific columns of the final csv output file Developed a python script that converted the final csv output file into a fixed width text file using Pythons Tabular library if client requested a fixed width output file instead of a csv file Developed UNIX scripts to extract records found in different files and compared for debugging purposes Modified the Python scripts to handle exceptions and log those exceptions to a file using the Python Logging library for automation purpose Interacted with the YelpAWS API using Gitbash and s3cmd command line tool to push and extract data Responsible for debugging and troubleshooting the application Designed and Developed various Angular 6 Components ngModule Services observablepromises Directives and Pipes via TypeScript Developed a python script that converted the report text file that is used for the coverage analysis into a csv file using the builtin csv module Developed a python script to calculate and optimize the memory usage of each csv and text file loaded into memory using Pandas module Environment AWS Python 27 Pycharm Gitbash s3cmd Python Logging Python Pandas Python Tabular Unix Angular 6 Typescript HTML5 CSS3 and Bootstrap Python Full Stack Developer SunTrust Banks Inc Somerset NJ July 2017 to January 2018 Description SunTrust Banks Inc is an American bank holding company banks primary businesses include deposits lending credit cards as well as trust and investment services SunTrust Banks also provides corporate and investment banking capital market services mortgage banking and wealth management they needed a team of seven developers to design and create an application to assist them in managing and perform such task effectively SunAnalytics is an application which incorporates credit analysis with the extension of communicates secure customer information for each level of analysis process It allows banks to book loans faster with better consistency transparency and bring the standard to the analysis process for each lender and borrower It has functionality for managing risk for management as it can keep track of all the outstanding exposure and allows corporate users to analyze the company cash flow The application is mainly for corporate users in credit analysis process with different roles and permissions to engage in specific activities on the web application I designed and developed the frontend and serversideREST API application logic of SunAnalytics using Angular2 TypeScript HTML5 CSS3 Bootstrap and Django Roles Responsibilities Developed this project using MongoDB Angular 2 TypeScript Django HTML5 CSS3 BootStrap Designed and Developed various Angular 2 Component ngModule Services observablepromises Directive and Pipes using TypeScript Used Angular 2 CLI commands for productivity and globalgeneric building blocks Designed and developed a responsive UI page using BootStrap Developed the application RESTful API server using Django REST Framework designing and developing various endpoints defining Models Serializers ViewSets and register corresponding URLs to the endpoints using DRF Routers Connected the database and application REST API via Django MongoDB Database Engine and PyMongo Manipulated the MongoDB database via bulk write operations and implemented authentication and certificate validation using PyMongo and Python Builtin SSL Module Created methods get post put delete to make requests to the API server and tested Restful API using Postman Developed and performed test cases using jasmine and Karma in the unit test Developed mock API consumer objects via test cases using Python Unittest Module Familiar in updating accessing and version controlling the code using Git and used Git Bash to run the Git commands Automated configuration and deployment to an Apache Tomcat server using Ubuntu and Bash Shell Scripting Environment Angular2 MongoDB TypeScript HTML5 CSS3 BootStrap Postman Karma Jasmine Git GitBash Django REST Framework Python Unittest Pycharm Pymongo Python SSL Apache Tomcat Ubuntu Bash Shell Scripting Python Developer Metro Health Staten Island NY September 2015 to June 2017 Description The Metro Health System is one of the biggest most complete social insurance suppliers in Northeast Ohio serving the medicinal needs of the Greater Cleveland community for about 170 years A webbased interface was developed which permits the doctors to give proficient successful care to patients influenced with incessant illnesses Furthermore gives a health data administration programming which computerized basic capacities including report imaging and administration doctor inquiry diagram examination and finishing discharge data electronic medical record and so forth I worked on doctor inquiry module which provides a schedule and appointment reminder that helps doctors to schedule appointments with their patients and send appointment reminders to reduce noshows There is also a builtin messaging feature which allows doctors to communicate with their billers patients and employees Roles Responsibilities Involved in the various phases of SDLC Software Development Life Cycle like Requirements gathering Analysis Design and implementation of the project Created this project using MongoDB Django Django REST API PyMongo Python Pandas HTML5 CSS3 Bootstrap Designed and Developed various endpoints defining Models Serializers ViewSets and register corresponding URLs to the endpoints using DRF Routers Designed and developed a responsive UI page using BootStrap Connected the database and the application server by using the Django MongoDB engine driver and PyMongo library and created a RESTful API server with Django REST API framework Created CRUD methods getpostputdelete to make requests to the API server and tested Restful API using Postman Developed and performed test cases using the Python Unittest Module Responsible for debugging and troubleshooting the web application Created data analysis models with Pandas to organize appointment and medical records Developed a web spider using Scrapy to extract the data and processed it through Elasticsearch a search engine used to search for patient documents in the doctor inquiry module Automated configuration and deployment to an Apache Tomcat server using Ubuntu and Bash Shell Scripting Environment Django REST Framework DRF PyMongo MongoDB Python Pandas HTML5 CSS3 BootStrap Atom Postman Python Unittest GitBash Pycharm Elaticsearch Scrapy Apache Tomcat Ubuntu Bash Shell Scripting Python Developer CURE Auto Insurance Princeton NJ December 2012 to August 2015 Description Cure Auto Insurance is the auto insurance service provider and decided to upgrade the existing Auto Insurance Management System which is fully automated and integrated application for managing the Policy plans Agent Commission Payment issues and Settlements This Insurance Management System is to response the information of clients policy details and premium rates and monitors the policies for delayed payments It manages different claims per policies claim settlements and allows coverage verifications I worked on the clients modules where customer can get a quote view their packages change the coverage verify premium differences and they have an option to choose the premium years Once the quote is generated they can get it through an email or a print service The customer can also choose to find an agent based on residential zip code of the customer and choose from the list of available agents and get a quote from them Roles Responsibilities Developed the insurance management system using R packages Django Web Framework Python opensource modules such as Scikitlearn pandas numpy and Matplotlib Developed Statistical tests in R ranging from Correlation to One Sample tTest to Wilcoxon Signed Rank Test for testing the normal distribution of data set samples and how their variables vary in tandem from their mean Created Linear Polynomial and Logistic Regression Models to predict the risk and likelihood that a client will file a claim based off the information of clients and generated quotes and premiums using Python opensource modules such as Scikitlearn pandas numpy and Matplotlib Designed and Developed various endpoints defining Models Serializers ViewSets and register corresponding URLs to the endpoints using DRF Routers Connected the database and the application server by using the Django PostgreSQL engine driver and Psycopg2 library and created a RESTful API server with Django REST API framework Created methods get post put delete to make requests to the API server and tested Restful API using Postman Developed Authentication and Security using Djangos builtin authentication Developed Frontend templates for management system using Angular2 HTML5 Typescript and Bootstrap Deployed the application using Ubuntu and Apache Tomcat Created clientsideGUI part of application using kivy Environment RStudio PostgreSQL Enthought Canopy Python Scikitlearn Python Matplotlibpyplot Python numpy Python pandas GitHub desktop GitBash Python Unittest PostgreSQL Server Ubuntu kivy Python Developer The LPL Financial New Brunswick NJ March 2010 to November 2012 Description The LPL Financial is a nations leading financial institution that offer an integrated platform of proprietary technology brokerage and investment advisor services The Advisor Portal is a web application used by institution advisors to manage portfolios high net clients Institute advisors can publish and update contents to the dashboard of the site They can also use the application to create proposal for clients compare proposals data analysis and create backtesting data Clients were able to monitor service progress and gain reports through the application Roles Responsibilities Assisted in the Advisor Portal application development using Flask Web Framework and JavaScript Designed and wrote serverside web application logic developed back end templates and components to connect with third party applications using Flask web framework along with Jinja2 Connected the database and the application server by using the FlaskSQLAlchemy MySQL engine driver and pymysql library Created a RESTful API server with Django REST API framework Developed Advisor Portal front end using ReactJS HTML5 and Bootstrap Utilized frontend development testing using Jasmine Deploy the Advisor Portal application and Automated using Docker Responsible for issue and bug tracking during development of application using JIRA Developed backend serverside application logic using Nodejs to integrate it with API Environment Django Flask Jinja2 SQL Enthought Canopy Python Scikitlearn Python Matplotlibpyplot Python numpy Python pandas GitHub Desktop Python Unittest SQL Server Postman ReactJS HTML5 Bootstrap Docker Jasmine NodeJS Education INFORMATION TECHNOLOGY AND PROGRAMMING KEISER UNIVERSITY Skills ASP Android Javascript MySQL PHP",
    "unique_id": "da46b6b7-be57-4a42-bcc9-d755f4306270"
}