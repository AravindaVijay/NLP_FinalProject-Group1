{
    "clean_data": "SR PYTHON DEVELOPER SR span lPYTHONspan span lDEVELOPERspan SR PYTHON DEVELOPER ATT Dallas TX Around 8 years of experience as a Web Application Developer and coding with analytical programming using Python Django Flask Used Python scripts to update the content in database and manipulate files Designed Merge jobs in Python to extract and load data into Oracle database Experienced in Python modules such as numpy matplotlib etc for generating complex graphical data creation of histograms etc Experience Object Oriented programming OOP concepts using Python C and PHP Experienced in WAMP Windows Apache MYSQL PythonPHP and LAMP Linux Apache MySQL PythonPHP Architecture Experience in AWS Cloud platform and its features which includes EC2 AMI EBS Cloudwatch AWS Config Autoscaling IAM user management and AWS S3 Experienced in developing webbased applications using Python Django PHP XML CSS HTML Javascript and JQuery Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL dB package Used python scripts to parse XML and JSON reports and load the information in database Designed and developed presentation layer for web applications using technologies like HTML CSS and JavaScript Experienced in writing PERL script to extract data from text files web automation and converting the file formats Experience in writing Sub Queries Stored Procedures Triggers Cursors and Functions on SQL and PostgreSQL database Experience with continuous integration and automation using Jenkins Experience with Unit testing Test driven Development TDD Load Testing Used Python library Beautiful Soup for webscrapping Experienced in Agile Methodologies Scrum stories and Sprints experience in a Python based environment Work Experience SR PYTHON DEVELOPER ATT Dallas TX August 2017 to Present Responsibilities Used software development life cycle SDLC of tracking the requirements gathering analysis detailed design development system testing and user acceptance testing Used data centres lifted and shifted to cloud building script for data movement using SQS back and forth using python Developed Nebula datasets registration for keeping the raw data as a backup and worked with Amazon web services EC2 and EMR as a replacement for application servers and various business processes Utilized Cloud watch to monitor resources such as EC CPU memory Amazon to design high availability applications on AWS across availability zones Configured Elastic Load Balancers with EC2 Autoscaling groups in AWS Developed dynamic web pages monitoring and notification tools using Python Django Pyramid Frameworks and Used Python Library Beautiful Soup for web scrapping Developed tools using Python Shell Scripting and XML to automate some of the menial tasks Interfacing with supervisors artists systems administrators and production to ensure production deadlines are met Created new database objects like Functions Packages Triggers Indexes and Views using TSQL in Development and Production environment for SQL Server Involved in the development of front end of the application using Python HTML CSS3 AJAX JSON and JQuery and worked on backend of the application mainly using Active Records Experienced with Bootstrap as a mechanism to manage and organize the HTML page layout and used JavaScript to validate all the client side validations Used MYSQL database queries from Python using PythonMySQL connector and MySQL dB package Designed unit tests in golang and facilitated the integration of Jenkins CI environment with github in collaboration with the operations team Used Golang to add a feature to an opensource data analytics and monitoring platform called Grafana to support customized alerting contents Used migration of existing Java C applications in Python Used Python module to connect and view the status of an Apache Cassandra instance Used PyQuery for selecting particular DOM elements when parsing HTML Implementing change requests raised by user for server configuration kernel tuning software installation and OS hardening Managing Linux VMs using Puppet as per project requirement Implemented Test Driven Development TDD for developing undergoing system Developed user interface solutions using a Django and Pyramid web framework Used Python scripts to update content in the database and manipulate files Involved in development of Python based Web Services using REST for sending and getting data from the external interface in the JSON format and perform analysis using Django PostgreSQL Used Jenkins to build and troubleshoot automated testing Designed automation scripts to back up the old records by using Mongo DB export command and transferred the files into backup machine with the help of ftplib Used Python Django forms to record data of online users and used PyTest for writing test cases and Depended on Ansible for deploying the developing system Environment Python Django PyCharm C JAVA Beautiful Soup Apache Cassandra HTML DOM CSS3 AJAX AWS JSON JQuery SQLite Ansible JavaScript MySQL FTPlib Mongo DB PostgreSQL Puppet Jenkins Panda XML SQLAlchemy TSQL REST Linux GIT GitHub SR PYTHON DEVELOPER Wells Fargo Bank San Francisco CA February 2017 to July 2017 Responsibilities Designed database Model Views and APIs using Python for interactive web based solutions Used data into JSON files using Python to test Django websites Used Python scripts to update the content in database and manipulate files Developed web based application using Django framework with python concepts Generated Python Django forms to maintain the record of online users Used Django APIs to access the database Worked on server side applications with Django using Python programming and used python libraries like Beautiful Soup matplotlib Scipy NumPy and Built efficient Nodejs backend for client web application Developed tools to automate some base tasks using Python Shell scripting and XML Used PyQt to implement GUI for the user to create modify and view reports based on client data Developed efficient Angularjs for client web based application Working in team of Architects and Developers to build and deploy Python Flask Peewee Linux AWS Responsible for designing developing testing deploying and maintaining the web application Designed and developed the UI for the website with HTML XHTML CSS Java Script and AJAX Involved in working with Python open stock APIs Design develop and deploy engaging web applications using Python Develop applications that use MongoDB database and pymongo Wrote Python code embedded with JSON and XML to produce HTTP GET request parsing HTML data from websites Wrote Python code to simplify lists in Python with list comprehension and Python OOP Worked with POSTMAN for API testing Developed REST APIs and created User Model for application Developed a complete frontend application with Bootstrap Developed remote integration with third party platforms by using RESTful web services Environments Python AWS HTML CSS Bootstrap Flask Java script MongoDB Linux APIs Git SR PYTHON DEVELOPER Cardinal Health Dublin OH February 2015 to January 2016 Responsibilities Developed tools using Python Shell scripting XML to automate some of the menial tasks Interfacing with supervisors artists systems administrators and production to ensure production deadlines are met Responsible for setting up Python REST API framework using Django Developed views and templates with Python and Django view controller and templating language to create a userfriendly website interface Developed web applications in Django Framework model view control MVC architecture Used Python to write data into JSON files for testing Django Websites Created scripts for data modelling and data import and export Used JQuery and Ajax calls for transmitting JSON data objects between frontend and controllers Involved in building database Model APIs and Views utilizing Python in order to build an interactive web based solution Thorough knowledge in various front end tools like HTML CSS JavaScript XML JQuery Angularjs and AJAX Managed large datasets using Panda data frames and MySQL Used objectrelational mapper ORM to automate the transfer of data stored in relational databases tables into objects Used Python based GUI components for the frontend functionality such as selection criteria Used Amazon Web Services AWS for improved efficiency of storage and fast access Added support for Amazon AWS and RDS to host staticmedia files and the database into Amazon Cloud Used PyQuery for selecting DOM elements when parsing HTML Created Business Logic using Python to create Planning and Tracking functions Created UI Screens for initiation and validation Developed multithreaded standalone app in Python and PHP to view performance Performed data extraction and manipulation over large relational datasets using SQL Python and other analytical tools Used Python libraries and SQL queriessubqueries to create several datasets which produced statistics tables figures charts and graphs Developed tools using Python Shell scripting XML to automate some of the menial tasks Involved in writing stored procedures using MySQL Interfacing with supervisors artists systems administrators and production to ensure production deadlines are met Environment Python Django Go language Shell Scripting AWS Pandas PyQt PyQuery Flash DOM JSON PHP HTML CSS AJAX JavaScript Bootstrap Apache Web Server MYSQL GitHub LINUX PYTHON DEVELOPER Allstate Insurance Group September 2013 to January 2015 Responsibilities Developed Views and Templates with Django view controller and template language to create a userfriendly website interface Configured the Django admin site dashboard and created a custom Django dashboard for end users with custom look and feel Used Django APIs for database access Implemented MVC architecture in developing the web application with the help of Django framework Used Python and Django for XML JSON processing data exchange and business logic implementation Used Python scripts to update the content in database and manipulate files Created UI using JavaScript Perl and HTML5 Designed and developed data management system using MySQL Worked in MySQL database on simple queries and writing Stored Procedures for normalization and renormalization Generated Python Django Forms to record data of online users Used Python and Django creating graphics XML processing data exchange and business logic implementation Used Pandas API to put the data as time series and tabular format for east timestamp data manipulation and retrieval Worked on Jenkins continuous integration tool for deployment of project Played a key role in a development wide transition from Subversion to Git which resulted in increase in efficiency for the development community Worked on developing internal testing tools which were written in Python Worked on Libraries like Pandas for data manipulation and analysis Developed most of the application part in Linux environment and very much familiar with all its commands Used TKinter to implement GUI for the user to create modify and view reports based on client data Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Used RESTful WebServices for sending and receiving the data between multiple systems Used Python Library Beautiful Soup for web Scrapping Developed tested and debugged software tools utilized by clients and internal customers Environment Linux Python Django Ansible HTML XML JavaScript AngularJs JQuery MS SQL Server Amazon s3 Jenkins Mongo DB Hadoop Beautiful soup Perl Pandas Matlab Eclipse Kafka Git GitHub JIRA PYTHON DEVELOPER Amazon Seattle WA October 2011 to August 2013 Responsibilities Used Python Django and Zope frameworks to develop applications Implemented business logic using Python Used HTML CSS JavaScript and jQuery and Implemented AJAX for dynamic functionality of a webpages for front end applications Worked on front end frame works like Bootstrap for responsive webpages Used large datasets using Pandas data frames and MySQL Developed and executed various MySQL database queries from python using PythonMySQL connector and MySQL database package Designed SQL Alchemy which is a python ORM library for complete access over SQL Designed object model data model tables constraints necessary stored procedures functions triggers and packages for Oracle Database Fetched twitter feeds for certain important keywords using pythontwitter library Used Python library Beautiful Soup for web scrapping Worked on Python OpenStack APIs and used NumPy for Numerical analysis Used AJAX and jQuery for transmitting JSON data objects between frontend and controllers Designed and managed API system deployment using fast http server and Amazon AWS architecture Used staticmedia files along with database were hosted into Amazon cloud and support for Amazon AWS S3 and RDS was added Implemented monitoring and established best practices around using elastic search Install and configuring monitoring scripts for AWS EC2 instances Worked with the design team for project structure Created a Git repository and added the project to GitHub Used Python scripts to parse XML and JSON documents and load the data in database Designed projects adhered to agile principles to deliver commitments meet acceptance criteria and ensure fast releases Environment Django Python HTML JavaScript CSS jQuery AJAX and BOOTSTRAP REST MySQL Elastic Search SQL Apache PYTHON DEVELOPER Johnson Johnson New Brunswick NJ October 2010 to September 2011 Responsibilities Used servermonitoring daemon with Psutil supported by Django app for analytics that created Also researched big data solutions with Cassandra database Experienced with Data migration from Sqlite3 to Apache Cassandra database Cassandra data model designing implementation maintaining and monitoring using DSE Dev Centre Data stax Opscenter Used Oracle DBAs for realtime data integration and replication in heterogeneous IT environments using Oracle GoldenGate Build the Silent Circle Management System SCMC in Django Python and NodeJS while integrating with infrastructure services Used Socket programming experience in Python Implemented complex networking operations like race route SMTP mail server and web server Used existing Deal Model in Python to inherit and create object data structure for regulatory reporting Developed ETL Extract Transform Load software for DB2 columnar database fact and dimension tables Used standard Python modules eg csv robot parser iter tools pickle jinja lxml for development Used Pandas API to put the data as time series and tabular format for east timestamp data manipulation and retrieval Designed the project into Heroku using GIT version control system Designed the coding standards code reuse Increased performance of the extended applications by making effective use of various design patterns Front Controller DAO Designed a large scale distributed computing environment monitoring data nodes to prioritize jobs for processing functions Used Bootstrap JavaScript and JQuery to optimize the user experience Used Python and Django to interface with the JQuery UI and manage the storage and deletion of content Designed various mathematical operations for calculation purpose using python libraries Designed various graphs for business decisionmaking using Python mat plot lib library Used Python library Beautiful Soup for web scrapping to extract data for building graphs Designed Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Used regression tests on each release and verified bugs found from automation test in Bugzilla Used agile methodologies and implemented by participating in scrum standups Kanban mode discussing and implementing requirements with clients Environment Python Django Cassandra Rabbit MQ Vugen Soap UI NodeJS REST HTML5 CSS MySQL JavaScript Angular JS Backbone JS JQuery CSS Bootstrap Mongo DB MS SQL Server JavaScript Eclipse Git GitHub and AWS Education Masters in Computer Science and Engineering Texas Tech University Tech Texas US Skills Python Flask Django Java Javascript Restful AWS Linux C Rest Additional Information Python Django PostgreSQL Flask scipy Pandas",
    "entities": [
        "AJAX",
        "Wells Fargo Bank",
        "GUI",
        "ORM",
        "Nodejs",
        "AWS Developed",
        "Utilized Cloud",
        "Interfacing",
        "Working",
        "LAMP Linux",
        "Amazon Web Services AWS",
        "Panda",
        "Heroku",
        "TKinter",
        "XML",
        "Shell",
        "Work Experience SR PYTHON",
        "TX",
        "Amazon",
        "HTML Created Business Logic",
        "Python C",
        "Python",
        "Stored Procedures",
        "Developed",
        "golang",
        "Amazon AWS S3",
        "Dallas",
        "Django",
        "San Francisco",
        "Implemented MVC",
        "Puppet",
        "Git",
        "GitHub SR",
        "Worked on",
        "Django Websites Created",
        "PythonPHP",
        "Linux",
        "AWS S3 Experienced",
        "Bootstrap Developed",
        "Built",
        "HTML CSS JavaScript XML",
        "DOM",
        "PHP Experienced",
        "RDS",
        "Created a Git",
        "Views",
        "MS",
        "PyQt",
        "MVC",
        "AWS Education Masters",
        "PythonPHP Architecture",
        "EC",
        "GIT",
        "Zope",
        "HTML CSS",
        "API",
        "US",
        "Created",
        "AWS",
        "Sqlite3",
        "WAMP Windows Apache",
        "Sprints",
        "Allstate Insurance Group",
        "Sub Queries Stored Procedures Triggers Cursors and Functions",
        "Seattle",
        "HTML",
        "Python Worked on Libraries",
        "SQL",
        "Bootstrap",
        "GitHub Used Python",
        "Oracle GoldenGate Build the Silent Circle Management System SCMC",
        "Oracle Database Fetched",
        "SQL Python",
        "Python OOP Worked",
        "Amazon AWS",
        "Python Implemented",
        "Pandas",
        "SQS",
        "AMI EBS Cloudwatch AWS Config Autoscaling IAM",
        "Performed",
        "Created UI",
        "Python Develop",
        "Designed Merge",
        "SQL Server Involved",
        "JavaScript",
        "Django Python",
        "UI",
        "Developed ETL Extract Transform Load",
        "Shell Scripting AWS Pandas PyQt PyQuery",
        "SMTP",
        "TSQL in Development and Production",
        "Implemented Test Driven Development TDD",
        "ATT",
        "jQuery",
        "REST",
        "PHP",
        "Designed SQL Alchemy",
        "Jenkins Mongo DB Hadoop",
        "PyTest",
        "JQuery",
        "Oracle database Experienced"
    ],
    "experience": "Experience Object Oriented programming OOP concepts using Python C and PHP Experienced in WAMP Windows Apache MYSQL PythonPHP and LAMP Linux Apache MySQL PythonPHP Architecture Experience in AWS Cloud platform and its features which includes EC2 AMI EBS Cloudwatch AWS Config Autoscaling IAM user management and AWS S3 Experienced in developing webbased applications using Python Django PHP XML CSS HTML Javascript and JQuery Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL dB package Used python scripts to parse XML and JSON reports and load the information in database Designed and developed presentation layer for web applications using technologies like HTML CSS and JavaScript Experienced in writing PERL script to extract data from text files web automation and converting the file formats Experience in writing Sub Queries Stored Procedures Triggers Cursors and Functions on SQL and PostgreSQL database Experience with continuous integration and automation using Jenkins Experience with Unit testing Test driven Development TDD Load Testing Used Python library Beautiful Soup for webscrapping Experienced in Agile Methodologies Scrum stories and Sprints experience in a Python based environment Work Experience SR PYTHON DEVELOPER ATT Dallas TX August 2017 to Present Responsibilities Used software development life cycle SDLC of tracking the requirements gathering analysis detailed design development system testing and user acceptance testing Used data centres lifted and shifted to cloud building script for data movement using SQS back and forth using python Developed Nebula datasets registration for keeping the raw data as a backup and worked with Amazon web services EC2 and EMR as a replacement for application servers and various business processes Utilized Cloud watch to monitor resources such as EC CPU memory Amazon to design high availability applications on AWS across availability zones Configured Elastic Load Balancers with EC2 Autoscaling groups in AWS Developed dynamic web pages monitoring and notification tools using Python Django Pyramid Frameworks and Used Python Library Beautiful Soup for web scrapping Developed tools using Python Shell Scripting and XML to automate some of the menial tasks Interfacing with supervisors artists systems administrators and production to ensure production deadlines are met Created new database objects like Functions Packages Triggers Indexes and Views using TSQL in Development and Production environment for SQL Server Involved in the development of front end of the application using Python HTML CSS3 AJAX JSON and JQuery and worked on backend of the application mainly using Active Records Experienced with Bootstrap as a mechanism to manage and organize the HTML page layout and used JavaScript to validate all the client side validations Used MYSQL database queries from Python using PythonMySQL connector and MySQL dB package Designed unit tests in golang and facilitated the integration of Jenkins CI environment with github in collaboration with the operations team Used Golang to add a feature to an opensource data analytics and monitoring platform called Grafana to support customized alerting contents Used migration of existing Java C applications in Python Used Python module to connect and view the status of an Apache Cassandra instance Used PyQuery for selecting particular DOM elements when parsing HTML Implementing change requests raised by user for server configuration kernel tuning software installation and OS hardening Managing Linux VMs using Puppet as per project requirement Implemented Test Driven Development TDD for developing undergoing system Developed user interface solutions using a Django and Pyramid web framework Used Python scripts to update content in the database and manipulate files Involved in development of Python based Web Services using REST for sending and getting data from the external interface in the JSON format and perform analysis using Django PostgreSQL Used Jenkins to build and troubleshoot automated testing Designed automation scripts to back up the old records by using Mongo DB export command and transferred the files into backup machine with the help of ftplib Used Python Django forms to record data of online users and used PyTest for writing test cases and Depended on Ansible for deploying the developing system Environment Python Django PyCharm C JAVA Beautiful Soup Apache Cassandra HTML DOM CSS3 AJAX AWS JSON JQuery SQLite Ansible JavaScript MySQL FTPlib Mongo DB PostgreSQL Puppet Jenkins Panda XML SQLAlchemy TSQL REST Linux GIT GitHub SR PYTHON DEVELOPER Wells Fargo Bank San Francisco CA February 2017 to July 2017 Responsibilities Designed database Model Views and APIs using Python for interactive web based solutions Used data into JSON files using Python to test Django websites Used Python scripts to update the content in database and manipulate files Developed web based application using Django framework with python concepts Generated Python Django forms to maintain the record of online users Used Django APIs to access the database Worked on server side applications with Django using Python programming and used python libraries like Beautiful Soup matplotlib Scipy NumPy and Built efficient Nodejs backend for client web application Developed tools to automate some base tasks using Python Shell scripting and XML Used PyQt to implement GUI for the user to create modify and view reports based on client data Developed efficient Angularjs for client web based application Working in team of Architects and Developers to build and deploy Python Flask Peewee Linux AWS Responsible for designing developing testing deploying and maintaining the web application Designed and developed the UI for the website with HTML XHTML CSS Java Script and AJAX Involved in working with Python open stock APIs Design develop and deploy engaging web applications using Python Develop applications that use MongoDB database and pymongo Wrote Python code embedded with JSON and XML to produce HTTP GET request parsing HTML data from websites Wrote Python code to simplify lists in Python with list comprehension and Python OOP Worked with POSTMAN for API testing Developed REST APIs and created User Model for application Developed a complete frontend application with Bootstrap Developed remote integration with third party platforms by using RESTful web services Environments Python AWS HTML CSS Bootstrap Flask Java script MongoDB Linux APIs Git SR PYTHON DEVELOPER Cardinal Health Dublin OH February 2015 to January 2016 Responsibilities Developed tools using Python Shell scripting XML to automate some of the menial tasks Interfacing with supervisors artists systems administrators and production to ensure production deadlines are met Responsible for setting up Python REST API framework using Django Developed views and templates with Python and Django view controller and templating language to create a userfriendly website interface Developed web applications in Django Framework model view control MVC architecture Used Python to write data into JSON files for testing Django Websites Created scripts for data modelling and data import and export Used JQuery and Ajax calls for transmitting JSON data objects between frontend and controllers Involved in building database Model APIs and Views utilizing Python in order to build an interactive web based solution Thorough knowledge in various front end tools like HTML CSS JavaScript XML JQuery Angularjs and AJAX Managed large datasets using Panda data frames and MySQL Used objectrelational mapper ORM to automate the transfer of data stored in relational databases tables into objects Used Python based GUI components for the frontend functionality such as selection criteria Used Amazon Web Services AWS for improved efficiency of storage and fast access Added support for Amazon AWS and RDS to host staticmedia files and the database into Amazon Cloud Used PyQuery for selecting DOM elements when parsing HTML Created Business Logic using Python to create Planning and Tracking functions Created UI Screens for initiation and validation Developed multithreaded standalone app in Python and PHP to view performance Performed data extraction and manipulation over large relational datasets using SQL Python and other analytical tools Used Python libraries and SQL queriessubqueries to create several datasets which produced statistics tables figures charts and graphs Developed tools using Python Shell scripting XML to automate some of the menial tasks Involved in writing stored procedures using MySQL Interfacing with supervisors artists systems administrators and production to ensure production deadlines are met Environment Python Django Go language Shell Scripting AWS Pandas PyQt PyQuery Flash DOM JSON PHP HTML CSS AJAX JavaScript Bootstrap Apache Web Server MYSQL GitHub LINUX PYTHON DEVELOPER Allstate Insurance Group September 2013 to January 2015 Responsibilities Developed Views and Templates with Django view controller and template language to create a userfriendly website interface Configured the Django admin site dashboard and created a custom Django dashboard for end users with custom look and feel Used Django APIs for database access Implemented MVC architecture in developing the web application with the help of Django framework Used Python and Django for XML JSON processing data exchange and business logic implementation Used Python scripts to update the content in database and manipulate files Created UI using JavaScript Perl and HTML5 Designed and developed data management system using MySQL Worked in MySQL database on simple queries and writing Stored Procedures for normalization and renormalization Generated Python Django Forms to record data of online users Used Python and Django creating graphics XML processing data exchange and business logic implementation Used Pandas API to put the data as time series and tabular format for east timestamp data manipulation and retrieval Worked on Jenkins continuous integration tool for deployment of project Played a key role in a development wide transition from Subversion to Git which resulted in increase in efficiency for the development community Worked on developing internal testing tools which were written in Python Worked on Libraries like Pandas for data manipulation and analysis Developed most of the application part in Linux environment and very much familiar with all its commands Used TKinter to implement GUI for the user to create modify and view reports based on client data Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Used RESTful WebServices for sending and receiving the data between multiple systems Used Python Library Beautiful Soup for web Scrapping Developed tested and debugged software tools utilized by clients and internal customers Environment Linux Python Django Ansible HTML XML JavaScript AngularJs JQuery MS SQL Server Amazon s3 Jenkins Mongo DB Hadoop Beautiful soup Perl Pandas Matlab Eclipse Kafka Git GitHub JIRA PYTHON DEVELOPER Amazon Seattle WA October 2011 to August 2013 Responsibilities Used Python Django and Zope frameworks to develop applications Implemented business logic using Python Used HTML CSS JavaScript and jQuery and Implemented AJAX for dynamic functionality of a webpages for front end applications Worked on front end frame works like Bootstrap for responsive webpages Used large datasets using Pandas data frames and MySQL Developed and executed various MySQL database queries from python using PythonMySQL connector and MySQL database package Designed SQL Alchemy which is a python ORM library for complete access over SQL Designed object model data model tables constraints necessary stored procedures functions triggers and packages for Oracle Database Fetched twitter feeds for certain important keywords using pythontwitter library Used Python library Beautiful Soup for web scrapping Worked on Python OpenStack APIs and used NumPy for Numerical analysis Used AJAX and jQuery for transmitting JSON data objects between frontend and controllers Designed and managed API system deployment using fast http server and Amazon AWS architecture Used staticmedia files along with database were hosted into Amazon cloud and support for Amazon AWS S3 and RDS was added Implemented monitoring and established best practices around using elastic search Install and configuring monitoring scripts for AWS EC2 instances Worked with the design team for project structure Created a Git repository and added the project to GitHub Used Python scripts to parse XML and JSON documents and load the data in database Designed projects adhered to agile principles to deliver commitments meet acceptance criteria and ensure fast releases Environment Django Python HTML JavaScript CSS jQuery AJAX and BOOTSTRAP REST MySQL Elastic Search SQL Apache PYTHON DEVELOPER Johnson Johnson New Brunswick NJ October 2010 to September 2011 Responsibilities Used servermonitoring daemon with Psutil supported by Django app for analytics that created Also researched big data solutions with Cassandra database Experienced with Data migration from Sqlite3 to Apache Cassandra database Cassandra data model designing implementation maintaining and monitoring using DSE Dev Centre Data stax Opscenter Used Oracle DBAs for realtime data integration and replication in heterogeneous IT environments using Oracle GoldenGate Build the Silent Circle Management System SCMC in Django Python and NodeJS while integrating with infrastructure services Used Socket programming experience in Python Implemented complex networking operations like race route SMTP mail server and web server Used existing Deal Model in Python to inherit and create object data structure for regulatory reporting Developed ETL Extract Transform Load software for DB2 columnar database fact and dimension tables Used standard Python modules eg csv robot parser iter tools pickle jinja lxml for development Used Pandas API to put the data as time series and tabular format for east timestamp data manipulation and retrieval Designed the project into Heroku using GIT version control system Designed the coding standards code reuse Increased performance of the extended applications by making effective use of various design patterns Front Controller DAO Designed a large scale distributed computing environment monitoring data nodes to prioritize jobs for processing functions Used Bootstrap JavaScript and JQuery to optimize the user experience Used Python and Django to interface with the JQuery UI and manage the storage and deletion of content Designed various mathematical operations for calculation purpose using python libraries Designed various graphs for business decisionmaking using Python mat plot lib library Used Python library Beautiful Soup for web scrapping to extract data for building graphs Designed Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Used regression tests on each release and verified bugs found from automation test in Bugzilla Used agile methodologies and implemented by participating in scrum standups Kanban mode discussing and implementing requirements with clients Environment Python Django Cassandra Rabbit MQ Vugen Soap UI NodeJS REST HTML5 CSS MySQL JavaScript Angular JS Backbone JS JQuery CSS Bootstrap Mongo DB MS SQL Server JavaScript Eclipse Git GitHub and AWS Education Masters in Computer Science and Engineering Texas Tech University Tech Texas US Skills Python Flask Django Java Javascript Restful AWS Linux C Rest Additional Information Python Django PostgreSQL Flask scipy Pandas",
    "extracted_keywords": [
        "SR",
        "PYTHON",
        "DEVELOPER",
        "SR",
        "span",
        "lPYTHONspan",
        "span",
        "lDEVELOPERspan",
        "SR",
        "PYTHON",
        "DEVELOPER",
        "ATT",
        "Dallas",
        "TX",
        "years",
        "experience",
        "Web",
        "Application",
        "Developer",
        "programming",
        "Python",
        "Django",
        "Flask",
        "Python",
        "scripts",
        "content",
        "database",
        "manipulate",
        "files",
        "Merge",
        "jobs",
        "Python",
        "data",
        "Oracle",
        "database",
        "Python",
        "modules",
        "numpy",
        "matplotlib",
        "data",
        "creation",
        "histograms",
        "Experience",
        "Object",
        "programming",
        "OOP",
        "concepts",
        "Python",
        "C",
        "PHP",
        "WAMP",
        "Windows",
        "Apache",
        "MYSQL",
        "PythonPHP",
        "LAMP",
        "Linux",
        "Apache",
        "MySQL",
        "PythonPHP",
        "Architecture",
        "Experience",
        "AWS",
        "Cloud",
        "platform",
        "features",
        "EC2",
        "AMI",
        "EBS",
        "Cloudwatch",
        "AWS",
        "Config",
        "Autoscaling",
        "IAM",
        "user",
        "management",
        "AWS",
        "S3",
        "applications",
        "Python",
        "Django",
        "PHP",
        "XML",
        "CSS",
        "HTML",
        "Javascript",
        "JQuery",
        "Wrote",
        "MYSQL",
        "database",
        "python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "package",
        "python",
        "scripts",
        "XML",
        "reports",
        "information",
        "database",
        "presentation",
        "layer",
        "web",
        "applications",
        "technologies",
        "HTML",
        "CSS",
        "JavaScript",
        "PERL",
        "script",
        "data",
        "text",
        "files",
        "web",
        "automation",
        "file",
        "formats",
        "Experience",
        "Sub",
        "Queries",
        "Stored",
        "Procedures",
        "Triggers",
        "Cursors",
        "Functions",
        "SQL",
        "PostgreSQL",
        "database",
        "Experience",
        "integration",
        "automation",
        "Jenkins",
        "Experience",
        "Unit",
        "testing",
        "Test",
        "Development",
        "TDD",
        "Load",
        "Testing",
        "Python",
        "library",
        "Beautiful",
        "Soup",
        "Agile",
        "Methodologies",
        "Scrum",
        "stories",
        "Sprints",
        "experience",
        "Python",
        "environment",
        "Work",
        "Experience",
        "SR",
        "PYTHON",
        "DEVELOPER",
        "ATT",
        "Dallas",
        "TX",
        "August",
        "Present",
        "Responsibilities",
        "software",
        "development",
        "life",
        "cycle",
        "SDLC",
        "requirements",
        "analysis",
        "design",
        "development",
        "system",
        "testing",
        "user",
        "acceptance",
        "testing",
        "data",
        "centres",
        "building",
        "script",
        "data",
        "movement",
        "SQS",
        "python",
        "Developed",
        "Nebula",
        "datasets",
        "registration",
        "data",
        "backup",
        "Amazon",
        "web",
        "services",
        "EC2",
        "EMR",
        "replacement",
        "application",
        "servers",
        "business",
        "processes",
        "Cloud",
        "resources",
        "EC",
        "CPU",
        "memory",
        "Amazon",
        "availability",
        "applications",
        "AWS",
        "availability",
        "zones",
        "Configured",
        "Elastic",
        "Load",
        "Balancers",
        "EC2",
        "Autoscaling",
        "groups",
        "AWS",
        "web",
        "pages",
        "monitoring",
        "notification",
        "tools",
        "Python",
        "Django",
        "Pyramid",
        "Frameworks",
        "Python",
        "Library",
        "Beautiful",
        "Soup",
        "web",
        "tools",
        "Python",
        "Shell",
        "Scripting",
        "XML",
        "tasks",
        "supervisors",
        "artists",
        "systems",
        "administrators",
        "production",
        "production",
        "deadlines",
        "database",
        "Functions",
        "Packages",
        "Triggers",
        "Indexes",
        "Views",
        "TSQL",
        "Development",
        "Production",
        "environment",
        "SQL",
        "Server",
        "development",
        "end",
        "application",
        "Python",
        "HTML",
        "CSS3",
        "AJAX",
        "JSON",
        "JQuery",
        "backend",
        "application",
        "Active",
        "Records",
        "Bootstrap",
        "mechanism",
        "HTML",
        "page",
        "layout",
        "JavaScript",
        "client",
        "side",
        "validations",
        "MYSQL",
        "database",
        "Python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "package",
        "unit",
        "tests",
        "golang",
        "integration",
        "Jenkins",
        "CI",
        "environment",
        "github",
        "collaboration",
        "operations",
        "team",
        "Golang",
        "feature",
        "data",
        "analytics",
        "platform",
        "Grafana",
        "contents",
        "migration",
        "Java",
        "C",
        "applications",
        "Python",
        "Python",
        "module",
        "status",
        "Apache",
        "Cassandra",
        "instance",
        "PyQuery",
        "DOM",
        "elements",
        "HTML",
        "change",
        "requests",
        "user",
        "server",
        "configuration",
        "kernel",
        "software",
        "installation",
        "OS",
        "Linux",
        "VMs",
        "Puppet",
        "project",
        "requirement",
        "Test",
        "Driven",
        "Development",
        "TDD",
        "system",
        "user",
        "interface",
        "solutions",
        "Django",
        "Pyramid",
        "web",
        "framework",
        "Python",
        "scripts",
        "content",
        "database",
        "manipulate",
        "files",
        "development",
        "Python",
        "Web",
        "Services",
        "REST",
        "data",
        "interface",
        "format",
        "analysis",
        "Django",
        "PostgreSQL",
        "Jenkins",
        "testing",
        "automation",
        "scripts",
        "records",
        "Mongo",
        "DB",
        "export",
        "command",
        "files",
        "machine",
        "help",
        "ftplib",
        "Python",
        "Django",
        "data",
        "users",
        "PyTest",
        "test",
        "cases",
        "Ansible",
        "system",
        "Environment",
        "Python",
        "Django",
        "PyCharm",
        "C",
        "Beautiful",
        "Soup",
        "Apache",
        "Cassandra",
        "HTML",
        "DOM",
        "CSS3",
        "AJAX",
        "JSON",
        "JQuery",
        "SQLite",
        "Ansible",
        "JavaScript",
        "MySQL",
        "FTPlib",
        "Mongo",
        "DB",
        "PostgreSQL",
        "Puppet",
        "Jenkins",
        "Panda",
        "XML",
        "SQLAlchemy",
        "TSQL",
        "REST",
        "Linux",
        "GIT",
        "GitHub",
        "SR",
        "PYTHON",
        "DEVELOPER",
        "Wells",
        "Fargo",
        "Bank",
        "San",
        "Francisco",
        "CA",
        "February",
        "July",
        "Responsibilities",
        "database",
        "Model",
        "Views",
        "APIs",
        "Python",
        "web",
        "solutions",
        "data",
        "files",
        "Python",
        "Django",
        "websites",
        "Python",
        "scripts",
        "content",
        "database",
        "manipulate",
        "files",
        "Developed",
        "web",
        "application",
        "Django",
        "framework",
        "concepts",
        "Python",
        "Django",
        "record",
        "users",
        "Django",
        "APIs",
        "database",
        "server",
        "side",
        "applications",
        "Django",
        "Python",
        "programming",
        "python",
        "libraries",
        "Beautiful",
        "Soup",
        "matplotlib",
        "Scipy",
        "NumPy",
        "Nodejs",
        "backend",
        "client",
        "web",
        "application",
        "tools",
        "base",
        "tasks",
        "Python",
        "Shell",
        "scripting",
        "XML",
        "PyQt",
        "GUI",
        "user",
        "modify",
        "reports",
        "client",
        "data",
        "Angularjs",
        "client",
        "web",
        "application",
        "Working",
        "team",
        "Architects",
        "Developers",
        "Python",
        "Flask",
        "Peewee",
        "Linux",
        "AWS",
        "testing",
        "web",
        "application",
        "UI",
        "website",
        "HTML",
        "XHTML",
        "CSS",
        "Java",
        "Script",
        "AJAX",
        "Python",
        "stock",
        "APIs",
        "Design",
        "web",
        "applications",
        "Python",
        "Develop",
        "applications",
        "database",
        "pymongo",
        "Wrote",
        "Python",
        "code",
        "JSON",
        "XML",
        "HTTP",
        "GET",
        "request",
        "HTML",
        "data",
        "websites",
        "Wrote",
        "Python",
        "code",
        "lists",
        "Python",
        "list",
        "comprehension",
        "Python",
        "OOP",
        "POSTMAN",
        "API",
        "testing",
        "REST",
        "APIs",
        "User",
        "Model",
        "application",
        "frontend",
        "application",
        "Bootstrap",
        "Developed",
        "integration",
        "party",
        "platforms",
        "web",
        "services",
        "Environments",
        "Python",
        "AWS",
        "HTML",
        "CSS",
        "Bootstrap",
        "Flask",
        "Java",
        "script",
        "MongoDB",
        "Linux",
        "APIs",
        "Git",
        "SR",
        "PYTHON",
        "DEVELOPER",
        "Cardinal",
        "Health",
        "Dublin",
        "OH",
        "February",
        "January",
        "Responsibilities",
        "tools",
        "Python",
        "Shell",
        "XML",
        "tasks",
        "supervisors",
        "artists",
        "systems",
        "administrators",
        "production",
        "production",
        "deadlines",
        "Python",
        "REST",
        "API",
        "framework",
        "Django",
        "views",
        "templates",
        "Python",
        "Django",
        "controller",
        "templating",
        "language",
        "website",
        "interface",
        "Developed",
        "web",
        "applications",
        "Django",
        "Framework",
        "model",
        "view",
        "control",
        "MVC",
        "architecture",
        "Python",
        "data",
        "files",
        "Django",
        "Websites",
        "scripts",
        "data",
        "modelling",
        "data",
        "import",
        "export",
        "JQuery",
        "Ajax",
        "calls",
        "JSON",
        "data",
        "objects",
        "frontend",
        "controllers",
        "database",
        "Model",
        "APIs",
        "Views",
        "Python",
        "order",
        "web",
        "solution",
        "knowledge",
        "end",
        "tools",
        "HTML",
        "CSS",
        "JavaScript",
        "XML",
        "JQuery",
        "Angularjs",
        "AJAX",
        "datasets",
        "Panda",
        "data",
        "frames",
        "MySQL",
        "mapper",
        "ORM",
        "transfer",
        "data",
        "databases",
        "tables",
        "objects",
        "Python",
        "GUI",
        "components",
        "frontend",
        "functionality",
        "selection",
        "criteria",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "efficiency",
        "storage",
        "access",
        "support",
        "Amazon",
        "AWS",
        "RDS",
        "files",
        "database",
        "Amazon",
        "Cloud",
        "PyQuery",
        "DOM",
        "elements",
        "HTML",
        "Created",
        "Business",
        "Logic",
        "Python",
        "Planning",
        "Tracking",
        "functions",
        "UI",
        "Screens",
        "initiation",
        "validation",
        "Developed",
        "app",
        "Python",
        "PHP",
        "performance",
        "Performed",
        "data",
        "extraction",
        "manipulation",
        "datasets",
        "SQL",
        "Python",
        "tools",
        "Python",
        "libraries",
        "SQL",
        "queriessubqueries",
        "datasets",
        "statistics",
        "tables",
        "figures",
        "charts",
        "tools",
        "Python",
        "Shell",
        "XML",
        "tasks",
        "procedures",
        "MySQL",
        "supervisors",
        "artists",
        "systems",
        "administrators",
        "production",
        "production",
        "deadlines",
        "Environment",
        "Python",
        "Django",
        "Go",
        "language",
        "Shell",
        "Scripting",
        "Pandas",
        "PyQt",
        "PyQuery",
        "Flash",
        "DOM",
        "JSON",
        "PHP",
        "HTML",
        "CSS",
        "AJAX",
        "JavaScript",
        "Bootstrap",
        "Apache",
        "Web",
        "Server",
        "MYSQL",
        "GitHub",
        "LINUX",
        "PYTHON",
        "DEVELOPER",
        "Allstate",
        "Insurance",
        "Group",
        "September",
        "January",
        "Responsibilities",
        "Views",
        "Templates",
        "Django",
        "controller",
        "template",
        "language",
        "website",
        "interface",
        "Django",
        "admin",
        "site",
        "dashboard",
        "custom",
        "Django",
        "dashboard",
        "end",
        "users",
        "custom",
        "Django",
        "APIs",
        "database",
        "access",
        "MVC",
        "architecture",
        "web",
        "application",
        "help",
        "Django",
        "framework",
        "Python",
        "Django",
        "XML",
        "processing",
        "data",
        "exchange",
        "business",
        "logic",
        "implementation",
        "Python",
        "scripts",
        "content",
        "database",
        "manipulate",
        "files",
        "UI",
        "JavaScript",
        "Perl",
        "HTML5",
        "data",
        "management",
        "system",
        "MySQL",
        "MySQL",
        "database",
        "queries",
        "Procedures",
        "normalization",
        "renormalization",
        "Python",
        "Django",
        "Forms",
        "data",
        "users",
        "Python",
        "Django",
        "graphics",
        "XML",
        "processing",
        "data",
        "exchange",
        "business",
        "logic",
        "implementation",
        "Pandas",
        "API",
        "data",
        "time",
        "series",
        "format",
        "east",
        "timestamp",
        "data",
        "manipulation",
        "retrieval",
        "Worked",
        "Jenkins",
        "integration",
        "tool",
        "deployment",
        "project",
        "role",
        "development",
        "transition",
        "Subversion",
        "Git",
        "increase",
        "efficiency",
        "development",
        "community",
        "testing",
        "tools",
        "Python",
        "Libraries",
        "Pandas",
        "data",
        "manipulation",
        "analysis",
        "application",
        "part",
        "Linux",
        "environment",
        "commands",
        "TKinter",
        "GUI",
        "user",
        "modify",
        "reports",
        "client",
        "data",
        "support",
        "Amazon",
        "AWS",
        "S3",
        "RDS",
        "files",
        "database",
        "Amazon",
        "Cloud",
        "WebServices",
        "data",
        "systems",
        "Python",
        "Library",
        "Beautiful",
        "Soup",
        "web",
        "Scrapping",
        "Developed",
        "software",
        "tools",
        "clients",
        "customers",
        "Environment",
        "Linux",
        "Python",
        "Django",
        "Ansible",
        "HTML",
        "XML",
        "JavaScript",
        "AngularJs",
        "JQuery",
        "MS",
        "SQL",
        "Server",
        "Amazon",
        "s3",
        "Jenkins",
        "Mongo",
        "DB",
        "Hadoop",
        "Beautiful",
        "soup",
        "Perl",
        "Pandas",
        "Matlab",
        "Eclipse",
        "Kafka",
        "Git",
        "GitHub",
        "JIRA",
        "PYTHON",
        "DEVELOPER",
        "Amazon",
        "Seattle",
        "WA",
        "October",
        "August",
        "Responsibilities",
        "Python",
        "Django",
        "Zope",
        "frameworks",
        "applications",
        "business",
        "logic",
        "Python",
        "Used",
        "HTML",
        "CSS",
        "JavaScript",
        "jQuery",
        "AJAX",
        "functionality",
        "webpages",
        "end",
        "applications",
        "end",
        "frame",
        "Bootstrap",
        "webpages",
        "datasets",
        "Pandas",
        "data",
        "frames",
        "MySQL",
        "Developed",
        "MySQL",
        "database",
        "python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "database",
        "package",
        "SQL",
        "Alchemy",
        "ORM",
        "library",
        "access",
        "SQL",
        "object",
        "model",
        "data",
        "model",
        "tables",
        "constraints",
        "procedures",
        "functions",
        "triggers",
        "packages",
        "Oracle",
        "Database",
        "Fetched",
        "twitter",
        "keywords",
        "pythontwitter",
        "library",
        "Python",
        "library",
        "Beautiful",
        "Soup",
        "web",
        "Worked",
        "Python",
        "OpenStack",
        "APIs",
        "NumPy",
        "analysis",
        "AJAX",
        "jQuery",
        "JSON",
        "data",
        "objects",
        "frontend",
        "controllers",
        "API",
        "system",
        "deployment",
        "http",
        "server",
        "Amazon",
        "AWS",
        "architecture",
        "files",
        "database",
        "Amazon",
        "cloud",
        "support",
        "Amazon",
        "AWS",
        "S3",
        "RDS",
        "monitoring",
        "practices",
        "search",
        "Install",
        "monitoring",
        "scripts",
        "AWS",
        "EC2",
        "instances",
        "design",
        "team",
        "project",
        "structure",
        "Git",
        "repository",
        "project",
        "GitHub",
        "Python",
        "scripts",
        "XML",
        "documents",
        "data",
        "database",
        "projects",
        "principles",
        "commitments",
        "acceptance",
        "criteria",
        "releases",
        "Environment",
        "Django",
        "Python",
        "HTML",
        "JavaScript",
        "CSS",
        "jQuery",
        "AJAX",
        "BOOTSTRAP",
        "REST",
        "MySQL",
        "Elastic",
        "Search",
        "SQL",
        "Apache",
        "PYTHON",
        "DEVELOPER",
        "Johnson",
        "Johnson",
        "New",
        "Brunswick",
        "NJ",
        "October",
        "September",
        "Responsibilities",
        "daemon",
        "Psutil",
        "Django",
        "app",
        "analytics",
        "data",
        "solutions",
        "Cassandra",
        "database",
        "Data",
        "migration",
        "Sqlite3",
        "Apache",
        "Cassandra",
        "database",
        "Cassandra",
        "data",
        "model",
        "implementation",
        "monitoring",
        "DSE",
        "Dev",
        "Centre",
        "Data",
        "stax",
        "Opscenter",
        "Oracle",
        "DBAs",
        "data",
        "integration",
        "replication",
        "IT",
        "environments",
        "Oracle",
        "GoldenGate",
        "Silent",
        "Circle",
        "Management",
        "System",
        "Django",
        "Python",
        "NodeJS",
        "infrastructure",
        "services",
        "Socket",
        "programming",
        "experience",
        "Python",
        "networking",
        "operations",
        "race",
        "route",
        "SMTP",
        "mail",
        "server",
        "web",
        "server",
        "Deal",
        "Model",
        "Python",
        "object",
        "data",
        "structure",
        "reporting",
        "Developed",
        "ETL",
        "Extract",
        "Transform",
        "Load",
        "software",
        "DB2",
        "columnar",
        "database",
        "fact",
        "dimension",
        "tables",
        "Python",
        "modules",
        "eg",
        "csv",
        "robot",
        "parser",
        "iter",
        "tools",
        "lxml",
        "development",
        "Pandas",
        "API",
        "data",
        "time",
        "series",
        "format",
        "east",
        "timestamp",
        "data",
        "manipulation",
        "retrieval",
        "project",
        "Heroku",
        "GIT",
        "version",
        "control",
        "system",
        "standards",
        "code",
        "performance",
        "applications",
        "use",
        "design",
        "patterns",
        "Front",
        "Controller",
        "DAO",
        "scale",
        "environment",
        "data",
        "nodes",
        "jobs",
        "processing",
        "functions",
        "Bootstrap",
        "JavaScript",
        "JQuery",
        "user",
        "experience",
        "Python",
        "Django",
        "JQuery",
        "UI",
        "storage",
        "deletion",
        "content",
        "operations",
        "calculation",
        "purpose",
        "python",
        "libraries",
        "graphs",
        "business",
        "Python",
        "mat",
        "plot",
        "lib",
        "library",
        "Python",
        "library",
        "Beautiful",
        "Soup",
        "web",
        "data",
        "graphs",
        "Python",
        "bug",
        "fixes",
        "applications",
        "source",
        "data",
        "customers",
        "customer",
        "service",
        "team",
        "regression",
        "tests",
        "release",
        "bugs",
        "automation",
        "test",
        "Bugzilla",
        "methodologies",
        "scrum",
        "standups",
        "Kanban",
        "mode",
        "requirements",
        "clients",
        "Environment",
        "Python",
        "Django",
        "Cassandra",
        "Rabbit",
        "MQ",
        "Vugen",
        "Soap",
        "UI",
        "NodeJS",
        "REST",
        "HTML5",
        "CSS",
        "MySQL",
        "JavaScript",
        "Angular",
        "JS",
        "Backbone",
        "JS",
        "JQuery",
        "CSS",
        "Bootstrap",
        "Mongo",
        "DB",
        "MS",
        "SQL",
        "Server",
        "JavaScript",
        "Eclipse",
        "Git",
        "GitHub",
        "AWS",
        "Education",
        "Masters",
        "Computer",
        "Science",
        "Engineering",
        "Texas",
        "Tech",
        "University",
        "Tech",
        "Texas",
        "US",
        "Skills",
        "Python",
        "Flask",
        "Django",
        "Java",
        "Javascript",
        "Restful",
        "AWS",
        "Linux",
        "C",
        "Rest",
        "Additional",
        "Information",
        "Python",
        "Django",
        "PostgreSQL",
        "Flask",
        "Pandas"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T20:41:38.825552",
    "resume_data": "SR PYTHON DEVELOPER SR span lPYTHONspan span lDEVELOPERspan SR PYTHON DEVELOPER ATT Dallas TX Around 8 years of experience as a Web Application Developer and coding with analytical programming using Python Django Flask Used Python scripts to update the content in database and manipulate files Designed Merge jobs in Python to extract and load data into Oracle database Experienced in Python modules such as numpy matplotlib etc for generating complex graphical data creation of histograms etc Experience Object Oriented programming OOP concepts using Python C and PHP Experienced in WAMP Windows Apache MYSQL PythonPHP and LAMP Linux Apache MySQL PythonPHP Architecture Experience in AWS Cloud platform and its features which includes EC2 AMI EBS Cloudwatch AWS Config Autoscaling IAM user management and AWS S3 Experienced in developing webbased applications using Python Django PHP XML CSS HTML Javascript and JQuery Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL dB package Used python scripts to parse XML and JSON reports and load the information in database Designed and developed presentation layer for web applications using technologies like HTML CSS and JavaScript Experienced in writing PERL script to extract data from text files web automation and converting the file formats Experience in writing Sub Queries Stored Procedures Triggers Cursors and Functions on SQL and PostgreSQL database Experience with continuous integration and automation using Jenkins Experience with Unit testing Test driven Development TDD Load Testing Used Python library Beautiful Soup for webscrapping Experienced in Agile Methodologies Scrum stories and Sprints experience in a Python based environment Work Experience SR PYTHON DEVELOPER ATT Dallas TX August 2017 to Present Responsibilities Used software development life cycle SDLC of tracking the requirements gathering analysis detailed design development system testing and user acceptance testing Used data centres lifted and shifted to cloud building script for data movement using SQS back and forth using python Developed Nebula datasets registration for keeping the raw data as a backup and worked with Amazon web services EC2 and EMR as a replacement for application servers and various business processes Utilized Cloud watch to monitor resources such as EC CPU memory Amazon to design high availability applications on AWS across availability zones Configured Elastic Load Balancers with EC2 Autoscaling groups in AWS Developed dynamic web pages monitoring and notification tools using Python Django Pyramid Frameworks and Used Python Library Beautiful Soup for web scrapping Developed tools using Python Shell Scripting and XML to automate some of the menial tasks Interfacing with supervisors artists systems administrators and production to ensure production deadlines are met Created new database objects like Functions Packages Triggers Indexes and Views using TSQL in Development and Production environment for SQL Server Involved in the development of front end of the application using Python HTML CSS3 AJAX JSON and JQuery and worked on backend of the application mainly using Active Records Experienced with Bootstrap as a mechanism to manage and organize the HTML page layout and used JavaScript to validate all the client side validations Used MYSQL database queries from Python using PythonMySQL connector and MySQL dB package Designed unit tests in golang and facilitated the integration of Jenkins CI environment with github in collaboration with the operations team Used Golang to add a feature to an opensource data analytics and monitoring platform called Grafana to support customized alerting contents Used migration of existing Java C applications in Python Used Python module to connect and view the status of an Apache Cassandra instance Used PyQuery for selecting particular DOM elements when parsing HTML Implementing change requests raised by user for server configuration kernel tuning software installation and OS hardening Managing Linux VMs using Puppet as per project requirement Implemented Test Driven Development TDD for developing undergoing system Developed user interface solutions using a Django and Pyramid web framework Used Python scripts to update content in the database and manipulate files Involved in development of Python based Web Services using REST for sending and getting data from the external interface in the JSON format and perform analysis using Django PostgreSQL Used Jenkins to build and troubleshoot automated testing Designed automation scripts to back up the old records by using Mongo DB export command and transferred the files into backup machine with the help of ftplib Used Python Django forms to record data of online users and used PyTest for writing test cases and Depended on Ansible for deploying the developing system Environment Python Django PyCharm C JAVA Beautiful Soup Apache Cassandra HTML DOM CSS3 AJAX AWS JSON JQuery SQLite Ansible JavaScript MySQL FTPlib Mongo DB PostgreSQL Puppet Jenkins Panda XML SQLAlchemy TSQL REST Linux GIT GitHub SR PYTHON DEVELOPER Wells Fargo Bank San Francisco CA February 2017 to July 2017 Responsibilities Designed database Model Views and APIs using Python for interactive web based solutions Used data into JSON files using Python to test Django websites Used Python scripts to update the content in database and manipulate files Developed web based application using Django framework with python concepts Generated Python Django forms to maintain the record of online users Used Django APIs to access the database Worked on server side applications with Django using Python programming and used python libraries like Beautiful Soup matplotlib Scipy NumPy and Built efficient Nodejs backend for client web application Developed tools to automate some base tasks using Python Shell scripting and XML Used PyQt to implement GUI for the user to create modify and view reports based on client data Developed efficient Angularjs for client web based application Working in team of Architects and Developers to build and deploy Python Flask Peewee Linux AWS Responsible for designing developing testing deploying and maintaining the web application Designed and developed the UI for the website with HTML XHTML CSS Java Script and AJAX Involved in working with Python open stock APIs Design develop and deploy engaging web applications using Python Develop applications that use MongoDB database and pymongo Wrote Python code embedded with JSON and XML to produce HTTP GET request parsing HTML data from websites Wrote Python code to simplify lists in Python with list comprehension and Python OOP Worked with POSTMAN for API testing Developed REST APIs and created User Model for application Developed a complete frontend application with Bootstrap Developed remote integration with third party platforms by using RESTful web services Environments Python AWS HTML CSS Bootstrap Flask Java script MongoDB Linux APIs Git SR PYTHON DEVELOPER Cardinal Health Dublin OH February 2015 to January 2016 Responsibilities Developed tools using Python Shell scripting XML to automate some of the menial tasks Interfacing with supervisors artists systems administrators and production to ensure production deadlines are met Responsible for setting up Python REST API framework using Django Developed views and templates with Python and Django view controller and templating language to create a userfriendly website interface Developed web applications in Django Framework model view control MVC architecture Used Python to write data into JSON files for testing Django Websites Created scripts for data modelling and data import and export Used JQuery and Ajax calls for transmitting JSON data objects between frontend and controllers Involved in building database Model APIs and Views utilizing Python in order to build an interactive web based solution Thorough knowledge in various front end tools like HTML CSS JavaScript XML JQuery Angularjs and AJAX Managed large datasets using Panda data frames and MySQL Used objectrelational mapper ORM to automate the transfer of data stored in relational databases tables into objects Used Python based GUI components for the frontend functionality such as selection criteria Used Amazon Web Services AWS for improved efficiency of storage and fast access Added support for Amazon AWS and RDS to host staticmedia files and the database into Amazon Cloud Used PyQuery for selecting DOM elements when parsing HTML Created Business Logic using Python to create Planning and Tracking functions Created UI Screens for initiation and validation Developed multithreaded standalone app in Python and PHP to view performance Performed data extraction and manipulation over large relational datasets using SQL Python and other analytical tools Used Python libraries and SQL queriessubqueries to create several datasets which produced statistics tables figures charts and graphs Developed tools using Python Shell scripting XML to automate some of the menial tasks Involved in writing stored procedures using MySQL Interfacing with supervisors artists systems administrators and production to ensure production deadlines are met Environment Python Django Go language Shell Scripting AWS Pandas PyQt PyQuery Flash DOM JSON PHP HTML CSS AJAX JavaScript Bootstrap Apache Web Server MYSQL GitHub LINUX PYTHON DEVELOPER Allstate Insurance Group September 2013 to January 2015 Responsibilities Developed Views and Templates with Django view controller and template language to create a userfriendly website interface Configured the Django admin site dashboard and created a custom Django dashboard for end users with custom look and feel Used Django APIs for database access Implemented MVC architecture in developing the web application with the help of Django framework Used Python and Django for XML JSON processing data exchange and business logic implementation Used Python scripts to update the content in database and manipulate files Created UI using JavaScript Perl and HTML5 Designed and developed data management system using MySQL Worked in MySQL database on simple queries and writing Stored Procedures for normalization and renormalization Generated Python Django Forms to record data of online users Used Python and Django creating graphics XML processing data exchange and business logic implementation Used Pandas API to put the data as time series and tabular format for east timestamp data manipulation and retrieval Worked on Jenkins continuous integration tool for deployment of project Played a key role in a development wide transition from Subversion to Git which resulted in increase in efficiency for the development community Worked on developing internal testing tools which were written in Python Worked on Libraries like Pandas for data manipulation and analysis Developed most of the application part in Linux environment and very much familiar with all its commands Used TKinter to implement GUI for the user to create modify and view reports based on client data Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Used RESTful WebServices for sending and receiving the data between multiple systems Used Python Library Beautiful Soup for web Scrapping Developed tested and debugged software tools utilized by clients and internal customers Environment Linux Python Django Ansible HTML XML JavaScript AngularJs JQuery MS SQL Server Amazon s3 Jenkins Mongo DB Hadoop Beautiful soup Perl Pandas Matlab Eclipse Kafka Git GitHub JIRA PYTHON DEVELOPER Amazon Seattle WA October 2011 to August 2013 Responsibilities Used Python Django and Zope frameworks to develop applications Implemented business logic using Python Used HTML CSS JavaScript and jQuery and Implemented AJAX for dynamic functionality of a webpages for front end applications Worked on front end frame works like Bootstrap for responsive webpages Used large datasets using Pandas data frames and MySQL Developed and executed various MySQL database queries from python using PythonMySQL connector and MySQL database package Designed SQL Alchemy which is a python ORM library for complete access over SQL Designed object model data model tables constraints necessary stored procedures functions triggers and packages for Oracle Database Fetched twitter feeds for certain important keywords using pythontwitter library Used Python library Beautiful Soup for web scrapping Worked on Python OpenStack APIs and used NumPy for Numerical analysis Used AJAX and jQuery for transmitting JSON data objects between frontend and controllers Designed and managed API system deployment using fast http server and Amazon AWS architecture Used staticmedia files along with database were hosted into Amazon cloud and support for Amazon AWS S3 and RDS was added Implemented monitoring and established best practices around using elastic search Install and configuring monitoring scripts for AWS EC2 instances Worked with the design team for project structure Created a Git repository and added the project to GitHub Used Python scripts to parse XML and JSON documents and load the data in database Designed projects adhered to agile principles to deliver commitments meet acceptance criteria and ensure fast releases Environment Django Python HTML JavaScript CSS jQuery AJAX and BOOTSTRAP REST MySQL Elastic Search SQL Apache PYTHON DEVELOPER Johnson Johnson New Brunswick NJ October 2010 to September 2011 Responsibilities Used servermonitoring daemon with Psutil supported by Django app for analytics that created Also researched big data solutions with Cassandra database Experienced with Data migration from Sqlite3 to Apache Cassandra database Cassandra data model designing implementation maintaining and monitoring using DSE Dev Centre Data stax Opscenter Used Oracle DBAs for realtime data integration and replication in heterogeneous IT environments using Oracle GoldenGate Build the Silent Circle Management System SCMC in Django Python and NodeJS while integrating with infrastructure services Used Socket programming experience in Python Implemented complex networking operations like race route SMTP mail server and web server Used existing Deal Model in Python to inherit and create object data structure for regulatory reporting Developed ETL Extract Transform Load software for DB2 columnar database fact and dimension tables Used standard Python modules eg csv robot parser iter tools pickle jinja lxml for development Used Pandas API to put the data as time series and tabular format for east timestamp data manipulation and retrieval Designed the project into Heroku using GIT version control system Designed the coding standards code reuse Increased performance of the extended applications by making effective use of various design patterns Front Controller DAO Designed a large scale distributed computing environment monitoring data nodes to prioritize jobs for processing functions Used Bootstrap JavaScript and JQuery to optimize the user experience Used Python and Django to interface with the JQuery UI and manage the storage and deletion of content Designed various mathematical operations for calculation purpose using python libraries Designed various graphs for business decisionmaking using Python mat plot lib library Used Python library Beautiful Soup for web scrapping to extract data for building graphs Designed Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Used regression tests on each release and verified bugs found from automation test in Bugzilla Used agile methodologies and implemented by participating in scrum standups Kanban mode discussing and implementing requirements with clients Environment Python Django Cassandra Rabbit MQ Vugen Soap UI NodeJS REST HTML5 CSS MySQL JavaScript Angular JS Backbone JS JQuery CSS Bootstrap Mongo DB MS SQL Server JavaScript Eclipse Git GitHub and AWS Education Masters in Computer Science and Engineering Texas Tech University Tech Texas US Skills Python Flask Django Java Javascript Restful AWS Linux C Rest Additional Information Python Django PostgreSQL Flask scipy Pandas",
    "unique_id": "0767a199-323b-4808-b165-487419fc61a4"
}