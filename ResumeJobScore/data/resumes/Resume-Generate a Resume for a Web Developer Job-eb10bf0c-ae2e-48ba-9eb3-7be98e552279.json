{
    "clean_data": "PythonORACLE Developer span lPythonspanORACLE span lDeveloperspan PythonORACLE Developer Bank Of America Highly motivated and experienced software professional with over 9 years of experience Good working experience in ORACLE Python Unix Shell programming Well experienced in UNIX Korn shell scripting Good Working experience in UNIX AWKSED Experience in creating ORACLE database objects such as databases tables views macros stored procedures Well knowledge in production support Excellent logical and analytical skills solve complex problems Good Working experience on python web application development using Django web framework and Flask Good working experience in python NumPy to implement complex business rules Experience in reading and writing xml reports with Python XML modules Work Experience PythonORACLE Developer Bank Of America Charlotte NC October 2013 to Present Saber 2 is an application built for the purpose of calculating the firms Risk Weighted Assets RWA for multiple products across several line of business work streams Retail lending and Wholesale channels for example It is meant to handle calculating the regulatory capital requirements for supported products and supply necessary inputs into the economic capital functions used by Enterprise Capital Management ECMIt also endeavors to support other requirements from ECM and their stakeholders more easily by providing a modular platform that can be leveraged in pieces This modular capability will also allow technology to deliver enhancements and new solutions faster than is currently possible with the existing platform Responsibilities Involved in requirement analysis database design coding testing implementation and review for re hosting Worked on saber archive process to backup the data files and maintain the space on the unix servers Developed and automated the Python jobs for Saber to Saber 2 migration Worked on Parsing various format of files like XML using Python XML modules Interacting with data modeling and ETL teams to convert logical data models into ORACLE physical data models and recommending implementing data type changes and primary index by enhancing ORACLE best practices Enhanced SQL performance tuning by collectingrefreshing statistics and enhancing the proper primary index and introducing PPI and MLPPIs Worked on migrating config files to centralized xml config to be used by Python framerwork Worked on writing Python wrappers to streamline the saber environment Worked on Saber Smoke test report generation using Python and XML configs Worked extensively on creating python modules for Saber ORACLEoracle calculator framework Worked on creating downstream feeds in XML format Created saber config review pages using HTML and python Django and flask libraries Worked on implementing saber calculator logic using python advanced libraries like NumPy Worked on implementing OO Python standards to rewrite the remote framework Worked on development of db refresh project for weekly backup of ORACLE Implemented Risk weighted wholesale calculator login using Python NumPy Worked on SaberSaber 2 health check report jobs using python shell scripts Worked on development of config review process Developed and implemented Web based Saber control Panel using Flask and Djago libraries Worked on Isolated environment builds for business testing Worked on ORACLE data lineage process to map source to target db table and column mappings using OO Python Worked on automating the weekly data archive jobs using autosys Worked on troubleshooting environment relates issues during monthly SDLC cycle Provided support for job scheduling file transfers and transactional processes Worked on migration of CRM job from JAVA to Python using NumPy Worked on modifying the job reset option to kill the backend processes in unix and windows Environment python KSH RMATLAB BCP OO Python UNIX Windows NT Django Flask Numpy ORACLE Developer First Data Louisville KY April 2012 to September 2013 CADRE is the back office exceptions processing application that integrates imaging and artificial intelligence to assist dispute analysis in resolving the disputes related to the credit card transactions To efficiently process disputes CADRE depends on receiving and sending files to major credit card associations VISA MasterCard and Diners and our supported merchants Expedites workflow and turnaround time for resolution of exception items Responsibilities Involved in requirement analysis database design coding testing implementation and review for re hosting Worked on creating centralized email system for CADRE backend emails using python Wrote routines in python update database from XML files and vice versa Developed Sybase Stored procedures for the back end processing of the proposed data base design Automated console with scaling in ORACLE SQL Participated in meetings to gather and analyze the requirements for new applications data model changes and made recommendations from ORACLE database point Created Python batches monitor errors in data loading at particular frequency Coded and deployed application in test and production environments Worked on CADRE code migration from Delphi to Python using pyhon Django javascript and HTML Implemented complex business rules for credit card reversals using python Pandas Data structure library Compiled the c code in 64 bit for the re hosting of the CADRE app Worked extensively on fixing the backend code issues post reshot Worked on overnight batch support post re host Developed performance utilization charts optimized and tuned SQL and designed physical databases Assisted developers with ORACLE load utilities and SQL Created BTEQ scripts to extract data from warehouse for downstream applications Extensively worked on ORACLE performance optimization and brought down the queries to seconds or minutes from spool out and never ending queries by using various ORACLE optimization strategies Used the Visual explain to analyze the Query plans Designed and developed Python scripts for sending application based mails Wrote XML synchronization code using Python and UNIX shell scripts Worked editing testing and deploying shell and python scripts for migration from ftp to Secure Maintained multiple levels of support for all systems batch processing Provided support for job scheduling XML file transfers and transactional processes Involved with production and quality assurance environment support Environment python KSH RMATLAB BCP OO Python UNIX Windows NT Django Flask Numpy Python Developer Liberty Mutual Dover NH March 2011 to February 2012 LUNAR is a life insurance application used maintain the new business applications for individual life insurance Lunar is used by the business receive applications for new policies apply money the policy as per the product and Issue the policy policy holders Responsibilities Involved in requirement analysis database design coding testing implementation and review Involved in creating data upload modules in python Worked extensively in python and HTML Java Script for front end with flask Created python batches monitor errors in data loading at particular frequency Wrote routines in python update database from XML files and vice versa Created many python scripts and stored procedures avoid job processing failures and use of stale data by systems Wrote Python and Shell scripts automate the verification of the information inserted in the database via the web application Used pyodbc connectivity from Python ORACLE Involved in loading of data into ORACLE from legacy systems and flat files using complex MLOAD scripts and Fast Load Studied the existing python modules and wrote functional specification for migration team Wrote all BTEQ and UNIX scripts used in loading of legacy data Enterprise wide templates were created for handling SCD Error handling etc Handled scheduling of Korn Shell scripts that loaded data from flat files ORACLE Worked in data handling using UNIX scripts using mload and fast export Involved in writing ORACLE SQL bulk programs and in Performance tuning activities for ORACLE SQL statements using ORACLE EXPLAIN Used External Loaders like Multi Load T Pump and Fast Load to load data into ORACLE database Involved in analysis development testing implementation and deployment Involved writing BTEQ scripts for validation testing of the sessions data integrity between source and target databases and for report generation Maintained multiple levels of support for all systems batch processing Provided support for job scheduling file transfers and transactional processes Involved with production and quality assurance environment support Environment python flask KSH BTEQ MLOAD HTML ORACLEJavaScript SQL PLSQL OO Python Sybase UNIX Windows NT Python DeveloperSupport Pepsi Co Somers NY October 2010 to February 2011 CETS is a supply chain management system used by customer service PEPSI vendors PEPSI accounting CETS keep track of all the PEPSI equipment inventory It is used take orders from clients for the Installation of the vending machines Responsibilities Wrote python programming error check the data and import it into the Sybase database Created many batches using pythonKSH for data retrieval and loading from other applications and databases Involved in python based database work using pyodbc Integrated Sybase stored procedures with Python created interface jobs for move orders Used Autosys version control tool for concurrent and simultaneous operations Scheduled Sybase stored procedures using Autosys Developed automated registration process using pythonflask scripting Developed mail based distribution module using python Created server side Sybase Stored Procedures for implementing complex business logic Developed Reports using SQR Tuned TSql queries for improve the performance Involved in performance tuning of Sybase stored procedures for different modules of CETS Open Orders Paper Install etc Involved in performance tuning of CETS ARCHIVE stored procedures Created Autosys jobs as per requirement maintained the existing scripts and administrated the Autosys entries Created and maintained the stored procedures tables and queries for the application using Sybase TSQL Created Stored Procedures Indexes Triggers Views Scripts and reports in Sybase SQL Wrote stored procedures in TSQL under Sybase facilitate database querying Monitored concurrent jobs of Sybase SQL applications Created UNIX Korn Shell batches for data download and upload Used UNIX shell scripting using hash tables and array index listing for fast retrieval Worked on bug fixing and supported the production applications Provided support on Starteam version control Managed and supported the outages during urgency Ensured effective and timely resolution and communication the user during the production support Environment Rapid SQL python KSH pyodbc Sybase StarTeam Nexaweb Autosys UNIXAIXLINUX Oracle10g Python DeveloperSupport JPMorgan Chase Newark DE April 2010 to October 2010 OPICS performs accounting and settlements of trading activity for a number of lines of businesses including PIM PAG CIO Max Recovery Tax Liens and Credit and Risk Management OPICS is a third party vendor application integrated with JPMorgan mainframe There are a number of lines of businesses that feed OPICS The trades are either sent in flat files or directly inserted into OPICS interface tables The P L and settlement operation is performed internally by OPICS All the P L statements Brokers statements transaction reports and reconciliation reports generated by OPICS are stored in a database repository These reports are retrieved by AXSpoint application Responsibilities Created python scripts for data migration Designed and developed many python modules Developed many python scripts for server side data processing Coded many python routines for data retrieval migration and manipulating Wrote numerous python modules for background processing Used Clearcase for checkin and checkout Used Clearcase team synchronization Developed numerous scripts test different functional aspects of Sybase Stored Procedures Designed developed and modified Python scripts using the package modules Developed Sybase Stored Procedures extract data from database and load it into the database Involved in performance turning for Sybase queries Developed Sybase Stored procedures for the back end processing of the proposed data base design Used Autosys for the batch scheduling in UNIX Optimized the performance of queries with modification in Sybase SQL Queries Developed Sybase stored procedures for OPICS ARCHIVE process Automated console with scaling in ISQL Used TSQL tables Array Structures in Sybase Designed and developed Sybase TSQL scripts for data importexport Involved in performance tuning of Sybase stored procedures and triggers support the next generation of SWIFT messages Integrated Python with Sybase stored procedures using modules like BDI create downstream feeds for OPICS Used advanced Sybase TSQL techniques like cursors for data retrieval Used Sybase TSQL filer and load the data from other production databases Used Sybase TSQL scripts for dynamic procedures during package creation Fixed many UNIX KSH scripts for issues related batch uploading Provided 24x7 supports for application deployment Analyzed production issues ensure system availability Supported compliance all regulatory and audit requirements EnvironmentOracle TSQL Sybase python KSH Autosys Corn Tab flask Python HTML XML UNIX Clearcase Unix Engineer Aegis Capital Corp New York NY January 2008 to March 2010 The mutual fund distribution system is a complete and efficient end end solution for distribution organization This system is mainly concerned about integrating trades for registrar and processing the transactions The system also provides calculations like brokerage calculation process P L calculation Internal rate of return IRR calculation etc The user can see different types of reports like brokerage report family report etc Responsibilities Involved in requirement analysis database design coding testing implementation and review Involved in creating data upload modules in python Worked extensively in python and HTML Java Script for front end with flask Created python batches monitor errors in data loading at particular frequency Wrote routines in python update database from flat files and vice versa Created many python scripts and stored procedures avoid job processing failures and use of stale data by systems Wrote Python and Shell scripts automate the verification of the information inserted in the database via the web application Used pyodbc connectivity from Python Sybase Studied the existing python modules and wrote functional specification for migration team Wrote all Sybase and UNIX scripts used in loading of legacy data Handled scheduling of Korn Shell scripts that loaded data from flat files Sybase Worked in data handling using UNIX scripts using KSH BCP Used TSQL tables array structures as a part of Sybase collections Maintained multiple levels of support for all systems batch processing Provided support for job scheduling file transfers and transactional processes Involved with production and quality assurance environment support Environment python flask KSH BCP HTML JavaScript Sybase UNIX Oracle Windows NT Application Developer Prudential Financial Inc Newark NJ February 2006 to December 2007 Fund administration system provides a front back solution of hedge fund administration and accounting services The application supports Calculation of the Net Asset Value including the calculation of the funds income and expense accruals It also does the preparation of semiannual and annual accounts Responsibilities Gathered requirements from the client for front end design and developed software requirements specification Created Receipts module using Sybase Stored procedures and triggers Implemented Payment generation module using Sybase and Python Created many Sybase Stored procedures implement the business logic for back end support Developed python scripts implement the designed functional components like different kind of searches Worked in Python extensively for data extraction Scripted in Python and KSH deployment scripts Designed and implemented a Python script that would open a series of access databases Maintained the python application and supported with bug fixing and trouble shooting Creation of many database packages functions and procedures in Sybase Creating backend modules for order processing using python and UNIX Korn Shell Scripts Created many batch scripts using python and UNIX scripting using Korn Shell and scheduled in Cron Tab Coded and deployed application in test and production environments Deployed changes in packages and code into production environment Coordinated with operations team during load testing and deployment of code in staging and production environments EnvironmentCron Tab python flask HTML JavaScript BCP UNIX Sybase pyodbc Decision Maker Tech Mahindra Limited Pune Maharashtra November 2004 to January 2006 Application Developer The decision maker application developed maintain the employee work effort data and employee time sheet It extensively used by HR and employees Employee can fill up the time sheet and apply for vacation using the application Responsibilities Involved in user requirement analysis design coding testing and review Did code walkthrough with team leadend users on regular basis Involved in designing altering and updating of database Involved in Python based database work using pyodbc Created many Python scripts for data formatvalidation checking Designed and developed many Python modules Created Python batches monitor errors in data loading at particular frequency Created HTML forms and used Python as flask scripting language for online querying and reporting Involved in creating data upload modules in Python Designed and developed Python scripts for sending application based mails Wrote synchronization code using Python and using Python and UNIX shell scripts Wrote routines in Python update database from flat files and vice versa Wrote programs in C Python for parsing trading data and moving it into Sybase Used Python C Sybase TCPIP and UNIX Shell programming for system monitoring Developed and enforce a Sybase SQL coding standard for all packages procedures functions and triggers Maintained Sybase database schema scripts and analyzed complex data Coded and tuned Sybase procedures and SQL throughout the development wherever needed Developed and deployed new search indexes into production Automated reporting procedures used Python Excel OLE objects HTML JavaScript and UNIX Shell scripts Wrote Python UNIX shell scripts automate the SQL Batches Developed many KSH and Autosys based deployment and monitoring scripts Created many database functions and procedures Developed many flask reports using HTML JavaScript and XML Created database triggers and data validations Implemented Sybase advanced queuing techniques interact with trading files Used BCP for data uploading from flat files Wrote Python routines extract data from Sybase tables and create flat data files Used Sybase Stored procedures implement the complex business logic Created user documentation for the application developed Coordinated with the testing team in preparing test plans and test cases Provided handson training for the end users on appropriate screens Environment Python Sybase TSQL flask HTML XML JavaScript KSH Autosys Sun Solaris Service Operation Manager SOM Datamatics Ltd Mumbai Maharashtra January 2003 to October 2004 Junior unix engineer Service operation manager is integrated with the network management system like HPopenview MOM and Remedy It keeps track of all the devices in the organization It is extensively used by system administrators Responsibilities Maintained and enhanced reportgenerating facilities for daily weekly and monthly custom fixed income index reports for internal and external clients Created logical and physical database structure Created many Pythonflask reports Created Python interface scripts for data conversion Wrote Python script manipulate text file as per enduser requirement Worked in numerous automated backend processes written using Python Developed Python scripts implement the designed functional components like different kind of searches Wrote Python scripts grasp financial data feed from website using pyodbc module load into database Wrote Python scripts convert test the UI pages and review them on web server Maintained ErwinSybase schema Developed realtime Bond Index calculator for fixedincome trading Developed maintained shot and longterm fixedincome swap tracking modules Generated stored procedure skeletons from ErwinSybase schema input Performed data and domain entity conversion Create multiple database objects Maintained and developed monitoring scripts and loading data files into database using Python Korn shell and Sybase Utilized data loaders and migration utilities in Python Wrote stored procedures in Sybase Developed many report pages using flask HTML XML and JavaScript for fixed income index reports Provided support and developed scripts using UNIX Shell and Sybase Environment Python Sybase flask HTML XML JavaScript KSH Autosys Sun Solaris Education Bachelor of Engineering in Information technology Government College of Engineering Aurangabad India Aurangabad Maharashtra 2001 Additional Information Technical Skills Programming Language python Sybase Oracle ORACLECC RDBMS Sybase Oracle OracleORACLESqlServer Operating System UNIX SUN Solaris Linux HPUX Windows Modeling tools TOAD Erwin DBArtisan Rapid Sql Reporting Tools SQR reports AXSPoint Reports Tools AXSpointClearcaseStarteamCVS Job Scheduler Autosys Crontab Web Servers Apache",
    "entities": [
        "Oracle Windows NT Application Developer Prudential Financial Inc Newark NJ",
        "PEPSI",
        "P L",
        "AWKSED",
        "Python ORACLE Involved",
        "Created Autosys",
        "SCD Error",
        "SQR Tuned TSql",
        "ECM",
        "UNIX",
        "Implemented Sybase",
        "Python Wrote",
        "the SQL Batches Developed",
        "Delphi",
        "Sybase Developed",
        "Saber Smoke",
        "Query",
        "Wholesale",
        "Autosys Developed",
        "Credit and Risk Management",
        "Creation of many",
        "Pythonflask",
        "ORACLE SQL",
        "XML",
        "Developer Bank Of America Highly",
        "CADRE",
        "Maintained",
        "Shell",
        "ORACLE EXPLAIN Used External Loaders",
        "Responsibilities Created",
        "Automated",
        "KSH",
        "Python",
        "Engineer Aegis Capital Corp New York",
        "Sun Solaris Service Operation",
        "Responsibilities Wrote",
        "Developed",
        "Created HTML",
        "Created Python",
        "NC",
        "UNIX Shell and Sybase Environment",
        "Responsibilities Involved",
        "Djago",
        "SWIFT",
        "SQL Created",
        "Python Excel OLE",
        "ORACLE",
        "Datamatics Ltd",
        "OPICS",
        "ORACLE Python Unix Shell",
        "Sybase TSQL Created Stored Procedures Indexes Triggers Views Scripts",
        "Flask",
        "Worked",
        "JPMorgan",
        "Enterprise Capital Management",
        "Sybase Utilized",
        "Autosys",
        "BCP",
        "Sybase",
        "HTML Implemented",
        "OO Python Worked",
        "MLOAD",
        "Integrated Python",
        "Created",
        "Government College of Engineering Aurangabad",
        "Coded",
        "Coordinated",
        "The P L",
        "XML Created",
        "BDI",
        "ErwinSybase",
        "HTML",
        "Used Sybase TSQL filer",
        "MasterCard",
        "IRR",
        "SQL",
        "DBArtisan Rapid",
        "Saber ORACLEoracle",
        "Created UNIX Korn Shell",
        "UNIX Optimized",
        "Environment Rapid",
        "KSH BCP Used",
        "Created Receipts",
        "Sybase SQL Wrote",
        "AXSpoint",
        "ETL",
        "ORACLE Worked",
        "Responsibilities Gathered",
        "UNIX Shell",
        "JAVA",
        "Sybase SQL Queries Developed Sybase",
        "Bond",
        "Pandas Data",
        "ORACLE SQL Participated",
        "PIM PAG CIO",
        "C Python",
        "JavaScript",
        "Diners",
        "UI",
        "Maharashtra 2001 Additional Information Technical Skills Programming Language",
        "OO Python",
        "TSQL",
        "Developer Bank Of America Charlotte",
        "Sybase SQL",
        "ORACLE Implemented Risk",
        "ECMIt"
    ],
    "experience": "Experience in creating ORACLE database objects such as databases tables views macros stored procedures Well knowledge in production support Excellent logical and analytical skills solve complex problems Good Working experience on python web application development using Django web framework and Flask Good working experience in python NumPy to implement complex business rules Experience in reading and writing xml reports with Python XML modules Work Experience PythonORACLE Developer Bank Of America Charlotte NC October 2013 to Present Saber 2 is an application built for the purpose of calculating the firms Risk Weighted Assets RWA for multiple products across several line of business work streams Retail lending and Wholesale channels for example It is meant to handle calculating the regulatory capital requirements for supported products and supply necessary inputs into the economic capital functions used by Enterprise Capital Management ECMIt also endeavors to support other requirements from ECM and their stakeholders more easily by providing a modular platform that can be leveraged in pieces This modular capability will also allow technology to deliver enhancements and new solutions faster than is currently possible with the existing platform Responsibilities Involved in requirement analysis database design coding testing implementation and review for re hosting Worked on saber archive process to backup the data files and maintain the space on the unix servers Developed and automated the Python jobs for Saber to Saber 2 migration Worked on Parsing various format of files like XML using Python XML modules Interacting with data modeling and ETL teams to convert logical data models into ORACLE physical data models and recommending implementing data type changes and primary index by enhancing ORACLE best practices Enhanced SQL performance tuning by collectingrefreshing statistics and enhancing the proper primary index and introducing PPI and MLPPIs Worked on migrating config files to centralized xml config to be used by Python framerwork Worked on writing Python wrappers to streamline the saber environment Worked on Saber Smoke test report generation using Python and XML configs Worked extensively on creating python modules for Saber ORACLEoracle calculator framework Worked on creating downstream feeds in XML format Created saber config review pages using HTML and python Django and flask libraries Worked on implementing saber calculator logic using python advanced libraries like NumPy Worked on implementing OO Python standards to rewrite the remote framework Worked on development of db refresh project for weekly backup of ORACLE Implemented Risk weighted wholesale calculator login using Python NumPy Worked on SaberSaber 2 health check report jobs using python shell scripts Worked on development of config review process Developed and implemented Web based Saber control Panel using Flask and Djago libraries Worked on Isolated environment builds for business testing Worked on ORACLE data lineage process to map source to target db table and column mappings using OO Python Worked on automating the weekly data archive jobs using autosys Worked on troubleshooting environment relates issues during monthly SDLC cycle Provided support for job scheduling file transfers and transactional processes Worked on migration of CRM job from JAVA to Python using NumPy Worked on modifying the job reset option to kill the backend processes in unix and windows Environment python KSH RMATLAB BCP OO Python UNIX Windows NT Django Flask Numpy ORACLE Developer First Data Louisville KY April 2012 to September 2013 CADRE is the back office exceptions processing application that integrates imaging and artificial intelligence to assist dispute analysis in resolving the disputes related to the credit card transactions To efficiently process disputes CADRE depends on receiving and sending files to major credit card associations VISA MasterCard and Diners and our supported merchants Expedites workflow and turnaround time for resolution of exception items Responsibilities Involved in requirement analysis database design coding testing implementation and review for re hosting Worked on creating centralized email system for CADRE backend emails using python Wrote routines in python update database from XML files and vice versa Developed Sybase Stored procedures for the back end processing of the proposed data base design Automated console with scaling in ORACLE SQL Participated in meetings to gather and analyze the requirements for new applications data model changes and made recommendations from ORACLE database point Created Python batches monitor errors in data loading at particular frequency Coded and deployed application in test and production environments Worked on CADRE code migration from Delphi to Python using pyhon Django javascript and HTML Implemented complex business rules for credit card reversals using python Pandas Data structure library Compiled the c code in 64 bit for the re hosting of the CADRE app Worked extensively on fixing the backend code issues post reshot Worked on overnight batch support post re host Developed performance utilization charts optimized and tuned SQL and designed physical databases Assisted developers with ORACLE load utilities and SQL Created BTEQ scripts to extract data from warehouse for downstream applications Extensively worked on ORACLE performance optimization and brought down the queries to seconds or minutes from spool out and never ending queries by using various ORACLE optimization strategies Used the Visual explain to analyze the Query plans Designed and developed Python scripts for sending application based mails Wrote XML synchronization code using Python and UNIX shell scripts Worked editing testing and deploying shell and python scripts for migration from ftp to Secure Maintained multiple levels of support for all systems batch processing Provided support for job scheduling XML file transfers and transactional processes Involved with production and quality assurance environment support Environment python KSH RMATLAB BCP OO Python UNIX Windows NT Django Flask Numpy Python Developer Liberty Mutual Dover NH March 2011 to February 2012 LUNAR is a life insurance application used maintain the new business applications for individual life insurance Lunar is used by the business receive applications for new policies apply money the policy as per the product and Issue the policy policy holders Responsibilities Involved in requirement analysis database design coding testing implementation and review Involved in creating data upload modules in python Worked extensively in python and HTML Java Script for front end with flask Created python batches monitor errors in data loading at particular frequency Wrote routines in python update database from XML files and vice versa Created many python scripts and stored procedures avoid job processing failures and use of stale data by systems Wrote Python and Shell scripts automate the verification of the information inserted in the database via the web application Used pyodbc connectivity from Python ORACLE Involved in loading of data into ORACLE from legacy systems and flat files using complex MLOAD scripts and Fast Load Studied the existing python modules and wrote functional specification for migration team Wrote all BTEQ and UNIX scripts used in loading of legacy data Enterprise wide templates were created for handling SCD Error handling etc Handled scheduling of Korn Shell scripts that loaded data from flat files ORACLE Worked in data handling using UNIX scripts using mload and fast export Involved in writing ORACLE SQL bulk programs and in Performance tuning activities for ORACLE SQL statements using ORACLE EXPLAIN Used External Loaders like Multi Load T Pump and Fast Load to load data into ORACLE database Involved in analysis development testing implementation and deployment Involved writing BTEQ scripts for validation testing of the sessions data integrity between source and target databases and for report generation Maintained multiple levels of support for all systems batch processing Provided support for job scheduling file transfers and transactional processes Involved with production and quality assurance environment support Environment python flask KSH BTEQ MLOAD HTML ORACLEJavaScript SQL PLSQL OO Python Sybase UNIX Windows NT Python DeveloperSupport Pepsi Co Somers NY October 2010 to February 2011 CETS is a supply chain management system used by customer service PEPSI vendors PEPSI accounting CETS keep track of all the PEPSI equipment inventory It is used take orders from clients for the Installation of the vending machines Responsibilities Wrote python programming error check the data and import it into the Sybase database Created many batches using pythonKSH for data retrieval and loading from other applications and databases Involved in python based database work using pyodbc Integrated Sybase stored procedures with Python created interface jobs for move orders Used Autosys version control tool for concurrent and simultaneous operations Scheduled Sybase stored procedures using Autosys Developed automated registration process using pythonflask scripting Developed mail based distribution module using python Created server side Sybase Stored Procedures for implementing complex business logic Developed Reports using SQR Tuned TSql queries for improve the performance Involved in performance tuning of Sybase stored procedures for different modules of CETS Open Orders Paper Install etc Involved in performance tuning of CETS ARCHIVE stored procedures Created Autosys jobs as per requirement maintained the existing scripts and administrated the Autosys entries Created and maintained the stored procedures tables and queries for the application using Sybase TSQL Created Stored Procedures Indexes Triggers Views Scripts and reports in Sybase SQL Wrote stored procedures in TSQL under Sybase facilitate database querying Monitored concurrent jobs of Sybase SQL applications Created UNIX Korn Shell batches for data download and upload Used UNIX shell scripting using hash tables and array index listing for fast retrieval Worked on bug fixing and supported the production applications Provided support on Starteam version control Managed and supported the outages during urgency Ensured effective and timely resolution and communication the user during the production support Environment Rapid SQL python KSH pyodbc Sybase StarTeam Nexaweb Autosys UNIXAIXLINUX Oracle10 g Python DeveloperSupport JPMorgan Chase Newark DE April 2010 to October 2010 OPICS performs accounting and settlements of trading activity for a number of lines of businesses including PIM PAG CIO Max Recovery Tax Liens and Credit and Risk Management OPICS is a third party vendor application integrated with JPMorgan mainframe There are a number of lines of businesses that feed OPICS The trades are either sent in flat files or directly inserted into OPICS interface tables The P L and settlement operation is performed internally by OPICS All the P L statements Brokers statements transaction reports and reconciliation reports generated by OPICS are stored in a database repository These reports are retrieved by AXSpoint application Responsibilities Created python scripts for data migration Designed and developed many python modules Developed many python scripts for server side data processing Coded many python routines for data retrieval migration and manipulating Wrote numerous python modules for background processing Used Clearcase for checkin and checkout Used Clearcase team synchronization Developed numerous scripts test different functional aspects of Sybase Stored Procedures Designed developed and modified Python scripts using the package modules Developed Sybase Stored Procedures extract data from database and load it into the database Involved in performance turning for Sybase queries Developed Sybase Stored procedures for the back end processing of the proposed data base design Used Autosys for the batch scheduling in UNIX Optimized the performance of queries with modification in Sybase SQL Queries Developed Sybase stored procedures for OPICS ARCHIVE process Automated console with scaling in ISQL Used TSQL tables Array Structures in Sybase Designed and developed Sybase TSQL scripts for data importexport Involved in performance tuning of Sybase stored procedures and triggers support the next generation of SWIFT messages Integrated Python with Sybase stored procedures using modules like BDI create downstream feeds for OPICS Used advanced Sybase TSQL techniques like cursors for data retrieval Used Sybase TSQL filer and load the data from other production databases Used Sybase TSQL scripts for dynamic procedures during package creation Fixed many UNIX KSH scripts for issues related batch uploading Provided 24x7 supports for application deployment Analyzed production issues ensure system availability Supported compliance all regulatory and audit requirements EnvironmentOracle TSQL Sybase python KSH Autosys Corn Tab flask Python HTML XML UNIX Clearcase Unix Engineer Aegis Capital Corp New York NY January 2008 to March 2010 The mutual fund distribution system is a complete and efficient end end solution for distribution organization This system is mainly concerned about integrating trades for registrar and processing the transactions The system also provides calculations like brokerage calculation process P L calculation Internal rate of return IRR calculation etc The user can see different types of reports like brokerage report family report etc Responsibilities Involved in requirement analysis database design coding testing implementation and review Involved in creating data upload modules in python Worked extensively in python and HTML Java Script for front end with flask Created python batches monitor errors in data loading at particular frequency Wrote routines in python update database from flat files and vice versa Created many python scripts and stored procedures avoid job processing failures and use of stale data by systems Wrote Python and Shell scripts automate the verification of the information inserted in the database via the web application Used pyodbc connectivity from Python Sybase Studied the existing python modules and wrote functional specification for migration team Wrote all Sybase and UNIX scripts used in loading of legacy data Handled scheduling of Korn Shell scripts that loaded data from flat files Sybase Worked in data handling using UNIX scripts using KSH BCP Used TSQL tables array structures as a part of Sybase collections Maintained multiple levels of support for all systems batch processing Provided support for job scheduling file transfers and transactional processes Involved with production and quality assurance environment support Environment python flask KSH BCP HTML JavaScript Sybase UNIX Oracle Windows NT Application Developer Prudential Financial Inc Newark NJ February 2006 to December 2007 Fund administration system provides a front back solution of hedge fund administration and accounting services The application supports Calculation of the Net Asset Value including the calculation of the funds income and expense accruals It also does the preparation of semiannual and annual accounts Responsibilities Gathered requirements from the client for front end design and developed software requirements specification Created Receipts module using Sybase Stored procedures and triggers Implemented Payment generation module using Sybase and Python Created many Sybase Stored procedures implement the business logic for back end support Developed python scripts implement the designed functional components like different kind of searches Worked in Python extensively for data extraction Scripted in Python and KSH deployment scripts Designed and implemented a Python script that would open a series of access databases Maintained the python application and supported with bug fixing and trouble shooting Creation of many database packages functions and procedures in Sybase Creating backend modules for order processing using python and UNIX Korn Shell Scripts Created many batch scripts using python and UNIX scripting using Korn Shell and scheduled in Cron Tab Coded and deployed application in test and production environments Deployed changes in packages and code into production environment Coordinated with operations team during load testing and deployment of code in staging and production environments EnvironmentCron Tab python flask HTML JavaScript BCP UNIX Sybase pyodbc Decision Maker Tech Mahindra Limited Pune Maharashtra November 2004 to January 2006 Application Developer The decision maker application developed maintain the employee work effort data and employee time sheet It extensively used by HR and employees Employee can fill up the time sheet and apply for vacation using the application Responsibilities Involved in user requirement analysis design coding testing and review Did code walkthrough with team leadend users on regular basis Involved in designing altering and updating of database Involved in Python based database work using pyodbc Created many Python scripts for data formatvalidation checking Designed and developed many Python modules Created Python batches monitor errors in data loading at particular frequency Created HTML forms and used Python as flask scripting language for online querying and reporting Involved in creating data upload modules in Python Designed and developed Python scripts for sending application based mails Wrote synchronization code using Python and using Python and UNIX shell scripts Wrote routines in Python update database from flat files and vice versa Wrote programs in C Python for parsing trading data and moving it into Sybase Used Python C Sybase TCPIP and UNIX Shell programming for system monitoring Developed and enforce a Sybase SQL coding standard for all packages procedures functions and triggers Maintained Sybase database schema scripts and analyzed complex data Coded and tuned Sybase procedures and SQL throughout the development wherever needed Developed and deployed new search indexes into production Automated reporting procedures used Python Excel OLE objects HTML JavaScript and UNIX Shell scripts Wrote Python UNIX shell scripts automate the SQL Batches Developed many KSH and Autosys based deployment and monitoring scripts Created many database functions and procedures Developed many flask reports using HTML JavaScript and XML Created database triggers and data validations Implemented Sybase advanced queuing techniques interact with trading files Used BCP for data uploading from flat files Wrote Python routines extract data from Sybase tables and create flat data files Used Sybase Stored procedures implement the complex business logic Created user documentation for the application developed Coordinated with the testing team in preparing test plans and test cases Provided handson training for the end users on appropriate screens Environment Python Sybase TSQL flask HTML XML JavaScript KSH Autosys Sun Solaris Service Operation Manager SOM Datamatics Ltd Mumbai Maharashtra January 2003 to October 2004 Junior unix engineer Service operation manager is integrated with the network management system like HPopenview MOM and Remedy It keeps track of all the devices in the organization It is extensively used by system administrators Responsibilities Maintained and enhanced reportgenerating facilities for daily weekly and monthly custom fixed income index reports for internal and external clients Created logical and physical database structure Created many Pythonflask reports Created Python interface scripts for data conversion Wrote Python script manipulate text file as per enduser requirement Worked in numerous automated backend processes written using Python Developed Python scripts implement the designed functional components like different kind of searches Wrote Python scripts grasp financial data feed from website using pyodbc module load into database Wrote Python scripts convert test the UI pages and review them on web server Maintained ErwinSybase schema Developed realtime Bond Index calculator for fixedincome trading Developed maintained shot and longterm fixedincome swap tracking modules Generated stored procedure skeletons from ErwinSybase schema input Performed data and domain entity conversion Create multiple database objects Maintained and developed monitoring scripts and loading data files into database using Python Korn shell and Sybase Utilized data loaders and migration utilities in Python Wrote stored procedures in Sybase Developed many report pages using flask HTML XML and JavaScript for fixed income index reports Provided support and developed scripts using UNIX Shell and Sybase Environment Python Sybase flask HTML XML JavaScript KSH Autosys Sun Solaris Education Bachelor of Engineering in Information technology Government College of Engineering Aurangabad India Aurangabad Maharashtra 2001 Additional Information Technical Skills Programming Language python Sybase Oracle ORACLECC RDBMS Sybase Oracle OracleORACLESqlServer Operating System UNIX SUN Solaris Linux HPUX Windows Modeling tools TOAD Erwin DBArtisan Rapid Sql Reporting Tools SQR reports AXSPoint Reports Tools AXSpointClearcaseStarteamCVS Job Scheduler Autosys Crontab Web Servers Apache",
    "extracted_keywords": [
        "Developer",
        "span",
        "span",
        "lDeveloperspan",
        "Developer",
        "Bank",
        "America",
        "software",
        "years",
        "experience",
        "working",
        "experience",
        "ORACLE",
        "Python",
        "Unix",
        "Shell",
        "programming",
        "UNIX",
        "Korn",
        "shell",
        "Good",
        "Working",
        "experience",
        "UNIX",
        "Experience",
        "database",
        "objects",
        "databases",
        "tables",
        "views",
        "macros",
        "procedures",
        "knowledge",
        "production",
        "support",
        "Excellent",
        "skills",
        "problems",
        "Good",
        "Working",
        "experience",
        "python",
        "web",
        "application",
        "development",
        "Django",
        "web",
        "framework",
        "Flask",
        "Good",
        "working",
        "experience",
        "NumPy",
        "business",
        "rules",
        "Experience",
        "reading",
        "xml",
        "reports",
        "Python",
        "XML",
        "modules",
        "Work",
        "Experience",
        "Developer",
        "Bank",
        "America",
        "Charlotte",
        "NC",
        "October",
        "Present",
        "Saber",
        "application",
        "purpose",
        "firms",
        "Risk",
        "Weighted",
        "Assets",
        "RWA",
        "products",
        "line",
        "business",
        "work",
        "lending",
        "channels",
        "example",
        "capital",
        "requirements",
        "products",
        "inputs",
        "capital",
        "functions",
        "Enterprise",
        "Capital",
        "Management",
        "ECMIt",
        "requirements",
        "ECM",
        "stakeholders",
        "platform",
        "pieces",
        "capability",
        "technology",
        "enhancements",
        "solutions",
        "platform",
        "Responsibilities",
        "requirement",
        "analysis",
        "database",
        "design",
        "testing",
        "implementation",
        "review",
        "re",
        "Worked",
        "saber",
        "archive",
        "process",
        "data",
        "files",
        "space",
        "servers",
        "Python",
        "jobs",
        "Saber",
        "Saber",
        "migration",
        "format",
        "files",
        "XML",
        "Python",
        "XML",
        "modules",
        "data",
        "modeling",
        "ETL",
        "teams",
        "data",
        "models",
        "data",
        "models",
        "data",
        "type",
        "changes",
        "index",
        "ORACLE",
        "practices",
        "SQL",
        "performance",
        "statistics",
        "index",
        "PPI",
        "MLPPIs",
        "config",
        "files",
        "xml",
        "config",
        "Python",
        "framerwork",
        "Python",
        "wrappers",
        "saber",
        "environment",
        "Saber",
        "Smoke",
        "test",
        "report",
        "generation",
        "Python",
        "XML",
        "configs",
        "modules",
        "Saber",
        "ORACLEoracle",
        "calculator",
        "framework",
        "feeds",
        "XML",
        "format",
        "saber",
        "config",
        "review",
        "pages",
        "HTML",
        "Django",
        "flask",
        "libraries",
        "saber",
        "calculator",
        "logic",
        "python",
        "libraries",
        "NumPy",
        "OO",
        "Python",
        "standards",
        "framework",
        "development",
        "db",
        "project",
        "backup",
        "ORACLE",
        "Implemented",
        "Risk",
        "calculator",
        "login",
        "Python",
        "NumPy",
        "Worked",
        "SaberSaber",
        "health",
        "check",
        "report",
        "jobs",
        "python",
        "shell",
        "scripts",
        "development",
        "config",
        "review",
        "process",
        "Web",
        "Saber",
        "control",
        "Panel",
        "Flask",
        "Djago",
        "environment",
        "business",
        "testing",
        "data",
        "lineage",
        "process",
        "source",
        "db",
        "table",
        "column",
        "mappings",
        "OO",
        "Python",
        "data",
        "jobs",
        "autosys",
        "Worked",
        "troubleshooting",
        "environment",
        "issues",
        "SDLC",
        "cycle",
        "support",
        "job",
        "scheduling",
        "file",
        "transfers",
        "processes",
        "migration",
        "CRM",
        "job",
        "JAVA",
        "Python",
        "NumPy",
        "Worked",
        "job",
        "reset",
        "option",
        "processes",
        "unix",
        "windows",
        "Environment",
        "python",
        "KSH",
        "RMATLAB",
        "BCP",
        "OO",
        "Python",
        "UNIX",
        "Windows",
        "NT",
        "Django",
        "Flask",
        "Numpy",
        "ORACLE",
        "Developer",
        "First",
        "Data",
        "Louisville",
        "KY",
        "April",
        "September",
        "CADRE",
        "office",
        "exceptions",
        "processing",
        "application",
        "imaging",
        "intelligence",
        "dispute",
        "analysis",
        "disputes",
        "credit",
        "card",
        "transactions",
        "disputes",
        "CADRE",
        "files",
        "credit",
        "card",
        "associations",
        "VISA",
        "MasterCard",
        "Diners",
        "merchants",
        "Expedites",
        "turnaround",
        "time",
        "resolution",
        "exception",
        "items",
        "Responsibilities",
        "requirement",
        "analysis",
        "database",
        "design",
        "testing",
        "implementation",
        "review",
        "re",
        "Worked",
        "email",
        "system",
        "CADRE",
        "emails",
        "python",
        "Wrote",
        "routines",
        "python",
        "update",
        "database",
        "XML",
        "files",
        "vice",
        "versa",
        "Developed",
        "Sybase",
        "procedures",
        "end",
        "processing",
        "data",
        "base",
        "design",
        "console",
        "ORACLE",
        "SQL",
        "meetings",
        "requirements",
        "applications",
        "data",
        "model",
        "changes",
        "recommendations",
        "ORACLE",
        "database",
        "point",
        "Python",
        "batches",
        "errors",
        "data",
        "frequency",
        "application",
        "test",
        "production",
        "environments",
        "CADRE",
        "code",
        "migration",
        "Delphi",
        "Python",
        "pyhon",
        "Django",
        "javascript",
        "HTML",
        "business",
        "rules",
        "credit",
        "card",
        "reversals",
        "python",
        "Pandas",
        "Data",
        "structure",
        "library",
        "c",
        "code",
        "bit",
        "re",
        "CADRE",
        "app",
        "code",
        "issues",
        "reshot",
        "batch",
        "support",
        "post",
        "performance",
        "utilization",
        "charts",
        "SQL",
        "databases",
        "developers",
        "ORACLE",
        "load",
        "utilities",
        "SQL",
        "BTEQ",
        "scripts",
        "data",
        "warehouse",
        "applications",
        "performance",
        "optimization",
        "queries",
        "seconds",
        "minutes",
        "spool",
        "queries",
        "optimization",
        "strategies",
        "Visual",
        "Query",
        "plans",
        "Python",
        "scripts",
        "application",
        "mails",
        "Wrote",
        "XML",
        "synchronization",
        "code",
        "Python",
        "UNIX",
        "shell",
        "scripts",
        "testing",
        "shell",
        "scripts",
        "migration",
        "ftp",
        "levels",
        "support",
        "systems",
        "batch",
        "processing",
        "support",
        "job",
        "scheduling",
        "XML",
        "file",
        "transfers",
        "processes",
        "production",
        "quality",
        "assurance",
        "environment",
        "support",
        "Environment",
        "python",
        "KSH",
        "RMATLAB",
        "BCP",
        "OO",
        "Python",
        "UNIX",
        "Windows",
        "NT",
        "Django",
        "Flask",
        "Numpy",
        "Python",
        "Developer",
        "Liberty",
        "Mutual",
        "Dover",
        "NH",
        "March",
        "February",
        "LUNAR",
        "life",
        "insurance",
        "application",
        "business",
        "applications",
        "life",
        "insurance",
        "Lunar",
        "business",
        "applications",
        "policies",
        "money",
        "policy",
        "product",
        "policy",
        "policy",
        "holders",
        "Responsibilities",
        "requirement",
        "analysis",
        "database",
        "design",
        "testing",
        "implementation",
        "review",
        "data",
        "upload",
        "modules",
        "python",
        "python",
        "HTML",
        "Java",
        "Script",
        "end",
        "flask",
        "python",
        "batches",
        "errors",
        "data",
        "frequency",
        "Wrote",
        "routines",
        "python",
        "update",
        "database",
        "XML",
        "files",
        "vice",
        "versa",
        "python",
        "scripts",
        "procedures",
        "job",
        "processing",
        "failures",
        "use",
        "data",
        "systems",
        "Wrote",
        "Python",
        "Shell",
        "scripts",
        "verification",
        "information",
        "database",
        "web",
        "application",
        "pyodbc",
        "connectivity",
        "Python",
        "ORACLE",
        "loading",
        "data",
        "ORACLE",
        "legacy",
        "systems",
        "files",
        "MLOAD",
        "scripts",
        "Fast",
        "Load",
        "python",
        "modules",
        "specification",
        "migration",
        "team",
        "BTEQ",
        "UNIX",
        "scripts",
        "loading",
        "legacy",
        "data",
        "Enterprise",
        "templates",
        "SCD",
        "Error",
        "scheduling",
        "Korn",
        "Shell",
        "scripts",
        "data",
        "files",
        "ORACLE",
        "Worked",
        "data",
        "handling",
        "UNIX",
        "scripts",
        "mload",
        "export",
        "SQL",
        "bulk",
        "programs",
        "Performance",
        "activities",
        "SQL",
        "statements",
        "ORACLE",
        "EXPLAIN",
        "External",
        "Loaders",
        "Multi",
        "Load",
        "T",
        "Pump",
        "Fast",
        "Load",
        "data",
        "database",
        "analysis",
        "development",
        "testing",
        "implementation",
        "deployment",
        "BTEQ",
        "scripts",
        "validation",
        "testing",
        "sessions",
        "data",
        "integrity",
        "source",
        "databases",
        "report",
        "generation",
        "levels",
        "support",
        "systems",
        "batch",
        "processing",
        "support",
        "job",
        "scheduling",
        "file",
        "transfers",
        "processes",
        "production",
        "quality",
        "assurance",
        "environment",
        "support",
        "Environment",
        "flask",
        "KSH",
        "BTEQ",
        "MLOAD",
        "HTML",
        "ORACLEJavaScript",
        "SQL",
        "PLSQL",
        "OO",
        "Python",
        "Sybase",
        "UNIX",
        "Windows",
        "NT",
        "Python",
        "DeveloperSupport",
        "Pepsi",
        "Co",
        "Somers",
        "NY",
        "October",
        "February",
        "CETS",
        "supply",
        "chain",
        "management",
        "system",
        "customer",
        "service",
        "PEPSI",
        "vendors",
        "PEPSI",
        "accounting",
        "CETS",
        "track",
        "PEPSI",
        "equipment",
        "inventory",
        "orders",
        "clients",
        "Installation",
        "machines",
        "Responsibilities",
        "python",
        "programming",
        "error",
        "data",
        "Sybase",
        "database",
        "batches",
        "pythonKSH",
        "data",
        "retrieval",
        "loading",
        "applications",
        "databases",
        "python",
        "database",
        "work",
        "pyodbc",
        "Integrated",
        "Sybase",
        "procedures",
        "Python",
        "interface",
        "jobs",
        "move",
        "orders",
        "Autosys",
        "version",
        "control",
        "tool",
        "operations",
        "Sybase",
        "procedures",
        "Autosys",
        "Developed",
        "registration",
        "process",
        "pythonflask",
        "mail",
        "distribution",
        "module",
        "python",
        "server",
        "side",
        "Sybase",
        "Stored",
        "Procedures",
        "business",
        "logic",
        "Developed",
        "Reports",
        "SQR",
        "Tuned",
        "performance",
        "performance",
        "tuning",
        "Sybase",
        "procedures",
        "modules",
        "CETS",
        "Open",
        "Orders",
        "Paper",
        "Install",
        "performance",
        "tuning",
        "CETS",
        "ARCHIVE",
        "procedures",
        "Autosys",
        "jobs",
        "requirement",
        "scripts",
        "Autosys",
        "entries",
        "procedures",
        "tables",
        "queries",
        "application",
        "Sybase",
        "TSQL",
        "Stored",
        "Procedures",
        "Indexes",
        "Triggers",
        "Views",
        "Scripts",
        "reports",
        "Sybase",
        "SQL",
        "Wrote",
        "procedures",
        "TSQL",
        "Sybase",
        "facilitate",
        "database",
        "jobs",
        "Sybase",
        "SQL",
        "applications",
        "UNIX",
        "Korn",
        "Shell",
        "batches",
        "data",
        "download",
        "UNIX",
        "shell",
        "scripting",
        "hash",
        "tables",
        "array",
        "index",
        "retrieval",
        "bug",
        "fixing",
        "production",
        "applications",
        "support",
        "Starteam",
        "version",
        "control",
        "Managed",
        "outages",
        "urgency",
        "resolution",
        "communication",
        "user",
        "production",
        "support",
        "Environment",
        "Rapid",
        "SQL",
        "KSH",
        "pyodbc",
        "Sybase",
        "StarTeam",
        "Nexaweb",
        "Autosys",
        "UNIXAIXLINUX",
        "Oracle10",
        "g",
        "Python",
        "DeveloperSupport",
        "JPMorgan",
        "Chase",
        "Newark",
        "DE",
        "April",
        "October",
        "OPICS",
        "settlements",
        "trading",
        "activity",
        "number",
        "lines",
        "businesses",
        "PIM",
        "PAG",
        "CIO",
        "Max",
        "Recovery",
        "Tax",
        "Liens",
        "Credit",
        "Risk",
        "Management",
        "OPICS",
        "party",
        "vendor",
        "application",
        "JPMorgan",
        "mainframe",
        "number",
        "lines",
        "businesses",
        "OPICS",
        "trades",
        "files",
        "OPICS",
        "interface",
        "P",
        "L",
        "settlement",
        "operation",
        "OPICS",
        "P",
        "L",
        "Brokers",
        "transaction",
        "reports",
        "reconciliation",
        "reports",
        "OPICS",
        "database",
        "repository",
        "reports",
        "AXSpoint",
        "application",
        "Responsibilities",
        "python",
        "scripts",
        "data",
        "migration",
        "python",
        "modules",
        "python",
        "scripts",
        "server",
        "side",
        "data",
        "processing",
        "routines",
        "data",
        "retrieval",
        "migration",
        "Wrote",
        "python",
        "modules",
        "background",
        "processing",
        "Clearcase",
        "checkin",
        "Clearcase",
        "team",
        "synchronization",
        "scripts",
        "aspects",
        "Sybase",
        "Stored",
        "Procedures",
        "Python",
        "scripts",
        "package",
        "modules",
        "Developed",
        "Sybase",
        "Stored",
        "Procedures",
        "data",
        "database",
        "database",
        "performance",
        "Sybase",
        "Developed",
        "Sybase",
        "procedures",
        "end",
        "processing",
        "data",
        "base",
        "design",
        "Autosys",
        "batch",
        "scheduling",
        "UNIX",
        "performance",
        "queries",
        "modification",
        "Sybase",
        "SQL",
        "Queries",
        "Developed",
        "Sybase",
        "procedures",
        "OPICS",
        "ARCHIVE",
        "process",
        "Automated",
        "console",
        "ISQL",
        "TSQL",
        "tables",
        "Array",
        "Structures",
        "Sybase",
        "Designed",
        "Sybase",
        "TSQL",
        "scripts",
        "data",
        "importexport",
        "performance",
        "tuning",
        "Sybase",
        "procedures",
        "triggers",
        "generation",
        "SWIFT",
        "messages",
        "Integrated",
        "Python",
        "Sybase",
        "procedures",
        "modules",
        "BDI",
        "feeds",
        "OPICS",
        "Sybase",
        "TSQL",
        "techniques",
        "cursors",
        "data",
        "retrieval",
        "Used",
        "Sybase",
        "TSQL",
        "filer",
        "data",
        "production",
        "Sybase",
        "TSQL",
        "scripts",
        "procedures",
        "package",
        "creation",
        "UNIX",
        "KSH",
        "scripts",
        "issues",
        "batch",
        "uploading",
        "supports",
        "application",
        "deployment",
        "production",
        "issues",
        "system",
        "availability",
        "compliance",
        "audit",
        "requirements",
        "EnvironmentOracle",
        "TSQL",
        "Sybase",
        "KSH",
        "Autosys",
        "Corn",
        "Tab",
        "flask",
        "Python",
        "HTML",
        "XML",
        "UNIX",
        "Clearcase",
        "Unix",
        "Engineer",
        "Aegis",
        "Capital",
        "Corp",
        "New",
        "York",
        "NY",
        "January",
        "March",
        "fund",
        "distribution",
        "system",
        "end",
        "end",
        "solution",
        "distribution",
        "organization",
        "system",
        "trades",
        "registrar",
        "transactions",
        "system",
        "calculations",
        "brokerage",
        "calculation",
        "process",
        "P",
        "L",
        "calculation",
        "rate",
        "return",
        "IRR",
        "calculation",
        "user",
        "types",
        "reports",
        "brokerage",
        "report",
        "family",
        "report",
        "Responsibilities",
        "requirement",
        "analysis",
        "database",
        "design",
        "testing",
        "implementation",
        "review",
        "data",
        "upload",
        "modules",
        "python",
        "python",
        "HTML",
        "Java",
        "Script",
        "end",
        "flask",
        "python",
        "batches",
        "errors",
        "data",
        "frequency",
        "Wrote",
        "routines",
        "python",
        "update",
        "database",
        "files",
        "vice",
        "versa",
        "python",
        "scripts",
        "procedures",
        "job",
        "processing",
        "failures",
        "use",
        "data",
        "systems",
        "Wrote",
        "Python",
        "Shell",
        "scripts",
        "verification",
        "information",
        "database",
        "web",
        "application",
        "pyodbc",
        "connectivity",
        "Python",
        "Sybase",
        "python",
        "modules",
        "specification",
        "migration",
        "team",
        "Sybase",
        "UNIX",
        "scripts",
        "loading",
        "legacy",
        "data",
        "scheduling",
        "Korn",
        "Shell",
        "scripts",
        "data",
        "files",
        "Sybase",
        "data",
        "handling",
        "UNIX",
        "scripts",
        "KSH",
        "BCP",
        "TSQL",
        "tables",
        "array",
        "structures",
        "part",
        "Sybase",
        "collections",
        "levels",
        "support",
        "systems",
        "batch",
        "processing",
        "support",
        "job",
        "scheduling",
        "file",
        "transfers",
        "processes",
        "production",
        "quality",
        "assurance",
        "environment",
        "support",
        "Environment",
        "flask",
        "KSH",
        "BCP",
        "HTML",
        "JavaScript",
        "Sybase",
        "UNIX",
        "Oracle",
        "Windows",
        "NT",
        "Application",
        "Developer",
        "Prudential",
        "Financial",
        "Inc",
        "Newark",
        "NJ",
        "February",
        "December",
        "Fund",
        "administration",
        "system",
        "back",
        "solution",
        "hedge",
        "fund",
        "administration",
        "accounting",
        "services",
        "application",
        "Calculation",
        "Net",
        "Asset",
        "Value",
        "calculation",
        "funds",
        "income",
        "expense",
        "accruals",
        "preparation",
        "accounts",
        "Responsibilities",
        "Gathered",
        "requirements",
        "client",
        "end",
        "design",
        "software",
        "requirements",
        "specification",
        "Created",
        "Receipts",
        "module",
        "Sybase",
        "procedures",
        "Payment",
        "generation",
        "module",
        "Sybase",
        "Python",
        "Sybase",
        "procedures",
        "business",
        "logic",
        "end",
        "support",
        "python",
        "scripts",
        "components",
        "kind",
        "searches",
        "Python",
        "data",
        "extraction",
        "Python",
        "KSH",
        "deployment",
        "scripts",
        "Python",
        "script",
        "series",
        "access",
        "databases",
        "application",
        "bug",
        "fixing",
        "trouble",
        "Creation",
        "database",
        "packages",
        "functions",
        "procedures",
        "Sybase",
        "modules",
        "order",
        "processing",
        "python",
        "UNIX",
        "Korn",
        "Shell",
        "Scripts",
        "batch",
        "scripts",
        "python",
        "UNIX",
        "scripting",
        "Korn",
        "Shell",
        "Cron",
        "Tab",
        "application",
        "test",
        "production",
        "environments",
        "changes",
        "packages",
        "code",
        "production",
        "environment",
        "operations",
        "team",
        "load",
        "testing",
        "deployment",
        "code",
        "staging",
        "production",
        "environments",
        "EnvironmentCron",
        "Tab",
        "python",
        "flask",
        "HTML",
        "JavaScript",
        "BCP",
        "UNIX",
        "Sybase",
        "pyodbc",
        "Decision",
        "Maker",
        "Tech",
        "Mahindra",
        "Limited",
        "Pune",
        "Maharashtra",
        "November",
        "January",
        "Application",
        "Developer",
        "decision",
        "maker",
        "application",
        "employee",
        "work",
        "effort",
        "data",
        "employee",
        "time",
        "sheet",
        "HR",
        "employees",
        "Employee",
        "time",
        "sheet",
        "vacation",
        "application",
        "Responsibilities",
        "user",
        "requirement",
        "analysis",
        "design",
        "testing",
        "review",
        "code",
        "walkthrough",
        "team",
        "leadend",
        "users",
        "basis",
        "altering",
        "updating",
        "database",
        "Python",
        "database",
        "work",
        "pyodbc",
        "Python",
        "scripts",
        "data",
        "formatvalidation",
        "Python",
        "modules",
        "Python",
        "batches",
        "errors",
        "data",
        "frequency",
        "Created",
        "HTML",
        "forms",
        "Python",
        "flask",
        "language",
        "data",
        "upload",
        "modules",
        "Python",
        "Python",
        "scripts",
        "application",
        "mails",
        "Wrote",
        "synchronization",
        "code",
        "Python",
        "Python",
        "UNIX",
        "shell",
        "scripts",
        "Wrote",
        "routines",
        "Python",
        "update",
        "database",
        "files",
        "vice",
        "versa",
        "Wrote",
        "programs",
        "C",
        "Python",
        "trading",
        "data",
        "Sybase",
        "Python",
        "C",
        "Sybase",
        "TCPIP",
        "UNIX",
        "Shell",
        "programming",
        "system",
        "Developed",
        "Sybase",
        "SQL",
        "standard",
        "packages",
        "procedures",
        "functions",
        "triggers",
        "Sybase",
        "database",
        "schema",
        "scripts",
        "data",
        "Sybase",
        "procedures",
        "SQL",
        "development",
        "Developed",
        "search",
        "indexes",
        "production",
        "reporting",
        "procedures",
        "Python",
        "Excel",
        "OLE",
        "HTML",
        "JavaScript",
        "UNIX",
        "Shell",
        "scripts",
        "Wrote",
        "Python",
        "UNIX",
        "shell",
        "scripts",
        "SQL",
        "Batches",
        "KSH",
        "Autosys",
        "deployment",
        "monitoring",
        "scripts",
        "database",
        "functions",
        "procedures",
        "flask",
        "HTML",
        "JavaScript",
        "XML",
        "database",
        "triggers",
        "data",
        "validations",
        "Sybase",
        "techniques",
        "interact",
        "trading",
        "files",
        "BCP",
        "data",
        "files",
        "Wrote",
        "Python",
        "routines",
        "data",
        "Sybase",
        "tables",
        "data",
        "files",
        "Sybase",
        "procedures",
        "business",
        "logic",
        "user",
        "documentation",
        "application",
        "testing",
        "team",
        "test",
        "plans",
        "test",
        "cases",
        "handson",
        "training",
        "end",
        "users",
        "screens",
        "Environment",
        "Python",
        "Sybase",
        "TSQL",
        "flask",
        "HTML",
        "XML",
        "JavaScript",
        "KSH",
        "Autosys",
        "Sun",
        "Solaris",
        "Service",
        "Operation",
        "Manager",
        "SOM",
        "Datamatics",
        "Ltd",
        "Mumbai",
        "Maharashtra",
        "January",
        "October",
        "Junior",
        "unix",
        "engineer",
        "Service",
        "operation",
        "manager",
        "network",
        "management",
        "system",
        "HPopenview",
        "MOM",
        "Remedy",
        "track",
        "devices",
        "organization",
        "system",
        "administrators",
        "Responsibilities",
        "facilities",
        "custom",
        "income",
        "index",
        "reports",
        "clients",
        "database",
        "structure",
        "Pythonflask",
        "reports",
        "Python",
        "interface",
        "scripts",
        "data",
        "conversion",
        "Wrote",
        "Python",
        "script",
        "manipulate",
        "text",
        "file",
        "requirement",
        "backend",
        "processes",
        "Python",
        "Developed",
        "Python",
        "scripts",
        "components",
        "kind",
        "searches",
        "Wrote",
        "Python",
        "grasp",
        "data",
        "feed",
        "website",
        "pyodbc",
        "module",
        "load",
        "database",
        "Wrote",
        "Python",
        "scripts",
        "test",
        "UI",
        "pages",
        "web",
        "server",
        "ErwinSybase",
        "schema",
        "Bond",
        "Index",
        "calculator",
        "fixedincome",
        "trading",
        "Developed",
        "shot",
        "longterm",
        "fixedincome",
        "swap",
        "modules",
        "procedure",
        "skeletons",
        "ErwinSybase",
        "schema",
        "Performed",
        "data",
        "domain",
        "entity",
        "conversion",
        "database",
        "objects",
        "monitoring",
        "scripts",
        "loading",
        "data",
        "files",
        "database",
        "Python",
        "Korn",
        "shell",
        "Sybase",
        "data",
        "loaders",
        "migration",
        "utilities",
        "Python",
        "Wrote",
        "procedures",
        "Sybase",
        "report",
        "pages",
        "flask",
        "HTML",
        "XML",
        "JavaScript",
        "income",
        "index",
        "reports",
        "support",
        "scripts",
        "UNIX",
        "Shell",
        "Sybase",
        "Environment",
        "Python",
        "Sybase",
        "flask",
        "HTML",
        "XML",
        "JavaScript",
        "KSH",
        "Autosys",
        "Sun",
        "Solaris",
        "Education",
        "Bachelor",
        "Engineering",
        "Information",
        "technology",
        "Government",
        "College",
        "Engineering",
        "Aurangabad",
        "India",
        "Aurangabad",
        "Maharashtra",
        "Additional",
        "Information",
        "Technical",
        "Skills",
        "Programming",
        "Language",
        "python",
        "Sybase",
        "Oracle",
        "RDBMS",
        "Sybase",
        "Oracle",
        "OracleORACLESqlServer",
        "System",
        "UNIX",
        "SUN",
        "Solaris",
        "Linux",
        "HPUX",
        "Windows",
        "Modeling",
        "tools",
        "TOAD",
        "Erwin",
        "DBArtisan",
        "Rapid",
        "Sql",
        "Reporting",
        "Tools",
        "SQR",
        "AXSPoint",
        "Reports",
        "Tools",
        "AXSpointClearcaseStarteamCVS",
        "Job",
        "Scheduler",
        "Autosys",
        "Crontab",
        "Web",
        "Servers",
        "Apache"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T22:56:54.839494",
    "resume_data": "PythonORACLE Developer span lPythonspanORACLE span lDeveloperspan PythonORACLE Developer Bank Of America Highly motivated and experienced software professional with over 9 years of experience Good working experience in ORACLE Python Unix Shell programming Well experienced in UNIX Korn shell scripting Good Working experience in UNIX AWKSED Experience in creating ORACLE database objects such as databases tables views macros stored procedures Well knowledge in production support Excellent logical and analytical skills solve complex problems Good Working experience on python web application development using Django web framework and Flask Good working experience in python NumPy to implement complex business rules Experience in reading and writing xml reports with Python XML modules Work Experience PythonORACLE Developer Bank Of America Charlotte NC October 2013 to Present Saber 2 is an application built for the purpose of calculating the firms Risk Weighted Assets RWA for multiple products across several line of business work streams Retail lending and Wholesale channels for example It is meant to handle calculating the regulatory capital requirements for supported products and supply necessary inputs into the economic capital functions used by Enterprise Capital Management ECMIt also endeavors to support other requirements from ECM and their stakeholders more easily by providing a modular platform that can be leveraged in pieces This modular capability will also allow technology to deliver enhancements and new solutions faster than is currently possible with the existing platform Responsibilities Involved in requirement analysis database design coding testing implementation and review for re hosting Worked on saber archive process to backup the data files and maintain the space on the unix servers Developed and automated the Python jobs for Saber to Saber 2 migration Worked on Parsing various format of files like XML using Python XML modules Interacting with data modeling and ETL teams to convert logical data models into ORACLE physical data models and recommending implementing data type changes and primary index by enhancing ORACLE best practices Enhanced SQL performance tuning by collectingrefreshing statistics and enhancing the proper primary index and introducing PPI and MLPPIs Worked on migrating config files to centralized xml config to be used by Python framerwork Worked on writing Python wrappers to streamline the saber environment Worked on Saber Smoke test report generation using Python and XML configs Worked extensively on creating python modules for Saber ORACLEoracle calculator framework Worked on creating downstream feeds in XML format Created saber config review pages using HTML and python Django and flask libraries Worked on implementing saber calculator logic using python advanced libraries like NumPy Worked on implementing OO Python standards to rewrite the remote framework Worked on development of db refresh project for weekly backup of ORACLE Implemented Risk weighted wholesale calculator login using Python NumPy Worked on SaberSaber 2 health check report jobs using python shell scripts Worked on development of config review process Developed and implemented Web based Saber control Panel using Flask and Djago libraries Worked on Isolated environment builds for business testing Worked on ORACLE data lineage process to map source to target db table and column mappings using OO Python Worked on automating the weekly data archive jobs using autosys Worked on troubleshooting environment relates issues during monthly SDLC cycle Provided support for job scheduling file transfers and transactional processes Worked on migration of CRM job from JAVA to Python using NumPy Worked on modifying the job reset option to kill the backend processes in unix and windows Environment python KSH RMATLAB BCP OO Python UNIX Windows NT Django Flask Numpy ORACLE Developer First Data Louisville KY April 2012 to September 2013 CADRE is the back office exceptions processing application that integrates imaging and artificial intelligence to assist dispute analysis in resolving the disputes related to the credit card transactions To efficiently process disputes CADRE depends on receiving and sending files to major credit card associations VISA MasterCard and Diners and our supported merchants Expedites workflow and turnaround time for resolution of exception items Responsibilities Involved in requirement analysis database design coding testing implementation and review for re hosting Worked on creating centralized email system for CADRE backend emails using python Wrote routines in python update database from XML files and vice versa Developed Sybase Stored procedures for the back end processing of the proposed data base design Automated console with scaling in ORACLE SQL Participated in meetings to gather and analyze the requirements for new applications data model changes and made recommendations from ORACLE database point Created Python batches monitor errors in data loading at particular frequency Coded and deployed application in test and production environments Worked on CADRE code migration from Delphi to Python using pyhon Django javascript and HTML Implemented complex business rules for credit card reversals using python Pandas Data structure library Compiled the c code in 64 bit for the re hosting of the CADRE app Worked extensively on fixing the backend code issues post reshot Worked on overnight batch support post re host Developed performance utilization charts optimized and tuned SQL and designed physical databases Assisted developers with ORACLE load utilities and SQL Created BTEQ scripts to extract data from warehouse for downstream applications Extensively worked on ORACLE performance optimization and brought down the queries to seconds or minutes from spool out and never ending queries by using various ORACLE optimization strategies Used the Visual explain to analyze the Query plans Designed and developed Python scripts for sending application based mails Wrote XML synchronization code using Python and UNIX shell scripts Worked editing testing and deploying shell and python scripts for migration from ftp to Secure Maintained multiple levels of support for all systems batch processing Provided support for job scheduling XML file transfers and transactional processes Involved with production and quality assurance environment support Environment python KSH RMATLAB BCP OO Python UNIX Windows NT Django Flask Numpy Python Developer Liberty Mutual Dover NH March 2011 to February 2012 LUNAR is a life insurance application used maintain the new business applications for individual life insurance Lunar is used by the business receive applications for new policies apply money the policy as per the product and Issue the policy policy holders Responsibilities Involved in requirement analysis database design coding testing implementation and review Involved in creating data upload modules in python Worked extensively in python and HTML Java Script for front end with flask Created python batches monitor errors in data loading at particular frequency Wrote routines in python update database from XML files and vice versa Created many python scripts and stored procedures avoid job processing failures and use of stale data by systems Wrote Python and Shell scripts automate the verification of the information inserted in the database via the web application Used pyodbc connectivity from Python ORACLE Involved in loading of data into ORACLE from legacy systems and flat files using complex MLOAD scripts and Fast Load Studied the existing python modules and wrote functional specification for migration team Wrote all BTEQ and UNIX scripts used in loading of legacy data Enterprise wide templates were created for handling SCD Error handling etc Handled scheduling of Korn Shell scripts that loaded data from flat files ORACLE Worked in data handling using UNIX scripts using mload and fast export Involved in writing ORACLE SQL bulk programs and in Performance tuning activities for ORACLE SQL statements using ORACLE EXPLAIN Used External Loaders like Multi Load T Pump and Fast Load to load data into ORACLE database Involved in analysis development testing implementation and deployment Involved writing BTEQ scripts for validation testing of the sessions data integrity between source and target databases and for report generation Maintained multiple levels of support for all systems batch processing Provided support for job scheduling file transfers and transactional processes Involved with production and quality assurance environment support Environment python flask KSH BTEQ MLOAD HTML ORACLEJavaScript SQL PLSQL OO Python Sybase UNIX Windows NT Python DeveloperSupport Pepsi Co Somers NY October 2010 to February 2011 CETS is a supply chain management system used by customer service PEPSI vendors PEPSI accounting CETS keep track of all the PEPSI equipment inventory It is used take orders from clients for the Installation of the vending machines Responsibilities Wrote python programming error check the data and import it into the Sybase database Created many batches using pythonKSH for data retrieval and loading from other applications and databases Involved in python based database work using pyodbc Integrated Sybase stored procedures with Python created interface jobs for move orders Used Autosys version control tool for concurrent and simultaneous operations Scheduled Sybase stored procedures using Autosys Developed automated registration process using pythonflask scripting Developed mail based distribution module using python Created server side Sybase Stored Procedures for implementing complex business logic Developed Reports using SQR Tuned TSql queries for improve the performance Involved in performance tuning of Sybase stored procedures for different modules of CETS Open Orders Paper Install etc Involved in performance tuning of CETS ARCHIVE stored procedures Created Autosys jobs as per requirement maintained the existing scripts and administrated the Autosys entries Created and maintained the stored procedures tables and queries for the application using Sybase TSQL Created Stored Procedures Indexes Triggers Views Scripts and reports in Sybase SQL Wrote stored procedures in TSQL under Sybase facilitate database querying Monitored concurrent jobs of Sybase SQL applications Created UNIX Korn Shell batches for data download and upload Used UNIX shell scripting using hash tables and array index listing for fast retrieval Worked on bug fixing and supported the production applications Provided support on Starteam version control Managed and supported the outages during urgency Ensured effective and timely resolution and communication the user during the production support Environment Rapid SQL python KSH pyodbc Sybase StarTeam Nexaweb Autosys UNIXAIXLINUX Oracle10g Python DeveloperSupport JPMorgan Chase Newark DE April 2010 to October 2010 OPICS performs accounting and settlements of trading activity for a number of lines of businesses including PIM PAG CIO Max Recovery Tax Liens and Credit and Risk Management OPICS is a third party vendor application integrated with JPMorgan mainframe There are a number of lines of businesses that feed OPICS The trades are either sent in flat files or directly inserted into OPICS interface tables The P L and settlement operation is performed internally by OPICS All the P L statements Brokers statements transaction reports and reconciliation reports generated by OPICS are stored in a database repository These reports are retrieved by AXSpoint application Responsibilities Created python scripts for data migration Designed and developed many python modules Developed many python scripts for server side data processing Coded many python routines for data retrieval migration and manipulating Wrote numerous python modules for background processing Used Clearcase for checkin and checkout Used Clearcase team synchronization Developed numerous scripts test different functional aspects of Sybase Stored Procedures Designed developed and modified Python scripts using the package modules Developed Sybase Stored Procedures extract data from database and load it into the database Involved in performance turning for Sybase queries Developed Sybase Stored procedures for the back end processing of the proposed data base design Used Autosys for the batch scheduling in UNIX Optimized the performance of queries with modification in Sybase SQL Queries Developed Sybase stored procedures for OPICS ARCHIVE process Automated console with scaling in ISQL Used TSQL tables Array Structures in Sybase Designed and developed Sybase TSQL scripts for data importexport Involved in performance tuning of Sybase stored procedures and triggers support the next generation of SWIFT messages Integrated Python with Sybase stored procedures using modules like BDI create downstream feeds for OPICS Used advanced Sybase TSQL techniques like cursors for data retrieval Used Sybase TSQL filer and load the data from other production databases Used Sybase TSQL scripts for dynamic procedures during package creation Fixed many UNIX KSH scripts for issues related batch uploading Provided 24x7 supports for application deployment Analyzed production issues ensure system availability Supported compliance all regulatory and audit requirements EnvironmentOracle TSQL Sybase python KSH Autosys Corn Tab flask Python HTML XML UNIX Clearcase Unix Engineer Aegis Capital Corp New York NY January 2008 to March 2010 The mutual fund distribution system is a complete and efficient end end solution for distribution organization This system is mainly concerned about integrating trades for registrar and processing the transactions The system also provides calculations like brokerage calculation process P L calculation Internal rate of return IRR calculation etc The user can see different types of reports like brokerage report family report etc Responsibilities Involved in requirement analysis database design coding testing implementation and review Involved in creating data upload modules in python Worked extensively in python and HTML Java Script for front end with flask Created python batches monitor errors in data loading at particular frequency Wrote routines in python update database from flat files and vice versa Created many python scripts and stored procedures avoid job processing failures and use of stale data by systems Wrote Python and Shell scripts automate the verification of the information inserted in the database via the web application Used pyodbc connectivity from Python Sybase Studied the existing python modules and wrote functional specification for migration team Wrote all Sybase and UNIX scripts used in loading of legacy data Handled scheduling of Korn Shell scripts that loaded data from flat files Sybase Worked in data handling using UNIX scripts using KSH BCP Used TSQL tables array structures as a part of Sybase collections Maintained multiple levels of support for all systems batch processing Provided support for job scheduling file transfers and transactional processes Involved with production and quality assurance environment support Environment python flask KSH BCP HTML JavaScript Sybase UNIX Oracle Windows NT Application Developer Prudential Financial Inc Newark NJ February 2006 to December 2007 Fund administration system provides a front back solution of hedge fund administration and accounting services The application supports Calculation of the Net Asset Value including the calculation of the funds income and expense accruals It also does the preparation of semiannual and annual accounts Responsibilities Gathered requirements from the client for front end design and developed software requirements specification Created Receipts module using Sybase Stored procedures and triggers Implemented Payment generation module using Sybase and Python Created many Sybase Stored procedures implement the business logic for back end support Developed python scripts implement the designed functional components like different kind of searches Worked in Python extensively for data extraction Scripted in Python and KSH deployment scripts Designed and implemented a Python script that would open a series of access databases Maintained the python application and supported with bug fixing and trouble shooting Creation of many database packages functions and procedures in Sybase Creating backend modules for order processing using python and UNIX Korn Shell Scripts Created many batch scripts using python and UNIX scripting using Korn Shell and scheduled in Cron Tab Coded and deployed application in test and production environments Deployed changes in packages and code into production environment Coordinated with operations team during load testing and deployment of code in staging and production environments EnvironmentCron Tab python flask HTML JavaScript BCP UNIX Sybase pyodbc Decision Maker Tech Mahindra Limited Pune Maharashtra November 2004 to January 2006 Application Developer The decision maker application developed maintain the employee work effort data and employee time sheet It extensively used by HR and employees Employee can fill up the time sheet and apply for vacation using the application Responsibilities Involved in user requirement analysis design coding testing and review Did code walkthrough with team leadend users on regular basis Involved in designing altering and updating of database Involved in Python based database work using pyodbc Created many Python scripts for data formatvalidation checking Designed and developed many Python modules Created Python batches monitor errors in data loading at particular frequency Created HTML forms and used Python as flask scripting language for online querying and reporting Involved in creating data upload modules in Python Designed and developed Python scripts for sending application based mails Wrote synchronization code using Python and using Python and UNIX shell scripts Wrote routines in Python update database from flat files and vice versa Wrote programs in C Python for parsing trading data and moving it into Sybase Used Python C Sybase TCPIP and UNIX Shell programming for system monitoring Developed and enforce a Sybase SQL coding standard for all packages procedures functions and triggers Maintained Sybase database schema scripts and analyzed complex data Coded and tuned Sybase procedures and SQL throughout the development wherever needed Developed and deployed new search indexes into production Automated reporting procedures used Python Excel OLE objects HTML JavaScript and UNIX Shell scripts Wrote Python UNIX shell scripts automate the SQL Batches Developed many KSH and Autosys based deployment and monitoring scripts Created many database functions and procedures Developed many flask reports using HTML JavaScript and XML Created database triggers and data validations Implemented Sybase advanced queuing techniques interact with trading files Used BCP for data uploading from flat files Wrote Python routines extract data from Sybase tables and create flat data files Used Sybase Stored procedures implement the complex business logic Created user documentation for the application developed Coordinated with the testing team in preparing test plans and test cases Provided handson training for the end users on appropriate screens Environment Python Sybase TSQL flask HTML XML JavaScript KSH Autosys Sun Solaris Service Operation Manager SOM Datamatics Ltd Mumbai Maharashtra January 2003 to October 2004 Junior unix engineer Service operation manager is integrated with the network management system like HPopenview MOM and Remedy It keeps track of all the devices in the organization It is extensively used by system administrators Responsibilities Maintained and enhanced reportgenerating facilities for daily weekly and monthly custom fixed income index reports for internal and external clients Created logical and physical database structure Created many Pythonflask reports Created Python interface scripts for data conversion Wrote Python script manipulate text file as per enduser requirement Worked in numerous automated backend processes written using Python Developed Python scripts implement the designed functional components like different kind of searches Wrote Python scripts grasp financial data feed from website using pyodbc module load into database Wrote Python scripts convert test the UI pages and review them on web server Maintained ErwinSybase schema Developed realtime Bond Index calculator for fixedincome trading Developed maintained shot and longterm fixedincome swap tracking modules Generated stored procedure skeletons from ErwinSybase schema input Performed data and domain entity conversion Create multiple database objects Maintained and developed monitoring scripts and loading data files into database using Python Korn shell and Sybase Utilized data loaders and migration utilities in Python Wrote stored procedures in Sybase Developed many report pages using flask HTML XML and JavaScript for fixed income index reports Provided support and developed scripts using UNIX Shell and Sybase Environment Python Sybase flask HTML XML JavaScript KSH Autosys Sun Solaris Education Bachelor of Engineering in Information technology Government College of Engineering Aurangabad India Aurangabad Maharashtra 2001 Additional Information Technical Skills Programming Language python Sybase Oracle ORACLECC RDBMS Sybase Oracle OracleORACLESqlServer Operating System UNIX SUN Solaris Linux HPUX Windows Modeling tools TOAD Erwin DBArtisan Rapid Sql Reporting Tools SQR reports AXSPoint Reports Tools AXSpointClearcaseStarteamCVS Job Scheduler Autosys Crontab Web Servers Apache",
    "unique_id": "eb10bf0c-ae2e-48ba-9eb3-7be98e552279"
}