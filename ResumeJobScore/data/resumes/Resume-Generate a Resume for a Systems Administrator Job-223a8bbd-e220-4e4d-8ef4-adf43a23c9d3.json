{
    "clean_data": "PythonDjango Developer span lPythonspanDjango span lDeveloperspan PythonDjango Developer ALK Abello New York NY Work Experience PythonDjango Developer ALK Abello Port Washington NY January 2018 to Present The Project was developed using Python technologies as a back end and frontend was developed using Angular and deployment was done over to AWS EC2 The system consisted of an endtoend manufacturing management application which works independently if needed The first module contained an inventory system which allows the system to perform several tasks such as Inventory realtime tracking Reconciliation Yearly Count Track returns etc The second module was used by the Compounding department to record every aspect of the manufacturing process as per the regulations The final module was used for testing storing test results into database creating new tests validating tests and running diagnostics I was responsible for the development of Inventory module primarily along with other modules as when needed Roles Responsibilities Involved in analysis and design of supplymanagement application and participated in requirements gathering and worked with architect in designing and modeling the application Built backend of inventory management application with Django Web framework creating a connection to a MySQL database and querying inventory data to store and handle medicine raw materials reagents and supplies Created Deleted Updated Models Views and Templates as needed using Python and Django to connect the SQL database to templates Migrated from SQLite database to PostgreSQL and created query programs including SELECT UPDATE ORDER BY INSERT and GROUP BY PostgreSQL had the proper security settings for a production environment Made extensive use of Python modules like Collections Requests BeautifulSoup Matplotlib Re OS to extend Pythons default functionality make HTTP request scrape data and visualize it Created dynamic validated forms using Django builtin forms and JavaScript to receive user input and ensure proper data format was sent to the database Consumed thirdparty APIs using python HTTP Requests to import supply information from suppliers Made use of AWS S3 buckets and Bitnami virtual machine to both store and extract documentsdata and test the application Responded to clients needs and suggestedimplemented agreed changes Used Python and participated in entire SDLC to build application that replaces SAP functionality Customized Django builtin forms using ModelForms Forms Form validation to improve the functionality of the application Created custom exceptions from Pythons BaseException class in Python to create specific errors for users to handle Collaborated with testing team and responded to concerns and bugs using JIRA Modeled and scraped data as needed using BeautifulSoup during investigations of new features or issues Environment Python Django REST API Pharm VS Code Jupyter Notebook MySQL SQL CRUD AWS EC2 S3 JIRA GIT PyUnit Python Developer One Blood Inc Miami FL November 2016 to January 2018 I worked as part of the development team improving their system of samples and patient records Their system was outdated and needed to be updated to comply with new federal regulations Major technologies used were Python Django Web Framework and Angular for the frontend The system contained separate modules for Tests Patients Samples and protocols Roles Responsibilities Participated in the SDLC by working with team on designing building and testing Donor Portal application to increase donor participation and accuracy of tests Wrote multiple Django QuerysetsSQL Queries using the ORM system and MySQL Workbench to create user button commands to extract donor and testing data from the management system Utilized MVT paradigm to build a responsive and secure application using Django Web Framework Using Models to create database tables Views to process and display donor blood sample and testing data and Templates to display on the application Worked with large MySQL tables and data using queries like SELECT UPDATE ORDER BY INSERT and GROUP BY to create views and organize information displayed on the application Maintained program library and technical documentation adding new features and removing as needed Performed troubleshooting fixed and modified code to remove bugs using unit tests and PyUnit Worked with development team using Agile Methodology Performed data analysis using Pandas and related libraries like NumPy SciPy to find patterns in blood types and donor information to improve donations Added unit tests and improved existing ones using unit test module Deployed application using AWS EC2 and all its components utilizing existing user groups VPCs and load balancing settings and modifying and creating settings where appropriate Wrote scalable highly reusable code using PEP 8 principles so current and future colleagues can read understand and use the code Environment Python Django Flask Angular REST API Pharm VS Code Jupyter Notebook MySQL SQL CRUD AWS EC2 Blood bank Unit Test PyUnit GIT Python Developer Miami Dade County Mosquito Control Miami FL March 2016 to September 2016 As part of a team my role was to maintain the system modules that handled forms for recording positive cases and the module that kept track of the physical locations of mosquito poison wells The project was built with Python Django Web Framework and Angular for the frontend Roles Responsibilities Collaborated in the SDLC process by working with teammates on building testing and deploying Mosquito Control portal to organize communications between the teams working on the ground Performed complex query operations using SELECT UPDATE ORDER BY INSERT and GROUP BY on MySQL tables and data to create views and organize information to print team and weekly reports Employed the MVT system in Django to maintain and modify application Using Models to create database tables Views to process and display patientcasemosquito information and Templates to display data to the team and local government Combined the querying capabilities of MySQL and Django Querysets to store positivecase demographic information mosquito trap contents and geographical coordinates so that the medical team could make house visits to affected households and neighborhood area Performed troubleshooting fixed and modified code to remove bugs using unit tests and PyUnit Collaborated with development team working through JIRA using SCRUM methodology Added unit tests and improved existing ones using PyUnit module Interacted with AWS EC2 instances using Lambda functions to add remove and modify content in the application system Wrote scalable highly reusable code using PEP 8 principles so current and future colleagues can read understand and use the code Environment Python Django Angular Pharm VS Code Jupyter Notebook MySQL SQL CRUD AWS EC2 Blood bank unit test PyUnit GIT Pharm Data Scientist Sonic Healthcare Group Hicksville NY April 2014 to February 2016 Project scope here was to reduce costs by analyzing test and patient data to determine the most effective ways to complete all the tests on schedule and on budget Roles Responsibilities Gathered aggregated and cleaned patienttesting data from a host of sources including consuming APIs MySQL databases and MongoDB and scraping using BeautifulSoup from external websites Explored patient and testing data using Python modules like NumPy SciPy ScikitLearn Pandas Visualized data using Seaborn module and Matplotlib to better understand data created scatterplots bar graphs pie charts histograms Normalized data using an appropriate method log square squareroot etc used NumPy or a custom function when appropriate Worked with dimensionality reduction techniques like PCA to reduce large datasets into management chunks Used regression models like Linear Regression Decision Trees and Random Forests to fit data and predict continuous variables Employed several classification algorithms including Nave Bayes Random Forest Support Vector Machines Logistic Regression to predict classes Used clustering methods like KMeans and KNN to find hidden patterns in data and create new labels Used Regularization techniques such as L1 and L2 and Elastic net to balance variance bias tradeoff Presented results to team members and management using PowerPoint Environment Jupyter Notebook Anaconda Python Pandas SciPy NumPy ScikitLearn Pharm Excel PowerPoint Antrim Apollo Education Bachelors Degree in Information Technology in Information Technology Queens College Flushing NY 2014 Skills Amazon web services Django Frontend Git Html Javascript Bootstrap Typescript Vs code Python Flask Numpy Pandas Mysql Postgresql Sql Sqlite Elastic beanstalk Ebs Ec2",
    "entities": [
        "Skills Amazon",
        "Compounding",
        "Pandas",
        "Python Django Web Framework and Angular",
        "BeautifulSoup",
        "AWS S3",
        "PyUnit Worked",
        "Performed",
        "Explored",
        "MVT",
        "Django",
        "KNN",
        "Created",
        "Normalized",
        "AWS",
        "Created Deleted Updated Models Views",
        "JavaScript",
        "PythonDjango Developer",
        "PyUnit GIT Pharm Data Scientist Sonic Healthcare Group",
        "Linear Regression Decision Trees",
        "HTTP",
        "Workbench",
        "Developer One Blood Inc",
        "Roles Responsibilities Involved",
        "Templates",
        "Information Technology in Information Technology Queens College Flushing NY",
        "Miami FL",
        "SAP",
        "Django Web Framework Using Models",
        "New York NY Work",
        "SQL",
        "PyUnit Collaborated",
        "Donor Portal",
        "INSERT",
        "SELECT UPDATE ORDER BY",
        "GROUP",
        "Miami Dade County",
        "PyUnit",
        "Maintained",
        "Roles Responsibilities Collaborated",
        "Washington",
        "Mosquito Control",
        "Views",
        "Seaborn",
        "PowerPoint",
        "Nave Bayes Random Forest Support Vector Machines Logistic Regression",
        "Agile Methodology Performed",
        "Present The Project"
    ],
    "experience": "Experience PythonDjango Developer ALK Abello Port Washington NY January 2018 to Present The Project was developed using Python technologies as a back end and frontend was developed using Angular and deployment was done over to AWS EC2 The system consisted of an endtoend manufacturing management application which works independently if needed The first module contained an inventory system which allows the system to perform several tasks such as Inventory realtime tracking Reconciliation Yearly Count Track returns etc The second module was used by the Compounding department to record every aspect of the manufacturing process as per the regulations The final module was used for testing storing test results into database creating new tests validating tests and running diagnostics I was responsible for the development of Inventory module primarily along with other modules as when needed Roles Responsibilities Involved in analysis and design of supplymanagement application and participated in requirements gathering and worked with architect in designing and modeling the application Built backend of inventory management application with Django Web framework creating a connection to a MySQL database and querying inventory data to store and handle medicine raw materials reagents and supplies Created Deleted Updated Models Views and Templates as needed using Python and Django to connect the SQL database to templates Migrated from SQLite database to PostgreSQL and created query programs including SELECT UPDATE ORDER BY INSERT and GROUP BY PostgreSQL had the proper security settings for a production environment Made extensive use of Python modules like Collections Requests BeautifulSoup Matplotlib Re OS to extend Pythons default functionality make HTTP request scrape data and visualize it Created dynamic validated forms using Django builtin forms and JavaScript to receive user input and ensure proper data format was sent to the database Consumed thirdparty APIs using python HTTP Requests to import supply information from suppliers Made use of AWS S3 buckets and Bitnami virtual machine to both store and extract documentsdata and test the application Responded to clients needs and suggestedimplemented agreed changes Used Python and participated in entire SDLC to build application that replaces SAP functionality Customized Django builtin forms using ModelForms Forms Form validation to improve the functionality of the application Created custom exceptions from Pythons BaseException class in Python to create specific errors for users to handle Collaborated with testing team and responded to concerns and bugs using JIRA Modeled and scraped data as needed using BeautifulSoup during investigations of new features or issues Environment Python Django REST API Pharm VS Code Jupyter Notebook MySQL SQL CRUD AWS EC2 S3 JIRA GIT PyUnit Python Developer One Blood Inc Miami FL November 2016 to January 2018 I worked as part of the development team improving their system of samples and patient records Their system was outdated and needed to be updated to comply with new federal regulations Major technologies used were Python Django Web Framework and Angular for the frontend The system contained separate modules for Tests Patients Samples and protocols Roles Responsibilities Participated in the SDLC by working with team on designing building and testing Donor Portal application to increase donor participation and accuracy of tests Wrote multiple Django QuerysetsSQL Queries using the ORM system and MySQL Workbench to create user button commands to extract donor and testing data from the management system Utilized MVT paradigm to build a responsive and secure application using Django Web Framework Using Models to create database tables Views to process and display donor blood sample and testing data and Templates to display on the application Worked with large MySQL tables and data using queries like SELECT UPDATE ORDER BY INSERT and GROUP BY to create views and organize information displayed on the application Maintained program library and technical documentation adding new features and removing as needed Performed troubleshooting fixed and modified code to remove bugs using unit tests and PyUnit Worked with development team using Agile Methodology Performed data analysis using Pandas and related libraries like NumPy SciPy to find patterns in blood types and donor information to improve donations Added unit tests and improved existing ones using unit test module Deployed application using AWS EC2 and all its components utilizing existing user groups VPCs and load balancing settings and modifying and creating settings where appropriate Wrote scalable highly reusable code using PEP 8 principles so current and future colleagues can read understand and use the code Environment Python Django Flask Angular REST API Pharm VS Code Jupyter Notebook MySQL SQL CRUD AWS EC2 Blood bank Unit Test PyUnit GIT Python Developer Miami Dade County Mosquito Control Miami FL March 2016 to September 2016 As part of a team my role was to maintain the system modules that handled forms for recording positive cases and the module that kept track of the physical locations of mosquito poison wells The project was built with Python Django Web Framework and Angular for the frontend Roles Responsibilities Collaborated in the SDLC process by working with teammates on building testing and deploying Mosquito Control portal to organize communications between the teams working on the ground Performed complex query operations using SELECT UPDATE ORDER BY INSERT and GROUP BY on MySQL tables and data to create views and organize information to print team and weekly reports Employed the MVT system in Django to maintain and modify application Using Models to create database tables Views to process and display patientcasemosquito information and Templates to display data to the team and local government Combined the querying capabilities of MySQL and Django Querysets to store positivecase demographic information mosquito trap contents and geographical coordinates so that the medical team could make house visits to affected households and neighborhood area Performed troubleshooting fixed and modified code to remove bugs using unit tests and PyUnit Collaborated with development team working through JIRA using SCRUM methodology Added unit tests and improved existing ones using PyUnit module Interacted with AWS EC2 instances using Lambda functions to add remove and modify content in the application system Wrote scalable highly reusable code using PEP 8 principles so current and future colleagues can read understand and use the code Environment Python Django Angular Pharm VS Code Jupyter Notebook MySQL SQL CRUD AWS EC2 Blood bank unit test PyUnit GIT Pharm Data Scientist Sonic Healthcare Group Hicksville NY April 2014 to February 2016 Project scope here was to reduce costs by analyzing test and patient data to determine the most effective ways to complete all the tests on schedule and on budget Roles Responsibilities Gathered aggregated and cleaned patienttesting data from a host of sources including consuming APIs MySQL databases and MongoDB and scraping using BeautifulSoup from external websites Explored patient and testing data using Python modules like NumPy SciPy ScikitLearn Pandas Visualized data using Seaborn module and Matplotlib to better understand data created scatterplots bar graphs pie charts histograms Normalized data using an appropriate method log square squareroot etc used NumPy or a custom function when appropriate Worked with dimensionality reduction techniques like PCA to reduce large datasets into management chunks Used regression models like Linear Regression Decision Trees and Random Forests to fit data and predict continuous variables Employed several classification algorithms including Nave Bayes Random Forest Support Vector Machines Logistic Regression to predict classes Used clustering methods like KMeans and KNN to find hidden patterns in data and create new labels Used Regularization techniques such as L1 and L2 and Elastic net to balance variance bias tradeoff Presented results to team members and management using PowerPoint Environment Jupyter Notebook Anaconda Python Pandas SciPy NumPy ScikitLearn Pharm Excel PowerPoint Antrim Apollo Education Bachelors Degree in Information Technology in Information Technology Queens College Flushing NY 2014 Skills Amazon web services Django Frontend Git Html Javascript Bootstrap Typescript Vs code Python Flask Numpy Pandas Mysql Postgresql Sql Sqlite Elastic beanstalk Ebs Ec2",
    "extracted_keywords": [
        "PythonDjango",
        "Developer",
        "span",
        "lPythonspanDjango",
        "span",
        "lDeveloperspan",
        "PythonDjango",
        "Developer",
        "ALK",
        "Abello",
        "New",
        "York",
        "NY",
        "Work",
        "Experience",
        "PythonDjango",
        "Developer",
        "ALK",
        "Abello",
        "Port",
        "Washington",
        "NY",
        "January",
        "Present",
        "Project",
        "Python",
        "technologies",
        "end",
        "frontend",
        "Angular",
        "deployment",
        "AWS",
        "EC2",
        "system",
        "endtoend",
        "management",
        "application",
        "module",
        "inventory",
        "system",
        "system",
        "tasks",
        "Inventory",
        "realtime",
        "Reconciliation",
        "Yearly",
        "Count",
        "Track",
        "returns",
        "module",
        "Compounding",
        "department",
        "aspect",
        "manufacturing",
        "process",
        "regulations",
        "module",
        "testing",
        "test",
        "results",
        "database",
        "tests",
        "tests",
        "diagnostics",
        "development",
        "Inventory",
        "module",
        "modules",
        "Roles",
        "Responsibilities",
        "analysis",
        "design",
        "supplymanagement",
        "application",
        "requirements",
        "architect",
        "application",
        "backend",
        "inventory",
        "management",
        "application",
        "Django",
        "Web",
        "framework",
        "connection",
        "MySQL",
        "database",
        "inventory",
        "data",
        "medicine",
        "materials",
        "reagents",
        "supplies",
        "Updated",
        "Models",
        "Views",
        "Templates",
        "Python",
        "Django",
        "SQL",
        "database",
        "templates",
        "database",
        "PostgreSQL",
        "query",
        "programs",
        "SELECT",
        "UPDATE",
        "ORDER",
        "INSERT",
        "GROUP",
        "BY",
        "PostgreSQL",
        "security",
        "settings",
        "production",
        "environment",
        "use",
        "Python",
        "modules",
        "Collections",
        "Requests",
        "BeautifulSoup",
        "Matplotlib",
        "Pythons",
        "default",
        "functionality",
        "HTTP",
        "scrape",
        "data",
        "forms",
        "Django",
        "builtin",
        "forms",
        "JavaScript",
        "user",
        "input",
        "data",
        "format",
        "database",
        "thirdparty",
        "APIs",
        "python",
        "HTTP",
        "Requests",
        "supply",
        "information",
        "suppliers",
        "use",
        "AWS",
        "S3",
        "buckets",
        "Bitnami",
        "machine",
        "store",
        "documentsdata",
        "application",
        "clients",
        "needs",
        "changes",
        "Python",
        "SDLC",
        "application",
        "SAP",
        "functionality",
        "Customized",
        "Django",
        "builtin",
        "forms",
        "ModelForms",
        "Forms",
        "Form",
        "validation",
        "functionality",
        "application",
        "custom",
        "exceptions",
        "Pythons",
        "BaseException",
        "class",
        "Python",
        "errors",
        "users",
        "Collaborated",
        "testing",
        "team",
        "concerns",
        "bugs",
        "JIRA",
        "data",
        "BeautifulSoup",
        "investigations",
        "features",
        "issues",
        "Environment",
        "Python",
        "Django",
        "REST",
        "API",
        "Pharm",
        "VS",
        "Code",
        "Jupyter",
        "Notebook",
        "MySQL",
        "SQL",
        "CRUD",
        "AWS",
        "EC2",
        "S3",
        "JIRA",
        "GIT",
        "PyUnit",
        "Python",
        "Developer",
        "Blood",
        "Inc",
        "Miami",
        "FL",
        "November",
        "January",
        "part",
        "development",
        "team",
        "system",
        "samples",
        "records",
        "system",
        "regulations",
        "technologies",
        "Python",
        "Django",
        "Web",
        "Framework",
        "Angular",
        "frontend",
        "system",
        "modules",
        "Tests",
        "Patients",
        "Samples",
        "protocols",
        "Roles",
        "Responsibilities",
        "SDLC",
        "team",
        "building",
        "Donor",
        "Portal",
        "application",
        "donor",
        "participation",
        "accuracy",
        "tests",
        "Django",
        "QuerysetsSQL",
        "ORM",
        "system",
        "MySQL",
        "Workbench",
        "user",
        "button",
        "commands",
        "donor",
        "testing",
        "data",
        "management",
        "system",
        "MVT",
        "paradigm",
        "application",
        "Django",
        "Web",
        "Framework",
        "Models",
        "database",
        "tables",
        "Views",
        "donor",
        "blood",
        "sample",
        "testing",
        "data",
        "Templates",
        "application",
        "MySQL",
        "tables",
        "data",
        "queries",
        "SELECT",
        "UPDATE",
        "ORDER",
        "INSERT",
        "GROUP",
        "BY",
        "views",
        "information",
        "application",
        "program",
        "library",
        "documentation",
        "features",
        "Performed",
        "troubleshooting",
        "code",
        "bugs",
        "unit",
        "tests",
        "PyUnit",
        "development",
        "team",
        "Agile",
        "Methodology",
        "data",
        "analysis",
        "Pandas",
        "libraries",
        "NumPy",
        "SciPy",
        "patterns",
        "blood",
        "types",
        "donor",
        "information",
        "donations",
        "unit",
        "tests",
        "ones",
        "unit",
        "test",
        "module",
        "Deployed",
        "application",
        "AWS",
        "EC2",
        "components",
        "user",
        "groups",
        "VPCs",
        "load",
        "settings",
        "settings",
        "Wrote",
        "code",
        "PEP",
        "principles",
        "colleagues",
        "code",
        "Environment",
        "Python",
        "Django",
        "Flask",
        "Angular",
        "REST",
        "API",
        "Pharm",
        "VS",
        "Code",
        "Jupyter",
        "Notebook",
        "MySQL",
        "SQL",
        "CRUD",
        "EC2",
        "Blood",
        "bank",
        "Unit",
        "Test",
        "PyUnit",
        "GIT",
        "Python",
        "Developer",
        "Miami",
        "Dade",
        "County",
        "Mosquito",
        "Control",
        "Miami",
        "FL",
        "March",
        "September",
        "part",
        "team",
        "role",
        "system",
        "modules",
        "forms",
        "cases",
        "module",
        "track",
        "locations",
        "poison",
        "wells",
        "project",
        "Python",
        "Django",
        "Web",
        "Framework",
        "Angular",
        "frontend",
        "Roles",
        "Responsibilities",
        "SDLC",
        "process",
        "teammates",
        "building",
        "testing",
        "Mosquito",
        "Control",
        "portal",
        "communications",
        "teams",
        "ground",
        "query",
        "operations",
        "SELECT",
        "UPDATE",
        "ORDER",
        "INSERT",
        "GROUP",
        "MySQL",
        "tables",
        "data",
        "views",
        "information",
        "team",
        "reports",
        "MVT",
        "system",
        "Django",
        "application",
        "Models",
        "database",
        "tables",
        "Views",
        "patientcasemosquito",
        "information",
        "Templates",
        "data",
        "team",
        "government",
        "capabilities",
        "MySQL",
        "Django",
        "positivecase",
        "information",
        "mosquito",
        "trap",
        "contents",
        "coordinates",
        "team",
        "house",
        "visits",
        "households",
        "neighborhood",
        "area",
        "Performed",
        "troubleshooting",
        "code",
        "bugs",
        "unit",
        "tests",
        "PyUnit",
        "Collaborated",
        "development",
        "team",
        "JIRA",
        "SCRUM",
        "methodology",
        "unit",
        "tests",
        "ones",
        "PyUnit",
        "module",
        "AWS",
        "EC2",
        "instances",
        "Lambda",
        "functions",
        "remove",
        "content",
        "application",
        "system",
        "code",
        "PEP",
        "principles",
        "colleagues",
        "code",
        "Environment",
        "Python",
        "Django",
        "Angular",
        "Pharm",
        "VS",
        "Code",
        "Jupyter",
        "Notebook",
        "MySQL",
        "SQL",
        "CRUD",
        "EC2",
        "Blood",
        "bank",
        "unit",
        "test",
        "PyUnit",
        "GIT",
        "Pharm",
        "Data",
        "Scientist",
        "Sonic",
        "Healthcare",
        "Group",
        "Hicksville",
        "NY",
        "April",
        "February",
        "Project",
        "scope",
        "costs",
        "test",
        "data",
        "ways",
        "tests",
        "schedule",
        "budget",
        "Roles",
        "Responsibilities",
        "Gathered",
        "patienttesting",
        "data",
        "host",
        "sources",
        "APIs",
        "MySQL",
        "databases",
        "BeautifulSoup",
        "websites",
        "patient",
        "testing",
        "data",
        "Python",
        "modules",
        "NumPy",
        "SciPy",
        "ScikitLearn",
        "Pandas",
        "data",
        "module",
        "Matplotlib",
        "data",
        "scatterplots",
        "bar",
        "graphs",
        "pie",
        "charts",
        "histograms",
        "data",
        "method",
        "squareroot",
        "NumPy",
        "custom",
        "function",
        "Worked",
        "dimensionality",
        "reduction",
        "techniques",
        "PCA",
        "datasets",
        "management",
        "chunks",
        "regression",
        "models",
        "Linear",
        "Regression",
        "Decision",
        "Trees",
        "Random",
        "Forests",
        "data",
        "variables",
        "classification",
        "algorithms",
        "Nave",
        "Bayes",
        "Random",
        "Forest",
        "Support",
        "Vector",
        "Machines",
        "Logistic",
        "Regression",
        "classes",
        "methods",
        "KMeans",
        "KNN",
        "patterns",
        "data",
        "labels",
        "Regularization",
        "techniques",
        "L1",
        "L2",
        "net",
        "variance",
        "bias",
        "tradeoff",
        "results",
        "members",
        "management",
        "PowerPoint",
        "Environment",
        "Jupyter",
        "Notebook",
        "Anaconda",
        "Python",
        "SciPy",
        "NumPy",
        "ScikitLearn",
        "Pharm",
        "Excel",
        "PowerPoint",
        "Antrim",
        "Apollo",
        "Education",
        "Bachelors",
        "Degree",
        "Information",
        "Technology",
        "Information",
        "Technology",
        "Queens",
        "College",
        "Flushing",
        "NY",
        "Skills",
        "Amazon",
        "web",
        "services",
        "Django",
        "Frontend",
        "Git",
        "Html",
        "Javascript",
        "Bootstrap",
        "Typescript",
        "Vs",
        "code",
        "Python",
        "Flask",
        "Numpy",
        "Pandas",
        "Mysql",
        "Postgresql",
        "Sql",
        "Sqlite",
        "beanstalk",
        "Ebs",
        "Ec2"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T22:45:49.259324",
    "resume_data": "PythonDjango Developer span lPythonspanDjango span lDeveloperspan PythonDjango Developer ALK Abello New York NY Work Experience PythonDjango Developer ALK Abello Port Washington NY January 2018 to Present The Project was developed using Python technologies as a back end and frontend was developed using Angular and deployment was done over to AWS EC2 The system consisted of an endtoend manufacturing management application which works independently if needed The first module contained an inventory system which allows the system to perform several tasks such as Inventory realtime tracking Reconciliation Yearly Count Track returns etc The second module was used by the Compounding department to record every aspect of the manufacturing process as per the regulations The final module was used for testing storing test results into database creating new tests validating tests and running diagnostics I was responsible for the development of Inventory module primarily along with other modules as when needed Roles Responsibilities Involved in analysis and design of supplymanagement application and participated in requirements gathering and worked with architect in designing and modeling the application Built backend of inventory management application with Django Web framework creating a connection to a MySQL database and querying inventory data to store and handle medicine raw materials reagents and supplies Created Deleted Updated Models Views and Templates as needed using Python and Django to connect the SQL database to templates Migrated from SQLite database to PostgreSQL and created query programs including SELECT UPDATE ORDER BY INSERT and GROUP BY PostgreSQL had the proper security settings for a production environment Made extensive use of Python modules like Collections Requests BeautifulSoup Matplotlib Re OS to extend Pythons default functionality make HTTP request scrape data and visualize it Created dynamic validated forms using Django builtin forms and JavaScript to receive user input and ensure proper data format was sent to the database Consumed thirdparty APIs using python HTTP Requests to import supply information from suppliers Made use of AWS S3 buckets and Bitnami virtual machine to both store and extract documentsdata and test the application Responded to clients needs and suggestedimplemented agreed changes Used Python and participated in entire SDLC to build application that replaces SAP functionality Customized Django builtin forms using ModelForms Forms Form validation to improve the functionality of the application Created custom exceptions from Pythons BaseException class in Python to create specific errors for users to handle Collaborated with testing team and responded to concerns and bugs using JIRA Modeled and scraped data as needed using BeautifulSoup during investigations of new features or issues Environment Python Django REST API Pharm VS Code Jupyter Notebook MySQL SQL CRUD AWS EC2 S3 JIRA GIT PyUnit Python Developer One Blood Inc Miami FL November 2016 to January 2018 I worked as part of the development team improving their system of samples and patient records Their system was outdated and needed to be updated to comply with new federal regulations Major technologies used were Python Django Web Framework and Angular for the frontend The system contained separate modules for Tests Patients Samples and protocols Roles Responsibilities Participated in the SDLC by working with team on designing building and testing Donor Portal application to increase donor participation and accuracy of tests Wrote multiple Django QuerysetsSQL Queries using the ORM system and MySQL Workbench to create user button commands to extract donor and testing data from the management system Utilized MVT paradigm to build a responsive and secure application using Django Web Framework Using Models to create database tables Views to process and display donor blood sample and testing data and Templates to display on the application Worked with large MySQL tables and data using queries like SELECT UPDATE ORDER BY INSERT and GROUP BY to create views and organize information displayed on the application Maintained program library and technical documentation adding new features and removing as needed Performed troubleshooting fixed and modified code to remove bugs using unit tests and PyUnit Worked with development team using Agile Methodology Performed data analysis using Pandas and related libraries like NumPy SciPy to find patterns in blood types and donor information to improve donations Added unit tests and improved existing ones using unit test module Deployed application using AWS EC2 and all its components utilizing existing user groups VPCs and load balancing settings and modifying and creating settings where appropriate Wrote scalable highly reusable code using PEP 8 principles so current and future colleagues can read understand and use the code Environment Python Django Flask Angular REST API Pharm VS Code Jupyter Notebook MySQL SQL CRUD AWS EC2 Blood bank Unit Test PyUnit GIT Python Developer Miami Dade County Mosquito Control Miami FL March 2016 to September 2016 As part of a team my role was to maintain the system modules that handled forms for recording positive cases and the module that kept track of the physical locations of mosquito poison wells The project was built with Python Django Web Framework and Angular for the frontend Roles Responsibilities Collaborated in the SDLC process by working with teammates on building testing and deploying Mosquito Control portal to organize communications between the teams working on the ground Performed complex query operations using SELECT UPDATE ORDER BY INSERT and GROUP BY on MySQL tables and data to create views and organize information to print team and weekly reports Employed the MVT system in Django to maintain and modify application Using Models to create database tables Views to process and display patientcasemosquito information and Templates to display data to the team and local government Combined the querying capabilities of MySQL and Django Querysets to store positivecase demographic information mosquito trap contents and geographical coordinates so that the medical team could make house visits to affected households and neighborhood area Performed troubleshooting fixed and modified code to remove bugs using unit tests and PyUnit Collaborated with development team working through JIRA using SCRUM methodology Added unit tests and improved existing ones using PyUnit module Interacted with AWS EC2 instances using Lambda functions to add remove and modify content in the application system Wrote scalable highly reusable code using PEP 8 principles so current and future colleagues can read understand and use the code Environment Python Django Angular Pharm VS Code Jupyter Notebook MySQL SQL CRUD AWS EC2 Blood bank unit test PyUnit GIT Pharm Data Scientist Sonic Healthcare Group Hicksville NY April 2014 to February 2016 Project scope here was to reduce costs by analyzing test and patient data to determine the most effective ways to complete all the tests on schedule and on budget Roles Responsibilities Gathered aggregated and cleaned patienttesting data from a host of sources including consuming APIs MySQL databases and MongoDB and scraping using BeautifulSoup from external websites Explored patient and testing data using Python modules like NumPy SciPy ScikitLearn Pandas Visualized data using Seaborn module and Matplotlib to better understand data created scatterplots bar graphs pie charts histograms Normalized data using an appropriate method log square squareroot etc used NumPy or a custom function when appropriate Worked with dimensionality reduction techniques like PCA to reduce large datasets into management chunks Used regression models like Linear Regression Decision Trees and Random Forests to fit data and predict continuous variables Employed several classification algorithms including Nave Bayes Random Forest Support Vector Machines Logistic Regression to predict classes Used clustering methods like KMeans and KNN to find hidden patterns in data and create new labels Used Regularization techniques such as L1 and L2 and Elastic net to balance variance bias tradeoff Presented results to team members and management using PowerPoint Environment Jupyter Notebook Anaconda Python Pandas SciPy NumPy ScikitLearn Pharm Excel PowerPoint Antrim Apollo Education Bachelors Degree in Information Technology in Information Technology Queens College Flushing NY 2014 Skills Amazon web services Django Frontend Git Html Javascript Bootstrap Typescript Vs code Python Flask Numpy Pandas Mysql Postgresql Sql Sqlite Elastic beanstalk Ebs Ec2",
    "unique_id": "223a8bbd-e220-4e4d-8ef4-adf43a23c9d3"
}