{
    "clean_data": "Senior Python Developer Senior span lPythonspan span lDeveloperspan Senior Python Developer Quicken Loans Seattle WA Work Experience Senior Python Developer Quicken Loans New York NY April 2017 to Present Responsibilities Designed and developed PythonDjango framework for REST Services Created and tested many features for dashboard using python and JavaScript Executed various MySQL database queries from python using Docker PythonMySQL connector and MySQL  package Integrating Kubernetes with Networking Storage Security Telemetry and other services to provide a comprehensive container infrastructure Managing the Docker container through the pods and performing the load balance between the pods through Kubernetes Deployed many Python bugfixes of the two main applications that are main source of data for both customers and internal customer service team Created project designs using MVC architecture components Developed a fully automated continuous integration system using Git Cassandra Jenkins ajax PostgreSQL jQuery MySQL node JS and custom tools developed in Python and Bash Developed frontend and backend modules using Python on Django including Tasty Pie Web Framework using Git and jQuery Developed web applications RESTful web services and APIs using Python Flask Cassandra Docker MongoDB Django good knowledge of web services with protocols SOAP REST Developed Ruby Python scripts to monitor health of Mongo databases and perform adhoc backups using Mongo dump and Mongo restore Develop consumerbased features and applications using Python Django Matplotlib angular JS jQuery hibernate AWS node JS pyramid HTML Behavior Driven Development BDD and pairbased programming Involved in development of Python based Web Services using REST for sending and getting data from the external interface in the JSON format and perform analysis using Django PostgreSQL Developed the application using the TestDriven methodology and designed the unit tests using Python Unit test framework Managed datasets using Panda data frames and MYSQL Queried the database queries using Python Develop consumerbased features and applications using Python and Django in test driven Development and pairbased programming Developed and tested many features for dashboard using Python Docker jQuery Cassandra MongoDB Java Matplotlib ajax Bootstrap CSS JavaScript pyramid and jQuery Used Python based GUI components for the frontend functionality such as selection criteria Developed views and templates with python and Django view controller and templating language to create a userfriendly Website interface Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL  package Developed Views and Templates with Python and Website interface is created using Djangos view controller and template An application was developed in Linux environment and dealt with all its commands Developed Views and Templates with Python and Website interface is created using Djangos view controller and template Python Unit test library was used for the purpose of testing many programs on Python and other codes Python Developer Washington DC July 2015 to March 2017 Roles Responsibilities Designed front end using HTML Bootstrap and CSS Created entire application using Python Django ajax Cassandra PostgreSQL AWS MongoDB and Linux Used Python libraries like Selenium NumPy and SQL Alchemy Worked on several Python libraries like NumPy Pandas and Matplotlib Developed and implemented the user registration and login feature for the application process by extending Django user model Worked in containerbased technologies like Docker Kubernetes and Open shift and used Jenkins pipelines to drive all microservices builds out to the Docker registry and then deployed to Kubernetes Design develop and test HTML5 CSS3 Bootstrap flask node JS jQuery Docker Cassandra JavaScript and React that meets accessibility and web browser standards for website Created entire application using Python Django ajax flask MySQL PostgreSQL MongoDB pyramid and Linux Created Several XML Schemas and Developed Stored PLSQL Procedures and Packages to automatically create and drop table indexes Generated Python Django forms to record data of online users and used PyTest for writing test cases Set up the deployment environment on Web Logic Developed system preferences UI screens using JSP and HTML Developed web applications and RESTful web services and APIs using Python Responsible for setting up Python REST API framework using DJANGO Used NumPy Matplotlib and Pandas to generate products for major enterprises Created a Python based web application using Python scripting for data processing Docker jQuery hibernate ajax MySQL for the database and HTMLCSS Designed and developed the UI of the website using HTML and CSS Wrote executed various MYSQL database queries from Python using PythonMySQL connector MySQL  package Developed and designed automation script using Python and Bash Built SQL queries for performing various CRUD operations like create update read and delete Responsible for setting up Python REST API framework using Django Python Developer American Express New York NY March 2014 to May 2015 Responsibilities Used Python Django and Pyramid frameworks to develop applications and responsible for both backend programming and frontend functionality using JavaScript Ajax Docker AngularJS and other technologies Built a new CI pipeline and performed testing and deployment automation with Docker Jenkins and Puppet Redesigned and redeployed the Nagios implementation Nodes automatically addedremoved themselves via Puppet Used Kubernetes to deploy scale load balance and worked on Docker Engine Docker HUB Docker Images Used AJAX for transmitting JSON data objects between frontend and controllers and wrote Python scripts to parse XML and JSON documents and load the data in database Implemented RESTful WebServices for sending and receiving the data between multiple systems Implemented business logic using Python and used HTML pyramid MongoDB AWS jQuery PostgreSQL CSS ajax flask node JS JavaScript and Implemented a Continuous Delivery pipeline with Docker Jenkins and GitHub Developed application service components and configured beans using Spring IoC creation of Hibernate mapping files and generation of database schema Implemented and enhanced CRUD operations for the applications using the MVT Model View Template architecture of Django framework and Python conducting code reviews Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML pyramid flask Docker ajax CSS Cassandra JavaScript Extensively worked on developing UI components using Angular JS and JSON to interact Restful web services Designed and developed data management system using PostgreSQL and MySQL Set up and maintain CI infrastructure to streamline build process unit tests functional tests integration tests and artifacts deployments Developed build and deployment scripts using Ant and Maven as build tools in Jenkins to move from one environment to other environments Extensively worked on Application servers like WebLogic and Apache Tomcat Used Ajax for transmitting JSON data objects between frontend and controllers and Worked on configuring TCPIP network interface assigning static routes and hostnames Developed many features for dashboard using Ruby on Rails node Bootstrap CSS and JavaScript J2EE Used SVC version control system for maintain version of code Used agile methodology Python Developer Juniper Networks Los Angeles CA April 2011 to March 2014 Progressive Auto Insurance portal provides ability for end customersusers to request a quote provide quote details purchase auto insurance and payment of insurance amount This platform is built using a Struts framework in the presentation layer The backend functionality is built using Oracle as data persistence layer and Hibernate as data access layer Responsibilities Worked on the project from gather requirement developing the entire application with help from another analyst Used Django configuration to manage URLs and application parameters Generated Python Django Forms to record data of online users Used Django configuration to manage URLs and application parameters Also gained familiarity with supporting technologies like kubernetes and Mesos Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Designed and created backend data access modules using PLSQL stored procedures and Oracle 9i Created database access layer using JDBC Ajax jQuery and PLSQL stored procedures Involved in development of Web Services using SOAP for sending and getting data from the external interface in the XML format Worked in an agile development environment Skills AJAX 7 years AWS 7 years DATABASE 7 years DJANGO 7 years jQuery 7 years Additional Information Skills Programming Languages Python C C PHP Django flask pyramid angular node LAMP WAMP JavaScript hibernate React AWS jQuery PostgreSQL GIT AJAX Libraries beautiful soap PyCharm NumPy SciPy matplotlib urlib2 Database Oracle DB2 SQL servers SSIS SSRS Containers Docker kubernets docker hub docker engine Development tools Open Grok Jenkins Coverity pylint pdb Sublime Text Eclipse emacs gvim Notepad gdb Version Controls CVS SVN GIT GitHub Methodologies Agile SCRUM and Waterfall",
    "entities": [
        "TestDriven",
        "Python",
        "Python on Django",
        "CSS Created",
        "jQuery PostgreSQL CSS",
        "Amazon AWS S3",
        "Developed",
        "Mongo",
        "GUI",
        "CRUD",
        "Jenkins",
        "New York",
        "JavaScript Executed",
        "HTML Behavior Driven Development BDD",
        "Kubernetes Deployed",
        "Maven",
        "Present Responsibilities Designed",
        "Notepad gdb Version",
        "Oracle 9i Created",
        "Python Develop",
        "Created",
        "Python Unit",
        "Djangos",
        "Django Python Developer American Express",
        "JavaScript",
        "SVC",
        "HTML Developed",
        "REST Services Created",
        "UI",
        "Oracle",
        "Kubernetes Design",
        "Waterfall",
        "Developed Views",
        "Progressive Auto Insurance",
        "CSS Wrote",
        "Puppet Used Kubernetes",
        "HTML",
        "jQuery Developed",
        "Panda",
        "Linux",
        "JSP",
        "jQuery",
        "SQL",
        "Mongo restore Develop",
        "Nagios",
        "REST",
        "XML",
        "Built",
        "SOAP",
        "Python Developer Washington DC",
        "Spring IoC",
        "PythonDjango",
        "lPythonspan",
        "Bootstrap CSS",
        "Docker",
        "GitHub Developed",
        "WebLogic",
        "Application",
        "Ant",
        "RDS",
        "Mesos Added",
        "HTML Bootstrap",
        "PyTest",
        "jQuery Used Python",
        "Linux Created",
        "MVC",
        "CI",
        "Created a Python",
        "LAMP",
        "Bash Developed",
        "Skills AJAX",
        "Implemented RESTful WebServices"
    ],
    "experience": "Experience Senior Python Developer Quicken Loans New York NY April 2017 to Present Responsibilities Designed and developed PythonDjango framework for REST Services Created and tested many features for dashboard using python and JavaScript Executed various MySQL database queries from python using Docker PythonMySQL connector and MySQL   package Integrating Kubernetes with Networking Storage Security Telemetry and other services to provide a comprehensive container infrastructure Managing the Docker container through the pods and performing the load balance between the pods through Kubernetes Deployed many Python bugfixes of the two main applications that are main source of data for both customers and internal customer service team Created project designs using MVC architecture components Developed a fully automated continuous integration system using Git Cassandra Jenkins ajax PostgreSQL jQuery MySQL node JS and custom tools developed in Python and Bash Developed frontend and backend modules using Python on Django including Tasty Pie Web Framework using Git and jQuery Developed web applications RESTful web services and APIs using Python Flask Cassandra Docker MongoDB Django good knowledge of web services with protocols SOAP REST Developed Ruby Python scripts to monitor health of Mongo databases and perform adhoc backups using Mongo dump and Mongo restore Develop consumerbased features and applications using Python Django Matplotlib angular JS jQuery hibernate AWS node JS pyramid HTML Behavior Driven Development BDD and pairbased programming Involved in development of Python based Web Services using REST for sending and getting data from the external interface in the JSON format and perform analysis using Django PostgreSQL Developed the application using the TestDriven methodology and designed the unit tests using Python Unit test framework Managed datasets using Panda data frames and MYSQL Queried the database queries using Python Develop consumerbased features and applications using Python and Django in test driven Development and pairbased programming Developed and tested many features for dashboard using Python Docker jQuery Cassandra MongoDB Java Matplotlib ajax Bootstrap CSS JavaScript pyramid and jQuery Used Python based GUI components for the frontend functionality such as selection criteria Developed views and templates with python and Django view controller and templating language to create a userfriendly Website interface Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL   package Developed Views and Templates with Python and Website interface is created using Djangos view controller and template An application was developed in Linux environment and dealt with all its commands Developed Views and Templates with Python and Website interface is created using Djangos view controller and template Python Unit test library was used for the purpose of testing many programs on Python and other codes Python Developer Washington DC July 2015 to March 2017 Roles Responsibilities Designed front end using HTML Bootstrap and CSS Created entire application using Python Django ajax Cassandra PostgreSQL AWS MongoDB and Linux Used Python libraries like Selenium NumPy and SQL Alchemy Worked on several Python libraries like NumPy Pandas and Matplotlib Developed and implemented the user registration and login feature for the application process by extending Django user model Worked in containerbased technologies like Docker Kubernetes and Open shift and used Jenkins pipelines to drive all microservices builds out to the Docker registry and then deployed to Kubernetes Design develop and test HTML5 CSS3 Bootstrap flask node JS jQuery Docker Cassandra JavaScript and React that meets accessibility and web browser standards for website Created entire application using Python Django ajax flask MySQL PostgreSQL MongoDB pyramid and Linux Created Several XML Schemas and Developed Stored PLSQL Procedures and Packages to automatically create and drop table indexes Generated Python Django forms to record data of online users and used PyTest for writing test cases Set up the deployment environment on Web Logic Developed system preferences UI screens using JSP and HTML Developed web applications and RESTful web services and APIs using Python Responsible for setting up Python REST API framework using DJANGO Used NumPy Matplotlib and Pandas to generate products for major enterprises Created a Python based web application using Python scripting for data processing Docker jQuery hibernate ajax MySQL for the database and HTMLCSS Designed and developed the UI of the website using HTML and CSS Wrote executed various MYSQL database queries from Python using PythonMySQL connector MySQL   package Developed and designed automation script using Python and Bash Built SQL queries for performing various CRUD operations like create update read and delete Responsible for setting up Python REST API framework using Django Python Developer American Express New York NY March 2014 to May 2015 Responsibilities Used Python Django and Pyramid frameworks to develop applications and responsible for both backend programming and frontend functionality using JavaScript Ajax Docker AngularJS and other technologies Built a new CI pipeline and performed testing and deployment automation with Docker Jenkins and Puppet Redesigned and redeployed the Nagios implementation Nodes automatically addedremoved themselves via Puppet Used Kubernetes to deploy scale load balance and worked on Docker Engine Docker HUB Docker Images Used AJAX for transmitting JSON data objects between frontend and controllers and wrote Python scripts to parse XML and JSON documents and load the data in database Implemented RESTful WebServices for sending and receiving the data between multiple systems Implemented business logic using Python and used HTML pyramid MongoDB AWS jQuery PostgreSQL CSS ajax flask node JS JavaScript and Implemented a Continuous Delivery pipeline with Docker Jenkins and GitHub Developed application service components and configured beans using Spring IoC creation of Hibernate mapping files and generation of database schema Implemented and enhanced CRUD operations for the applications using the MVT Model View Template architecture of Django framework and Python conducting code reviews Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML pyramid flask Docker ajax CSS Cassandra JavaScript Extensively worked on developing UI components using Angular JS and JSON to interact Restful web services Designed and developed data management system using PostgreSQL and MySQL Set up and maintain CI infrastructure to streamline build process unit tests functional tests integration tests and artifacts deployments Developed build and deployment scripts using Ant and Maven as build tools in Jenkins to move from one environment to other environments Extensively worked on Application servers like WebLogic and Apache Tomcat Used Ajax for transmitting JSON data objects between frontend and controllers and Worked on configuring TCPIP network interface assigning static routes and hostnames Developed many features for dashboard using Ruby on Rails node Bootstrap CSS and JavaScript J2EE Used SVC version control system for maintain version of code Used agile methodology Python Developer Juniper Networks Los Angeles CA April 2011 to March 2014 Progressive Auto Insurance portal provides ability for end customersusers to request a quote provide quote details purchase auto insurance and payment of insurance amount This platform is built using a Struts framework in the presentation layer The backend functionality is built using Oracle as data persistence layer and Hibernate as data access layer Responsibilities Worked on the project from gather requirement developing the entire application with help from another analyst Used Django configuration to manage URLs and application parameters Generated Python Django Forms to record data of online users Used Django configuration to manage URLs and application parameters Also gained familiarity with supporting technologies like kubernetes and Mesos Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Designed and created backend data access modules using PLSQL stored procedures and Oracle 9i Created database access layer using JDBC Ajax jQuery and PLSQL stored procedures Involved in development of Web Services using SOAP for sending and getting data from the external interface in the XML format Worked in an agile development environment Skills AJAX 7 years AWS 7 years DATABASE 7 years DJANGO 7 years jQuery 7 years Additional Information Skills Programming Languages Python C C PHP Django flask pyramid angular node LAMP WAMP JavaScript hibernate React AWS jQuery PostgreSQL GIT AJAX Libraries beautiful soap PyCharm NumPy SciPy matplotlib urlib2 Database Oracle DB2 SQL servers SSIS SSRS Containers Docker kubernets docker hub docker engine Development tools Open Grok Jenkins Coverity pylint pdb Sublime Text Eclipse emacs gvim Notepad gdb Version Controls CVS SVN GIT GitHub Methodologies Agile SCRUM and Waterfall",
    "extracted_keywords": [
        "Python",
        "Developer",
        "Senior",
        "span",
        "lPythonspan",
        "span",
        "lDeveloperspan",
        "Senior",
        "Python",
        "Developer",
        "Quicken",
        "Loans",
        "Seattle",
        "WA",
        "Work",
        "Experience",
        "Senior",
        "Python",
        "Developer",
        "Quicken",
        "Loans",
        "New",
        "York",
        "NY",
        "April",
        "Present",
        "Responsibilities",
        "PythonDjango",
        "framework",
        "REST",
        "Services",
        "features",
        "dashboard",
        "python",
        "JavaScript",
        "MySQL",
        "database",
        "python",
        "Docker",
        "PythonMySQL",
        "connector",
        "MySQL",
        "package",
        "Kubernetes",
        "Networking",
        "Storage",
        "Security",
        "Telemetry",
        "services",
        "container",
        "infrastructure",
        "Docker",
        "container",
        "pods",
        "load",
        "balance",
        "pods",
        "Kubernetes",
        "Python",
        "bugfixes",
        "applications",
        "source",
        "data",
        "customers",
        "customer",
        "service",
        "team",
        "project",
        "designs",
        "MVC",
        "architecture",
        "components",
        "integration",
        "system",
        "Git",
        "Cassandra",
        "Jenkins",
        "PostgreSQL",
        "jQuery",
        "MySQL",
        "node",
        "JS",
        "custom",
        "tools",
        "Python",
        "Bash",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Tasty",
        "Pie",
        "Web",
        "Framework",
        "Git",
        "jQuery",
        "Developed",
        "web",
        "applications",
        "web",
        "services",
        "APIs",
        "Python",
        "Flask",
        "Cassandra",
        "Docker",
        "Django",
        "knowledge",
        "web",
        "services",
        "protocols",
        "SOAP",
        "REST",
        "Developed",
        "Ruby",
        "Python",
        "health",
        "Mongo",
        "adhoc",
        "backups",
        "Mongo",
        "dump",
        "Mongo",
        "Develop",
        "features",
        "applications",
        "Python",
        "Django",
        "Matplotlib",
        "JS",
        "jQuery",
        "hibernate",
        "AWS",
        "JS",
        "pyramid",
        "HTML",
        "Behavior",
        "Driven",
        "Development",
        "BDD",
        "programming",
        "development",
        "Python",
        "Web",
        "Services",
        "REST",
        "data",
        "interface",
        "format",
        "analysis",
        "Django",
        "PostgreSQL",
        "application",
        "TestDriven",
        "methodology",
        "unit",
        "tests",
        "Python",
        "Unit",
        "test",
        "framework",
        "datasets",
        "Panda",
        "data",
        "frames",
        "MYSQL",
        "database",
        "Python",
        "Develop",
        "features",
        "applications",
        "Python",
        "Django",
        "test",
        "Development",
        "programming",
        "Developed",
        "features",
        "dashboard",
        "Python",
        "Docker",
        "jQuery",
        "Cassandra",
        "MongoDB",
        "Java",
        "Matplotlib",
        "Bootstrap",
        "CSS",
        "JavaScript",
        "pyramid",
        "jQuery",
        "Python",
        "GUI",
        "components",
        "frontend",
        "functionality",
        "selection",
        "criteria",
        "views",
        "templates",
        "python",
        "Django",
        "controller",
        "templating",
        "language",
        "Website",
        "interface",
        "Wrote",
        "MYSQL",
        "database",
        "python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "package",
        "Views",
        "Templates",
        "Python",
        "Website",
        "interface",
        "Djangos",
        "controller",
        "template",
        "application",
        "Linux",
        "environment",
        "commands",
        "Views",
        "Templates",
        "Python",
        "Website",
        "interface",
        "Djangos",
        "controller",
        "template",
        "Python",
        "Unit",
        "test",
        "library",
        "purpose",
        "programs",
        "Python",
        "codes",
        "Python",
        "Developer",
        "Washington",
        "DC",
        "July",
        "March",
        "Roles",
        "Responsibilities",
        "end",
        "HTML",
        "Bootstrap",
        "CSS",
        "application",
        "Python",
        "Django",
        "Cassandra",
        "PostgreSQL",
        "AWS",
        "Linux",
        "Python",
        "libraries",
        "Selenium",
        "NumPy",
        "SQL",
        "Alchemy",
        "Python",
        "libraries",
        "NumPy",
        "Pandas",
        "Matplotlib",
        "Developed",
        "user",
        "registration",
        "login",
        "feature",
        "application",
        "process",
        "Django",
        "user",
        "model",
        "technologies",
        "Docker",
        "Kubernetes",
        "shift",
        "Jenkins",
        "pipelines",
        "microservices",
        "Docker",
        "registry",
        "Kubernetes",
        "Design",
        "HTML5",
        "CSS3",
        "Bootstrap",
        "flask",
        "node",
        "JS",
        "jQuery",
        "Docker",
        "Cassandra",
        "JavaScript",
        "React",
        "accessibility",
        "web",
        "browser",
        "standards",
        "website",
        "application",
        "Python",
        "Django",
        "flask",
        "MySQL",
        "PostgreSQL",
        "MongoDB",
        "pyramid",
        "Linux",
        "XML",
        "Schemas",
        "Developed",
        "Stored",
        "PLSQL",
        "Procedures",
        "Packages",
        "table",
        "indexes",
        "Python",
        "Django",
        "data",
        "users",
        "PyTest",
        "test",
        "cases",
        "deployment",
        "environment",
        "Web",
        "system",
        "preferences",
        "UI",
        "screens",
        "JSP",
        "HTML",
        "Developed",
        "web",
        "applications",
        "web",
        "services",
        "APIs",
        "Python",
        "Responsible",
        "Python",
        "REST",
        "API",
        "framework",
        "DJANGO",
        "NumPy",
        "Matplotlib",
        "Pandas",
        "products",
        "enterprises",
        "Python",
        "web",
        "application",
        "Python",
        "scripting",
        "data",
        "Docker",
        "jQuery",
        "hibernate",
        "MySQL",
        "database",
        "HTMLCSS",
        "UI",
        "website",
        "HTML",
        "CSS",
        "Wrote",
        "MYSQL",
        "database",
        "Python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "package",
        "automation",
        "script",
        "Python",
        "Bash",
        "SQL",
        "CRUD",
        "operations",
        "update",
        "read",
        "Responsible",
        "Python",
        "REST",
        "API",
        "framework",
        "Django",
        "Python",
        "Developer",
        "American",
        "Express",
        "New",
        "York",
        "NY",
        "March",
        "May",
        "Responsibilities",
        "Python",
        "Django",
        "Pyramid",
        "frameworks",
        "applications",
        "programming",
        "frontend",
        "functionality",
        "JavaScript",
        "Ajax",
        "Docker",
        "AngularJS",
        "technologies",
        "CI",
        "pipeline",
        "testing",
        "deployment",
        "automation",
        "Docker",
        "Jenkins",
        "Puppet",
        "Nagios",
        "implementation",
        "Nodes",
        "Puppet",
        "Kubernetes",
        "scale",
        "load",
        "balance",
        "Docker",
        "Engine",
        "Docker",
        "HUB",
        "Docker",
        "Images",
        "AJAX",
        "JSON",
        "data",
        "objects",
        "frontend",
        "controllers",
        "Python",
        "scripts",
        "XML",
        "documents",
        "data",
        "database",
        "WebServices",
        "data",
        "systems",
        "business",
        "logic",
        "Python",
        "HTML",
        "pyramid",
        "MongoDB",
        "AWS",
        "jQuery",
        "PostgreSQL",
        "CSS",
        "flask",
        "node",
        "JS",
        "JavaScript",
        "Continuous",
        "Delivery",
        "pipeline",
        "Docker",
        "Jenkins",
        "GitHub",
        "application",
        "service",
        "components",
        "beans",
        "Spring",
        "IoC",
        "creation",
        "Hibernate",
        "mapping",
        "files",
        "generation",
        "database",
        "schema",
        "CRUD",
        "operations",
        "applications",
        "MVT",
        "Model",
        "View",
        "Template",
        "architecture",
        "Django",
        "framework",
        "Python",
        "code",
        "reviews",
        "user",
        "interface",
        "guidelines",
        "standards",
        "development",
        "maintenance",
        "website",
        "HTML",
        "pyramid",
        "flask",
        "Docker",
        "CSS",
        "Cassandra",
        "JavaScript",
        "UI",
        "components",
        "JS",
        "JSON",
        "web",
        "services",
        "data",
        "management",
        "system",
        "PostgreSQL",
        "MySQL",
        "CI",
        "infrastructure",
        "build",
        "process",
        "unit",
        "tests",
        "integration",
        "tests",
        "deployments",
        "build",
        "deployment",
        "scripts",
        "Ant",
        "Maven",
        "build",
        "tools",
        "Jenkins",
        "environment",
        "environments",
        "Application",
        "servers",
        "WebLogic",
        "Apache",
        "Tomcat",
        "Ajax",
        "JSON",
        "data",
        "objects",
        "frontend",
        "controllers",
        "TCPIP",
        "network",
        "interface",
        "routes",
        "hostnames",
        "features",
        "dashboard",
        "Ruby",
        "Rails",
        "node",
        "Bootstrap",
        "CSS",
        "JavaScript",
        "J2EE",
        "SVC",
        "version",
        "control",
        "system",
        "version",
        "code",
        "methodology",
        "Python",
        "Developer",
        "Juniper",
        "Networks",
        "Los",
        "Angeles",
        "CA",
        "April",
        "March",
        "Progressive",
        "Auto",
        "Insurance",
        "portal",
        "ability",
        "end",
        "customersusers",
        "quote",
        "details",
        "auto",
        "insurance",
        "payment",
        "insurance",
        "amount",
        "platform",
        "Struts",
        "framework",
        "presentation",
        "layer",
        "functionality",
        "Oracle",
        "data",
        "persistence",
        "layer",
        "Hibernate",
        "data",
        "access",
        "layer",
        "Responsibilities",
        "project",
        "gather",
        "requirement",
        "application",
        "help",
        "analyst",
        "Django",
        "configuration",
        "URLs",
        "application",
        "parameters",
        "Python",
        "Django",
        "Forms",
        "data",
        "users",
        "Django",
        "configuration",
        "URLs",
        "application",
        "parameters",
        "familiarity",
        "technologies",
        "kubernetes",
        "Mesos",
        "support",
        "Amazon",
        "AWS",
        "S3",
        "RDS",
        "files",
        "database",
        "Amazon",
        "Cloud",
        "data",
        "access",
        "modules",
        "procedures",
        "Oracle",
        "9i",
        "database",
        "access",
        "layer",
        "JDBC",
        "Ajax",
        "jQuery",
        "procedures",
        "development",
        "Web",
        "Services",
        "SOAP",
        "data",
        "interface",
        "XML",
        "format",
        "development",
        "environment",
        "Skills",
        "AJAX",
        "years",
        "AWS",
        "years",
        "DATABASE",
        "years",
        "DJANGO",
        "years",
        "jQuery",
        "years",
        "Additional",
        "Information",
        "Skills",
        "Programming",
        "Languages",
        "Python",
        "C",
        "C",
        "PHP",
        "Django",
        "node",
        "LAMP",
        "WAMP",
        "JavaScript",
        "hibernate",
        "React",
        "jQuery",
        "PostgreSQL",
        "GIT",
        "AJAX",
        "soap",
        "PyCharm",
        "NumPy",
        "SciPy",
        "matplotlib",
        "urlib2",
        "Database",
        "Oracle",
        "DB2",
        "SQL",
        "SSIS",
        "SSRS",
        "Containers",
        "Docker",
        "docker",
        "hub",
        "docker",
        "engine",
        "Development",
        "tools",
        "Open",
        "Grok",
        "Jenkins",
        "Coverity",
        "pylint",
        "pdb",
        "Sublime",
        "Text",
        "Eclipse",
        "gvim",
        "Notepad",
        "gdb",
        "Version",
        "Controls",
        "CVS",
        "SVN",
        "GIT",
        "GitHub",
        "Methodologies",
        "Agile",
        "SCRUM",
        "Waterfall"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T21:51:41.300173",
    "resume_data": "Senior Python Developer Senior span lPythonspan span lDeveloperspan Senior Python Developer Quicken Loans Seattle WA Work Experience Senior Python Developer Quicken Loans New York NY April 2017 to Present Responsibilities Designed and developed PythonDjango framework for REST Services Created and tested many features for dashboard using python and JavaScript Executed various MySQL database queries from python using Docker PythonMySQL connector and MySQL dB package Integrating Kubernetes with Networking Storage Security Telemetry and other services to provide a comprehensive container infrastructure Managing the Docker container through the pods and performing the load balance between the pods through Kubernetes Deployed many Python bugfixes of the two main applications that are main source of data for both customers and internal customer service team Created project designs using MVC architecture components Developed a fully automated continuous integration system using Git Cassandra Jenkins ajax PostgreSQL jQuery MySQL node JS and custom tools developed in Python and Bash Developed frontend and backend modules using Python on Django including Tasty Pie Web Framework using Git and jQuery Developed web applications RESTful web services and APIs using Python Flask Cassandra Docker MongoDB Django good knowledge of web services with protocols SOAP REST Developed Ruby Python scripts to monitor health of Mongo databases and perform adhoc backups using Mongo dump and Mongo restore Develop consumerbased features and applications using Python Django Matplotlib angular JS jQuery hibernate AWS node JS pyramid HTML Behavior Driven Development BDD and pairbased programming Involved in development of Python based Web Services using REST for sending and getting data from the external interface in the JSON format and perform analysis using Django PostgreSQL Developed the application using the TestDriven methodology and designed the unit tests using Python Unit test framework Managed datasets using Panda data frames and MYSQL Queried the database queries using Python Develop consumerbased features and applications using Python and Django in test driven Development and pairbased programming Developed and tested many features for dashboard using Python Docker jQuery Cassandra MongoDB Java Matplotlib ajax Bootstrap CSS JavaScript pyramid and jQuery Used Python based GUI components for the frontend functionality such as selection criteria Developed views and templates with python and Django view controller and templating language to create a userfriendly Website interface Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL dB package Developed Views and Templates with Python and Website interface is created using Djangos view controller and template An application was developed in Linux environment and dealt with all its commands Developed Views and Templates with Python and Website interface is created using Djangos view controller and template Python Unit test library was used for the purpose of testing many programs on Python and other codes Python Developer Washington DC July 2015 to March 2017 Roles Responsibilities Designed front end using HTML Bootstrap and CSS Created entire application using Python Django ajax Cassandra PostgreSQL AWS MongoDB and Linux Used Python libraries like Selenium NumPy and SQL Alchemy Worked on several Python libraries like NumPy Pandas and Matplotlib Developed and implemented the user registration and login feature for the application process by extending Django user model Worked in containerbased technologies like Docker Kubernetes and Open shift and used Jenkins pipelines to drive all microservices builds out to the Docker registry and then deployed to Kubernetes Design develop and test HTML5 CSS3 Bootstrap flask node JS jQuery Docker Cassandra JavaScript and React that meets accessibility and web browser standards for website Created entire application using Python Django ajax flask MySQL PostgreSQL MongoDB pyramid and Linux Created Several XML Schemas and Developed Stored PLSQL Procedures and Packages to automatically create and drop table indexes Generated Python Django forms to record data of online users and used PyTest for writing test cases Set up the deployment environment on Web Logic Developed system preferences UI screens using JSP and HTML Developed web applications and RESTful web services and APIs using Python Responsible for setting up Python REST API framework using DJANGO Used NumPy Matplotlib and Pandas to generate products for major enterprises Created a Python based web application using Python scripting for data processing Docker jQuery hibernate ajax MySQL for the database and HTMLCSS Designed and developed the UI of the website using HTML and CSS Wrote executed various MYSQL database queries from Python using PythonMySQL connector MySQL dB package Developed and designed automation script using Python and Bash Built SQL queries for performing various CRUD operations like create update read and delete Responsible for setting up Python REST API framework using Django Python Developer American Express New York NY March 2014 to May 2015 Responsibilities Used Python Django and Pyramid frameworks to develop applications and responsible for both backend programming and frontend functionality using JavaScript Ajax Docker AngularJS and other technologies Built a new CI pipeline and performed testing and deployment automation with Docker Jenkins and Puppet Redesigned and redeployed the Nagios implementation Nodes automatically addedremoved themselves via Puppet Used Kubernetes to deploy scale load balance and worked on Docker Engine Docker HUB Docker Images Used AJAX for transmitting JSON data objects between frontend and controllers and wrote Python scripts to parse XML and JSON documents and load the data in database Implemented RESTful WebServices for sending and receiving the data between multiple systems Implemented business logic using Python and used HTML pyramid MongoDB AWS jQuery PostgreSQL CSS ajax flask node JS JavaScript and Implemented a Continuous Delivery pipeline with Docker Jenkins and GitHub Developed application service components and configured beans using Spring IoC creation of Hibernate mapping files and generation of database schema Implemented and enhanced CRUD operations for the applications using the MVT Model View Template architecture of Django framework and Python conducting code reviews Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML pyramid flask Docker ajax CSS Cassandra JavaScript Extensively worked on developing UI components using Angular JS and JSON to interact Restful web services Designed and developed data management system using PostgreSQL and MySQL Set up and maintain CI infrastructure to streamline build process unit tests functional tests integration tests and artifacts deployments Developed build and deployment scripts using Ant and Maven as build tools in Jenkins to move from one environment to other environments Extensively worked on Application servers like WebLogic and Apache Tomcat Used Ajax for transmitting JSON data objects between frontend and controllers and Worked on configuring TCPIP network interface assigning static routes and hostnames Developed many features for dashboard using Ruby on Rails node Bootstrap CSS and JavaScript J2EE Used SVC version control system for maintain version of code Used agile methodology Python Developer Juniper Networks Los Angeles CA April 2011 to March 2014 Progressive Auto Insurance portal provides ability for end customersusers to request a quote provide quote details purchase auto insurance and payment of insurance amount This platform is built using a Struts framework in the presentation layer The backend functionality is built using Oracle as data persistence layer and Hibernate as data access layer Responsibilities Worked on the project from gather requirement developing the entire application with help from another analyst Used Django configuration to manage URLs and application parameters Generated Python Django Forms to record data of online users Used Django configuration to manage URLs and application parameters Also gained familiarity with supporting technologies like kubernetes and Mesos Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Designed and created backend data access modules using PLSQL stored procedures and Oracle 9i Created database access layer using JDBC Ajax jQuery and PLSQL stored procedures Involved in development of Web Services using SOAP for sending and getting data from the external interface in the XML format Worked in an agile development environment Skills AJAX 7 years AWS 7 years DATABASE 7 years DJANGO 7 years jQuery 7 years Additional Information Skills Programming Languages Python C C PHP Django flask pyramid angular node LAMP WAMP JavaScript hibernate React AWS jQuery PostgreSQL GIT AJAX Libraries beautiful soap PyCharm NumPy SciPy matplotlib urlib2 Database Oracle DB2 SQL servers SSIS SSRS Containers Docker kubernets docker hub docker engine Development tools Open Grok Jenkins Coverity pylint pdb Sublime Text Eclipse emacs gvim Notepad gdb Version Controls CVS SVN GIT GitHub Methodologies Agile SCRUM and Waterfall",
    "unique_id": "59241ba2-068d-401f-9171-0bc279ed9022"
}