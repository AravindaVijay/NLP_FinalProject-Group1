{
    "clean_data": "Python Developer span lPythonspan span lDeveloperspan Python Developer Morgan Stanley Work Experience Python Developer Morgan Stanley September 2018 to Present Responsibilities Designed database Model APIs and Views utilizing Python to build an interactive webbased application Involved in building database Model APIs and Views utilizing Python to build an interactive webbased solution Developed a fully automated continuous integration system using Git Jenkins MySQL and custom tools developed in Python and Bash Designed and managed API system deployment using fast http server and Amazon AWS architecture and developed frontend and backend modules using Python on Django including Tasty Pie Web Framework using Git Collect data that introspects the performance of query and update operations on a MongoDB instance and recorded the online users data using Python Django forms and implemented test case using Pytest Developed Ruby Python scripts to monitor health of Mongo databases and perform adhoc backups using Mongo dump and Mongo restore Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Written Chef Cookbooks recipes using ruby to automate installation of Middleware Infrastructure like Apache Tomcat JDK and configuration tasks for new environments Used regular expression for faster search results in combination with Angular2 builtin and custom pipes Develop consumerbased features and applications using Python Django HTML Behavior Driven Development BDD and pairbased programming Used Test driven approach for developing the application and Implemented the unit tests using Python Unit test framework and Development of Isomorphic ReactJS and Redux driven API client applications Developed backend web services using Nodejs and stored dependencies using Node Package Manager NPM Used jQuery and AJAX calls for transmitting JSON data objects between front end and controllers and Utilized continuous integration and automated deployments with Jenkins Ansible and Docker Used Amazon Elastic Beanstalk with Amazon EC2 to deploy project into AWS and good experience with AWS storage services S3 Expertise in React JS and working with React Flux architecture Integrated Apache Kafka for data ingestion Successfully secured the Kafka cluster with Kerberos Implemented Kafka Security Features using SSL and without Kerberos Further with more grainfines Security I set up Kerberos to have users and groups this will enable more advanced security features Used NumPy for Numerical analysis and several python libraries like SymPy wxPython and matPlotLib Successfully Generated consumer group lags from Kafka using their API Kafka Used for building realtime data pipelines between clusters Worked on serverside applications with Django using Python programming and used python libraries like Beautiful Soup matplotlib SciPy NumPy and Built efficient Nodejs backend for client web application Experience to build CICD Pipeline to automate the code release process using Integration tools like GitSVN GitHub Jenkins Developed tools to automate some base tasks using Python Shell scripting and XML Used PyQt to implement GUI for the user to create modify and view reports based on client data Experience in setting up CICD pipeline integrating various tools with Jenkins to build and run Terraform jobs to create infrastructure in AWS Implemented Stable React JS components and Standalone functions to be added to any future pages Managed developed and designed a dashboard control panel for customers and Administrators using Django Oracle DB PostgreSQL and VMWare API calls Involved in development of Python based Web Services using REST for sending and getting data from the external interface in the JSON format and perform analysis using Django PostgreSQL Designed automation scripts to back up the old records by using Mongo DB export command and transferred the files into backup machine with the help of ftplib Followed AGILE development methodology to develop the application and developed Golang API and chatbot using TDD to automate software deployments and rollbacks Used Test driven approach TDD for developing services required for the application and managed datasets using Panda data frames and MYSQL Queried the database queries using Python Developed the application using the TestDriven methodology and designed the unit tests using Python Unit test framework Working as an application developer experienced with controllers views and models in Django Designed front end and backend of the application using Python on Django Web Framework Develop consumerbased features and applications using Python and Django in test driven Development and pairbased programming Created Ansible Playbooks and Puppet Manifests to provision Apache Web servers Tomcat servers Nginx Apache Spark and other applications Manage AWS EC2 instances utilizing Auto Scaling Elastic Load Balancing and Glacier for our QA and UAT environments as well as infrastructure servers for GITBitbucket and Puppet Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Good experience in developing web applications and implementing Model View Control MVC architecture using serverside applications like Django and Flask Developed and tested many features for dashboard using Python Java Bootstrap CSS JavaScript and jQuery Created interactive data charts on web application using High charts JavaScript library with data coming from Apache Cassandra Installed configured and managed the ELK Elastic Search Log Facilitated Scrum ceremonies like Sprint planning retrospectives Daily standups etc Stash and Kibana for Log management within EC2 Elastic Load Balancer ELB for Elastic search Created Terraform scripts for EC2 instances Elastic Load balancers and S3 buckets Implemented Terraform to manage the AWS infrastructure and managed servers using configuration management tools like Chef and Ansible Wrote ANSIBLE Playbooks with Python SSH as the Wrapper to Manage Configurations of AWS Nodes and Test Playbooks on AWS instances using Python Run Ansible Scripts to provision Dev servers Worked on frontend frameworks like CSS Bootstrap for development of Web application Worked in MySQL database on simple queries and writing Stored Procedures for normalization and denormalization Used Python based GUI components for the frontend functionality such as selection criteria Connected continuous integration system with GIT version control repository and continually build as the checkins come from the developer Experience in all areas of Jenkins like Plugin Management Securing and scaling Jenkins integrating Code Analysis Performance issues Analytics and Test Phases to complete the CICD pipelines within Jenkins Worked with View Sets in DjangoREST framework for providing web services and consumed web services performing CRUD operations Wrote ANSIBLE Playbooks with Python SSH as the Wrapper to Manage Configurations of AWS Nodes and Test Playbooks on AWS instances using Python Run Ansible Scripts to provision Dev servers Used Flask framework for application development Designed and implemented a dedicated MYSQL database server to drive the webapps and report on daily progress Developed python Script for moving files from drop box to Amazon server Consumed external APIs and wrote RESTful API using Django REST Framework and Angularjs Developed views and templates with python and Django view controller and templating language to create a userfriendly Website interface Developed internal project in Flask to generate report from google analytics on daily monthly and weekly basis Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL dB package Used Python Library Beautiful Soup for Web Scraping to extract data for building graphs Worked in development of applications especially in UNIX environment and familiar with all its commands Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL dB package Developed Python based API RESTful Web Services to track the events and perform analysis using Django Supportedmaintained client website within the DJANGO CMS system for various website needs Performed dynamic UI designing with HTML5 CSS3 less Bootstrap JSON and AJAX BuildingMaintaining Docker container clusters managed by Kubernetes Linux Bash GIT Docker on GCP Utilized Kubernetes and Docker for the runtime environment of the CICD system to build test deploy Created Python and Bash scripts to monitor increase efficiency of retail management application system and operations Installed SWM CICD for building automation deployments for upgrades and installs which was carried out by Jenkins Used Ansible playbooks to setup Continuous Delivery pipeline This primarily consists of a Jenkins and Sonar server the infrastructure to run these packages and various supporting software components such as Maven etc Worked on some of the new features of Angular 4 like new if else syntax ngtemplates form validators Designed and developed the application using Angular framework along with HTML5 CSS3 Type Script Java Script Bootstrap Nodejs NPM Mongo DB Moved existing AngularJS controllers and services to Angular components for more responsive and less dependency Enhanced legacy application by building new components in Angular 2 and typescript Developed single page applications using Angular Typescript web pack and grunt Hands on Experience on Angular technology for one complete project in rebasing the UI of the application using the techniques in Angular Created a PythonDjango based web application for data processing using MySQL as database and HTMLCSSJavaScript for frontend development and D3 JavaScript for Data Visualization Implemented REST APIs in Python using python based microframework called Flask with SQL Alchemy in the backend for management of data center resources on which OpenStack would be deployed Worked in DevOps group running Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Designed and developed MySQL Procedures and UNIX Shell Scripts for Data ImportExport and Conversions Responsible for debugging and troubleshooting programming related issues Worked on Atlassian tools like Bamboo Jira and confluence Implemented the function to send and receive AMQP messages on RabbitMQ synchronously and asynchronously and send JMS message to Apache ActiveMQ on the edge device Design develop and test HTML5 CSS3 Bootstrap JavaScript jQuery and ReactJS that meets accessibility and web browser standards for website Created a PythonDjango based web application using Python scripting for data processing MySQL for the database and HTMLCSSJQuery and HighCharts matplotlib for data visualization of sales tracking progress identifying trends Fetched twitter feeds for certain important keyword using pythontwitter library Tweepy Used JSON to store the twitter data which was further represented using matplotlib visualization and generated graphical reports for business decision using matplotlib library Developed build and deployment scripts using MAVEN as build tool in Jenkins Built various graphs for business decisionmaking use of Python matplotlib library Developed user interface by using the React js Flux for SPA development Installed Kerberos secured Kafka cluster with no encryption on Dev and Prod Also set up Kafka ACLs into it Successfully did set up a no authentication Kafka listener in parallel with Kerberos SASL Listener Also I tested nonauthenticated user Anonymous user in parallel with Kerberos user Understanding of securecloud configuration Cloud Trail cloudsecurity technologies VPC Security Groups etc and cloudpermission systems IAM Experience in Installing JenkinsPlugins for GIT Repository Setup SCM Polling for Immediate Build with Maven and Maven Repository and Deployment of apps using custom modules through Puppet as a CICD Process Installed and configured configuration tool such as Chef Serverworkstation and nodes via CLI tools to AWS nodes Developed and Deployed SOAP based Web Services on Tomcat Server related Database on InfluxDB also worked on Interface created for Kafka also checked the measurements on Databases Used Jenkins for continuous integration for code quality inspection and worked on building local repository mirror and source code management using Git hub Focused on containerization and immutable infrastructure Docker has been core to this experience along with Mesos Marathon and Kubernetes Integrated Kubernetes with network storage and security to provide comprehensive infrastructure and orchestrated container across multiple hosts Administered RedHat Linux servers for several functions including managing Apace Tomcat server mail server MySQL database and firewalls in both development and production environments Created and configured new JIRA projects and worked with departments to maintain existing JIRA Used Pandas library for statistics Analysis NumPy for Numerical analysis Developed GUI using webapp2 for dynamically displaying the test block documentation and other features of python code using a web browser Responsible for user validations on client side as well as server side Automated the existing scripts for performance calculations using NumPy and SQLalchemy To convert the Entire event flow as a SOA based architecture used RabbitMQ as a queues and BUS Implemented the function to send and receive AMQP messages on RabbitMQ synchronously and asynchronously and send JMS message to Apache ActiveMQ on the edge device Python Developer Barclays September 2013 to January 2016 Responsibilities Developed frontend and backend modules using Python on Django including Tasty Pie Web Framework using GitCollect data that introspect the performance of query and update operations on a MongoDB instance Developed Ruby Python scripts to monitor health of Mongo databases and perform adhoc backups using Mongo dump and Mongo restore Worked in DevOps group running Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Also gained familiarity with supporting technologies like kubernetes and Mesos Develop consumerbased features and applications using Python Django HTML Behavior Driven Development BDD and pairbased programming Implemented the application using Python Spring IOC Inversion of Control Django Framework and handled the security using Python Spring Security Used Test driven approach for developing the application and Implemented the unit tests using Python Unit test framework and Development of Isomorphic ReactJS and Redux driven API client applications Developed backend web services using Nodejs and stored dependencies using Node Package Manager NPM Designed and managed API system deployment using fast http server and Amazon AWS architecture Used jQuery and AJAX calls for transmitting JSON data objects between front end and controllers and Utilized continuous integration and automated deployments with Jenkins Ansible and Docker Expertise in setting up configure manage and scale Amazon Elastic Search cluster and used Log Stash along with Kibana ELK Stack for centralized logging which stores logs and metrics into an S3 bucket using Lambda functions utilized Glacier for storage for setting up and maintenance of AutoScaling of AWS stacks Enhanced user experience by designing new web features using MVC Framework like Express JS and Node JS Used advanced level of HTML5 JavaScript CSS3 and pure CSS layouts and Angular Worked on the modernization of a legacy and outsourced UI technologies used were Angular JS 2 CSS Node JS Express JS and AWS Amazon Web Services Developed a tool to retrieve and send data to third party service provider this feature was implemented using REST Daily programming in server and client side by using Angularjs Reactjs NodeJS and Express JS Worked on Front end by using Angular JS React JS and JavaScript Frameworks Extensive use of Angularjs for developing the SPAs Single Page Applications for internal applicationtool Developed multiple POCs to create a user interface in Angular JS Worked on Angular JS directives Controllers Filters Services Templets Events and Injectors Construct a powerful and modern frontend architecture involving React Redux and ES2015 Extensive knowledge of and use of Angularjs directives to bring additional functionality to HTML Responsible for design and development of the web pages from mock ups PSD Knowledge in using React JS Flux for SPA development Implemented clientside Interface using React JS Good knowledge in AngularJS and Responsive Web Design Involved with bug fixing on functionality performance and designing issues with JavaScript jQuery HTML5 CSS3 and AngularJS Used Bootstrap and AngularJS Reactjs and Nodejs in effective web design Developed and designed system to collect data from multiple portal using Kafka and then process it using spark Expertise in delivering Agile projects from end to end Continuous IntegrationContinuous Delivery CICD pipeline by integration of tools like Jenkins Chef and AWS for VM provisioning Integrated Jenkins with Docker container using Cloud bees Docker pipeline plugin and provisioned the EC2 instance using Amazon EC2 plugin Experience in working with automation setup and administration of build and deployment CICD tools such as Jenkins Anthill Pro and UDeployUcode and integrated with Build Automation tools like ANT Maven Gradle and other Atlassian products Bamboo JIRA BitBucket for building of deployable artifacts JAR WAR EAR and DLL EXE from source code Used Jenkins with SonarQube to get the better quality of the Source code Architected and developed a Golang API using TDD to aggregate data to show application server alignment Worked in using ReactJS components Forms Events Keys Router Animations and Flux concept Developed backup and recovery engine for VM backuprecovery using VMware vSphere APIs GoLang programming language and RabbitMQ Message bus communication interface Using Kubernetes I have controlled and automated application deployments and updates and orchestrated deployment Good experience in JavaScript MVC framework like Angular JS React JS Automate the installation of ELK agent filebeat with Ansible playbook Used Python NumPy spicy pandas scikitlearn seaborn and Spark PySpark MLlib to develop variety of models and algorithms for analytic purposes Installed configured and managed the ELK Elastic Search Log Facilitated Scrum ceremonies like Sprint planning retrospectives Daily standups etc Stash and Kibana for Log management within EC2 Elastic Load Balancer ELB for Elastic search Used Amazon Elastic Beanstalk with Amazon EC2 to deploy project into AWS and good experience with AWS storage services S3 Experience in Developing User Interface UI Rich Web Applications and Web Service Applications using HTML 4 XHTML CSS 2 XML AJAX Object Oriented Java Script ANGULARJS REACTJS BOOTSTRAP Framework RESTful services JAVA JSP Developed backup and recovery engine for VM backuprecovery using VMware vSphere APIs Golang programming language and RabbitMQ Message bus communication interface Managed developed and designed a dashboard control panel for customers and Administrators using Django Oracle DB PostgreSQL and VMWare API calls Developed backup and recovery engine for VM backuprecovery using VMware vSphere APIs GoLang programming language and RabbitMQ Message bus communication interface Designed automation scripts to back up the old records by using Mongo DB export command and transferred the files into backup machine with the help of ftplib Used Test driven approach TDD for developing services required for the application and managed datasets using Panda data frames and MYSQL Queried the database queries using Python Using Chef deployed and configured Elasticsearch Logstash and Kibana ELK for log analytics full text search application monitoring in integration with AWS Lambda and CloudWatch Built Elastic search Log stash and Kibana ELK to store logs and metrics into S3 bucket using Lambda function Involved in implementing the complete Application in the inbuild Spring MVC Architecture with Angular JS Developed custom consumers and producers for Apache Kafka in Go golang for cars monitoring system Used Node JS Angular JS and MVC Frameworks in the development of the web applications Recorded the online users data using Python Django forms and implemented test case using PytestDeveloped the application using the TestDriven methodology and designed the unit tests using Python Unit test framework Involved in multitiered J2EE design utilizing Spring IOC MVC architecture Implemented database connectivity using Spring JDBC framework to work upon different modules Created required JSPs and Servlets for controller and view part Worked on exchanging data in JSON format between web application and backend Wrote DAO layer required SQL queries and Spring Controller to handle data and request to Spring application Working as an application developer experienced with controllers views and models in Django Designed front end and backend of the application using Python on Django Web Framework Develop consumerbased features and applications using Python and Django in test driven Development and pairbased programming Good experience in developing web applications and implementing Model View Control MVC architecture using serverside applications like Django and Flask Developed and tested many features for dashboard using Python Java Bootstrap CSS JavaScript and jQuery Created interactive data charts on web application using High charts JavaScript library with data coming from Apache Cassandra Created Terraform scripts for EC2 instances Elastic Load balancers and S3 buckets Implemented Terraform to manage the AWS infrastructure and managed servers using configuration management tools like Chef and Ansible Wrote ANSIBLE Playbooks with Python SSH as the Wrapper to Manage Configurations of AWS Nodes and Test Playbooks on AWS instances using Python Run Ansible Scripts to provision Dev servers Implemented CICD for J2EE and Microservices Architecture environment Net Core Zookeeper Kafka Redis using Anthill Pro and Deploy and integrated SonarQube to get better Source code Having Knowledge on AWS Lambda Auto scaling Cloud Front RDS Route53 AWS SNS SQS SES Worked on frontend frameworks like CSS Bootstrap for development of Web application Worked in MySQL database on simple queries and writing Stored Procedures for normalization and denormalization Used Python based GUI components for the frontend functionality such as selection criteria Connected continuous integration system with GIT version control repository and continually build as the checkins come from the developer Worked with View Sets in DjangoREST framework for providing web services and consumed web services performing CRUD operations Wrote ANSIBLE Playbooks with Python SSH as the Wrapper to Manage Configurations of AWS Nodes and Test Playbooks on AWS instances using Python Run Ansible Scripts to provision Dev servers Used Flask framework for application development Designed and implemented a dedicated MYSQL database server to drive the webapps and report on daily progress Developed python Script for moving files from drop box to Amazon server Consumed external APIs and wrote RESTful API using Django REST Framework and Angular Developed views and templates with python and Django view controller and templating language to create a userfriendly Website interface Automated various infrastructure activities like Continuous Deployment Application Server setup Stack Monitoring using Ansible playbooks and has integrated Ansible with Run deck and Jenkins Created a PythonDjango based web application for data processing using MySQL as database and HTMLCSSJavaScript for frontend development and D3 JavaScript for Data Visualization Worked in DevOps group running Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Created and maintained various DevOps related tools for the team such as provisioning scripts deployment tools and staged virtual environment using Docker Experienced in working with Redux architecture using complex ObjectOriented concepts in improving the performance of the websites Experience in using React JS components Forms Events Keys Router plus Redux Animations and Flux concept In Phase Two worked closely with the BackEnd team to display data using the Custom Components library Components and Redux Used Middleware ReduxPromise in application to retrieve data from BackEnd and to also perform RESTFUL services Gathering requirements and translating the business details into Technical design Implemented responsive user interface and standards throughout the development and maintenance of the website using the HTML CSS JavaScript Bootstrap jQuery Developed views and templates with Python and Djangos to create a userfriendly website interface Used Gulp as a taskbuild runner for development Developed and tested many features for dashboard using Python HTML JavaScript CSS and Bootstrap String frontendUser Interface development using HTML CSS ES56 JSX ReactJS Reduxsaga and REST API Designed RESTful Webservices using FLASK with emphasis on improved Security for the service using FLASKHTTP Auth with HTTPS Also utilized Hug libraries to develop HTTP REST APIs to provide validations and used CherryPy framework to model and bind HTTP Worked with Boto3 as interface for AWS API and TensorFlow to make numerical computations using data flow graphs Utilized Python libraries like wxPython NumPy Twisted PyQT Web2py Pygal Plotly Developed various APIs for Django applications using Djangotastypie Used Amazon Elastic Beanstalk with Amazon EC2 instance to deploy Django project into AWS Configured continuous integration with Jenkins on Amazon EC2 Implemented SQL Alchemyas ORM mapping tool for complete access and Wrote SQL queries and maintained PostgreSQL RDBMS in the local development environment Wrote and executed various MySQL database queries from python using PythonMySQL connector and MySQL DB package Managed large datasets using Pandas API ecosystem to analyze the different segments of customers based on Location Experience in creating Docker containers leveraging existing Linux Containers and AMIs in addition to creating Docker containers from scratch Used React JS for templating for faster compilation and developing reusable components Involved designing in web pages using HTML 5 CSS3 JavaScript Bootstrap SASS LESS Reactjs Redux Flex Mongo DB Responsible to Style look and feel of the web page with SASS that extends CSS with dynamic behavior such as variable mixing operations and functions Researching JavaScript based frameworks like React Native and IonicCordova for frontend Worked on React JS Virtual Dom and React views rendering using components which contains additional components called custom HTML tags Implemented various screens for the front end using Reactjs and used various predefined components from NPM Node Package Manager and redux library Using Kubernetes is a portable extensible opensource platform for managing containerized workloads and services that facilitates both declarative configuration and automation Effectively used the life cycle methods such as Initialization Mounting Updating and Unmounting and invoked them at different phases of the components life cycle to develop quality React Js user interfaces Worked on creating the Docker containers and Docker consoles for managing the application life cycle Used Django Framework for developing web applications using model view control architecture Developed and implemented R and Shiny application which showcases machine learning for business forecasting Managed developed and designed a dashboard control panel for customers and Administrators using Django Oracle DB and VM Ware API calls Architected and developed a Golang API using TDD to aggregate data to show application server alignment Built database Model Views and APIs using Python for interactive webbased solution Supported Apache Tomcat web server on Linux Platform Involved in User Acceptance Testing and prepared UAT Test Scripts implemented flux pattern by using redux framework as a core dependency Worked on loading CSVTXTDAT files using Scala language in Spark Framework to process the data by creating Spark Data frame and RDD and save the file in parquet format in HDFS to load into fact table using ORC Reader Used NumPy for Numerical analysis for Insurance premium Implemented configuration changes for data models Different testing methodologies like unit testing Integration testing web application testing Selenium testing performed Implemented SSIS packages for data sourcing from Heterogeneous data systems using SSIS ETL Tool to support daily incremental data refresh full loads Preparation of technical specification document for the development of Informatica Extraction Transformation and Loading ETL mappings to load data into various tables in Data Marts and defining ETL standards Worked on various applications using Python integrated IDEs Eclipse PyCharm and NetBeans Automated the existing scripts for performance calculations using NumPy and SQL alchemy Extensively used python modules such as requests urllib and urllib2 for web crawling Used packages like dplyr tidyr ggplot2 in R Studio for data visualization Maintained and updated existing automated solutions Handled potential points of failure through error handling and communication of failure Performed efficient delivery of code based on principles of TestDriven Development TDD and continuous integration to keep in line with Agile Software Methodology principles Lock mechanisms were implemented and the functionality of multithreading has been used PythonDjango based web application PostgreSQL DB and integrations with 3rd party email messaging storage services Worked on Open stack Swift for moving large data files using Keystone and Horizon and integrated them into the web services and client server application Automation database programming through Perl DBI module Design and implemented custom scripts Extensive use of version controller Team Foundation Server TFS Wrote Perl Modules and subroutine packages to facilitate code reuse portability and modularity Extracting data from the database using SASAccess SAS SQL procedures and create SAS datasets Used MultiThreading factory model to distribute learning process backtesting into various worker processes Developed a fully automated continuous integration system using Git Gerrit Jenkins MySQL and custom tools developed in Python and Bash Used Ajax JSON to send request to the server to check the functionality of the websites Maintained states in the stores and dispatched the actions using redux Test and validated the custom scripts and delivered automated solutions for science models Anticipated potential parts of failure database communication points file system errors Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Used Pandas library for statistics Analysis Managed large datasets using Panda data frames and MySQL Developed GUI using webapp2 for dynamically displaying the test block documentation and other features of python code using a web browser Developed the required XML Schema documents and implemented the framework for parsing XML documents Responsible for user validations on client side as well as server side Setup Docker on Linux and configured Jenkins to run under Docker host Used advanced packages like Mock patch and Beautiful SOAP b4 in extracting the Data during development phase and perform unit testing Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Creating RESTful web services for Catalog and Pricing with Django MVT MySQL and MongoDB Development of Python APIs to dump the array structures in the Processor at the failure point for debugging Fixed bugs providing production support enhanced applications by improving code reuse and performance by making effective use of various design patterns Collaborated within a team using an agile development workflow and widelyaccepted collaboration practices using Git Developed a fully automated continuous integration system using Git Jenkins MySQL and custom tools developed in Python and Bash Implemented Multithreading module and complex networking operations like race route SMTP mail server and web server using Python Used React flux to polish the data and for single directional flow Used standard Python modules likecsv robotparser itertools pickleto ensure privacy of sensitive data Automated RabbitMQ cluster installations and configuration using PythonBash Experience with Data migration from Sqlite3 to Apache Cassandra database Cassandra data model designing implementation maintaining and monitoring using DSE DevCentre DatastaxOpscenter Written test cases using PyUnit and Selenium Automation testing for better manipulation of test scripts Working on Kubernet in scaling and management of containerized applications Used automation Jenkins for continuous integration on Amazon EC2 Used JIRA for Bug tracking and issue tracking Implemented Garbage collection with Python to enhance the performance by garbage collecting the older generated objects Worked as part of an AgileScrum based development team and exposed to TDD approach in developing applications Skills Ajax 3 years Apache 3 years Aws 3 years Bootstrap 3 years Css 3 years Django 3 years Git 3 years Html 3 years Html5 3 years Javascript 3 years jquery 3 years Json 3 years Linux 3 years Mongodb 3 years Mysql 3 years python 3 years Rest 3 years Restful web services 3 years Soap 3 years Sql 3 years Additional Information SKILLS Python Golang HTML5 Angularjs Shell Scripting JSON Rest Apache Web Server Django SQL UNIX Windows PostgreSQL NumPy SQL Alchemy AWS Tableau soup CSSCSS3 Bootstrap XML jQuery Flask SciPy Pandas NumPy Backbone JS Restful Web services Linux Git Amazon s3 Jenkins MySQL Mongo DB TSQL Eclipse CSS XML JavaScript jQuery CSS Bootstrap Rabbit MQ JavaScript Eclipse GitHub Linux Radis Go language AWS Pandas PyQt DOM PHP HTML CSS AJAX JavaScript Bootstrap LINUX NoSQL MongoDB SOAP jQuery redux",
    "entities": [
        "Python Developer Morgan Stanley",
        "NetBeans Automated",
        "AMQP",
        "Bash Implemented Multithreading",
        "Continuous Deployment Application Server",
        "JAR WAR EAR",
        "AJAX",
        "GUI",
        "PythonBash",
        "Enhanced",
        "Nodejs",
        "UNIX",
        "Agile Software Methodology",
        "webapp2",
        "Auto Scaling Elastic Load Balancing",
        "Angular JS React JS",
        "JavaScript jQuery HTML5 CSS3",
        "Working",
        "JSON",
        "Created Terraform",
        "GIT Repository Setup",
        "OpenStack",
        "AJAX BuildingMaintaining Docker",
        "GCP Utilized Kubernetes",
        "Data Marts",
        "Node Package",
        "Panda",
        "Created a PythonDjango",
        "TestDriven Development TDD",
        "Build Automation",
        "SQLalchemy",
        "Model View Control MVC",
        "RDD",
        "Express",
        "BackEnd",
        "XML",
        "HTMLCSSJQuery",
        "jQuery Created",
        "CherryPy",
        "Used React JS",
        "Integrated Jenkins",
        "jQuery CSS Bootstrap Rabbit",
        "Present Responsibilities Designed database",
        "Pandas PyQt DOM",
        "PyUnit",
        "Maintained",
        "DevOps",
        "Chef Serverworkstation",
        "Shell",
        "Jenkins Chef",
        "Implemented Terraform",
        "Automated",
        "GoLang",
        "Custom Components",
        "SASAccess SAS SQL",
        "PytestDeveloped",
        "UAT",
        "Amazon",
        "Maven Repository and Deployment",
        "Selenium Automation",
        "VMware vSphere",
        "ELK",
        "SSIS",
        "Angular JS React",
        "Python",
        "AWS Lambda and CloudWatch Built Elastic",
        "Stored Procedures",
        "Mongo",
        "Developed",
        "Jenkins",
        "CSS Bootstrap",
        "Kerberos",
        "J2EE and Microservices Architecture",
        "Spark Data",
        "Mesos Develop",
        "Created Python",
        "Django",
        "Utilized",
        "FLASKHTTP Auth",
        "Mesos Marathon and Kubernetes Integrated Kubernetes",
        "Python Unit",
        "Python Developer Morgan Stanley Work",
        "Puppet",
        "AutoScaling of AWS",
        "VM Ware API",
        "MultiThreading",
        "Git",
        "Pytest Developed Ruby Python",
        "NumPy",
        "Spark Framework",
        "Responsive Web Design Involved",
        "Working on Kubernet",
        "DjangoREST",
        "HTML5",
        "Develop",
        "SOA",
        "AGILE",
        "Linux",
        "Middleware Infrastructure like",
        "Kerberos SASL",
        "Flask",
        "the React js Flux for SPA development",
        "ObjectOriented",
        "Collaborated",
        "Built",
        "redux Test",
        "Worked",
        "SonarQube",
        "VMWare API",
        "Docker",
        "PSD Knowledge",
        "Location Experience",
        "Views",
        "SSL",
        "CLI",
        "PyQt",
        "Developed Ruby Python",
        "Team Foundation",
        "Interface",
        "Entire",
        "PythonDjango",
        "HighCharts",
        "Agile",
        "Redux",
        "GIT",
        "API RESTful Web Services",
        "Python on Django",
        "Controllers Filters Services Templets Events and Injectors Construct",
        "ANT Maven Gradle",
        "log analytics full text search",
        "HTML CSS",
        "UAT Test Scripts",
        "Implemented Garbage",
        "API",
        "Angular Created",
        "Terraform",
        "Web Services",
        "QA",
        "Pandas API",
        "Python Used React",
        "Implemented SSIS",
        "Created",
        "AWS",
        "Sqlite3",
        "Django PostgreSQL Designed",
        "Initialization Mounting Updating",
        "Redux Used Middleware ReduxPromise",
        "Bash Designed",
        "React JS",
        "Worked with View Sets",
        "REST Daily",
        "SAS",
        "AWS Implemented Stable React",
        "Stash",
        "Angular JS Worked",
        "Standalone",
        "Python Spring IOC Inversion",
        "Tomcat Server",
        "RESTFUL",
        "SQL",
        "Keystone",
        "Django Oracle DB",
        "Development of Isomorphic",
        "GitCollect",
        "React Flux",
        "Django Oracle DB PostgreSQL",
        "MAVEN",
        "lPythonspan",
        "Kubernetes",
        "Python Django",
        "Git Collect",
        "Jenkins Ansible",
        "Administrators",
        "React Redux",
        "FLASK",
        "Written Chef Cookbooks",
        "Kerberos Implemented Kafka Security Features",
        "SSH",
        "SQL Alchemy",
        "Jenkins Created",
        "Jenkins like Plugin Management Securing",
        "CICD",
        "Amazon AWS",
        "DLL EXE",
        "CICD Pipeline",
        "TestDriven",
        "AWS Amazon Web Services Developed",
        "google analytics",
        "Utilized Python",
        "Golang",
        "Pandas",
        "IonicCordova",
        "Redux Animations",
        "Apache Cassandra Created Terraform",
        "NPM Node Package",
        "CRUD",
        "Angularjs Reactjs NodeJS",
        "ETL",
        "Skills Ajax 3 years",
        "Maven",
        "Performed",
        "MVC Frameworks",
        "HTML Responsible",
        "Djangos",
        "AWS Configured",
        "JavaScript",
        "UI",
        "Front",
        "Using Kubernetes",
        "Unmounting",
        "Selenium",
        "SMTP",
        "Django Supportedmaintained",
        "Installed SWM CICD",
        "Python Using Chef",
        "View Sets",
        "DSE DevCentre DatastaxOpscenter Written",
        "CSS",
        "jQuery",
        "Tomcat",
        "Spark PySpark MLlib",
        "REST",
        "Data",
        "TDD",
        "Developed and Deployed",
        "Horizon",
        "Tableau",
        "Created Ansible Playbooks",
        "Informatica Extraction Transformation",
        "MVC Framework like",
        "Sprint",
        "Integration",
        "Djangotastypie Used",
        "Node"
    ],
    "experience": "Experience Python Developer Morgan Stanley September 2018 to Present Responsibilities Designed database Model APIs and Views utilizing Python to build an interactive webbased application Involved in building database Model APIs and Views utilizing Python to build an interactive webbased solution Developed a fully automated continuous integration system using Git Jenkins MySQL and custom tools developed in Python and Bash Designed and managed API system deployment using fast http server and Amazon AWS architecture and developed frontend and backend modules using Python on Django including Tasty Pie Web Framework using Git Collect data that introspects the performance of query and update operations on a MongoDB instance and recorded the online users data using Python Django forms and implemented test case using Pytest Developed Ruby Python scripts to monitor health of Mongo databases and perform adhoc backups using Mongo dump and Mongo restore Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Written Chef Cookbooks recipes using ruby to automate installation of Middleware Infrastructure like Apache Tomcat JDK and configuration tasks for new environments Used regular expression for faster search results in combination with Angular2 builtin and custom pipes Develop consumerbased features and applications using Python Django HTML Behavior Driven Development BDD and pairbased programming Used Test driven approach for developing the application and Implemented the unit tests using Python Unit test framework and Development of Isomorphic ReactJS and Redux driven API client applications Developed backend web services using Nodejs and stored dependencies using Node Package Manager NPM Used jQuery and AJAX calls for transmitting JSON data objects between front end and controllers and Utilized continuous integration and automated deployments with Jenkins Ansible and Docker Used Amazon Elastic Beanstalk with Amazon EC2 to deploy project into AWS and good experience with AWS storage services S3 Expertise in React JS and working with React Flux architecture Integrated Apache Kafka for data ingestion Successfully secured the Kafka cluster with Kerberos Implemented Kafka Security Features using SSL and without Kerberos Further with more grainfines Security I set up Kerberos to have users and groups this will enable more advanced security features Used NumPy for Numerical analysis and several python libraries like SymPy wxPython and matPlotLib Successfully Generated consumer group lags from Kafka using their API Kafka Used for building realtime data pipelines between clusters Worked on serverside applications with Django using Python programming and used python libraries like Beautiful Soup matplotlib SciPy NumPy and Built efficient Nodejs backend for client web application Experience to build CICD Pipeline to automate the code release process using Integration tools like GitSVN GitHub Jenkins Developed tools to automate some base tasks using Python Shell scripting and XML Used PyQt to implement GUI for the user to create modify and view reports based on client data Experience in setting up CICD pipeline integrating various tools with Jenkins to build and run Terraform jobs to create infrastructure in AWS Implemented Stable React JS components and Standalone functions to be added to any future pages Managed developed and designed a dashboard control panel for customers and Administrators using Django Oracle DB PostgreSQL and VMWare API calls Involved in development of Python based Web Services using REST for sending and getting data from the external interface in the JSON format and perform analysis using Django PostgreSQL Designed automation scripts to back up the old records by using Mongo DB export command and transferred the files into backup machine with the help of ftplib Followed AGILE development methodology to develop the application and developed Golang API and chatbot using TDD to automate software deployments and rollbacks Used Test driven approach TDD for developing services required for the application and managed datasets using Panda data frames and MYSQL Queried the database queries using Python Developed the application using the TestDriven methodology and designed the unit tests using Python Unit test framework Working as an application developer experienced with controllers views and models in Django Designed front end and backend of the application using Python on Django Web Framework Develop consumerbased features and applications using Python and Django in test driven Development and pairbased programming Created Ansible Playbooks and Puppet Manifests to provision Apache Web servers Tomcat servers Nginx Apache Spark and other applications Manage AWS EC2 instances utilizing Auto Scaling Elastic Load Balancing and Glacier for our QA and UAT environments as well as infrastructure servers for GITBitbucket and Puppet Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Good experience in developing web applications and implementing Model View Control MVC architecture using serverside applications like Django and Flask Developed and tested many features for dashboard using Python Java Bootstrap CSS JavaScript and jQuery Created interactive data charts on web application using High charts JavaScript library with data coming from Apache Cassandra Installed configured and managed the ELK Elastic Search Log Facilitated Scrum ceremonies like Sprint planning retrospectives Daily standups etc Stash and Kibana for Log management within EC2 Elastic Load Balancer ELB for Elastic search Created Terraform scripts for EC2 instances Elastic Load balancers and S3 buckets Implemented Terraform to manage the AWS infrastructure and managed servers using configuration management tools like Chef and Ansible Wrote ANSIBLE Playbooks with Python SSH as the Wrapper to Manage Configurations of AWS Nodes and Test Playbooks on AWS instances using Python Run Ansible Scripts to provision Dev servers Worked on frontend frameworks like CSS Bootstrap for development of Web application Worked in MySQL database on simple queries and writing Stored Procedures for normalization and denormalization Used Python based GUI components for the frontend functionality such as selection criteria Connected continuous integration system with GIT version control repository and continually build as the checkins come from the developer Experience in all areas of Jenkins like Plugin Management Securing and scaling Jenkins integrating Code Analysis Performance issues Analytics and Test Phases to complete the CICD pipelines within Jenkins Worked with View Sets in DjangoREST framework for providing web services and consumed web services performing CRUD operations Wrote ANSIBLE Playbooks with Python SSH as the Wrapper to Manage Configurations of AWS Nodes and Test Playbooks on AWS instances using Python Run Ansible Scripts to provision Dev servers Used Flask framework for application development Designed and implemented a dedicated MYSQL database server to drive the webapps and report on daily progress Developed python Script for moving files from drop box to Amazon server Consumed external APIs and wrote RESTful API using Django REST Framework and Angularjs Developed views and templates with python and Django view controller and templating language to create a userfriendly Website interface Developed internal project in Flask to generate report from google analytics on daily monthly and weekly basis Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL dB package Used Python Library Beautiful Soup for Web Scraping to extract data for building graphs Worked in development of applications especially in UNIX environment and familiar with all its commands Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL dB package Developed Python based API RESTful Web Services to track the events and perform analysis using Django Supportedmaintained client website within the DJANGO CMS system for various website needs Performed dynamic UI designing with HTML5 CSS3 less Bootstrap JSON and AJAX BuildingMaintaining Docker container clusters managed by Kubernetes Linux Bash GIT Docker on GCP Utilized Kubernetes and Docker for the runtime environment of the CICD system to build test deploy Created Python and Bash scripts to monitor increase efficiency of retail management application system and operations Installed SWM CICD for building automation deployments for upgrades and installs which was carried out by Jenkins Used Ansible playbooks to setup Continuous Delivery pipeline This primarily consists of a Jenkins and Sonar server the infrastructure to run these packages and various supporting software components such as Maven etc Worked on some of the new features of Angular 4 like new if else syntax ngtemplates form validators Designed and developed the application using Angular framework along with HTML5 CSS3 Type Script Java Script Bootstrap Nodejs NPM Mongo DB Moved existing AngularJS controllers and services to Angular components for more responsive and less dependency Enhanced legacy application by building new components in Angular 2 and typescript Developed single page applications using Angular Typescript web pack and grunt Hands on Experience on Angular technology for one complete project in rebasing the UI of the application using the techniques in Angular Created a PythonDjango based web application for data processing using MySQL as database and HTMLCSSJavaScript for frontend development and D3 JavaScript for Data Visualization Implemented REST APIs in Python using python based microframework called Flask with SQL Alchemy in the backend for management of data center resources on which OpenStack would be deployed Worked in DevOps group running Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Designed and developed MySQL Procedures and UNIX Shell Scripts for Data ImportExport and Conversions Responsible for debugging and troubleshooting programming related issues Worked on Atlassian tools like Bamboo Jira and confluence Implemented the function to send and receive AMQP messages on RabbitMQ synchronously and asynchronously and send JMS message to Apache ActiveMQ on the edge device Design develop and test HTML5 CSS3 Bootstrap JavaScript jQuery and ReactJS that meets accessibility and web browser standards for website Created a PythonDjango based web application using Python scripting for data processing MySQL for the database and HTMLCSSJQuery and HighCharts matplotlib for data visualization of sales tracking progress identifying trends Fetched twitter feeds for certain important keyword using pythontwitter library Tweepy Used JSON to store the twitter data which was further represented using matplotlib visualization and generated graphical reports for business decision using matplotlib library Developed build and deployment scripts using MAVEN as build tool in Jenkins Built various graphs for business decisionmaking use of Python matplotlib library Developed user interface by using the React js Flux for SPA development Installed Kerberos secured Kafka cluster with no encryption on Dev and Prod Also set up Kafka ACLs into it Successfully did set up a no authentication Kafka listener in parallel with Kerberos SASL Listener Also I tested nonauthenticated user Anonymous user in parallel with Kerberos user Understanding of securecloud configuration Cloud Trail cloudsecurity technologies VPC Security Groups etc and cloudpermission systems IAM Experience in Installing JenkinsPlugins for GIT Repository Setup SCM Polling for Immediate Build with Maven and Maven Repository and Deployment of apps using custom modules through Puppet as a CICD Process Installed and configured configuration tool such as Chef Serverworkstation and nodes via CLI tools to AWS nodes Developed and Deployed SOAP based Web Services on Tomcat Server related Database on InfluxDB also worked on Interface created for Kafka also checked the measurements on Databases Used Jenkins for continuous integration for code quality inspection and worked on building local repository mirror and source code management using Git hub Focused on containerization and immutable infrastructure Docker has been core to this experience along with Mesos Marathon and Kubernetes Integrated Kubernetes with network storage and security to provide comprehensive infrastructure and orchestrated container across multiple hosts Administered RedHat Linux servers for several functions including managing Apace Tomcat server mail server MySQL database and firewalls in both development and production environments Created and configured new JIRA projects and worked with departments to maintain existing JIRA Used Pandas library for statistics Analysis NumPy for Numerical analysis Developed GUI using webapp2 for dynamically displaying the test block documentation and other features of python code using a web browser Responsible for user validations on client side as well as server side Automated the existing scripts for performance calculations using NumPy and SQLalchemy To convert the Entire event flow as a SOA based architecture used RabbitMQ as a queues and BUS Implemented the function to send and receive AMQP messages on RabbitMQ synchronously and asynchronously and send JMS message to Apache ActiveMQ on the edge device Python Developer Barclays September 2013 to January 2016 Responsibilities Developed frontend and backend modules using Python on Django including Tasty Pie Web Framework using GitCollect data that introspect the performance of query and update operations on a MongoDB instance Developed Ruby Python scripts to monitor health of Mongo databases and perform adhoc backups using Mongo dump and Mongo restore Worked in DevOps group running Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Also gained familiarity with supporting technologies like kubernetes and Mesos Develop consumerbased features and applications using Python Django HTML Behavior Driven Development BDD and pairbased programming Implemented the application using Python Spring IOC Inversion of Control Django Framework and handled the security using Python Spring Security Used Test driven approach for developing the application and Implemented the unit tests using Python Unit test framework and Development of Isomorphic ReactJS and Redux driven API client applications Developed backend web services using Nodejs and stored dependencies using Node Package Manager NPM Designed and managed API system deployment using fast http server and Amazon AWS architecture Used jQuery and AJAX calls for transmitting JSON data objects between front end and controllers and Utilized continuous integration and automated deployments with Jenkins Ansible and Docker Expertise in setting up configure manage and scale Amazon Elastic Search cluster and used Log Stash along with Kibana ELK Stack for centralized logging which stores logs and metrics into an S3 bucket using Lambda functions utilized Glacier for storage for setting up and maintenance of AutoScaling of AWS stacks Enhanced user experience by designing new web features using MVC Framework like Express JS and Node JS Used advanced level of HTML5 JavaScript CSS3 and pure CSS layouts and Angular Worked on the modernization of a legacy and outsourced UI technologies used were Angular JS 2 CSS Node JS Express JS and AWS Amazon Web Services Developed a tool to retrieve and send data to third party service provider this feature was implemented using REST Daily programming in server and client side by using Angularjs Reactjs NodeJS and Express JS Worked on Front end by using Angular JS React JS and JavaScript Frameworks Extensive use of Angularjs for developing the SPAs Single Page Applications for internal applicationtool Developed multiple POCs to create a user interface in Angular JS Worked on Angular JS directives Controllers Filters Services Templets Events and Injectors Construct a powerful and modern frontend architecture involving React Redux and ES2015 Extensive knowledge of and use of Angularjs directives to bring additional functionality to HTML Responsible for design and development of the web pages from mock ups PSD Knowledge in using React JS Flux for SPA development Implemented clientside Interface using React JS Good knowledge in AngularJS and Responsive Web Design Involved with bug fixing on functionality performance and designing issues with JavaScript jQuery HTML5 CSS3 and AngularJS Used Bootstrap and AngularJS Reactjs and Nodejs in effective web design Developed and designed system to collect data from multiple portal using Kafka and then process it using spark Expertise in delivering Agile projects from end to end Continuous IntegrationContinuous Delivery CICD pipeline by integration of tools like Jenkins Chef and AWS for VM provisioning Integrated Jenkins with Docker container using Cloud bees Docker pipeline plugin and provisioned the EC2 instance using Amazon EC2 plugin Experience in working with automation setup and administration of build and deployment CICD tools such as Jenkins Anthill Pro and UDeployUcode and integrated with Build Automation tools like ANT Maven Gradle and other Atlassian products Bamboo JIRA BitBucket for building of deployable artifacts JAR WAR EAR and DLL EXE from source code Used Jenkins with SonarQube to get the better quality of the Source code Architected and developed a Golang API using TDD to aggregate data to show application server alignment Worked in using ReactJS components Forms Events Keys Router Animations and Flux concept Developed backup and recovery engine for VM backuprecovery using VMware vSphere APIs GoLang programming language and RabbitMQ Message bus communication interface Using Kubernetes I have controlled and automated application deployments and updates and orchestrated deployment Good experience in JavaScript MVC framework like Angular JS React JS Automate the installation of ELK agent filebeat with Ansible playbook Used Python NumPy spicy pandas scikitlearn seaborn and Spark PySpark MLlib to develop variety of models and algorithms for analytic purposes Installed configured and managed the ELK Elastic Search Log Facilitated Scrum ceremonies like Sprint planning retrospectives Daily standups etc Stash and Kibana for Log management within EC2 Elastic Load Balancer ELB for Elastic search Used Amazon Elastic Beanstalk with Amazon EC2 to deploy project into AWS and good experience with AWS storage services S3 Experience in Developing User Interface UI Rich Web Applications and Web Service Applications using HTML 4 XHTML CSS 2 XML AJAX Object Oriented Java Script ANGULARJS REACTJS BOOTSTRAP Framework RESTful services JAVA JSP Developed backup and recovery engine for VM backuprecovery using VMware vSphere APIs Golang programming language and RabbitMQ Message bus communication interface Managed developed and designed a dashboard control panel for customers and Administrators using Django Oracle DB PostgreSQL and VMWare API calls Developed backup and recovery engine for VM backuprecovery using VMware vSphere APIs GoLang programming language and RabbitMQ Message bus communication interface Designed automation scripts to back up the old records by using Mongo DB export command and transferred the files into backup machine with the help of ftplib Used Test driven approach TDD for developing services required for the application and managed datasets using Panda data frames and MYSQL Queried the database queries using Python Using Chef deployed and configured Elasticsearch Logstash and Kibana ELK for log analytics full text search application monitoring in integration with AWS Lambda and CloudWatch Built Elastic search Log stash and Kibana ELK to store logs and metrics into S3 bucket using Lambda function Involved in implementing the complete Application in the inbuild Spring MVC Architecture with Angular JS Developed custom consumers and producers for Apache Kafka in Go golang for cars monitoring system Used Node JS Angular JS and MVC Frameworks in the development of the web applications Recorded the online users data using Python Django forms and implemented test case using PytestDeveloped the application using the TestDriven methodology and designed the unit tests using Python Unit test framework Involved in multitiered J2EE design utilizing Spring IOC MVC architecture Implemented database connectivity using Spring JDBC framework to work upon different modules Created required JSPs and Servlets for controller and view part Worked on exchanging data in JSON format between web application and backend Wrote DAO layer required SQL queries and Spring Controller to handle data and request to Spring application Working as an application developer experienced with controllers views and models in Django Designed front end and backend of the application using Python on Django Web Framework Develop consumerbased features and applications using Python and Django in test driven Development and pairbased programming Good experience in developing web applications and implementing Model View Control MVC architecture using serverside applications like Django and Flask Developed and tested many features for dashboard using Python Java Bootstrap CSS JavaScript and jQuery Created interactive data charts on web application using High charts JavaScript library with data coming from Apache Cassandra Created Terraform scripts for EC2 instances Elastic Load balancers and S3 buckets Implemented Terraform to manage the AWS infrastructure and managed servers using configuration management tools like Chef and Ansible Wrote ANSIBLE Playbooks with Python SSH as the Wrapper to Manage Configurations of AWS Nodes and Test Playbooks on AWS instances using Python Run Ansible Scripts to provision Dev servers Implemented CICD for J2EE and Microservices Architecture environment Net Core Zookeeper Kafka Redis using Anthill Pro and Deploy and integrated SonarQube to get better Source code Having Knowledge on AWS Lambda Auto scaling Cloud Front RDS Route53 AWS SNS SQS SES Worked on frontend frameworks like CSS Bootstrap for development of Web application Worked in MySQL database on simple queries and writing Stored Procedures for normalization and denormalization Used Python based GUI components for the frontend functionality such as selection criteria Connected continuous integration system with GIT version control repository and continually build as the checkins come from the developer Worked with View Sets in DjangoREST framework for providing web services and consumed web services performing CRUD operations Wrote ANSIBLE Playbooks with Python SSH as the Wrapper to Manage Configurations of AWS Nodes and Test Playbooks on AWS instances using Python Run Ansible Scripts to provision Dev servers Used Flask framework for application development Designed and implemented a dedicated MYSQL database server to drive the webapps and report on daily progress Developed python Script for moving files from drop box to Amazon server Consumed external APIs and wrote RESTful API using Django REST Framework and Angular Developed views and templates with python and Django view controller and templating language to create a userfriendly Website interface Automated various infrastructure activities like Continuous Deployment Application Server setup Stack Monitoring using Ansible playbooks and has integrated Ansible with Run deck and Jenkins Created a PythonDjango based web application for data processing using MySQL as database and HTMLCSSJavaScript for frontend development and D3 JavaScript for Data Visualization Worked in DevOps group running Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Created and maintained various DevOps related tools for the team such as provisioning scripts deployment tools and staged virtual environment using Docker Experienced in working with Redux architecture using complex ObjectOriented concepts in improving the performance of the websites Experience in using React JS components Forms Events Keys Router plus Redux Animations and Flux concept In Phase Two worked closely with the BackEnd team to display data using the Custom Components library Components and Redux Used Middleware ReduxPromise in application to retrieve data from BackEnd and to also perform RESTFUL services Gathering requirements and translating the business details into Technical design Implemented responsive user interface and standards throughout the development and maintenance of the website using the HTML CSS JavaScript Bootstrap jQuery Developed views and templates with Python and Djangos to create a userfriendly website interface Used Gulp as a taskbuild runner for development Developed and tested many features for dashboard using Python HTML JavaScript CSS and Bootstrap String frontendUser Interface development using HTML CSS ES56 JSX ReactJS Reduxsaga and REST API Designed RESTful Webservices using FLASK with emphasis on improved Security for the service using FLASKHTTP Auth with HTTPS Also utilized Hug libraries to develop HTTP REST APIs to provide validations and used CherryPy framework to model and bind HTTP Worked with Boto3 as interface for AWS API and TensorFlow to make numerical computations using data flow graphs Utilized Python libraries like wxPython NumPy Twisted PyQT Web2py Pygal Plotly Developed various APIs for Django applications using Djangotastypie Used Amazon Elastic Beanstalk with Amazon EC2 instance to deploy Django project into AWS Configured continuous integration with Jenkins on Amazon EC2 Implemented SQL Alchemyas ORM mapping tool for complete access and Wrote SQL queries and maintained PostgreSQL RDBMS in the local development environment Wrote and executed various MySQL database queries from python using PythonMySQL connector and MySQL DB package Managed large datasets using Pandas API ecosystem to analyze the different segments of customers based on Location Experience in creating Docker containers leveraging existing Linux Containers and AMIs in addition to creating Docker containers from scratch Used React JS for templating for faster compilation and developing reusable components Involved designing in web pages using HTML 5 CSS3 JavaScript Bootstrap SASS LESS Reactjs Redux Flex Mongo DB Responsible to Style look and feel of the web page with SASS that extends CSS with dynamic behavior such as variable mixing operations and functions Researching JavaScript based frameworks like React Native and IonicCordova for frontend Worked on React JS Virtual Dom and React views rendering using components which contains additional components called custom HTML tags Implemented various screens for the front end using Reactjs and used various predefined components from NPM Node Package Manager and redux library Using Kubernetes is a portable extensible opensource platform for managing containerized workloads and services that facilitates both declarative configuration and automation Effectively used the life cycle methods such as Initialization Mounting Updating and Unmounting and invoked them at different phases of the components life cycle to develop quality React Js user interfaces Worked on creating the Docker containers and Docker consoles for managing the application life cycle Used Django Framework for developing web applications using model view control architecture Developed and implemented R and Shiny application which showcases machine learning for business forecasting Managed developed and designed a dashboard control panel for customers and Administrators using Django Oracle DB and VM Ware API calls Architected and developed a Golang API using TDD to aggregate data to show application server alignment Built database Model Views and APIs using Python for interactive webbased solution Supported Apache Tomcat web server on Linux Platform Involved in User Acceptance Testing and prepared UAT Test Scripts implemented flux pattern by using redux framework as a core dependency Worked on loading CSVTXTDAT files using Scala language in Spark Framework to process the data by creating Spark Data frame and RDD and save the file in parquet format in HDFS to load into fact table using ORC Reader Used NumPy for Numerical analysis for Insurance premium Implemented configuration changes for data models Different testing methodologies like unit testing Integration testing web application testing Selenium testing performed Implemented SSIS packages for data sourcing from Heterogeneous data systems using SSIS ETL Tool to support daily incremental data refresh full loads Preparation of technical specification document for the development of Informatica Extraction Transformation and Loading ETL mappings to load data into various tables in Data Marts and defining ETL standards Worked on various applications using Python integrated IDEs Eclipse PyCharm and NetBeans Automated the existing scripts for performance calculations using NumPy and SQL alchemy Extensively used python modules such as requests urllib and urllib2 for web crawling Used packages like dplyr tidyr ggplot2 in R Studio for data visualization Maintained and updated existing automated solutions Handled potential points of failure through error handling and communication of failure Performed efficient delivery of code based on principles of TestDriven Development TDD and continuous integration to keep in line with Agile Software Methodology principles Lock mechanisms were implemented and the functionality of multithreading has been used PythonDjango based web application PostgreSQL DB and integrations with 3rd party email messaging storage services Worked on Open stack Swift for moving large data files using Keystone and Horizon and integrated them into the web services and client server application Automation database programming through Perl DBI module Design and implemented custom scripts Extensive use of version controller Team Foundation Server TFS Wrote Perl Modules and subroutine packages to facilitate code reuse portability and modularity Extracting data from the database using SASAccess SAS SQL procedures and create SAS datasets Used MultiThreading factory model to distribute learning process backtesting into various worker processes Developed a fully automated continuous integration system using Git Gerrit Jenkins MySQL and custom tools developed in Python and Bash Used Ajax JSON to send request to the server to check the functionality of the websites Maintained states in the stores and dispatched the actions using redux Test and validated the custom scripts and delivered automated solutions for science models Anticipated potential parts of failure database communication points file system errors Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Used Pandas library for statistics Analysis Managed large datasets using Panda data frames and MySQL Developed GUI using webapp2 for dynamically displaying the test block documentation and other features of python code using a web browser Developed the required XML Schema documents and implemented the framework for parsing XML documents Responsible for user validations on client side as well as server side Setup Docker on Linux and configured Jenkins to run under Docker host Used advanced packages like Mock patch and Beautiful SOAP b4 in extracting the Data during development phase and perform unit testing Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Creating RESTful web services for Catalog and Pricing with Django MVT MySQL and MongoDB Development of Python APIs to dump the array structures in the Processor at the failure point for debugging Fixed bugs providing production support enhanced applications by improving code reuse and performance by making effective use of various design patterns Collaborated within a team using an agile development workflow and widelyaccepted collaboration practices using Git Developed a fully automated continuous integration system using Git Jenkins MySQL and custom tools developed in Python and Bash Implemented Multithreading module and complex networking operations like race route SMTP mail server and web server using Python Used React flux to polish the data and for single directional flow Used standard Python modules likecsv robotparser itertools pickleto ensure privacy of sensitive data Automated RabbitMQ cluster installations and configuration using PythonBash Experience with Data migration from Sqlite3 to Apache Cassandra database Cassandra data model designing implementation maintaining and monitoring using DSE DevCentre DatastaxOpscenter Written test cases using PyUnit and Selenium Automation testing for better manipulation of test scripts Working on Kubernet in scaling and management of containerized applications Used automation Jenkins for continuous integration on Amazon EC2 Used JIRA for Bug tracking and issue tracking Implemented Garbage collection with Python to enhance the performance by garbage collecting the older generated objects Worked as part of an AgileScrum based development team and exposed to TDD approach in developing applications Skills Ajax 3 years Apache 3 years Aws 3 years Bootstrap 3 years Css 3 years Django 3 years Git 3 years Html 3 years Html5 3 years Javascript 3 years jquery 3 years Json 3 years Linux 3 years Mongodb 3 years Mysql 3 years python 3 years Rest 3 years Restful web services 3 years Soap 3 years Sql 3 years Additional Information SKILLS Python Golang HTML5 Angularjs Shell Scripting JSON Rest Apache Web Server Django SQL UNIX Windows PostgreSQL NumPy SQL Alchemy AWS Tableau soup CSSCSS3 Bootstrap XML jQuery Flask SciPy Pandas NumPy Backbone JS Restful Web services Linux Git Amazon s3 Jenkins MySQL Mongo DB TSQL Eclipse CSS XML JavaScript jQuery CSS Bootstrap Rabbit MQ JavaScript Eclipse GitHub Linux Radis Go language AWS Pandas PyQt DOM PHP HTML CSS AJAX JavaScript Bootstrap LINUX NoSQL MongoDB SOAP jQuery redux",
    "extracted_keywords": [
        "Python",
        "Developer",
        "lPythonspan",
        "span",
        "lDeveloperspan",
        "Python",
        "Developer",
        "Morgan",
        "Stanley",
        "Work",
        "Experience",
        "Python",
        "Developer",
        "Morgan",
        "Stanley",
        "September",
        "Present",
        "Responsibilities",
        "database",
        "Model",
        "APIs",
        "Views",
        "Python",
        "application",
        "database",
        "Model",
        "APIs",
        "Views",
        "Python",
        "solution",
        "integration",
        "system",
        "Git",
        "Jenkins",
        "MySQL",
        "custom",
        "tools",
        "Python",
        "Bash",
        "API",
        "system",
        "deployment",
        "http",
        "server",
        "Amazon",
        "AWS",
        "architecture",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Tasty",
        "Pie",
        "Web",
        "Framework",
        "Git",
        "Collect",
        "data",
        "performance",
        "query",
        "operations",
        "instance",
        "users",
        "data",
        "Python",
        "Django",
        "forms",
        "test",
        "case",
        "Pytest",
        "Developed",
        "Ruby",
        "Python",
        "health",
        "Mongo",
        "adhoc",
        "backups",
        "Mongo",
        "dump",
        "Mongo",
        "Launched",
        "Kubernetes",
        "platform",
        "deployment",
        "scaling",
        "operations",
        "application",
        "containers",
        "clusters",
        "hosts",
        "Written",
        "Chef",
        "Cookbooks",
        "recipes",
        "ruby",
        "installation",
        "Middleware",
        "Infrastructure",
        "Apache",
        "Tomcat",
        "JDK",
        "configuration",
        "tasks",
        "environments",
        "expression",
        "search",
        "results",
        "combination",
        "Angular2",
        "builtin",
        "custom",
        "pipes",
        "Develop",
        "features",
        "applications",
        "Python",
        "Django",
        "HTML",
        "Behavior",
        "Driven",
        "Development",
        "BDD",
        "programming",
        "Test",
        "approach",
        "application",
        "unit",
        "tests",
        "Python",
        "Unit",
        "test",
        "framework",
        "Development",
        "Isomorphic",
        "ReactJS",
        "Redux",
        "API",
        "client",
        "applications",
        "web",
        "services",
        "Nodejs",
        "dependencies",
        "Node",
        "Package",
        "Manager",
        "NPM",
        "jQuery",
        "AJAX",
        "JSON",
        "data",
        "objects",
        "end",
        "controllers",
        "integration",
        "deployments",
        "Jenkins",
        "Ansible",
        "Docker",
        "Amazon",
        "Elastic",
        "Beanstalk",
        "Amazon",
        "EC2",
        "project",
        "AWS",
        "experience",
        "AWS",
        "storage",
        "services",
        "S3",
        "Expertise",
        "React",
        "JS",
        "React",
        "Flux",
        "architecture",
        "Integrated",
        "Apache",
        "Kafka",
        "data",
        "ingestion",
        "Kafka",
        "cluster",
        "Kerberos",
        "Kafka",
        "Security",
        "Features",
        "SSL",
        "Kerberos",
        "Further",
        "grainfines",
        "Security",
        "Kerberos",
        "users",
        "groups",
        "security",
        "features",
        "NumPy",
        "Numerical",
        "analysis",
        "python",
        "libraries",
        "SymPy",
        "wxPython",
        "matPlotLib",
        "consumer",
        "group",
        "lags",
        "Kafka",
        "API",
        "Kafka",
        "data",
        "pipelines",
        "clusters",
        "serverside",
        "applications",
        "Django",
        "Python",
        "programming",
        "python",
        "libraries",
        "Beautiful",
        "Soup",
        "matplotlib",
        "SciPy",
        "NumPy",
        "Nodejs",
        "backend",
        "client",
        "web",
        "application",
        "Experience",
        "CICD",
        "Pipeline",
        "code",
        "release",
        "process",
        "Integration",
        "tools",
        "GitSVN",
        "GitHub",
        "Jenkins",
        "tools",
        "base",
        "tasks",
        "Python",
        "Shell",
        "scripting",
        "XML",
        "PyQt",
        "GUI",
        "user",
        "modify",
        "reports",
        "client",
        "data",
        "Experience",
        "CICD",
        "pipeline",
        "tools",
        "Jenkins",
        "Terraform",
        "jobs",
        "infrastructure",
        "AWS",
        "Stable",
        "React",
        "JS",
        "components",
        "functions",
        "pages",
        "dashboard",
        "control",
        "panel",
        "customers",
        "Administrators",
        "Django",
        "Oracle",
        "DB",
        "PostgreSQL",
        "VMWare",
        "API",
        "calls",
        "development",
        "Python",
        "Web",
        "Services",
        "REST",
        "data",
        "interface",
        "format",
        "analysis",
        "Django",
        "PostgreSQL",
        "automation",
        "scripts",
        "records",
        "Mongo",
        "DB",
        "export",
        "command",
        "files",
        "machine",
        "help",
        "ftplib",
        "AGILE",
        "development",
        "methodology",
        "application",
        "Golang",
        "API",
        "chatbot",
        "TDD",
        "software",
        "deployments",
        "Used",
        "Test",
        "approach",
        "TDD",
        "services",
        "application",
        "datasets",
        "Panda",
        "data",
        "frames",
        "MYSQL",
        "database",
        "Python",
        "application",
        "TestDriven",
        "methodology",
        "unit",
        "tests",
        "Python",
        "Unit",
        "test",
        "framework",
        "Working",
        "application",
        "developer",
        "controllers",
        "views",
        "models",
        "Django",
        "end",
        "backend",
        "application",
        "Python",
        "Django",
        "Web",
        "Framework",
        "Develop",
        "features",
        "applications",
        "Python",
        "Django",
        "test",
        "Development",
        "programming",
        "Created",
        "Ansible",
        "Playbooks",
        "Puppet",
        "Manifests",
        "provision",
        "Apache",
        "Web",
        "servers",
        "Tomcat",
        "servers",
        "Nginx",
        "Apache",
        "Spark",
        "applications",
        "Manage",
        "AWS",
        "EC2",
        "instances",
        "Auto",
        "Scaling",
        "Elastic",
        "Load",
        "Balancing",
        "Glacier",
        "QA",
        "environments",
        "infrastructure",
        "servers",
        "GITBitbucket",
        "Puppet",
        "Kubernetes",
        "platform",
        "deployment",
        "scaling",
        "operations",
        "application",
        "containers",
        "clusters",
        "hosts",
        "experience",
        "web",
        "applications",
        "Model",
        "View",
        "Control",
        "MVC",
        "architecture",
        "serverside",
        "applications",
        "Django",
        "Flask",
        "Developed",
        "features",
        "dashboard",
        "Python",
        "Java",
        "Bootstrap",
        "CSS",
        "JavaScript",
        "jQuery",
        "data",
        "charts",
        "web",
        "application",
        "charts",
        "JavaScript",
        "library",
        "data",
        "Apache",
        "Cassandra",
        "Installed",
        "ELK",
        "Elastic",
        "Search",
        "Log",
        "Facilitated",
        "Scrum",
        "ceremonies",
        "Sprint",
        "planning",
        "Daily",
        "standups",
        "Stash",
        "Kibana",
        "Log",
        "management",
        "EC2",
        "Elastic",
        "Load",
        "Balancer",
        "ELB",
        "search",
        "Terraform",
        "scripts",
        "EC2",
        "instances",
        "Elastic",
        "Load",
        "balancers",
        "S3",
        "buckets",
        "Terraform",
        "AWS",
        "infrastructure",
        "servers",
        "configuration",
        "management",
        "tools",
        "Chef",
        "Ansible",
        "Wrote",
        "ANSIBLE",
        "Playbooks",
        "Python",
        "SSH",
        "Wrapper",
        "Manage",
        "Configurations",
        "AWS",
        "Nodes",
        "Test",
        "Playbooks",
        "AWS",
        "instances",
        "Python",
        "Run",
        "Ansible",
        "Scripts",
        "provision",
        "Dev",
        "servers",
        "frontend",
        "frameworks",
        "CSS",
        "Bootstrap",
        "development",
        "Web",
        "application",
        "MySQL",
        "database",
        "queries",
        "Procedures",
        "normalization",
        "denormalization",
        "Python",
        "GUI",
        "components",
        "frontend",
        "functionality",
        "selection",
        "criteria",
        "integration",
        "system",
        "GIT",
        "version",
        "control",
        "repository",
        "checkins",
        "developer",
        "Experience",
        "areas",
        "Jenkins",
        "Plugin",
        "Management",
        "Securing",
        "Jenkins",
        "Code",
        "Analysis",
        "Performance",
        "Analytics",
        "Test",
        "Phases",
        "CICD",
        "pipelines",
        "Jenkins",
        "Worked",
        "View",
        "Sets",
        "DjangoREST",
        "framework",
        "web",
        "services",
        "web",
        "services",
        "CRUD",
        "operations",
        "Wrote",
        "ANSIBLE",
        "Playbooks",
        "Python",
        "SSH",
        "Wrapper",
        "Manage",
        "Configurations",
        "AWS",
        "Nodes",
        "Test",
        "Playbooks",
        "AWS",
        "instances",
        "Python",
        "Run",
        "Ansible",
        "Scripts",
        "provision",
        "Dev",
        "servers",
        "Flask",
        "framework",
        "application",
        "development",
        "MYSQL",
        "database",
        "server",
        "webapps",
        "progress",
        "python",
        "Script",
        "files",
        "drop",
        "box",
        "Amazon",
        "server",
        "APIs",
        "API",
        "Django",
        "REST",
        "Framework",
        "Angularjs",
        "views",
        "templates",
        "python",
        "Django",
        "controller",
        "templating",
        "language",
        "Website",
        "interface",
        "project",
        "Flask",
        "report",
        "google",
        "analytics",
        "basis",
        "Wrote",
        "MYSQL",
        "database",
        "python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "package",
        "Python",
        "Library",
        "Beautiful",
        "Soup",
        "Web",
        "Scraping",
        "data",
        "graphs",
        "development",
        "applications",
        "UNIX",
        "environment",
        "commands",
        "Wrote",
        "MYSQL",
        "database",
        "python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "package",
        "Developed",
        "Python",
        "API",
        "RESTful",
        "Web",
        "Services",
        "events",
        "analysis",
        "Django",
        "client",
        "website",
        "DJANGO",
        "CMS",
        "system",
        "website",
        "UI",
        "HTML5",
        "CSS3",
        "Bootstrap",
        "JSON",
        "AJAX",
        "BuildingMaintaining",
        "Docker",
        "container",
        "clusters",
        "Kubernetes",
        "Linux",
        "Bash",
        "GIT",
        "Docker",
        "GCP",
        "Kubernetes",
        "Docker",
        "runtime",
        "environment",
        "CICD",
        "system",
        "test",
        "Created",
        "Python",
        "Bash",
        "scripts",
        "increase",
        "efficiency",
        "management",
        "application",
        "system",
        "operations",
        "SWM",
        "CICD",
        "automation",
        "deployments",
        "upgrades",
        "installs",
        "Jenkins",
        "playbooks",
        "Continuous",
        "Delivery",
        "pipeline",
        "Jenkins",
        "Sonar",
        "server",
        "infrastructure",
        "packages",
        "software",
        "components",
        "Maven",
        "features",
        "Angular",
        "syntax",
        "ngtemplates",
        "validators",
        "application",
        "framework",
        "HTML5",
        "CSS3",
        "Type",
        "Script",
        "Java",
        "Script",
        "Bootstrap",
        "Nodejs",
        "NPM",
        "Mongo",
        "DB",
        "Moved",
        "controllers",
        "services",
        "components",
        "legacy",
        "application",
        "components",
        "Angular",
        "typescript",
        "page",
        "applications",
        "Angular",
        "Typescript",
        "web",
        "pack",
        "Hands",
        "Experience",
        "technology",
        "project",
        "UI",
        "application",
        "techniques",
        "Angular",
        "Created",
        "PythonDjango",
        "web",
        "application",
        "data",
        "processing",
        "MySQL",
        "database",
        "HTMLCSSJavaScript",
        "frontend",
        "development",
        "D3",
        "JavaScript",
        "Data",
        "Visualization",
        "REST",
        "APIs",
        "Python",
        "python",
        "microframework",
        "Flask",
        "SQL",
        "Alchemy",
        "backend",
        "management",
        "data",
        "center",
        "resources",
        "OpenStack",
        "Worked",
        "DevOps",
        "group",
        "Jenkins",
        "Docker",
        "container",
        "EC2",
        "slaves",
        "Amazon",
        "AWS",
        "cloud",
        "configuration",
        "MySQL",
        "Procedures",
        "UNIX",
        "Shell",
        "Scripts",
        "Data",
        "ImportExport",
        "Conversions",
        "troubleshooting",
        "programming",
        "issues",
        "tools",
        "Bamboo",
        "Jira",
        "confluence",
        "function",
        "AMQP",
        "messages",
        "RabbitMQ",
        "JMS",
        "message",
        "Apache",
        "ActiveMQ",
        "edge",
        "device",
        "Design",
        "HTML5",
        "CSS3",
        "Bootstrap",
        "JavaScript",
        "jQuery",
        "ReactJS",
        "accessibility",
        "web",
        "browser",
        "standards",
        "website",
        "PythonDjango",
        "web",
        "application",
        "Python",
        "scripting",
        "data",
        "processing",
        "MySQL",
        "database",
        "HTMLCSSJQuery",
        "HighCharts",
        "matplotlib",
        "data",
        "visualization",
        "sales",
        "tracking",
        "progress",
        "trends",
        "twitter",
        "keyword",
        "pythontwitter",
        "library",
        "Tweepy",
        "JSON",
        "twitter",
        "data",
        "visualization",
        "reports",
        "business",
        "decision",
        "matplotlib",
        "library",
        "build",
        "deployment",
        "scripts",
        "MAVEN",
        "build",
        "tool",
        "Jenkins",
        "graphs",
        "business",
        "use",
        "Python",
        "matplotlib",
        "library",
        "user",
        "interface",
        "React",
        "Flux",
        "SPA",
        "development",
        "Installed",
        "Kerberos",
        "Kafka",
        "cluster",
        "encryption",
        "Dev",
        "Prod",
        "Kafka",
        "ACLs",
        "authentication",
        "Kafka",
        "listener",
        "parallel",
        "Kerberos",
        "SASL",
        "Listener",
        "user",
        "Anonymous",
        "user",
        "parallel",
        "user",
        "Understanding",
        "configuration",
        "Cloud",
        "Trail",
        "cloudsecurity",
        "VPC",
        "Security",
        "Groups",
        "cloudpermission",
        "systems",
        "IAM",
        "Experience",
        "Installing",
        "JenkinsPlugins",
        "GIT",
        "Repository",
        "Setup",
        "SCM",
        "Polling",
        "Immediate",
        "Build",
        "Maven",
        "Maven",
        "Repository",
        "Deployment",
        "apps",
        "custom",
        "modules",
        "Puppet",
        "CICD",
        "Process",
        "configuration",
        "tool",
        "Chef",
        "Serverworkstation",
        "nodes",
        "CLI",
        "tools",
        "AWS",
        "nodes",
        "Developed",
        "Deployed",
        "SOAP",
        "Web",
        "Services",
        "Tomcat",
        "Server",
        "Database",
        "Interface",
        "Kafka",
        "measurements",
        "Databases",
        "Jenkins",
        "integration",
        "code",
        "quality",
        "inspection",
        "repository",
        "mirror",
        "source",
        "code",
        "management",
        "Git",
        "hub",
        "containerization",
        "infrastructure",
        "Docker",
        "experience",
        "Mesos",
        "Marathon",
        "Kubernetes",
        "Integrated",
        "Kubernetes",
        "network",
        "storage",
        "security",
        "infrastructure",
        "container",
        "hosts",
        "RedHat",
        "Linux",
        "servers",
        "functions",
        "Apace",
        "Tomcat",
        "server",
        "mail",
        "server",
        "MySQL",
        "database",
        "firewalls",
        "development",
        "production",
        "environments",
        "JIRA",
        "projects",
        "departments",
        "JIRA",
        "Pandas",
        "library",
        "statistics",
        "Analysis",
        "NumPy",
        "analysis",
        "Developed",
        "GUI",
        "webapp2",
        "test",
        "block",
        "documentation",
        "features",
        "python",
        "code",
        "web",
        "browser",
        "user",
        "validations",
        "client",
        "side",
        "server",
        "side",
        "scripts",
        "performance",
        "calculations",
        "NumPy",
        "SQLalchemy",
        "event",
        "flow",
        "SOA",
        "architecture",
        "RabbitMQ",
        "queues",
        "BUS",
        "function",
        "AMQP",
        "messages",
        "RabbitMQ",
        "JMS",
        "message",
        "Apache",
        "ActiveMQ",
        "edge",
        "device",
        "Python",
        "Developer",
        "Barclays",
        "September",
        "January",
        "Responsibilities",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Tasty",
        "Pie",
        "Web",
        "Framework",
        "GitCollect",
        "data",
        "performance",
        "query",
        "operations",
        "instance",
        "Developed",
        "Ruby",
        "Python",
        "health",
        "Mongo",
        "adhoc",
        "backups",
        "Mongo",
        "dump",
        "Mongo",
        "Worked",
        "DevOps",
        "group",
        "Jenkins",
        "Docker",
        "container",
        "EC2",
        "slaves",
        "Amazon",
        "AWS",
        "cloud",
        "configuration",
        "familiarity",
        "technologies",
        "kubernetes",
        "Mesos",
        "Develop",
        "features",
        "applications",
        "Python",
        "Django",
        "HTML",
        "Behavior",
        "Driven",
        "Development",
        "BDD",
        "programming",
        "application",
        "Python",
        "Spring",
        "IOC",
        "Inversion",
        "Control",
        "Django",
        "Framework",
        "security",
        "Python",
        "Spring",
        "Security",
        "Test",
        "approach",
        "application",
        "unit",
        "tests",
        "Python",
        "Unit",
        "test",
        "framework",
        "Development",
        "Isomorphic",
        "ReactJS",
        "Redux",
        "API",
        "client",
        "applications",
        "web",
        "services",
        "Nodejs",
        "dependencies",
        "Node",
        "Package",
        "Manager",
        "NPM",
        "API",
        "system",
        "deployment",
        "http",
        "server",
        "Amazon",
        "AWS",
        "architecture",
        "jQuery",
        "AJAX",
        "JSON",
        "data",
        "objects",
        "end",
        "controllers",
        "integration",
        "deployments",
        "Jenkins",
        "Ansible",
        "Docker",
        "Expertise",
        "configure",
        "manage",
        "Amazon",
        "Elastic",
        "Search",
        "cluster",
        "Log",
        "Stash",
        "Kibana",
        "ELK",
        "Stack",
        "logging",
        "stores",
        "logs",
        "metrics",
        "S3",
        "bucket",
        "Lambda",
        "functions",
        "Glacier",
        "storage",
        "maintenance",
        "AutoScaling",
        "AWS",
        "user",
        "experience",
        "web",
        "features",
        "MVC",
        "Framework",
        "Express",
        "JS",
        "Node",
        "JS",
        "level",
        "HTML5",
        "JavaScript",
        "CSS3",
        "CSS",
        "layouts",
        "Angular",
        "Worked",
        "modernization",
        "legacy",
        "UI",
        "technologies",
        "JS",
        "CSS",
        "Node",
        "JS",
        "Express",
        "JS",
        "AWS",
        "Amazon",
        "Web",
        "Services",
        "tool",
        "data",
        "party",
        "service",
        "provider",
        "feature",
        "REST",
        "Daily",
        "programming",
        "server",
        "client",
        "side",
        "Angularjs",
        "Reactjs",
        "NodeJS",
        "Express",
        "JS",
        "Front",
        "end",
        "JS",
        "React",
        "JS",
        "JavaScript",
        "Frameworks",
        "use",
        "Angularjs",
        "SPAs",
        "Single",
        "Page",
        "Applications",
        "applicationtool",
        "POCs",
        "user",
        "interface",
        "JS",
        "JS",
        "directives",
        "Controllers",
        "Filters",
        "Services",
        "Templets",
        "Events",
        "Injectors",
        "frontend",
        "architecture",
        "React",
        "Redux",
        "ES2015",
        "knowledge",
        "use",
        "Angularjs",
        "directives",
        "functionality",
        "HTML",
        "design",
        "development",
        "web",
        "pages",
        "ups",
        "PSD",
        "Knowledge",
        "React",
        "JS",
        "Flux",
        "SPA",
        "development",
        "Interface",
        "React",
        "JS",
        "knowledge",
        "AngularJS",
        "Responsive",
        "Web",
        "Design",
        "bug",
        "functionality",
        "performance",
        "designing",
        "issues",
        "JavaScript",
        "jQuery",
        "HTML5",
        "CSS3",
        "AngularJS",
        "Bootstrap",
        "AngularJS",
        "Reactjs",
        "Nodejs",
        "web",
        "design",
        "system",
        "data",
        "portal",
        "Kafka",
        "spark",
        "Expertise",
        "projects",
        "end",
        "Continuous",
        "IntegrationContinuous",
        "Delivery",
        "CICD",
        "pipeline",
        "integration",
        "tools",
        "Jenkins",
        "Chef",
        "AWS",
        "VM",
        "Integrated",
        "Jenkins",
        "Docker",
        "container",
        "Cloud",
        "bees",
        "Docker",
        "pipeline",
        "plugin",
        "EC2",
        "instance",
        "Amazon",
        "EC2",
        "Experience",
        "automation",
        "setup",
        "administration",
        "build",
        "deployment",
        "CICD",
        "tools",
        "Jenkins",
        "Anthill",
        "Pro",
        "UDeployUcode",
        "Build",
        "Automation",
        "tools",
        "ANT",
        "Maven",
        "Gradle",
        "products",
        "Bamboo",
        "JIRA",
        "BitBucket",
        "building",
        "artifacts",
        "JAR",
        "WAR",
        "EAR",
        "DLL",
        "EXE",
        "source",
        "code",
        "Jenkins",
        "SonarQube",
        "quality",
        "Source",
        "code",
        "Golang",
        "API",
        "TDD",
        "data",
        "application",
        "server",
        "alignment",
        "ReactJS",
        "components",
        "Forms",
        "Events",
        "Keys",
        "Router",
        "Animations",
        "Flux",
        "backup",
        "recovery",
        "engine",
        "VM",
        "backuprecovery",
        "VMware",
        "vSphere",
        "APIs",
        "GoLang",
        "programming",
        "language",
        "RabbitMQ",
        "Message",
        "bus",
        "communication",
        "interface",
        "Kubernetes",
        "application",
        "deployments",
        "updates",
        "deployment",
        "experience",
        "JavaScript",
        "MVC",
        "framework",
        "JS",
        "React",
        "JS",
        "Automate",
        "installation",
        "ELK",
        "agent",
        "filebeat",
        "playbook",
        "Python",
        "NumPy",
        "spicy",
        "Spark",
        "PySpark",
        "MLlib",
        "variety",
        "models",
        "algorithms",
        "purposes",
        "ELK",
        "Elastic",
        "Search",
        "Log",
        "Facilitated",
        "Scrum",
        "ceremonies",
        "Sprint",
        "planning",
        "Daily",
        "standups",
        "Stash",
        "Kibana",
        "Log",
        "management",
        "EC2",
        "Elastic",
        "Load",
        "Balancer",
        "ELB",
        "search",
        "Amazon",
        "Elastic",
        "Beanstalk",
        "Amazon",
        "EC2",
        "project",
        "AWS",
        "experience",
        "AWS",
        "storage",
        "services",
        "S3",
        "Experience",
        "User",
        "Interface",
        "UI",
        "Rich",
        "Web",
        "Applications",
        "Web",
        "Service",
        "Applications",
        "HTML",
        "CSS",
        "XML",
        "AJAX",
        "Object",
        "Java",
        "Script",
        "ANGULARJS",
        "REACTJS",
        "BOOTSTRAP",
        "Framework",
        "services",
        "JSP",
        "backup",
        "recovery",
        "engine",
        "VM",
        "backuprecovery",
        "VMware",
        "vSphere",
        "APIs",
        "Golang",
        "programming",
        "language",
        "RabbitMQ",
        "Message",
        "bus",
        "communication",
        "interface",
        "Managed",
        "dashboard",
        "control",
        "panel",
        "customers",
        "Administrators",
        "Django",
        "Oracle",
        "DB",
        "PostgreSQL",
        "VMWare",
        "API",
        "backup",
        "recovery",
        "engine",
        "VM",
        "backuprecovery",
        "VMware",
        "vSphere",
        "APIs",
        "GoLang",
        "programming",
        "language",
        "RabbitMQ",
        "Message",
        "bus",
        "communication",
        "interface",
        "automation",
        "scripts",
        "records",
        "Mongo",
        "DB",
        "export",
        "command",
        "files",
        "machine",
        "help",
        "ftplib",
        "Test",
        "approach",
        "TDD",
        "services",
        "application",
        "datasets",
        "Panda",
        "data",
        "frames",
        "MYSQL",
        "database",
        "Python",
        "Using",
        "Chef",
        "Elasticsearch",
        "Logstash",
        "Kibana",
        "ELK",
        "log",
        "analytics",
        "text",
        "search",
        "application",
        "monitoring",
        "integration",
        "AWS",
        "Lambda",
        "CloudWatch",
        "search",
        "stash",
        "Kibana",
        "ELK",
        "logs",
        "metrics",
        "S3",
        "bucket",
        "Lambda",
        "function",
        "Application",
        "Spring",
        "MVC",
        "Architecture",
        "JS",
        "custom",
        "consumers",
        "producers",
        "Apache",
        "Kafka",
        "Go",
        "golang",
        "cars",
        "system",
        "Node",
        "JS",
        "Angular",
        "JS",
        "MVC",
        "Frameworks",
        "development",
        "web",
        "applications",
        "users",
        "data",
        "Python",
        "Django",
        "forms",
        "test",
        "case",
        "PytestDeveloped",
        "application",
        "TestDriven",
        "methodology",
        "unit",
        "tests",
        "Python",
        "Unit",
        "test",
        "framework",
        "J2EE",
        "design",
        "Spring",
        "IOC",
        "MVC",
        "architecture",
        "database",
        "connectivity",
        "Spring",
        "JDBC",
        "framework",
        "modules",
        "JSPs",
        "Servlets",
        "controller",
        "part",
        "data",
        "format",
        "web",
        "application",
        "backend",
        "Wrote",
        "DAO",
        "layer",
        "SQL",
        "queries",
        "Spring",
        "Controller",
        "data",
        "request",
        "Spring",
        "application",
        "Working",
        "application",
        "developer",
        "controllers",
        "views",
        "models",
        "Django",
        "end",
        "backend",
        "application",
        "Python",
        "Django",
        "Web",
        "Framework",
        "Develop",
        "features",
        "applications",
        "Python",
        "Django",
        "test",
        "Development",
        "programming",
        "experience",
        "web",
        "applications",
        "Model",
        "View",
        "Control",
        "MVC",
        "architecture",
        "serverside",
        "applications",
        "Django",
        "Flask",
        "Developed",
        "features",
        "dashboard",
        "Python",
        "Java",
        "Bootstrap",
        "CSS",
        "JavaScript",
        "jQuery",
        "data",
        "charts",
        "web",
        "application",
        "charts",
        "JavaScript",
        "library",
        "data",
        "Apache",
        "Cassandra",
        "Created",
        "Terraform",
        "scripts",
        "EC2",
        "instances",
        "Elastic",
        "Load",
        "balancers",
        "S3",
        "buckets",
        "Terraform",
        "AWS",
        "infrastructure",
        "servers",
        "configuration",
        "management",
        "tools",
        "Chef",
        "Ansible",
        "Wrote",
        "ANSIBLE",
        "Playbooks",
        "Python",
        "SSH",
        "Wrapper",
        "Manage",
        "Configurations",
        "AWS",
        "Nodes",
        "Test",
        "Playbooks",
        "AWS",
        "instances",
        "Python",
        "Run",
        "Ansible",
        "Scripts",
        "provision",
        "Dev",
        "servers",
        "CICD",
        "J2EE",
        "Microservices",
        "Architecture",
        "environment",
        "Net",
        "Core",
        "Zookeeper",
        "Kafka",
        "Redis",
        "Anthill",
        "Pro",
        "Deploy",
        "SonarQube",
        "Source",
        "code",
        "Knowledge",
        "AWS",
        "Lambda",
        "Auto",
        "Cloud",
        "Front",
        "RDS",
        "Route53",
        "AWS",
        "SNS",
        "SQS",
        "SES",
        "Worked",
        "frontend",
        "frameworks",
        "CSS",
        "Bootstrap",
        "development",
        "Web",
        "application",
        "MySQL",
        "database",
        "queries",
        "Procedures",
        "normalization",
        "denormalization",
        "Python",
        "GUI",
        "components",
        "frontend",
        "functionality",
        "selection",
        "criteria",
        "integration",
        "system",
        "GIT",
        "version",
        "control",
        "repository",
        "checkins",
        "developer",
        "View",
        "Sets",
        "DjangoREST",
        "framework",
        "web",
        "services",
        "web",
        "services",
        "CRUD",
        "operations",
        "Wrote",
        "ANSIBLE",
        "Playbooks",
        "Python",
        "SSH",
        "Wrapper",
        "Manage",
        "Configurations",
        "AWS",
        "Nodes",
        "Test",
        "Playbooks",
        "AWS",
        "instances",
        "Python",
        "Run",
        "Ansible",
        "Scripts",
        "provision",
        "Dev",
        "servers",
        "Flask",
        "framework",
        "application",
        "development",
        "MYSQL",
        "database",
        "server",
        "webapps",
        "progress",
        "python",
        "Script",
        "files",
        "drop",
        "box",
        "Amazon",
        "server",
        "APIs",
        "API",
        "Django",
        "REST",
        "Framework",
        "Angular",
        "Developed",
        "views",
        "templates",
        "python",
        "Django",
        "controller",
        "templating",
        "language",
        "Website",
        "interface",
        "infrastructure",
        "activities",
        "Continuous",
        "Deployment",
        "Application",
        "Server",
        "setup",
        "Stack",
        "Monitoring",
        "playbooks",
        "Ansible",
        "Run",
        "deck",
        "Jenkins",
        "PythonDjango",
        "web",
        "application",
        "data",
        "processing",
        "MySQL",
        "database",
        "HTMLCSSJavaScript",
        "frontend",
        "development",
        "D3",
        "JavaScript",
        "Data",
        "Visualization",
        "DevOps",
        "group",
        "Jenkins",
        "Docker",
        "container",
        "EC2",
        "slaves",
        "Amazon",
        "AWS",
        "cloud",
        "configuration",
        "DevOps",
        "tools",
        "team",
        "scripts",
        "deployment",
        "tools",
        "environment",
        "Docker",
        "Redux",
        "architecture",
        "ObjectOriented",
        "concepts",
        "performance",
        "websites",
        "Experience",
        "React",
        "JS",
        "components",
        "Forms",
        "Events",
        "Keys",
        "Router",
        "Redux",
        "Animations",
        "Flux",
        "concept",
        "Phase",
        "team",
        "data",
        "Custom",
        "Components",
        "library",
        "Components",
        "Redux",
        "Middleware",
        "ReduxPromise",
        "application",
        "data",
        "BackEnd",
        "RESTFUL",
        "services",
        "Gathering",
        "requirements",
        "business",
        "details",
        "design",
        "user",
        "interface",
        "standards",
        "development",
        "maintenance",
        "website",
        "HTML",
        "CSS",
        "JavaScript",
        "Bootstrap",
        "jQuery",
        "views",
        "templates",
        "Python",
        "Djangos",
        "website",
        "interface",
        "Gulp",
        "taskbuild",
        "runner",
        "development",
        "Developed",
        "features",
        "dashboard",
        "Python",
        "HTML",
        "JavaScript",
        "CSS",
        "Bootstrap",
        "String",
        "frontendUser",
        "Interface",
        "development",
        "HTML",
        "CSS",
        "ES56",
        "JSX",
        "ReactJS",
        "Reduxsaga",
        "REST",
        "API",
        "RESTful",
        "Webservices",
        "FLASK",
        "emphasis",
        "Security",
        "service",
        "FLASKHTTP",
        "Auth",
        "HTTPS",
        "Hug",
        "libraries",
        "HTTP",
        "REST",
        "APIs",
        "validations",
        "CherryPy",
        "framework",
        "model",
        "HTTP",
        "Boto3",
        "interface",
        "AWS",
        "API",
        "TensorFlow",
        "computations",
        "data",
        "flow",
        "graphs",
        "Python",
        "wxPython",
        "NumPy",
        "Twisted",
        "PyQT",
        "Web2py",
        "Pygal",
        "APIs",
        "Django",
        "applications",
        "Djangotastypie",
        "Amazon",
        "Elastic",
        "Beanstalk",
        "Amazon",
        "EC2",
        "instance",
        "Django",
        "project",
        "AWS",
        "integration",
        "Jenkins",
        "Amazon",
        "EC2",
        "SQL",
        "Alchemyas",
        "ORM",
        "mapping",
        "tool",
        "access",
        "Wrote",
        "SQL",
        "PostgreSQL",
        "RDBMS",
        "development",
        "environment",
        "Wrote",
        "MySQL",
        "database",
        "python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "DB",
        "package",
        "datasets",
        "Pandas",
        "API",
        "ecosystem",
        "segments",
        "customers",
        "Location",
        "Experience",
        "Docker",
        "containers",
        "Linux",
        "Containers",
        "AMIs",
        "addition",
        "Docker",
        "containers",
        "scratch",
        "React",
        "JS",
        "compilation",
        "components",
        "web",
        "pages",
        "HTML",
        "CSS3",
        "JavaScript",
        "Bootstrap",
        "SASS",
        "LESS",
        "Reactjs",
        "Redux",
        "Flex",
        "Mongo",
        "DB",
        "Style",
        "web",
        "page",
        "SASS",
        "CSS",
        "behavior",
        "mixing",
        "operations",
        "functions",
        "Researching",
        "JavaScript",
        "frameworks",
        "React",
        "Native",
        "IonicCordova",
        "frontend",
        "React",
        "JS",
        "Virtual",
        "Dom",
        "React",
        "views",
        "components",
        "components",
        "custom",
        "HTML",
        "tags",
        "screens",
        "end",
        "Reactjs",
        "components",
        "NPM",
        "Node",
        "Package",
        "Manager",
        "redux",
        "library",
        "Kubernetes",
        "platform",
        "workloads",
        "services",
        "configuration",
        "automation",
        "life",
        "cycle",
        "methods",
        "Initialization",
        "Mounting",
        "Updating",
        "Unmounting",
        "phases",
        "components",
        "life",
        "cycle",
        "quality",
        "React",
        "Js",
        "user",
        "interfaces",
        "Docker",
        "containers",
        "Docker",
        "application",
        "life",
        "cycle",
        "Django",
        "Framework",
        "web",
        "applications",
        "model",
        "view",
        "control",
        "architecture",
        "R",
        "application",
        "machine",
        "business",
        "forecasting",
        "dashboard",
        "control",
        "panel",
        "customers",
        "Administrators",
        "Django",
        "Oracle",
        "DB",
        "VM",
        "Ware",
        "API",
        "calls",
        "Golang",
        "API",
        "TDD",
        "data",
        "application",
        "server",
        "alignment",
        "database",
        "Model",
        "Views",
        "APIs",
        "Python",
        "solution",
        "Apache",
        "Tomcat",
        "web",
        "server",
        "Linux",
        "Platform",
        "User",
        "Acceptance",
        "Testing",
        "UAT",
        "Test",
        "Scripts",
        "flux",
        "pattern",
        "redux",
        "framework",
        "core",
        "dependency",
        "loading",
        "CSVTXTDAT",
        "files",
        "Scala",
        "language",
        "Spark",
        "Framework",
        "data",
        "Spark",
        "Data",
        "frame",
        "file",
        "format",
        "HDFS",
        "fact",
        "table",
        "ORC",
        "Reader",
        "NumPy",
        "analysis",
        "Insurance",
        "premium",
        "configuration",
        "changes",
        "data",
        "models",
        "testing",
        "methodologies",
        "unit",
        "testing",
        "Integration",
        "testing",
        "web",
        "application",
        "testing",
        "Selenium",
        "testing",
        "packages",
        "data",
        "data",
        "systems",
        "SSIS",
        "ETL",
        "Tool",
        "data",
        "loads",
        "Preparation",
        "specification",
        "document",
        "development",
        "Informatica",
        "Extraction",
        "Transformation",
        "Loading",
        "ETL",
        "mappings",
        "data",
        "tables",
        "Data",
        "Marts",
        "ETL",
        "standards",
        "applications",
        "Python",
        "IDEs",
        "Eclipse",
        "PyCharm",
        "NetBeans",
        "scripts",
        "performance",
        "calculations",
        "NumPy",
        "SQL",
        "alchemy",
        "modules",
        "requests",
        "urllib2",
        "web",
        "packages",
        "tidyr",
        "ggplot2",
        "R",
        "Studio",
        "data",
        "visualization",
        "solutions",
        "points",
        "failure",
        "error",
        "handling",
        "communication",
        "failure",
        "delivery",
        "code",
        "principles",
        "TestDriven",
        "Development",
        "TDD",
        "integration",
        "line",
        "Agile",
        "Software",
        "Methodology",
        "Lock",
        "mechanisms",
        "functionality",
        "multithreading",
        "PythonDjango",
        "web",
        "application",
        "PostgreSQL",
        "DB",
        "integrations",
        "party",
        "email",
        "storage",
        "services",
        "stack",
        "Swift",
        "data",
        "files",
        "Keystone",
        "Horizon",
        "web",
        "services",
        "client",
        "server",
        "application",
        "Automation",
        "database",
        "programming",
        "Perl",
        "DBI",
        "module",
        "Design",
        "custom",
        "scripts",
        "use",
        "version",
        "controller",
        "Team",
        "Foundation",
        "Server",
        "TFS",
        "Wrote",
        "Perl",
        "Modules",
        "subroutine",
        "packages",
        "code",
        "reuse",
        "portability",
        "modularity",
        "data",
        "database",
        "SASAccess",
        "SAS",
        "SQL",
        "procedures",
        "SAS",
        "datasets",
        "MultiThreading",
        "factory",
        "model",
        "learning",
        "process",
        "worker",
        "processes",
        "integration",
        "system",
        "Git",
        "Gerrit",
        "Jenkins",
        "MySQL",
        "custom",
        "tools",
        "Python",
        "Bash",
        "JSON",
        "request",
        "server",
        "functionality",
        "websites",
        "states",
        "stores",
        "actions",
        "redux",
        "Test",
        "custom",
        "scripts",
        "solutions",
        "science",
        "models",
        "parts",
        "failure",
        "database",
        "communication",
        "points",
        "file",
        "system",
        "errors",
        "Performed",
        "troubleshooting",
        "Python",
        "bug",
        "fixes",
        "applications",
        "source",
        "data",
        "customers",
        "customer",
        "service",
        "team",
        "Pandas",
        "library",
        "statistics",
        "Analysis",
        "datasets",
        "Panda",
        "data",
        "frames",
        "Developed",
        "GUI",
        "webapp2",
        "test",
        "block",
        "documentation",
        "features",
        "python",
        "code",
        "web",
        "browser",
        "XML",
        "Schema",
        "documents",
        "framework",
        "XML",
        "documents",
        "user",
        "validations",
        "client",
        "side",
        "server",
        "side",
        "Setup",
        "Docker",
        "Linux",
        "Jenkins",
        "Docker",
        "host",
        "packages",
        "patch",
        "SOAP",
        "b4",
        "Data",
        "development",
        "phase",
        "unit",
        "Performed",
        "troubleshooting",
        "Python",
        "bug",
        "fixes",
        "applications",
        "source",
        "data",
        "customers",
        "customer",
        "service",
        "team",
        "web",
        "services",
        "Catalog",
        "Pricing",
        "Django",
        "MVT",
        "MySQL",
        "MongoDB",
        "Development",
        "Python",
        "APIs",
        "array",
        "structures",
        "Processor",
        "failure",
        "point",
        "bugs",
        "production",
        "support",
        "applications",
        "code",
        "reuse",
        "performance",
        "use",
        "design",
        "patterns",
        "team",
        "development",
        "workflow",
        "collaboration",
        "practices",
        "Git",
        "Developed",
        "integration",
        "system",
        "Git",
        "Jenkins",
        "MySQL",
        "custom",
        "tools",
        "Python",
        "Bash",
        "Multithreading",
        "module",
        "networking",
        "operations",
        "race",
        "route",
        "SMTP",
        "mail",
        "server",
        "web",
        "server",
        "Python",
        "React",
        "flux",
        "data",
        "flow",
        "Python",
        "modules",
        "likecsv",
        "robotparser",
        "itertools",
        "pickleto",
        "ensure",
        "privacy",
        "data",
        "Automated",
        "RabbitMQ",
        "cluster",
        "installations",
        "configuration",
        "PythonBash",
        "Experience",
        "Data",
        "migration",
        "Sqlite3",
        "Apache",
        "Cassandra",
        "database",
        "Cassandra",
        "data",
        "model",
        "implementation",
        "monitoring",
        "DSE",
        "DevCentre",
        "DatastaxOpscenter",
        "test",
        "cases",
        "PyUnit",
        "Selenium",
        "Automation",
        "testing",
        "manipulation",
        "test",
        "scripts",
        "Kubernet",
        "scaling",
        "management",
        "applications",
        "automation",
        "Jenkins",
        "integration",
        "Amazon",
        "EC2",
        "JIRA",
        "Bug",
        "tracking",
        "issue",
        "Garbage",
        "collection",
        "Python",
        "performance",
        "garbage",
        "objects",
        "part",
        "AgileScrum",
        "development",
        "team",
        "TDD",
        "approach",
        "applications",
        "Skills",
        "years",
        "Apache",
        "years",
        "Aws",
        "years",
        "Bootstrap",
        "years",
        "Css",
        "years",
        "Django",
        "years",
        "Git",
        "years",
        "Html",
        "years",
        "Html5",
        "years",
        "Javascript",
        "years",
        "jquery",
        "years",
        "Json",
        "years",
        "Linux",
        "years",
        "Mongodb",
        "years",
        "Mysql",
        "years",
        "years",
        "Rest",
        "years",
        "web",
        "services",
        "years",
        "Soap",
        "years",
        "Sql",
        "years",
        "Information",
        "SKILLS",
        "Python",
        "Golang",
        "HTML5",
        "Angularjs",
        "Shell",
        "Scripting",
        "JSON",
        "Rest",
        "Apache",
        "Web",
        "Server",
        "Django",
        "SQL",
        "UNIX",
        "Windows",
        "PostgreSQL",
        "NumPy",
        "SQL",
        "Alchemy",
        "AWS",
        "Tableau",
        "soup",
        "CSSCSS3",
        "Bootstrap",
        "XML",
        "jQuery",
        "Flask",
        "SciPy",
        "Pandas",
        "NumPy",
        "Backbone",
        "JS",
        "Restful",
        "Web",
        "services",
        "Linux",
        "Git",
        "Amazon",
        "s3",
        "Jenkins",
        "MySQL",
        "Mongo",
        "DB",
        "TSQL",
        "Eclipse",
        "CSS",
        "XML",
        "JavaScript",
        "jQuery",
        "CSS",
        "Bootstrap",
        "Rabbit",
        "MQ",
        "JavaScript",
        "Eclipse",
        "GitHub",
        "Linux",
        "Radis",
        "Go",
        "language",
        "AWS",
        "Pandas",
        "PyQt",
        "DOM",
        "PHP",
        "HTML",
        "CSS",
        "AJAX",
        "JavaScript",
        "Bootstrap",
        "LINUX",
        "NoSQL",
        "SOAP",
        "jQuery",
        "redux"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T22:47:29.372151",
    "resume_data": "Python Developer span lPythonspan span lDeveloperspan Python Developer Morgan Stanley Work Experience Python Developer Morgan Stanley September 2018 to Present Responsibilities Designed database Model APIs and Views utilizing Python to build an interactive webbased application Involved in building database Model APIs and Views utilizing Python to build an interactive webbased solution Developed a fully automated continuous integration system using Git Jenkins MySQL and custom tools developed in Python and Bash Designed and managed API system deployment using fast http server and Amazon AWS architecture and developed frontend and backend modules using Python on Django including Tasty Pie Web Framework using Git Collect data that introspects the performance of query and update operations on a MongoDB instance and recorded the online users data using Python Django forms and implemented test case using Pytest Developed Ruby Python scripts to monitor health of Mongo databases and perform adhoc backups using Mongo dump and Mongo restore Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Written Chef Cookbooks recipes using ruby to automate installation of Middleware Infrastructure like Apache Tomcat JDK and configuration tasks for new environments Used regular expression for faster search results in combination with Angular2 builtin and custom pipes Develop consumerbased features and applications using Python Django HTML Behavior Driven Development BDD and pairbased programming Used Test driven approach for developing the application and Implemented the unit tests using Python Unit test framework and Development of Isomorphic ReactJS and Redux driven API client applications Developed backend web services using Nodejs and stored dependencies using Node Package Manager NPM Used jQuery and AJAX calls for transmitting JSON data objects between front end and controllers and Utilized continuous integration and automated deployments with Jenkins Ansible and Docker Used Amazon Elastic Beanstalk with Amazon EC2 to deploy project into AWS and good experience with AWS storage services S3 Expertise in React JS and working with React Flux architecture Integrated Apache Kafka for data ingestion Successfully secured the Kafka cluster with Kerberos Implemented Kafka Security Features using SSL and without Kerberos Further with more grainfines Security I set up Kerberos to have users and groups this will enable more advanced security features Used NumPy for Numerical analysis and several python libraries like SymPy wxPython and matPlotLib Successfully Generated consumer group lags from Kafka using their API Kafka Used for building realtime data pipelines between clusters Worked on serverside applications with Django using Python programming and used python libraries like Beautiful Soup matplotlib SciPy NumPy and Built efficient Nodejs backend for client web application Experience to build CICD Pipeline to automate the code release process using Integration tools like GitSVN GitHub Jenkins Developed tools to automate some base tasks using Python Shell scripting and XML Used PyQt to implement GUI for the user to create modify and view reports based on client data Experience in setting up CICD pipeline integrating various tools with Jenkins to build and run Terraform jobs to create infrastructure in AWS Implemented Stable React JS components and Standalone functions to be added to any future pages Managed developed and designed a dashboard control panel for customers and Administrators using Django Oracle DB PostgreSQL and VMWare API calls Involved in development of Python based Web Services using REST for sending and getting data from the external interface in the JSON format and perform analysis using Django PostgreSQL Designed automation scripts to back up the old records by using Mongo DB export command and transferred the files into backup machine with the help of ftplib Followed AGILE development methodology to develop the application and developed Golang API and chatbot using TDD to automate software deployments and rollbacks Used Test driven approach TDD for developing services required for the application and managed datasets using Panda data frames and MYSQL Queried the database queries using Python Developed the application using the TestDriven methodology and designed the unit tests using Python Unit test framework Working as an application developer experienced with controllers views and models in Django Designed front end and backend of the application using Python on Django Web Framework Develop consumerbased features and applications using Python and Django in test driven Development and pairbased programming Created Ansible Playbooks and Puppet Manifests to provision Apache Web servers Tomcat servers Nginx Apache Spark and other applications Manage AWS EC2 instances utilizing Auto Scaling Elastic Load Balancing and Glacier for our QA and UAT environments as well as infrastructure servers for GITBitbucket and Puppet Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Good experience in developing web applications and implementing Model View Control MVC architecture using serverside applications like Django and Flask Developed and tested many features for dashboard using Python Java Bootstrap CSS JavaScript and jQuery Created interactive data charts on web application using High charts JavaScript library with data coming from Apache Cassandra Installed configured and managed the ELK Elastic Search Log Facilitated Scrum ceremonies like Sprint planning retrospectives Daily standups etc Stash and Kibana for Log management within EC2 Elastic Load Balancer ELB for Elastic search Created Terraform scripts for EC2 instances Elastic Load balancers and S3 buckets Implemented Terraform to manage the AWS infrastructure and managed servers using configuration management tools like Chef and Ansible Wrote ANSIBLE Playbooks with Python SSH as the Wrapper to Manage Configurations of AWS Nodes and Test Playbooks on AWS instances using Python Run Ansible Scripts to provision Dev servers Worked on frontend frameworks like CSS Bootstrap for development of Web application Worked in MySQL database on simple queries and writing Stored Procedures for normalization and denormalization Used Python based GUI components for the frontend functionality such as selection criteria Connected continuous integration system with GIT version control repository and continually build as the checkins come from the developer Experience in all areas of Jenkins like Plugin Management Securing and scaling Jenkins integrating Code Analysis Performance issues Analytics and Test Phases to complete the CICD pipelines within Jenkins Worked with View Sets in DjangoREST framework for providing web services and consumed web services performing CRUD operations Wrote ANSIBLE Playbooks with Python SSH as the Wrapper to Manage Configurations of AWS Nodes and Test Playbooks on AWS instances using Python Run Ansible Scripts to provision Dev servers Used Flask framework for application development Designed and implemented a dedicated MYSQL database server to drive the webapps and report on daily progress Developed python Script for moving files from drop box to Amazon server Consumed external APIs and wrote RESTful API using Django REST Framework and Angularjs Developed views and templates with python and Django view controller and templating language to create a userfriendly Website interface Developed internal project in Flask to generate report from google analytics on daily monthly and weekly basis Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL dB package Used Python Library Beautiful Soup for Web Scraping to extract data for building graphs Worked in development of applications especially in UNIX environment and familiar with all its commands Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL dB package Developed Python based API RESTful Web Services to track the events and perform analysis using Django Supportedmaintained client website within the DJANGO CMS system for various website needs Performed dynamic UI designing with HTML5 CSS3 less Bootstrap JSON and AJAX BuildingMaintaining Docker container clusters managed by Kubernetes Linux Bash GIT Docker on GCP Utilized Kubernetes and Docker for the runtime environment of the CICD system to build test deploy Created Python and Bash scripts to monitor increase efficiency of retail management application system and operations Installed SWM CICD for building automation deployments for upgrades and installs which was carried out by Jenkins Used Ansible playbooks to setup Continuous Delivery pipeline This primarily consists of a Jenkins and Sonar server the infrastructure to run these packages and various supporting software components such as Maven etc Worked on some of the new features of Angular 4 like new if else syntax ngtemplates form validators Designed and developed the application using Angular framework along with HTML5 CSS3 Type Script Java Script Bootstrap Nodejs NPM Mongo DB Moved existing AngularJS controllers and services to Angular components for more responsive and less dependency Enhanced legacy application by building new components in Angular 2 and typescript Developed single page applications using Angular Typescript web pack and grunt Hands on Experience on Angular technology for one complete project in rebasing the UI of the application using the techniques in Angular Created a PythonDjango based web application for data processing using MySQL as database and HTMLCSSJavaScript for frontend development and D3 JavaScript for Data Visualization Implemented REST APIs in Python using python based microframework called Flask with SQL Alchemy in the backend for management of data center resources on which OpenStack would be deployed Worked in DevOps group running Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Designed and developed MySQL Procedures and UNIX Shell Scripts for Data ImportExport and Conversions Responsible for debugging and troubleshooting programming related issues Worked on Atlassian tools like Bamboo Jira and confluence Implemented the function to send and receive AMQP messages on RabbitMQ synchronously and asynchronously and send JMS message to Apache ActiveMQ on the edge device Design develop and test HTML5 CSS3 Bootstrap JavaScript jQuery and ReactJS that meets accessibility and web browser standards for website Created a PythonDjango based web application using Python scripting for data processing MySQL for the database and HTMLCSSJQuery and HighCharts matplotlib for data visualization of sales tracking progress identifying trends Fetched twitter feeds for certain important keyword using pythontwitter library Tweepy Used JSON to store the twitter data which was further represented using matplotlib visualization and generated graphical reports for business decision using matplotlib library Developed build and deployment scripts using MAVEN as build tool in Jenkins Built various graphs for business decisionmaking use of Python matplotlib library Developed user interface by using the React js Flux for SPA development Installed Kerberos secured Kafka cluster with no encryption on Dev and Prod Also set up Kafka ACLs into it Successfully did set up a no authentication Kafka listener in parallel with Kerberos SASL Listener Also I tested nonauthenticated user Anonymous user in parallel with Kerberos user Understanding of securecloud configuration Cloud Trail cloudsecurity technologies VPC Security Groups etc and cloudpermission systems IAM Experience in Installing JenkinsPlugins for GIT Repository Setup SCM Polling for Immediate Build with Maven and Maven Repository and Deployment of apps using custom modules through Puppet as a CICD Process Installed and configured configuration tool such as Chef Serverworkstation and nodes via CLI tools to AWS nodes Developed and Deployed SOAP based Web Services on Tomcat Server related Database on InfluxDB also worked on Interface created for Kafka also checked the measurements on Databases Used Jenkins for continuous integration for code quality inspection and worked on building local repository mirror and source code management using Git hub Focused on containerization and immutable infrastructure Docker has been core to this experience along with Mesos Marathon and Kubernetes Integrated Kubernetes with network storage and security to provide comprehensive infrastructure and orchestrated container across multiple hosts Administered RedHat Linux servers for several functions including managing Apace Tomcat server mail server MySQL database and firewalls in both development and production environments Created and configured new JIRA projects and worked with departments to maintain existing JIRA Used Pandas library for statistics Analysis NumPy for Numerical analysis Developed GUI using webapp2 for dynamically displaying the test block documentation and other features of python code using a web browser Responsible for user validations on client side as well as server side Automated the existing scripts for performance calculations using NumPy and SQLalchemy To convert the Entire event flow as a SOA based architecture used RabbitMQ as a queues and BUS Implemented the function to send and receive AMQP messages on RabbitMQ synchronously and asynchronously and send JMS message to Apache ActiveMQ on the edge device Python Developer Barclays September 2013 to January 2016 Responsibilities Developed frontend and backend modules using Python on Django including Tasty Pie Web Framework using GitCollect data that introspect the performance of query and update operations on a MongoDB instance Developed Ruby Python scripts to monitor health of Mongo databases and perform adhoc backups using Mongo dump and Mongo restore Worked in DevOps group running Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Also gained familiarity with supporting technologies like kubernetes and Mesos Develop consumerbased features and applications using Python Django HTML Behavior Driven Development BDD and pairbased programming Implemented the application using Python Spring IOC Inversion of Control Django Framework and handled the security using Python Spring Security Used Test driven approach for developing the application and Implemented the unit tests using Python Unit test framework and Development of Isomorphic ReactJS and Redux driven API client applications Developed backend web services using Nodejs and stored dependencies using Node Package Manager NPM Designed and managed API system deployment using fast http server and Amazon AWS architecture Used jQuery and AJAX calls for transmitting JSON data objects between front end and controllers and Utilized continuous integration and automated deployments with Jenkins Ansible and Docker Expertise in setting up configure manage and scale Amazon Elastic Search cluster and used Log Stash along with Kibana ELK Stack for centralized logging which stores logs and metrics into an S3 bucket using Lambda functions utilized Glacier for storage for setting up and maintenance of AutoScaling of AWS stacks Enhanced user experience by designing new web features using MVC Framework like Express JS and Node JS Used advanced level of HTML5 JavaScript CSS3 and pure CSS layouts and Angular Worked on the modernization of a legacy and outsourced UI technologies used were Angular JS 2 CSS Node JS Express JS and AWS Amazon Web Services Developed a tool to retrieve and send data to third party service provider this feature was implemented using REST Daily programming in server and client side by using Angularjs Reactjs NodeJS and Express JS Worked on Front end by using Angular JS React JS and JavaScript Frameworks Extensive use of Angularjs for developing the SPAs Single Page Applications for internal applicationtool Developed multiple POCs to create a user interface in Angular JS Worked on Angular JS directives Controllers Filters Services Templets Events and Injectors Construct a powerful and modern frontend architecture involving React Redux and ES2015 Extensive knowledge of and use of Angularjs directives to bring additional functionality to HTML Responsible for design and development of the web pages from mock ups PSD Knowledge in using React JS Flux for SPA development Implemented clientside Interface using React JS Good knowledge in AngularJS and Responsive Web Design Involved with bug fixing on functionality performance and designing issues with JavaScript jQuery HTML5 CSS3 and AngularJS Used Bootstrap and AngularJS Reactjs and Nodejs in effective web design Developed and designed system to collect data from multiple portal using Kafka and then process it using spark Expertise in delivering Agile projects from end to end Continuous IntegrationContinuous Delivery CICD pipeline by integration of tools like Jenkins Chef and AWS for VM provisioning Integrated Jenkins with Docker container using Cloud bees Docker pipeline plugin and provisioned the EC2 instance using Amazon EC2 plugin Experience in working with automation setup and administration of build and deployment CICD tools such as Jenkins Anthill Pro and UDeployUcode and integrated with Build Automation tools like ANT Maven Gradle and other Atlassian products Bamboo JIRA BitBucket for building of deployable artifacts JAR WAR EAR and DLL EXE from source code Used Jenkins with SonarQube to get the better quality of the Source code Architected and developed a Golang API using TDD to aggregate data to show application server alignment Worked in using ReactJS components Forms Events Keys Router Animations and Flux concept Developed backup and recovery engine for VM backuprecovery using VMware vSphere APIs GoLang programming language and RabbitMQ Message bus communication interface Using Kubernetes I have controlled and automated application deployments and updates and orchestrated deployment Good experience in JavaScript MVC framework like Angular JS React JS Automate the installation of ELK agent filebeat with Ansible playbook Used Python NumPy spicy pandas scikitlearn seaborn and Spark PySpark MLlib to develop variety of models and algorithms for analytic purposes Installed configured and managed the ELK Elastic Search Log Facilitated Scrum ceremonies like Sprint planning retrospectives Daily standups etc Stash and Kibana for Log management within EC2 Elastic Load Balancer ELB for Elastic search Used Amazon Elastic Beanstalk with Amazon EC2 to deploy project into AWS and good experience with AWS storage services S3 Experience in Developing User Interface UI Rich Web Applications and Web Service Applications using HTML 4 XHTML CSS 2 XML AJAX Object Oriented Java Script ANGULARJS REACTJS BOOTSTRAP Framework RESTful services JAVA JSP Developed backup and recovery engine for VM backuprecovery using VMware vSphere APIs Golang programming language and RabbitMQ Message bus communication interface Managed developed and designed a dashboard control panel for customers and Administrators using Django Oracle DB PostgreSQL and VMWare API calls Developed backup and recovery engine for VM backuprecovery using VMware vSphere APIs GoLang programming language and RabbitMQ Message bus communication interface Designed automation scripts to back up the old records by using Mongo DB export command and transferred the files into backup machine with the help of ftplib Used Test driven approach TDD for developing services required for the application and managed datasets using Panda data frames and MYSQL Queried the database queries using Python Using Chef deployed and configured Elasticsearch Logstash and Kibana ELK for log analytics full text search application monitoring in integration with AWS Lambda and CloudWatch Built Elastic search Log stash and Kibana ELK to store logs and metrics into S3 bucket using Lambda function Involved in implementing the complete Application in the inbuild Spring MVC Architecture with Angular JS Developed custom consumers and producers for Apache Kafka in Go golang for cars monitoring system Used Node JS Angular JS and MVC Frameworks in the development of the web applications Recorded the online users data using Python Django forms and implemented test case using PytestDeveloped the application using the TestDriven methodology and designed the unit tests using Python Unit test framework Involved in multitiered J2EE design utilizing Spring IOC MVC architecture Implemented database connectivity using Spring JDBC framework to work upon different modules Created required JSPs and Servlets for controller and view part Worked on exchanging data in JSON format between web application and backend Wrote DAO layer required SQL queries and Spring Controller to handle data and request to Spring application Working as an application developer experienced with controllers views and models in Django Designed front end and backend of the application using Python on Django Web Framework Develop consumerbased features and applications using Python and Django in test driven Development and pairbased programming Good experience in developing web applications and implementing Model View Control MVC architecture using serverside applications like Django and Flask Developed and tested many features for dashboard using Python Java Bootstrap CSS JavaScript and jQuery Created interactive data charts on web application using High charts JavaScript library with data coming from Apache Cassandra Created Terraform scripts for EC2 instances Elastic Load balancers and S3 buckets Implemented Terraform to manage the AWS infrastructure and managed servers using configuration management tools like Chef and Ansible Wrote ANSIBLE Playbooks with Python SSH as the Wrapper to Manage Configurations of AWS Nodes and Test Playbooks on AWS instances using Python Run Ansible Scripts to provision Dev servers Implemented CICD for J2EE and Microservices Architecture environment Net Core Zookeeper Kafka Redis using Anthill Pro and Deploy and integrated SonarQube to get better Source code Having Knowledge on AWS Lambda Auto scaling Cloud Front RDS Route53 AWS SNS SQS SES Worked on frontend frameworks like CSS Bootstrap for development of Web application Worked in MySQL database on simple queries and writing Stored Procedures for normalization and denormalization Used Python based GUI components for the frontend functionality such as selection criteria Connected continuous integration system with GIT version control repository and continually build as the checkins come from the developer Worked with View Sets in DjangoREST framework for providing web services and consumed web services performing CRUD operations Wrote ANSIBLE Playbooks with Python SSH as the Wrapper to Manage Configurations of AWS Nodes and Test Playbooks on AWS instances using Python Run Ansible Scripts to provision Dev servers Used Flask framework for application development Designed and implemented a dedicated MYSQL database server to drive the webapps and report on daily progress Developed python Script for moving files from drop box to Amazon server Consumed external APIs and wrote RESTful API using Django REST Framework and Angular Developed views and templates with python and Django view controller and templating language to create a userfriendly Website interface Automated various infrastructure activities like Continuous Deployment Application Server setup Stack Monitoring using Ansible playbooks and has integrated Ansible with Run deck and Jenkins Created a PythonDjango based web application for data processing using MySQL as database and HTMLCSSJavaScript for frontend development and D3 JavaScript for Data Visualization Worked in DevOps group running Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Created and maintained various DevOps related tools for the team such as provisioning scripts deployment tools and staged virtual environment using Docker Experienced in working with Redux architecture using complex ObjectOriented concepts in improving the performance of the websites Experience in using React JS components Forms Events Keys Router plus Redux Animations and Flux concept In Phase Two worked closely with the BackEnd team to display data using the Custom Components library Components and Redux Used Middleware ReduxPromise in application to retrieve data from BackEnd and to also perform RESTFUL services Gathering requirements and translating the business details into Technical design Implemented responsive user interface and standards throughout the development and maintenance of the website using the HTML CSS JavaScript Bootstrap jQuery Developed views and templates with Python and Djangos to create a userfriendly website interface Used Gulp as a taskbuild runner for development Developed and tested many features for dashboard using Python HTML JavaScript CSS and Bootstrap String frontendUser Interface development using HTML CSS ES56 JSX ReactJS Reduxsaga and REST API Designed RESTful Webservices using FLASK with emphasis on improved Security for the service using FLASKHTTP Auth with HTTPS Also utilized Hug libraries to develop HTTP REST APIs to provide validations and used CherryPy framework to model and bind HTTP Worked with Boto3 as interface for AWS API and TensorFlow to make numerical computations using data flow graphs Utilized Python libraries like wxPython NumPy Twisted PyQT Web2py Pygal Plotly Developed various APIs for Django applications using Djangotastypie Used Amazon Elastic Beanstalk with Amazon EC2 instance to deploy Django project into AWS Configured continuous integration with Jenkins on Amazon EC2 Implemented SQL Alchemyas ORM mapping tool for complete access and Wrote SQL queries and maintained PostgreSQL RDBMS in the local development environment Wrote and executed various MySQL database queries from python using PythonMySQL connector and MySQL DB package Managed large datasets using Pandas API ecosystem to analyze the different segments of customers based on Location Experience in creating Docker containers leveraging existing Linux Containers and AMIs in addition to creating Docker containers from scratch Used React JS for templating for faster compilation and developing reusable components Involved designing in web pages using HTML 5 CSS3 JavaScript Bootstrap SASS LESS Reactjs Redux Flex Mongo DB Responsible to Style look and feel of the web page with SASS that extends CSS with dynamic behavior such as variable mixing operations and functions Researching JavaScript based frameworks like React Native and IonicCordova for frontend Worked on React JS Virtual Dom and React views rendering using components which contains additional components called custom HTML tags Implemented various screens for the front end using Reactjs and used various predefined components from NPM Node Package Manager and redux library Using Kubernetes is a portable extensible opensource platform for managing containerized workloads and services that facilitates both declarative configuration and automation Effectively used the life cycle methods such as Initialization Mounting Updating and Unmounting and invoked them at different phases of the components life cycle to develop quality React Js user interfaces Worked on creating the Docker containers and Docker consoles for managing the application life cycle Used Django Framework for developing web applications using model view control architecture Developed and implemented R and Shiny application which showcases machine learning for business forecasting Managed developed and designed a dashboard control panel for customers and Administrators using Django Oracle DB and VM Ware API calls Architected and developed a Golang API using TDD to aggregate data to show application server alignment Built database Model Views and APIs using Python for interactive webbased solution Supported Apache Tomcat web server on Linux Platform Involved in User Acceptance Testing and prepared UAT Test Scripts implemented flux pattern by using redux framework as a core dependency Worked on loading CSVTXTDAT files using Scala language in Spark Framework to process the data by creating Spark Data frame and RDD and save the file in parquet format in HDFS to load into fact table using ORC Reader Used NumPy for Numerical analysis for Insurance premium Implemented configuration changes for data models Different testing methodologies like unit testing Integration testing web application testing Selenium testing performed Implemented SSIS packages for data sourcing from Heterogeneous data systems using SSIS ETL Tool to support daily incremental data refresh full loads Preparation of technical specification document for the development of Informatica Extraction Transformation and Loading ETL mappings to load data into various tables in Data Marts and defining ETL standards Worked on various applications using Python integrated IDEs Eclipse PyCharm and NetBeans Automated the existing scripts for performance calculations using NumPy and SQL alchemy Extensively used python modules such as requests urllib and urllib2 for web crawling Used packages like dplyr tidyr ggplot2 in R Studio for data visualization Maintained and updated existing automated solutions Handled potential points of failure through error handling and communication of failure Performed efficient delivery of code based on principles of TestDriven Development TDD and continuous integration to keep in line with Agile Software Methodology principles Lock mechanisms were implemented and the functionality of multithreading has been used PythonDjango based web application PostgreSQL DB and integrations with 3rd party email messaging storage services Worked on Open stack Swift for moving large data files using Keystone and Horizon and integrated them into the web services and client server application Automation database programming through Perl DBI module Design and implemented custom scripts Extensive use of version controller Team Foundation Server TFS Wrote Perl Modules and subroutine packages to facilitate code reuse portability and modularity Extracting data from the database using SASAccess SAS SQL procedures and create SAS datasets Used MultiThreading factory model to distribute learning process backtesting into various worker processes Developed a fully automated continuous integration system using Git Gerrit Jenkins MySQL and custom tools developed in Python and Bash Used Ajax JSON to send request to the server to check the functionality of the websites Maintained states in the stores and dispatched the actions using redux Test and validated the custom scripts and delivered automated solutions for science models Anticipated potential parts of failure database communication points file system errors Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Used Pandas library for statistics Analysis Managed large datasets using Panda data frames and MySQL Developed GUI using webapp2 for dynamically displaying the test block documentation and other features of python code using a web browser Developed the required XML Schema documents and implemented the framework for parsing XML documents Responsible for user validations on client side as well as server side Setup Docker on Linux and configured Jenkins to run under Docker host Used advanced packages like Mock patch and Beautiful SOAP b4 in extracting the Data during development phase and perform unit testing Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Creating RESTful web services for Catalog and Pricing with Django MVT MySQL and MongoDB Development of Python APIs to dump the array structures in the Processor at the failure point for debugging Fixed bugs providing production support enhanced applications by improving code reuse and performance by making effective use of various design patterns Collaborated within a team using an agile development workflow and widelyaccepted collaboration practices using Git Developed a fully automated continuous integration system using Git Jenkins MySQL and custom tools developed in Python and Bash Implemented Multithreading module and complex networking operations like race route SMTP mail server and web server using Python Used React flux to polish the data and for single directional flow Used standard Python modules likecsv robotparser itertools pickleto ensure privacy of sensitive data Automated RabbitMQ cluster installations and configuration using PythonBash Experience with Data migration from Sqlite3 to Apache Cassandra database Cassandra data model designing implementation maintaining and monitoring using DSE DevCentre DatastaxOpscenter Written test cases using PyUnit and Selenium Automation testing for better manipulation of test scripts Working on Kubernet in scaling and management of containerized applications Used automation Jenkins for continuous integration on Amazon EC2 Used JIRA for Bug tracking and issue tracking Implemented Garbage collection with Python to enhance the performance by garbage collecting the older generated objects Worked as part of an AgileScrum based development team and exposed to TDD approach in developing applications Skills Ajax 3 years Apache 3 years Aws 3 years Bootstrap 3 years Css 3 years Django 3 years Git 3 years Html 3 years Html5 3 years Javascript 3 years jquery 3 years Json 3 years Linux 3 years Mongodb 3 years Mysql 3 years python 3 years Rest 3 years Restful web services 3 years Soap 3 years Sql 3 years Additional Information SKILLS Python Golang HTML5 Angularjs Shell Scripting JSON Rest Apache Web Server Django SQL UNIX Windows PostgreSQL NumPy SQL Alchemy AWS Tableau soup CSSCSS3 Bootstrap XML jQuery Flask SciPy Pandas NumPy Backbone JS Restful Web services Linux Git Amazon s3 Jenkins MySQL Mongo DB TSQL Eclipse CSS XML JavaScript jQuery CSS Bootstrap Rabbit MQ JavaScript Eclipse GitHub Linux Radis Go language AWS Pandas PyQt DOM PHP HTML CSS AJAX JavaScript Bootstrap LINUX NoSQL MongoDB SOAP jQuery redux",
    "unique_id": "e956ac53-07b2-449c-bc23-7139351b6a5d"
}