{
    "clean_data": "PYTHON DEVELOPER span lPYTHONspan span lDEVELOPERspan PYTHON DEVELOPER FACEBOOK Menlo Park CA Around 5 years of experience as a Python Developer with a deep understanding of technology trends with expertise in the core of complex technologies Solid experience in analysis design and development testing implementation and maintenance of various web applications using Python and Django Hands on Experience with the implementation Development and Scientific Programing of Python libraries NumPy Pyunit Pickle SciPy PyTables SQLAlchemy Matplotlib Pandas Beautiful Soup and urllib in various tasks Expertise in developing webbased applications using Bash Perl Python PHP XML DHTML XHTML Ajax JOOMLA CSS HTML JSON JavaScript and Bootstrap Expertise working in WAMP Windows Apache MYSQL and PythonPHP and LAMP Linux Apache MySQL and PythonPHP Architecture Experience in developing Web Services with Python programming language Expertise in working with GUI frameworksPyjamas Jytho guidata  PyQt PyWebkitGtk and Experienced with Elasticsearch Logstash and Kibana ELK Experienced in working on Application Servers like WebSphere WebLogic Tomcat Web Servers like Apache server NGINX and Integrated Development Environments like PyCharm Eclipse MyEclipse JDeveloper and RAD Experience in implementing Object Oriented Python Hash Tables Dictionaries and Multithreading Django and MYSQL Experience on Python Testing frameworks like zope pytest NOSE and Robot framework Experience of dealing with various development methodologies like Waterfall Scrum and Agile Good experience in developing web applications and implementing Model View Control MVC architecture using serverside applications Django Flask and Pyramid Designed and developed data management system using MySQL and used Django APIs to access database Understanding of the threading limitations of Python and multiprocess architecture Hands on experience in Agile Methodologies Scrum stories and sprints experience in a Python based environment Wrote Python based APIs to interface between software and hardware by using Web Sockets and Flask Experience in designing the automation framework using Python Corn and Shell scripting Experience in writing test scripts test cases test specifications and test coverage Experienced with version control systems like Git GitHub CVS SVN Chef Puppet Ansible Crytograph and REST API to keep the versions and configurations of the code organized Experienced in using Integrated Development Environment IDEs in PyDev PyScripter Pycharm Spider Python IDLE Brackets Eclipse JBuilder Sublime and NetBeans JDeveloper Eric Komodo Edit Komodo IDE Cloud9 IDE DrPython and NetBeans for debugging and worked with SublimeText2 Edit Plus Notepad Vim Editors for coding Experience in deploying Microservices using Docker and using Docker containers along with Kubernetes Good Analytical and ProblemSolving skills and ability to work on own besides being a valuable and contributing team player Good experience in working with Python Django Zope Bottle Swagger PyramidTurbogears Pylons Flask Web2py Gunicorn Totnado CherryPy Spring Frame works for developing backend of web applications Authorized to work in the US for any employer Work Experience PYTHON DEVELOPER FACEBOOK Menlo Park CA September 2018 to Present Used Python and Django creating graphics XML processing data exchange and business logic implementation Utilized Python Libraries like Boto3 for AWS Managed Container using Docker by writing Docker files and set up the automated build on Docker HUB and installed and configured Kubernetes Developed PLSQL routines to extract data from another database and load it into the Oracle database Used modules Beautiful Soup SciPy pythontwitter PyMongo Celery NumPy matplotlib Urllib2 etc for generating complex graphical data creation of histograms etc Work in installing softwares using pip command for python libraries like Scrapy and used PEP8 coding convention Worked with Requests Pysftp Gnupg Report Lab HTTPLib2 and Pandas python libraries during development lifecycle Worked with Python LibrariesPackages such as Py Query Pickle PyQT Py mmock PySide wxPython PyTables Data Frames SQLAlchemy Twisted Pygame pyGtk Pandas and Pyglet PyQT PyGtkpywin32 ntlk nose SymPy Ipython Generated graphical reports using Python package NumPy and used advanced features like pickleunpickle in Python for sharing the information across the applications to deploy into AWS with toolsplatforms such as JIRA Jenkins Docker and Elasticsearch Involved in converting HiveSQL queries into Spark transformations using Spark RDDs Python and Scala Designed and implemented open source AI frameworks Pytorch TensorFlow Scikitlearn Apache Open Source Kafka Storm Spark for NLP and ML Algorithms Responsible in using the AWS tools like RDS Cloud watch EC2 Elastic load Balancer Route53 KMS SNS S3 Lambda Functions IAM Implemented Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Built complete Configuration Management for the Microservices using Kubernetes Docker and Ansible Designed front end using HTML AngularJS CSS and JavaScript Implemented SOAPRESTful web services in JSON format Generated Python Django forms to record data of online users and used Pytest for writing test cases Deployed the project into Jenkins using GIT version control system Worked on monitoring developing and transforming data using SQL Server Integration Service SSIS and SQL Server Analysis Service SSAS Optimized SQL queries used in batch processing and Wrote validation scripts in SQL to validate data loading Developed web applications in Python Django with clientspecific customizations Created Data tables utilizing PySpark PyQT to display customer and policy information and add delete update customer records Worked on the project for Master Data Management MDM team for designing and developing the ETL process in AWS glue and launching and extracting the data from MDM tool called Reltio Extracted and loaded data using Python scripts and PLSQL packages Proficient with structures semistructured and unstructured data using a broad range of data science programming languages and big data tools including R Python Spark SQL Scikit Learn Hadoop MapReduce Utilized PyUnit the Python Unit test framework for all Python applications and used Django Database APIs to access database objects Worked on PEP8 coding standard and test a program by running it across test cases to ensure validity and effectiveness of code using PyChecker and PyLint Designed and maintained databases using Python and developed Python based API RESTful Web Service using Flask SQLAlchemy and PostgreSQL Designed and implemented open source AI frameworks Pytorch TensorFlow Scikitlearn Apache Open Source Kafka Storm Spark for NLP and ML Algorithms Deployed debugged and maintained complex distributed software stacks containing Apache Spark Hadoop HDFS and I Python Notebook servers on cloudbased AWS system by optimizing the stacks for best computational performance and stability Involved in writing unit test cases for the functionalities using Nose Test Worked on development and maintenance of SQL code embedded in PLSQL Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Worked on Python OpenStack APIs and used NumPy for Numerical analysis Worked on installation of Docker using Docker toolbox Developed and implemented block chain application using ECDS algorithm Implementing Python alongside using various libraries such as matplotlib for charts and graphs Python twitter PySide Pickle Pandas data frame requests network urllib2 and MySQL  for database connectivity Worked on creation of custom Docker container images tagging and pushing the images Used Jenkins to build and troubleshoot automated testing and for continuous integration and deployment Used Amazon Elastic Beanstalk with Amazon EC2 to deploy project into AWS Focus on integration overlap and Informatica newer commitment to MDM with the acquisition of Identity Systems Wrote and executed various MySQL database queries from PythonMySQL connector and MySQL  package Generated automated documentation for the Python scripts using sphinx Designed and developed continuous integration using Python Flask GitHub Generated Python Django Forms Crispy forms to record data login and signup of online users Utilized Python libraries with Python NumPy Twisted and matplotlib Scraped and retrieved web data as JSON using Scrapy presented with Pandas library Involved in packaging deployment and upgrade of different modules of SAS on JBoss App Server VB code Analysis and Sybase store procedure converted into SQL Developed Chef Cookbooks to install and configure Apache Tomcat Jenkins and deployment automation Developed entire frontend and backend modules using Python on Django including Tasty pie Web Framework using Git Designed and developed scalable Azure APIs using Flask web framework in Python and Integrated with Azure API Management Logical Apps and other Azure services Extensively involved in performing unit testing using PyUnit which are bundled and imported automatically Developed and executed various MySQL database queries from Python using PythonMySQL connector and MySQL database package Worked PIP community most used Python Package Manager PyVows BDD tool for Python Wrote Python scripts to parse XML and JSON documents and load the data in database Worked on installing software using pip command for python libraries and extensive usage of the PEP8 coding convention Implemented SqlAlchemy ORM which is a python library for complete access over SQL as python objects Used JIRA as Issue Tracking Tool Setup Docker on Linux and configured Jenkins to run under Docker host Worked on front end frameworks like Bootstrap for responsive web pages and AngularJS for Single page application Involved in writing SQL Queries Stored procedures functions packages tables views triggers Involved Developed dynamic web pages using python Django Frameworks and used Python and Django creating graphics XML processing data exchange and business logic implementation Installation and setting up PythonUnix test beds and supported Apache Server on Linux Platform Developed highperformance distributed queueing system Scala Redis Akka closure MQ messaging Json Developed new functionality for interactive healthcare system Worked on Installing JenkinsPlugins for GIT Repository Setup SCM Polling for Immediate Build with Maven and Maven Repository and Deployment of apps using custom modules through Puppet as a CICD Process Worked on several standard Python packages like Numpy matplotlib SciPy Pandas and PyTables etc Developed automation scripting in Python core using Puppet to deploy and manage Java applications across Linux servers Worked on objectoriented programming OOP concepts using Python Django and Linux Developed a fully automated continuous integration system using Git Gerrit Jenkins MySQL and custom tools developed in Python and Bash Wrote Lambda functions in python for AWSs Lambda Kinesis and Elastic Search which invokes python scripts to perform various transformations and analytics on large data sets in AMAZON EMR clusters Performed data cleaning and feature selection using MLlib package in PySpark and working with deep learning frameworks such as Caffe Neon etc Worked on data analysis and data mining algorithms using Teradata Implemented Cloud Infrastructure as a Service environment using open source technology OpenStack to enable portability of cloud services across hybrid cloud environments Worked on quantdata Python libraries pandasNumPy Knowledge on NV Me and SAS regarding transfer of data between client systems and SSDs Involved in development of Web Services using SOAP for sending and getting data from the external interface in the XML format Responsible for the project monitored on JIRA Agile PYTHON DEVELOPER TWITTER San Francisco CA November 2015 to December 2016 Involved in building database Model APIs and Views utilizing Python to build an interactive webbased solution Responsible for gathering requirements system analysis design development testing and deployment Worked on developing internal testing tools which were written in Python Generated Python Django Forms to record data of online users Worked on Python LibrariesPackages such as HTTPLib2 Urllib2 Beautiful Soup Py Query Numpy SciPy Pickle PyQT PySide wxPython PyTables Data Frames SQLAlchemy Twisted Pygame pyGtk Pandas and Matplotlib Performed job functions using Spark APIs in Scala for real time analysis and for fast querying purposes Worked on Python Nameko decorators generators list comprehensions list tuples cache pandas and NumPy Rewrite existing Java application in Python module to deliver certain format of data Worked on developing internal testing tools which were written in Python Developed consumerbased features and applications using Python and Django in test driven Development Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Installed and configured WebSphere Studio Application Developer WSAD to connect Central CVS and SVN repositories Develop consumerbased features and applications using Python Django pyramid Flask Web2py HTML and other web technologies Designed and created backend data access modules using PLSQL stored procedures With using of Python OS module on UNIX environment made job cloning and forking Wrote Python modules to extractload asset data from the MySQL source database Python Scripting using the Python Twisted Framework Initiated Block Chain for security clearing and settlement Utilized Cloud Watch Events to collect data from other AWS resources and transfer them to SQS and SNS for alerting solar Built the web application by using Python Django AWS J2EE PostgreSQL MySQL Oracle 10g and MongoDB and Knowledgeable with continuous deployment using Heroku and Jenkins Involved and worked on different Rest APIs development by using Flask and Swagger Responsible for build and test of applications Experience in handling database issues and connections with SQL and NoSQL databases like MongoDB by installing and configuring various packages in python Teradata MySQL  MySQL connector PyMongo and SQL Alchemy Extensively worked on Jenkins by installing configuring and maintaining for Continuous integration CI and for End to End automation for all build and deployments Worked on various Python packages such as SQLAlchemy Pickle Pyside PySpark PyMongo Pytables Developed the notification service by posting the JSON request in AWS API Gateway Validating the response in Lambda by getting the data from DynamoDB and sending the notification through AWS SNS Implemented REST APIs in Python using microframework like Flask with SQLAlchemy in the backend for management of data center resources on which OpenStack would be deployed Involved in development of Web Services using and REST for sending and getting data from the external interface in XML and JSON format Used JIRA for issue tracking and bug tracking for each individual sprint and used pyChecker tool to fix bugs Worked on Atlassian tools like Bamboo Jira and confluence Developed application which accessed the Cloud foundry API to monitor trends in development environments using other CF tools Jenkins Chef and Puppet Proficient in SQL databases MS SQL MYSQL Oracle and NO SQL databases MongoDB Cassandra Worked on developing consumerbased features and applications with Python Django HTML Behavior Driven Development BDD and pairbased programming Developed and Deployed SOAP based Web Services on Tomcat Server Worked on controllers views and models in Django working as an application developer Develop consumerbased features and applications using Python and Django in test driven Development and pairbased programming Created PyUnit test cases for unit testing Development of test framework using the Python Managed code with unit tests and GitHub Proven ability in developing selenium automation framework like Page Objects Hybrid Frameworks Using Chef and AWS allowed me to reduce costs for the department and eliminate unwarranted resources Automated provisioning of cloud infrastructure with Chef Developed the ETL mappings in PLSQL via packages procedures functions views and triggers Worked on developing web applications and implementing Model View Control MVC architecture using serverside applications like Django and Flask Developed Python Script for moving files from drop box to Amazon server Used Python modules such as requests urllib and urllib2 for web crawling and Performed Design involved in code reviews and wrote unit tests in Python and Updated site with JavaScript jQuery Python Django and SQL Deployed Django web application in Apache webserver and Carpathia cloud web deployment Build JSON objects using the framework which will be used by JavaScript to control the flow of the page Resolved performance related issues using efficient coding Develop dynamic webpages using HTML5 CSS3 JavaScript and AJAX Good knowledge on Python pickles Worked on Bug fixes Developed complex web middleware and back end systems in Python SQL and pearl for Linux and windows Used Pandas API to put the data as time series and tabular format for east timestamp data manipulation and retrieval Created proofofconcept using responsive web design Nodejs React JS HTML5 and CSS3 Involved in converting HiveSQL queries into Spark transformations using Spark RDD Scala and Python Developed an API that asynchronously distributes task using RabbitMQ and Celery Writing Python scripts with Cloud Formation templates to automate installation of Auto scaling EC2 VPC DynamoDB Beautiful soup and other services Worked on various Python Integrated Development Environments like NetBeans PyCharm PyDev and Sublime Text Used the Python modules mat plotid etc for generating complex graphical data creation of histograms etc Independent template engine agnostic integration with ninja2 Mako Tenjin and wheezy template plus html widgets Used Python based GUI components for the frontend functionality such as selection criteria Worked with View Sets in DjangoREST framework for providing web services and consumed web services performing CRUD operations Developed internal project in Flask to generate report from google analytics on daily monthly and weekly basis Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL  package Designed and developed data management system using MySQL Involved in Agile Methodologies and SCRUM Process Developed serverbased web traffic statistical analysis tool using Flask Pandas and had implemented and tested pythonbased web applications interacting with MySQL Responsible for designing and deploying new ELK clusters Elasticsearch Logstash Graphite Kibana beats Kafka zookeeper etc Worked on containerbased deployments using Docker working with Docker images Docker Hub and Docker registries and Kubernetes Actively involved in building Cassandra data store integrating data in real time from Oracle to Cassandra using Cassandra Spark streaming Built various graphs for business decision making using Python matplotlib library Created activated and programmed in Anaconda environment Wrote programs for performance calculations using NumPy File handling for the client data in files like txt and xlxs file for data retrieval and storing purpose Graphical data representation using python modules like NumPy SciPy Pandas Pygal and installed using pip command toolkit Was responsible for analyzing various crossfunctional multiplatform applications systems enforcing Python best practices and provide guidance in making long term scalable architectural design decisions PYTHON DEVELOPER BYN MELLON IN June 2013 to March 2015 Designed and implemented a dedicated MYSQL database server to drive the webapps and report on daily progress Developed views and templates with Python and Django View controller and templating language to create a userfriendly website interface Worked on Python LibrariesPackages such as HTTPLib2 Urllib2 Beautiful Soup Py Query Numpy SciPy Pickle PyQT PySide wxPython PyTables Data Frames SQLAlchemy Twisted Pygame pyGtk Pandas and Matplotlib Developed the consumerfriendly frontend with an easytouse OpenCV UI and fast access MongoDB Used Django framework for application development Created entire application using Python Django MySQL and Linux Programming in Python as well as Perl Created most important Business Rules which are useful for the scope of project and needs of customers Developed API modularizing existing python module with the help of pyyaml libraries Designed and implemented a dedicated MySQL database server to drive the web apps and report on daily progress Used Agile methodology for rewriting existing PythonDjango modules to deliver certain format of data and responsible for debugging the project monitored on JIRA Worked with Agile Software Development environment using SCRUM and Kanban Worked on maintaining all the tools like Bamboo Bit Bucket Confluence JIRA and GIT Enhanced existing automated solutions such as the Inquiry Tool for Automated Asset Department Reporting and added new features and fixed bugs Built and maintained code libraries to support analytics using Numpy and SciPy Used Pygal and plotly for visualization of the data retrieved using Scrapy Designed built and tested a Dynamic Locking Mechanism DLM for a sixnode CentOS Linux cluster in Python and Twisted Framework using an SQLite database to manage configurations Worked on OpenCV and Googles Tesseract OCR to implement an image recognition feature to web or mobile applications Worked on Object Oriented Design Programming concepts and unit testing using Pythons unit test library Jasmine and Karma Using ANT Puppet Chef Scripts with Ivy to build the application and deploy Fetched twitter feeds for certain important keyword using pythontwitter library Used Python library Beautiful soup for web scrapings Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Involved in building database Model APIs and Views utilizing Python to build an interactive webbased solution Designed and managed API system deployment using fast http server and Amazon AWS architecture Developed entire frontend and backend modules using Python on Django Web Framework Developed the required XML Schema documents and implemented the framework for parsing XML documents Using GIT version control tool to coordinate teamdevelopment Extensively used JavaScript MVC Framework AngularJS to make rich internet web application for a Single page application Worked on various Python Integrated Development Environments like Spyder PyCharm NetBeans and Sublime Created functions in AWS Lambda to run python scripts and AWS Lambda using java to perform event driven processing Developed Test Cases and Test Scripts in selenium web driver with Java using Cucumber framework with build management tool Maven Used AngularJS NodeJS ExpressJS MongoDB Couchbase Cassandra and various NodeJS testing frameworks for fullstack development on the Amazon Web Services AWS platform instances using Puppet Chef Configuration management Worked on implementing core cache and abstraction with Jasmine and Redis cache server Worked with various Web servers such as Gunicorn Supervisor Nginx etc Worked on some of the Deep Learning platforms such as TensorFlow Caffe and Keras Accessed public datasets and use TensorFlow and SQLAlchemy to load process clean and transform data Utilized Kubernetes and Docker for the runtime environment of the CICD system to build and test deploy Used Python and Django to interface with the jQuery UI and manage the storage and deletion of content Designed and implemented data post processing ingestion and data lake modules Pandas Spark Celery RabbitMQ Worked with Chef to aid with deployment process and migrating in house systems to Amazon Cloud Services Expertise in working with GUI frameworks PyJamas python Designed and maintained databases using Python and developed Pythonbased API using Flask and PostgreSQL Developed web pages using advanced HTML5 and CSS3 techniques backed by jQuery to enable optimum user experience throughout the site Created custom new columns depending up on the use case while ingesting data into Hadoop lake using PyTable PySpark PyMongo Pickle and Pyside Developed custom JSP tags for the application Involved in the phases of SDLC Software Development Life Cycle including Requirement collection Design and analysis of Customer specification Development and Customization of the application Worked on resulting report of application and Deployed production site using Apache Servers with Python and AWS Integrated Spring web services with Zookeeper Camel RabbitMQ in Docker environment Prepared feature file for Cucumber framework and created step definitions and created runner file to run the Cucumber features Applying TensorFlow in various handson exercises using the command line Developed API services in PythonTornado Nodejs while leveraging RabbitMQ for distributed architectures Specified prototyped developed and tested from the ground up an objectoriented multiplatform C framework containing support to datastructures common algorithms sorting etc sockets threading Education Masters",
    "entities": [
        "SQL Server Integration Service",
        "Python Flask GitHub",
        "MLlib",
        "Maven Used",
        "PythonTornado Nodejs",
        "Informatica",
        "SNS",
        "GUI",
        "Twisted Framework",
        "PyTable PySpark PyMongo Pickle",
        "Worked on Object Oriented Design Programming",
        "Graphical",
        "UNIX",
        "Zookeeper Camel",
        "Python Django AWS J2EE PostgreSQL",
        "Scrapy Designed",
        "Bash Wrote",
        "the Amazon Web Services AWS",
        "Scrapy",
        "JSON",
        "LAMP Linux",
        "GIT Repository Setup",
        "OpenStack",
        "Heroku",
        "Nodejs React JS HTML5",
        "Model View Control MVC",
        "Hadoop",
        "XML",
        "SOAP",
        "Created PyUnit",
        "PyUnit",
        "the Python Twisted Framework Initiated Block Chain",
        "Teradata Implemented Cloud Infrastructure",
        "SQL Server Analysis Service",
        "Shell",
        "SDLC Software Development Life Cycle",
        "Amazon",
        "Maven Repository and Deployment",
        "SSIS",
        "ELK",
        "Python",
        "Utilized Kubernetes",
        "Integrated Development Environments",
        "Amazon AWS S3",
        "Developed",
        "Kubernetes Good Analytical",
        "Jenkins",
        "Integrated Development Environment",
        "PyWebkitGtk",
        "Django",
        "Jenkins Involved",
        "San Francisco",
        "Puppet",
        "MQ",
        "NOSE",
        "Worked on",
        "Performed Design",
        "DjangoREST",
        "PythonPHP",
        "HTML5",
        "Develop",
        "Elasticsearch Involved",
        "Pandas Pygal",
        "Puppet Chef Configuration",
        "CF tools Jenkins Chef and Puppet Proficient",
        "API RESTful Web Service",
        "Created Data",
        "Linux",
        "JSP",
        "Flask",
        "PySpark PyQT",
        "Built",
        "PyQT",
        "Docker",
        "RDS",
        "Implementing Python",
        "PEP8",
        "Views",
        "PyQt",
        "API Management",
        "Spark",
        "Kubernetes Actively",
        "PythonPHP Architecture",
        "PythonDjango",
        "GIT",
        "Pytorch TensorFlow Scikitlearn Apache Open",
        "Python on Django",
        "AWS Focus",
        "API",
        "WebSphere WebLogic Tomcat Web Servers",
        "Build JSON",
        "Web Services",
        "US",
        "NGINX",
        "Created",
        "AI",
        "AWS",
        "WAMP Windows Apache",
        "Oracle",
        "Pandas Spark Celery",
        "PySpark",
        "Worked with View Sets",
        "SQL Developed Chef Cookbooks",
        "Customer specification Development and Customization of the application",
        "IDE DrPython",
        "HTML",
        "SAS",
        "Developed Test Cases",
        "SQL",
        "GitHub",
        "NLP",
        "Independent",
        "OpenCV UI",
        "Python Integrated Development Environments like",
        "AWS SNS Implemented",
        "Anaconda",
        "CICD",
        "WebSphere Studio Application Developer",
        "Amazon AWS",
        "Identity Systems Wrote",
        "PyLint Designed",
        "Git GitHub CVS SVN Chef Puppet Ansible Crytograph",
        "Utilized Python",
        "google analytics",
        "Pandas",
        "Python Integrated Development Environments",
        "ninja2",
        "MDM",
        "ETL",
        "SQS",
        "CRUD",
        "Agile Software Development",
        "CSS3",
        "Maven",
        "Performed",
        "ECDS",
        "Jasmine and Karma Using ANT Puppet Chef Scripts",
        "JavaScript",
        "Sublime Created",
        "Pythons",
        "Development of test",
        "Nose Test Worked",
        "Python Package",
        "Deep Learning",
        "NV Me",
        "SVN",
        "NumPy File",
        "Expertise",
        "CSS",
        "Perl Created",
        "AMAZON EMR",
        "jQuery",
        "AWS Lambda",
        "REST",
        "AJAX Good",
        "NetBeans",
        "Apache Spark Hadoop HDFS",
        "NoSQL",
        "Amazon Cloud Services Expertise",
        "the Inquiry Tool for Automated Asset Department Reporting",
        "Master Data Management",
        "Chef Developed the ETL"
    ],
    "experience": "Experience with the implementation Development and Scientific Programing of Python libraries NumPy Pyunit Pickle SciPy PyTables SQLAlchemy Matplotlib Pandas Beautiful Soup and urllib in various tasks Expertise in developing webbased applications using Bash Perl Python PHP XML DHTML XHTML Ajax JOOMLA CSS HTML JSON JavaScript and Bootstrap Expertise working in WAMP Windows Apache MYSQL and PythonPHP and LAMP Linux Apache MySQL and PythonPHP Architecture Experience in developing Web Services with Python programming language Expertise in working with GUI frameworksPyjamas Jytho guidata   PyQt PyWebkitGtk and Experienced with Elasticsearch Logstash and Kibana ELK Experienced in working on Application Servers like WebSphere WebLogic Tomcat Web Servers like Apache server NGINX and Integrated Development Environments like PyCharm Eclipse MyEclipse JDeveloper and RAD Experience in implementing Object Oriented Python Hash Tables Dictionaries and Multithreading Django and MYSQL Experience on Python Testing frameworks like zope pytest NOSE and Robot framework Experience of dealing with various development methodologies like Waterfall Scrum and Agile Good experience in developing web applications and implementing Model View Control MVC architecture using serverside applications Django Flask and Pyramid Designed and developed data management system using MySQL and used Django APIs to access database Understanding of the threading limitations of Python and multiprocess architecture Hands on experience in Agile Methodologies Scrum stories and sprints experience in a Python based environment Wrote Python based APIs to interface between software and hardware by using Web Sockets and Flask Experience in designing the automation framework using Python Corn and Shell scripting Experience in writing test scripts test cases test specifications and test coverage Experienced with version control systems like Git GitHub CVS SVN Chef Puppet Ansible Crytograph and REST API to keep the versions and configurations of the code organized Experienced in using Integrated Development Environment IDEs in PyDev PyScripter Pycharm Spider Python IDLE Brackets Eclipse JBuilder Sublime and NetBeans JDeveloper Eric Komodo Edit Komodo IDE Cloud9 IDE DrPython and NetBeans for debugging and worked with SublimeText2 Edit Plus Notepad Vim Editors for coding Experience in deploying Microservices using Docker and using Docker containers along with Kubernetes Good Analytical and ProblemSolving skills and ability to work on own besides being a valuable and contributing team player Good experience in working with Python Django Zope Bottle Swagger PyramidTurbogears Pylons Flask Web2py Gunicorn Totnado CherryPy Spring Frame works for developing backend of web applications Authorized to work in the US for any employer Work Experience PYTHON DEVELOPER FACEBOOK Menlo Park CA September 2018 to Present Used Python and Django creating graphics XML processing data exchange and business logic implementation Utilized Python Libraries like Boto3 for AWS Managed Container using Docker by writing Docker files and set up the automated build on Docker HUB and installed and configured Kubernetes Developed PLSQL routines to extract data from another database and load it into the Oracle database Used modules Beautiful Soup SciPy pythontwitter PyMongo Celery NumPy matplotlib Urllib2 etc for generating complex graphical data creation of histograms etc Work in installing softwares using pip command for python libraries like Scrapy and used PEP8 coding convention Worked with Requests Pysftp Gnupg Report Lab HTTPLib2 and Pandas python libraries during development lifecycle Worked with Python LibrariesPackages such as Py Query Pickle PyQT Py mmock PySide wxPython PyTables Data Frames SQLAlchemy Twisted Pygame pyGtk Pandas and Pyglet PyQT PyGtkpywin32 ntlk nose SymPy Ipython Generated graphical reports using Python package NumPy and used advanced features like pickleunpickle in Python for sharing the information across the applications to deploy into AWS with toolsplatforms such as JIRA Jenkins Docker and Elasticsearch Involved in converting HiveSQL queries into Spark transformations using Spark RDDs Python and Scala Designed and implemented open source AI frameworks Pytorch TensorFlow Scikitlearn Apache Open Source Kafka Storm Spark for NLP and ML Algorithms Responsible in using the AWS tools like RDS Cloud watch EC2 Elastic load Balancer Route53 KMS SNS S3 Lambda Functions IAM Implemented Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Built complete Configuration Management for the Microservices using Kubernetes Docker and Ansible Designed front end using HTML AngularJS CSS and JavaScript Implemented SOAPRESTful web services in JSON format Generated Python Django forms to record data of online users and used Pytest for writing test cases Deployed the project into Jenkins using GIT version control system Worked on monitoring developing and transforming data using SQL Server Integration Service SSIS and SQL Server Analysis Service SSAS Optimized SQL queries used in batch processing and Wrote validation scripts in SQL to validate data loading Developed web applications in Python Django with clientspecific customizations Created Data tables utilizing PySpark PyQT to display customer and policy information and add delete update customer records Worked on the project for Master Data Management MDM team for designing and developing the ETL process in AWS glue and launching and extracting the data from MDM tool called Reltio Extracted and loaded data using Python scripts and PLSQL packages Proficient with structures semistructured and unstructured data using a broad range of data science programming languages and big data tools including R Python Spark SQL Scikit Learn Hadoop MapReduce Utilized PyUnit the Python Unit test framework for all Python applications and used Django Database APIs to access database objects Worked on PEP8 coding standard and test a program by running it across test cases to ensure validity and effectiveness of code using PyChecker and PyLint Designed and maintained databases using Python and developed Python based API RESTful Web Service using Flask SQLAlchemy and PostgreSQL Designed and implemented open source AI frameworks Pytorch TensorFlow Scikitlearn Apache Open Source Kafka Storm Spark for NLP and ML Algorithms Deployed debugged and maintained complex distributed software stacks containing Apache Spark Hadoop HDFS and I Python Notebook servers on cloudbased AWS system by optimizing the stacks for best computational performance and stability Involved in writing unit test cases for the functionalities using Nose Test Worked on development and maintenance of SQL code embedded in PLSQL Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Worked on Python OpenStack APIs and used NumPy for Numerical analysis Worked on installation of Docker using Docker toolbox Developed and implemented block chain application using ECDS algorithm Implementing Python alongside using various libraries such as matplotlib for charts and graphs Python twitter PySide Pickle Pandas data frame requests network urllib2 and MySQL   for database connectivity Worked on creation of custom Docker container images tagging and pushing the images Used Jenkins to build and troubleshoot automated testing and for continuous integration and deployment Used Amazon Elastic Beanstalk with Amazon EC2 to deploy project into AWS Focus on integration overlap and Informatica newer commitment to MDM with the acquisition of Identity Systems Wrote and executed various MySQL database queries from PythonMySQL connector and MySQL   package Generated automated documentation for the Python scripts using sphinx Designed and developed continuous integration using Python Flask GitHub Generated Python Django Forms Crispy forms to record data login and signup of online users Utilized Python libraries with Python NumPy Twisted and matplotlib Scraped and retrieved web data as JSON using Scrapy presented with Pandas library Involved in packaging deployment and upgrade of different modules of SAS on JBoss App Server VB code Analysis and Sybase store procedure converted into SQL Developed Chef Cookbooks to install and configure Apache Tomcat Jenkins and deployment automation Developed entire frontend and backend modules using Python on Django including Tasty pie Web Framework using Git Designed and developed scalable Azure APIs using Flask web framework in Python and Integrated with Azure API Management Logical Apps and other Azure services Extensively involved in performing unit testing using PyUnit which are bundled and imported automatically Developed and executed various MySQL database queries from Python using PythonMySQL connector and MySQL database package Worked PIP community most used Python Package Manager PyVows BDD tool for Python Wrote Python scripts to parse XML and JSON documents and load the data in database Worked on installing software using pip command for python libraries and extensive usage of the PEP8 coding convention Implemented SqlAlchemy ORM which is a python library for complete access over SQL as python objects Used JIRA as Issue Tracking Tool Setup Docker on Linux and configured Jenkins to run under Docker host Worked on front end frameworks like Bootstrap for responsive web pages and AngularJS for Single page application Involved in writing SQL Queries Stored procedures functions packages tables views triggers Involved Developed dynamic web pages using python Django Frameworks and used Python and Django creating graphics XML processing data exchange and business logic implementation Installation and setting up PythonUnix test beds and supported Apache Server on Linux Platform Developed highperformance distributed queueing system Scala Redis Akka closure MQ messaging Json Developed new functionality for interactive healthcare system Worked on Installing JenkinsPlugins for GIT Repository Setup SCM Polling for Immediate Build with Maven and Maven Repository and Deployment of apps using custom modules through Puppet as a CICD Process Worked on several standard Python packages like Numpy matplotlib SciPy Pandas and PyTables etc Developed automation scripting in Python core using Puppet to deploy and manage Java applications across Linux servers Worked on objectoriented programming OOP concepts using Python Django and Linux Developed a fully automated continuous integration system using Git Gerrit Jenkins MySQL and custom tools developed in Python and Bash Wrote Lambda functions in python for AWSs Lambda Kinesis and Elastic Search which invokes python scripts to perform various transformations and analytics on large data sets in AMAZON EMR clusters Performed data cleaning and feature selection using MLlib package in PySpark and working with deep learning frameworks such as Caffe Neon etc Worked on data analysis and data mining algorithms using Teradata Implemented Cloud Infrastructure as a Service environment using open source technology OpenStack to enable portability of cloud services across hybrid cloud environments Worked on quantdata Python libraries pandasNumPy Knowledge on NV Me and SAS regarding transfer of data between client systems and SSDs Involved in development of Web Services using SOAP for sending and getting data from the external interface in the XML format Responsible for the project monitored on JIRA Agile PYTHON DEVELOPER TWITTER San Francisco CA November 2015 to December 2016 Involved in building database Model APIs and Views utilizing Python to build an interactive webbased solution Responsible for gathering requirements system analysis design development testing and deployment Worked on developing internal testing tools which were written in Python Generated Python Django Forms to record data of online users Worked on Python LibrariesPackages such as HTTPLib2 Urllib2 Beautiful Soup Py Query Numpy SciPy Pickle PyQT PySide wxPython PyTables Data Frames SQLAlchemy Twisted Pygame pyGtk Pandas and Matplotlib Performed job functions using Spark APIs in Scala for real time analysis and for fast querying purposes Worked on Python Nameko decorators generators list comprehensions list tuples cache pandas and NumPy Rewrite existing Java application in Python module to deliver certain format of data Worked on developing internal testing tools which were written in Python Developed consumerbased features and applications using Python and Django in test driven Development Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Installed and configured WebSphere Studio Application Developer WSAD to connect Central CVS and SVN repositories Develop consumerbased features and applications using Python Django pyramid Flask Web2py HTML and other web technologies Designed and created backend data access modules using PLSQL stored procedures With using of Python OS module on UNIX environment made job cloning and forking Wrote Python modules to extractload asset data from the MySQL source database Python Scripting using the Python Twisted Framework Initiated Block Chain for security clearing and settlement Utilized Cloud Watch Events to collect data from other AWS resources and transfer them to SQS and SNS for alerting solar Built the web application by using Python Django AWS J2EE PostgreSQL MySQL Oracle 10 g and MongoDB and Knowledgeable with continuous deployment using Heroku and Jenkins Involved and worked on different Rest APIs development by using Flask and Swagger Responsible for build and test of applications Experience in handling database issues and connections with SQL and NoSQL databases like MongoDB by installing and configuring various packages in python Teradata MySQL   MySQL connector PyMongo and SQL Alchemy Extensively worked on Jenkins by installing configuring and maintaining for Continuous integration CI and for End to End automation for all build and deployments Worked on various Python packages such as SQLAlchemy Pickle Pyside PySpark PyMongo Pytables Developed the notification service by posting the JSON request in AWS API Gateway Validating the response in Lambda by getting the data from DynamoDB and sending the notification through AWS SNS Implemented REST APIs in Python using microframework like Flask with SQLAlchemy in the backend for management of data center resources on which OpenStack would be deployed Involved in development of Web Services using and REST for sending and getting data from the external interface in XML and JSON format Used JIRA for issue tracking and bug tracking for each individual sprint and used pyChecker tool to fix bugs Worked on Atlassian tools like Bamboo Jira and confluence Developed application which accessed the Cloud foundry API to monitor trends in development environments using other CF tools Jenkins Chef and Puppet Proficient in SQL databases MS SQL MYSQL Oracle and NO SQL databases MongoDB Cassandra Worked on developing consumerbased features and applications with Python Django HTML Behavior Driven Development BDD and pairbased programming Developed and Deployed SOAP based Web Services on Tomcat Server Worked on controllers views and models in Django working as an application developer Develop consumerbased features and applications using Python and Django in test driven Development and pairbased programming Created PyUnit test cases for unit testing Development of test framework using the Python Managed code with unit tests and GitHub Proven ability in developing selenium automation framework like Page Objects Hybrid Frameworks Using Chef and AWS allowed me to reduce costs for the department and eliminate unwarranted resources Automated provisioning of cloud infrastructure with Chef Developed the ETL mappings in PLSQL via packages procedures functions views and triggers Worked on developing web applications and implementing Model View Control MVC architecture using serverside applications like Django and Flask Developed Python Script for moving files from drop box to Amazon server Used Python modules such as requests urllib and urllib2 for web crawling and Performed Design involved in code reviews and wrote unit tests in Python and Updated site with JavaScript jQuery Python Django and SQL Deployed Django web application in Apache webserver and Carpathia cloud web deployment Build JSON objects using the framework which will be used by JavaScript to control the flow of the page Resolved performance related issues using efficient coding Develop dynamic webpages using HTML5 CSS3 JavaScript and AJAX Good knowledge on Python pickles Worked on Bug fixes Developed complex web middleware and back end systems in Python SQL and pearl for Linux and windows Used Pandas API to put the data as time series and tabular format for east timestamp data manipulation and retrieval Created proofofconcept using responsive web design Nodejs React JS HTML5 and CSS3 Involved in converting HiveSQL queries into Spark transformations using Spark RDD Scala and Python Developed an API that asynchronously distributes task using RabbitMQ and Celery Writing Python scripts with Cloud Formation templates to automate installation of Auto scaling EC2 VPC DynamoDB Beautiful soup and other services Worked on various Python Integrated Development Environments like NetBeans PyCharm PyDev and Sublime Text Used the Python modules mat plotid etc for generating complex graphical data creation of histograms etc Independent template engine agnostic integration with ninja2 Mako Tenjin and wheezy template plus html widgets Used Python based GUI components for the frontend functionality such as selection criteria Worked with View Sets in DjangoREST framework for providing web services and consumed web services performing CRUD operations Developed internal project in Flask to generate report from google analytics on daily monthly and weekly basis Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL   package Designed and developed data management system using MySQL Involved in Agile Methodologies and SCRUM Process Developed serverbased web traffic statistical analysis tool using Flask Pandas and had implemented and tested pythonbased web applications interacting with MySQL Responsible for designing and deploying new ELK clusters Elasticsearch Logstash Graphite Kibana beats Kafka zookeeper etc Worked on containerbased deployments using Docker working with Docker images Docker Hub and Docker registries and Kubernetes Actively involved in building Cassandra data store integrating data in real time from Oracle to Cassandra using Cassandra Spark streaming Built various graphs for business decision making using Python matplotlib library Created activated and programmed in Anaconda environment Wrote programs for performance calculations using NumPy File handling for the client data in files like txt and xlxs file for data retrieval and storing purpose Graphical data representation using python modules like NumPy SciPy Pandas Pygal and installed using pip command toolkit Was responsible for analyzing various crossfunctional multiplatform applications systems enforcing Python best practices and provide guidance in making long term scalable architectural design decisions PYTHON DEVELOPER BYN MELLON IN June 2013 to March 2015 Designed and implemented a dedicated MYSQL database server to drive the webapps and report on daily progress Developed views and templates with Python and Django View controller and templating language to create a userfriendly website interface Worked on Python LibrariesPackages such as HTTPLib2 Urllib2 Beautiful Soup Py Query Numpy SciPy Pickle PyQT PySide wxPython PyTables Data Frames SQLAlchemy Twisted Pygame pyGtk Pandas and Matplotlib Developed the consumerfriendly frontend with an easytouse OpenCV UI and fast access MongoDB Used Django framework for application development Created entire application using Python Django MySQL and Linux Programming in Python as well as Perl Created most important Business Rules which are useful for the scope of project and needs of customers Developed API modularizing existing python module with the help of pyyaml libraries Designed and implemented a dedicated MySQL database server to drive the web apps and report on daily progress Used Agile methodology for rewriting existing PythonDjango modules to deliver certain format of data and responsible for debugging the project monitored on JIRA Worked with Agile Software Development environment using SCRUM and Kanban Worked on maintaining all the tools like Bamboo Bit Bucket Confluence JIRA and GIT Enhanced existing automated solutions such as the Inquiry Tool for Automated Asset Department Reporting and added new features and fixed bugs Built and maintained code libraries to support analytics using Numpy and SciPy Used Pygal and plotly for visualization of the data retrieved using Scrapy Designed built and tested a Dynamic Locking Mechanism DLM for a sixnode CentOS Linux cluster in Python and Twisted Framework using an SQLite database to manage configurations Worked on OpenCV and Googles Tesseract OCR to implement an image recognition feature to web or mobile applications Worked on Object Oriented Design Programming concepts and unit testing using Pythons unit test library Jasmine and Karma Using ANT Puppet Chef Scripts with Ivy to build the application and deploy Fetched twitter feeds for certain important keyword using pythontwitter library Used Python library Beautiful soup for web scrapings Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Involved in building database Model APIs and Views utilizing Python to build an interactive webbased solution Designed and managed API system deployment using fast http server and Amazon AWS architecture Developed entire frontend and backend modules using Python on Django Web Framework Developed the required XML Schema documents and implemented the framework for parsing XML documents Using GIT version control tool to coordinate teamdevelopment Extensively used JavaScript MVC Framework AngularJS to make rich internet web application for a Single page application Worked on various Python Integrated Development Environments like Spyder PyCharm NetBeans and Sublime Created functions in AWS Lambda to run python scripts and AWS Lambda using java to perform event driven processing Developed Test Cases and Test Scripts in selenium web driver with Java using Cucumber framework with build management tool Maven Used AngularJS NodeJS ExpressJS MongoDB Couchbase Cassandra and various NodeJS testing frameworks for fullstack development on the Amazon Web Services AWS platform instances using Puppet Chef Configuration management Worked on implementing core cache and abstraction with Jasmine and Redis cache server Worked with various Web servers such as Gunicorn Supervisor Nginx etc Worked on some of the Deep Learning platforms such as TensorFlow Caffe and Keras Accessed public datasets and use TensorFlow and SQLAlchemy to load process clean and transform data Utilized Kubernetes and Docker for the runtime environment of the CICD system to build and test deploy Used Python and Django to interface with the jQuery UI and manage the storage and deletion of content Designed and implemented data post processing ingestion and data lake modules Pandas Spark Celery RabbitMQ Worked with Chef to aid with deployment process and migrating in house systems to Amazon Cloud Services Expertise in working with GUI frameworks PyJamas python Designed and maintained databases using Python and developed Pythonbased API using Flask and PostgreSQL Developed web pages using advanced HTML5 and CSS3 techniques backed by jQuery to enable optimum user experience throughout the site Created custom new columns depending up on the use case while ingesting data into Hadoop lake using PyTable PySpark PyMongo Pickle and Pyside Developed custom JSP tags for the application Involved in the phases of SDLC Software Development Life Cycle including Requirement collection Design and analysis of Customer specification Development and Customization of the application Worked on resulting report of application and Deployed production site using Apache Servers with Python and AWS Integrated Spring web services with Zookeeper Camel RabbitMQ in Docker environment Prepared feature file for Cucumber framework and created step definitions and created runner file to run the Cucumber features Applying TensorFlow in various handson exercises using the command line Developed API services in PythonTornado Nodejs while leveraging RabbitMQ for distributed architectures Specified prototyped developed and tested from the ground up an objectoriented multiplatform C framework containing support to datastructures common algorithms sorting etc sockets threading Education Masters",
    "extracted_keywords": [
        "PYTHON",
        "DEVELOPER",
        "lPYTHONspan",
        "span",
        "lDEVELOPERspan",
        "PYTHON",
        "DEVELOPER",
        "FACEBOOK",
        "Menlo",
        "Park",
        "CA",
        "years",
        "experience",
        "Python",
        "Developer",
        "understanding",
        "technology",
        "trends",
        "expertise",
        "core",
        "technologies",
        "experience",
        "analysis",
        "design",
        "development",
        "testing",
        "implementation",
        "maintenance",
        "web",
        "applications",
        "Python",
        "Django",
        "Hands",
        "Experience",
        "implementation",
        "Development",
        "Scientific",
        "Programing",
        "Python",
        "NumPy",
        "Pyunit",
        "Pickle",
        "SciPy",
        "PyTables",
        "SQLAlchemy",
        "Matplotlib",
        "Pandas",
        "Beautiful",
        "Soup",
        "tasks",
        "Expertise",
        "applications",
        "Bash",
        "Perl",
        "Python",
        "PHP",
        "XML",
        "DHTML",
        "XHTML",
        "JOOMLA",
        "CSS",
        "HTML",
        "JSON",
        "JavaScript",
        "Bootstrap",
        "Expertise",
        "WAMP",
        "Windows",
        "Apache",
        "MYSQL",
        "PythonPHP",
        "LAMP",
        "Linux",
        "Apache",
        "MySQL",
        "PythonPHP",
        "Architecture",
        "Experience",
        "Web",
        "Services",
        "Python",
        "programming",
        "language",
        "Expertise",
        "GUI",
        "Jytho",
        "PyQt",
        "PyWebkitGtk",
        "Elasticsearch",
        "Logstash",
        "Kibana",
        "ELK",
        "Application",
        "Servers",
        "WebSphere",
        "WebLogic",
        "Tomcat",
        "Web",
        "Servers",
        "Apache",
        "server",
        "NGINX",
        "Integrated",
        "Development",
        "Environments",
        "PyCharm",
        "Eclipse",
        "MyEclipse",
        "JDeveloper",
        "RAD",
        "Experience",
        "Object",
        "Python",
        "Hash",
        "Tables",
        "Dictionaries",
        "Multithreading",
        "Django",
        "MYSQL",
        "Experience",
        "Python",
        "Testing",
        "frameworks",
        "zope",
        "NOSE",
        "Robot",
        "framework",
        "Experience",
        "development",
        "methodologies",
        "Waterfall",
        "Scrum",
        "Agile",
        "experience",
        "web",
        "applications",
        "Model",
        "View",
        "Control",
        "MVC",
        "architecture",
        "serverside",
        "applications",
        "Django",
        "Flask",
        "Pyramid",
        "data",
        "management",
        "system",
        "MySQL",
        "Django",
        "APIs",
        "database",
        "Understanding",
        "threading",
        "limitations",
        "Python",
        "multiprocess",
        "architecture",
        "Hands",
        "experience",
        "Agile",
        "Methodologies",
        "Scrum",
        "stories",
        "sprints",
        "experience",
        "Python",
        "environment",
        "Wrote",
        "Python",
        "APIs",
        "software",
        "hardware",
        "Web",
        "Sockets",
        "Flask",
        "Experience",
        "automation",
        "framework",
        "Python",
        "Corn",
        "Shell",
        "Experience",
        "test",
        "scripts",
        "test",
        "cases",
        "specifications",
        "test",
        "coverage",
        "version",
        "control",
        "systems",
        "Git",
        "GitHub",
        "CVS",
        "SVN",
        "Chef",
        "Puppet",
        "Ansible",
        "Crytograph",
        "REST",
        "API",
        "versions",
        "configurations",
        "code",
        "Integrated",
        "Development",
        "Environment",
        "IDEs",
        "PyDev",
        "PyScripter",
        "Pycharm",
        "Spider",
        "Python",
        "IDLE",
        "Brackets",
        "Eclipse",
        "JBuilder",
        "Sublime",
        "NetBeans",
        "JDeveloper",
        "Eric",
        "Komodo",
        "Edit",
        "Komodo",
        "IDE",
        "Cloud9",
        "IDE",
        "DrPython",
        "NetBeans",
        "debugging",
        "SublimeText2",
        "Edit",
        "Notepad",
        "Vim",
        "Editors",
        "Experience",
        "Microservices",
        "Docker",
        "Docker",
        "containers",
        "Kubernetes",
        "Good",
        "Analytical",
        "ProblemSolving",
        "skills",
        "ability",
        "team",
        "player",
        "experience",
        "Python",
        "Django",
        "Zope",
        "Bottle",
        "Swagger",
        "PyramidTurbogears",
        "Pylons",
        "Flask",
        "Web2py",
        "Gunicorn",
        "Totnado",
        "CherryPy",
        "Spring",
        "Frame",
        "backend",
        "web",
        "applications",
        "US",
        "employer",
        "Work",
        "Experience",
        "PYTHON",
        "DEVELOPER",
        "FACEBOOK",
        "Menlo",
        "Park",
        "CA",
        "September",
        "Present",
        "Python",
        "Django",
        "graphics",
        "XML",
        "processing",
        "data",
        "exchange",
        "business",
        "logic",
        "implementation",
        "Python",
        "Libraries",
        "Boto3",
        "AWS",
        "Managed",
        "Container",
        "Docker",
        "Docker",
        "files",
        "build",
        "Docker",
        "HUB",
        "Kubernetes",
        "PLSQL",
        "routines",
        "data",
        "database",
        "Oracle",
        "database",
        "modules",
        "Beautiful",
        "Soup",
        "SciPy",
        "pythontwitter",
        "PyMongo",
        "Celery",
        "NumPy",
        "matplotlib",
        "Urllib2",
        "data",
        "creation",
        "histograms",
        "Work",
        "softwares",
        "pip",
        "command",
        "python",
        "libraries",
        "Scrapy",
        "PEP8",
        "convention",
        "Requests",
        "Pysftp",
        "Gnupg",
        "Report",
        "Lab",
        "HTTPLib2",
        "Pandas",
        "libraries",
        "development",
        "lifecycle",
        "Python",
        "LibrariesPackages",
        "Py",
        "Query",
        "Pickle",
        "PyQT",
        "Py",
        "mmock",
        "PySide",
        "wxPython",
        "PyTables",
        "Data",
        "Frames",
        "SQLAlchemy",
        "Twisted",
        "Pygame",
        "Pandas",
        "Pyglet",
        "PyQT",
        "PyGtkpywin32",
        "ntlk",
        "nose",
        "SymPy",
        "Ipython",
        "reports",
        "Python",
        "package",
        "NumPy",
        "features",
        "pickleunpickle",
        "Python",
        "information",
        "applications",
        "AWS",
        "toolsplatforms",
        "JIRA",
        "Jenkins",
        "Docker",
        "Elasticsearch",
        "HiveSQL",
        "queries",
        "Spark",
        "transformations",
        "Spark",
        "RDDs",
        "Python",
        "Scala",
        "source",
        "AI",
        "Pytorch",
        "TensorFlow",
        "Scikitlearn",
        "Apache",
        "Open",
        "Source",
        "Kafka",
        "Storm",
        "Spark",
        "NLP",
        "ML",
        "Algorithms",
        "AWS",
        "tools",
        "RDS",
        "Cloud",
        "EC2",
        "load",
        "Balancer",
        "Route53",
        "KMS",
        "SNS",
        "S3",
        "Lambda",
        "Functions",
        "IAM",
        "Jenkins",
        "Docker",
        "container",
        "EC2",
        "slaves",
        "Amazon",
        "AWS",
        "cloud",
        "configuration",
        "Configuration",
        "Management",
        "Microservices",
        "Kubernetes",
        "Docker",
        "Ansible",
        "end",
        "HTML",
        "AngularJS",
        "CSS",
        "JavaScript",
        "web",
        "services",
        "format",
        "Python",
        "Django",
        "data",
        "users",
        "Pytest",
        "test",
        "cases",
        "project",
        "Jenkins",
        "GIT",
        "version",
        "control",
        "system",
        "data",
        "SQL",
        "Server",
        "Integration",
        "Service",
        "SSIS",
        "SQL",
        "Server",
        "Analysis",
        "Service",
        "SSAS",
        "SQL",
        "queries",
        "batch",
        "processing",
        "Wrote",
        "validation",
        "scripts",
        "SQL",
        "data",
        "web",
        "applications",
        "Python",
        "Django",
        "customizations",
        "Data",
        "tables",
        "PySpark",
        "PyQT",
        "customer",
        "policy",
        "information",
        "update",
        "customer",
        "records",
        "project",
        "Master",
        "Data",
        "Management",
        "MDM",
        "team",
        "ETL",
        "process",
        "AWS",
        "glue",
        "data",
        "MDM",
        "tool",
        "Reltio",
        "data",
        "Python",
        "scripts",
        "PLSQL",
        "packages",
        "Proficient",
        "structures",
        "data",
        "range",
        "data",
        "science",
        "programming",
        "languages",
        "data",
        "tools",
        "R",
        "Python",
        "Spark",
        "SQL",
        "Scikit",
        "Learn",
        "Hadoop",
        "MapReduce",
        "PyUnit",
        "Python",
        "Unit",
        "test",
        "framework",
        "Python",
        "applications",
        "Django",
        "Database",
        "APIs",
        "database",
        "PEP8",
        "standard",
        "program",
        "test",
        "cases",
        "validity",
        "effectiveness",
        "code",
        "PyChecker",
        "PyLint",
        "Designed",
        "databases",
        "Python",
        "Python",
        "API",
        "RESTful",
        "Web",
        "Service",
        "Flask",
        "SQLAlchemy",
        "PostgreSQL",
        "source",
        "AI",
        "Pytorch",
        "TensorFlow",
        "Scikitlearn",
        "Apache",
        "Open",
        "Source",
        "Kafka",
        "Storm",
        "Spark",
        "NLP",
        "ML",
        "Algorithms",
        "Deployed",
        "software",
        "stacks",
        "Apache",
        "Spark",
        "Hadoop",
        "HDFS",
        "Python",
        "Notebook",
        "AWS",
        "system",
        "stacks",
        "performance",
        "stability",
        "unit",
        "test",
        "cases",
        "functionalities",
        "Nose",
        "Test",
        "development",
        "maintenance",
        "SQL",
        "code",
        "support",
        "Amazon",
        "AWS",
        "S3",
        "RDS",
        "files",
        "database",
        "Amazon",
        "Cloud",
        "Python",
        "OpenStack",
        "APIs",
        "NumPy",
        "analysis",
        "installation",
        "Docker",
        "Docker",
        "toolbox",
        "Developed",
        "block",
        "chain",
        "application",
        "ECDS",
        "algorithm",
        "Python",
        "libraries",
        "matplotlib",
        "charts",
        "Python",
        "twitter",
        "PySide",
        "Pickle",
        "Pandas",
        "data",
        "frame",
        "requests",
        "network",
        "urllib2",
        "MySQL",
        "database",
        "connectivity",
        "creation",
        "custom",
        "Docker",
        "container",
        "images",
        "images",
        "Jenkins",
        "testing",
        "integration",
        "deployment",
        "Amazon",
        "Elastic",
        "Beanstalk",
        "Amazon",
        "EC2",
        "project",
        "AWS",
        "Focus",
        "integration",
        "overlap",
        "Informatica",
        "commitment",
        "MDM",
        "acquisition",
        "Identity",
        "Systems",
        "Wrote",
        "MySQL",
        "database",
        "connector",
        "MySQL",
        "package",
        "documentation",
        "Python",
        "scripts",
        "sphinx",
        "integration",
        "Python",
        "Flask",
        "GitHub",
        "Python",
        "Django",
        "Forms",
        "Crispy",
        "forms",
        "data",
        "login",
        "users",
        "Python",
        "Python",
        "NumPy",
        "Twisted",
        "matplotlib",
        "web",
        "data",
        "JSON",
        "Scrapy",
        "Pandas",
        "library",
        "packaging",
        "deployment",
        "upgrade",
        "modules",
        "SAS",
        "JBoss",
        "App",
        "Server",
        "VB",
        "code",
        "Analysis",
        "Sybase",
        "store",
        "procedure",
        "SQL",
        "Developed",
        "Chef",
        "Cookbooks",
        "Apache",
        "Tomcat",
        "Jenkins",
        "deployment",
        "automation",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Tasty",
        "pie",
        "Web",
        "Framework",
        "Git",
        "Designed",
        "APIs",
        "Flask",
        "web",
        "framework",
        "Python",
        "Integrated",
        "API",
        "Management",
        "Logical",
        "Apps",
        "services",
        "unit",
        "testing",
        "PyUnit",
        "MySQL",
        "database",
        "Python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "database",
        "package",
        "PIP",
        "community",
        "Python",
        "Package",
        "Manager",
        "BDD",
        "tool",
        "Python",
        "Wrote",
        "Python",
        "XML",
        "documents",
        "data",
        "database",
        "software",
        "pip",
        "command",
        "python",
        "libraries",
        "usage",
        "PEP8",
        "convention",
        "SqlAlchemy",
        "ORM",
        "library",
        "access",
        "SQL",
        "python",
        "JIRA",
        "Issue",
        "Tracking",
        "Tool",
        "Setup",
        "Docker",
        "Linux",
        "Jenkins",
        "Docker",
        "host",
        "end",
        "frameworks",
        "Bootstrap",
        "web",
        "pages",
        "AngularJS",
        "page",
        "application",
        "SQL",
        "Queries",
        "procedures",
        "functions",
        "packages",
        "tables",
        "views",
        "triggers",
        "web",
        "pages",
        "python",
        "Django",
        "Frameworks",
        "Python",
        "Django",
        "graphics",
        "XML",
        "processing",
        "data",
        "exchange",
        "business",
        "logic",
        "implementation",
        "Installation",
        "PythonUnix",
        "test",
        "beds",
        "Apache",
        "Server",
        "Linux",
        "Platform",
        "highperformance",
        "system",
        "Scala",
        "Redis",
        "Akka",
        "closure",
        "MQ",
        "Json",
        "functionality",
        "healthcare",
        "system",
        "JenkinsPlugins",
        "GIT",
        "Repository",
        "Setup",
        "SCM",
        "Polling",
        "Immediate",
        "Build",
        "Maven",
        "Maven",
        "Repository",
        "Deployment",
        "apps",
        "custom",
        "modules",
        "Puppet",
        "CICD",
        "Process",
        "Python",
        "packages",
        "Numpy",
        "matplotlib",
        "SciPy",
        "Pandas",
        "PyTables",
        "automation",
        "Python",
        "core",
        "Puppet",
        "Java",
        "applications",
        "Linux",
        "servers",
        "programming",
        "OOP",
        "concepts",
        "Python",
        "Django",
        "Linux",
        "integration",
        "system",
        "Git",
        "Gerrit",
        "Jenkins",
        "MySQL",
        "custom",
        "tools",
        "Python",
        "Bash",
        "Wrote",
        "Lambda",
        "functions",
        "python",
        "AWSs",
        "Lambda",
        "Kinesis",
        "Elastic",
        "Search",
        "scripts",
        "transformations",
        "analytics",
        "data",
        "sets",
        "AMAZON",
        "EMR",
        "Performed",
        "data",
        "cleaning",
        "feature",
        "selection",
        "MLlib",
        "package",
        "PySpark",
        "frameworks",
        "Caffe",
        "Neon",
        "data",
        "analysis",
        "data",
        "mining",
        "algorithms",
        "Teradata",
        "Cloud",
        "Infrastructure",
        "Service",
        "environment",
        "source",
        "technology",
        "OpenStack",
        "portability",
        "cloud",
        "services",
        "cloud",
        "environments",
        "quantdata",
        "Python",
        "pandasNumPy",
        "Knowledge",
        "NV",
        "SAS",
        "transfer",
        "data",
        "client",
        "systems",
        "SSDs",
        "development",
        "Web",
        "Services",
        "SOAP",
        "data",
        "interface",
        "XML",
        "format",
        "project",
        "JIRA",
        "Agile",
        "PYTHON",
        "DEVELOPER",
        "TWITTER",
        "San",
        "Francisco",
        "CA",
        "November",
        "December",
        "database",
        "Model",
        "APIs",
        "Views",
        "Python",
        "solution",
        "requirements",
        "system",
        "analysis",
        "design",
        "development",
        "testing",
        "deployment",
        "testing",
        "tools",
        "Python",
        "Python",
        "Django",
        "Forms",
        "data",
        "users",
        "Python",
        "LibrariesPackages",
        "HTTPLib2",
        "Urllib2",
        "Beautiful",
        "Soup",
        "Py",
        "Query",
        "Numpy",
        "SciPy",
        "Pickle",
        "PyQT",
        "PySide",
        "wxPython",
        "PyTables",
        "Data",
        "Frames",
        "SQLAlchemy",
        "Twisted",
        "Pygame",
        "Pandas",
        "Matplotlib",
        "Performed",
        "job",
        "functions",
        "Spark",
        "APIs",
        "Scala",
        "time",
        "analysis",
        "purposes",
        "Python",
        "Nameko",
        "decorators",
        "generators",
        "comprehensions",
        "list",
        "tuples",
        "cache",
        "pandas",
        "NumPy",
        "Rewrite",
        "Java",
        "application",
        "Python",
        "module",
        "format",
        "data",
        "testing",
        "tools",
        "Python",
        "Developed",
        "features",
        "applications",
        "Python",
        "Django",
        "test",
        "Development",
        "Launched",
        "Kubernetes",
        "platform",
        "deployment",
        "scaling",
        "operations",
        "application",
        "containers",
        "clusters",
        "hosts",
        "WebSphere",
        "Studio",
        "Application",
        "Developer",
        "WSAD",
        "Central",
        "CVS",
        "SVN",
        "repositories",
        "Develop",
        "features",
        "applications",
        "Python",
        "Django",
        "Flask",
        "Web2py",
        "HTML",
        "web",
        "technologies",
        "data",
        "access",
        "modules",
        "procedures",
        "Python",
        "OS",
        "module",
        "UNIX",
        "environment",
        "job",
        "cloning",
        "Wrote",
        "Python",
        "modules",
        "extractload",
        "asset",
        "data",
        "MySQL",
        "source",
        "database",
        "Python",
        "Scripting",
        "Python",
        "Twisted",
        "Framework",
        "Block",
        "Chain",
        "security",
        "clearing",
        "settlement",
        "Cloud",
        "Events",
        "data",
        "AWS",
        "resources",
        "SQS",
        "SNS",
        "web",
        "application",
        "Python",
        "Django",
        "J2EE",
        "PostgreSQL",
        "MySQL",
        "Oracle",
        "g",
        "MongoDB",
        "Knowledgeable",
        "deployment",
        "Heroku",
        "Jenkins",
        "Involved",
        "Rest",
        "APIs",
        "development",
        "Flask",
        "Swagger",
        "Responsible",
        "build",
        "test",
        "applications",
        "Experience",
        "database",
        "issues",
        "connections",
        "SQL",
        "NoSQL",
        "MongoDB",
        "packages",
        "python",
        "Teradata",
        "MySQL",
        "MySQL",
        "connector",
        "PyMongo",
        "SQL",
        "Alchemy",
        "Jenkins",
        "configuring",
        "integration",
        "CI",
        "End",
        "End",
        "automation",
        "build",
        "deployments",
        "Python",
        "packages",
        "SQLAlchemy",
        "Pickle",
        "Pyside",
        "PySpark",
        "PyMongo",
        "Pytables",
        "notification",
        "service",
        "request",
        "AWS",
        "API",
        "Gateway",
        "response",
        "Lambda",
        "data",
        "DynamoDB",
        "notification",
        "AWS",
        "SNS",
        "Implemented",
        "REST",
        "APIs",
        "Python",
        "microframework",
        "Flask",
        "SQLAlchemy",
        "backend",
        "management",
        "data",
        "center",
        "resources",
        "OpenStack",
        "development",
        "Web",
        "Services",
        "REST",
        "data",
        "interface",
        "XML",
        "format",
        "JIRA",
        "issue",
        "tracking",
        "bug",
        "tracking",
        "sprint",
        "pyChecker",
        "tool",
        "bugs",
        "tools",
        "Bamboo",
        "Jira",
        "confluence",
        "application",
        "Cloud",
        "foundry",
        "API",
        "trends",
        "development",
        "environments",
        "CF",
        "tools",
        "Jenkins",
        "Chef",
        "Puppet",
        "Proficient",
        "SQL",
        "MS",
        "SQL",
        "MYSQL",
        "Oracle",
        "SQL",
        "Cassandra",
        "features",
        "applications",
        "Python",
        "Django",
        "HTML",
        "Behavior",
        "Driven",
        "Development",
        "BDD",
        "programming",
        "Developed",
        "Deployed",
        "SOAP",
        "Web",
        "Services",
        "Tomcat",
        "Server",
        "controllers",
        "views",
        "models",
        "Django",
        "application",
        "developer",
        "Develop",
        "features",
        "applications",
        "Python",
        "Django",
        "test",
        "Development",
        "programming",
        "Created",
        "PyUnit",
        "test",
        "cases",
        "unit",
        "Development",
        "test",
        "framework",
        "Python",
        "Managed",
        "code",
        "unit",
        "tests",
        "GitHub",
        "Proven",
        "ability",
        "selenium",
        "automation",
        "framework",
        "Page",
        "Hybrid",
        "Frameworks",
        "Chef",
        "AWS",
        "costs",
        "department",
        "resources",
        "provisioning",
        "cloud",
        "infrastructure",
        "Chef",
        "ETL",
        "mappings",
        "PLSQL",
        "packages",
        "procedures",
        "functions",
        "views",
        "triggers",
        "web",
        "applications",
        "Model",
        "View",
        "Control",
        "MVC",
        "architecture",
        "serverside",
        "applications",
        "Django",
        "Flask",
        "Python",
        "Script",
        "files",
        "drop",
        "box",
        "Amazon",
        "server",
        "Python",
        "modules",
        "requests",
        "urllib2",
        "web",
        "crawling",
        "Performed",
        "Design",
        "code",
        "reviews",
        "unit",
        "tests",
        "Python",
        "site",
        "JavaScript",
        "jQuery",
        "Python",
        "Django",
        "SQL",
        "Deployed",
        "Django",
        "web",
        "application",
        "Apache",
        "webserver",
        "Carpathia",
        "cloud",
        "web",
        "deployment",
        "Build",
        "JSON",
        "framework",
        "JavaScript",
        "flow",
        "page",
        "performance",
        "issues",
        "Develop",
        "webpages",
        "HTML5",
        "CSS3",
        "JavaScript",
        "AJAX",
        "knowledge",
        "Python",
        "pickles",
        "Bug",
        "fixes",
        "web",
        "middleware",
        "end",
        "systems",
        "Python",
        "SQL",
        "pearl",
        "Linux",
        "Pandas",
        "API",
        "data",
        "time",
        "series",
        "format",
        "east",
        "timestamp",
        "data",
        "manipulation",
        "retrieval",
        "Created",
        "proofofconcept",
        "web",
        "design",
        "Nodejs",
        "React",
        "JS",
        "HTML5",
        "CSS3",
        "HiveSQL",
        "queries",
        "Spark",
        "transformations",
        "Spark",
        "RDD",
        "Scala",
        "Python",
        "API",
        "task",
        "RabbitMQ",
        "Celery",
        "Python",
        "scripts",
        "Cloud",
        "Formation",
        "installation",
        "Auto",
        "EC2",
        "VPC",
        "DynamoDB",
        "Beautiful",
        "soup",
        "services",
        "Python",
        "Integrated",
        "Development",
        "Environments",
        "NetBeans",
        "PyCharm",
        "PyDev",
        "Sublime",
        "Text",
        "Python",
        "plotid",
        "data",
        "creation",
        "histograms",
        "template",
        "engine",
        "integration",
        "ninja2",
        "Mako",
        "Tenjin",
        "template",
        "html",
        "Python",
        "GUI",
        "components",
        "frontend",
        "functionality",
        "selection",
        "criteria",
        "View",
        "Sets",
        "DjangoREST",
        "framework",
        "web",
        "services",
        "web",
        "services",
        "CRUD",
        "operations",
        "project",
        "Flask",
        "report",
        "google",
        "analytics",
        "basis",
        "Wrote",
        "MYSQL",
        "database",
        "python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "package",
        "data",
        "management",
        "system",
        "MySQL",
        "Agile",
        "Methodologies",
        "SCRUM",
        "Process",
        "Developed",
        "web",
        "traffic",
        "analysis",
        "tool",
        "Flask",
        "Pandas",
        "web",
        "applications",
        "MySQL",
        "ELK",
        "clusters",
        "Elasticsearch",
        "Logstash",
        "Graphite",
        "Kibana",
        "Kafka",
        "zookeeper",
        "deployments",
        "Docker",
        "Docker",
        "Docker",
        "Hub",
        "Docker",
        "registries",
        "Kubernetes",
        "Cassandra",
        "data",
        "store",
        "data",
        "time",
        "Oracle",
        "Cassandra",
        "Cassandra",
        "Spark",
        "streaming",
        "graphs",
        "business",
        "decision",
        "Python",
        "matplotlib",
        "library",
        "Anaconda",
        "environment",
        "Wrote",
        "programs",
        "performance",
        "calculations",
        "NumPy",
        "File",
        "client",
        "data",
        "files",
        "txt",
        "file",
        "data",
        "retrieval",
        "purpose",
        "data",
        "representation",
        "modules",
        "NumPy",
        "SciPy",
        "Pandas",
        "Pygal",
        "pip",
        "command",
        "toolkit",
        "multiplatform",
        "applications",
        "systems",
        "Python",
        "practices",
        "guidance",
        "term",
        "design",
        "decisions",
        "PYTHON",
        "DEVELOPER",
        "BYN",
        "MELLON",
        "June",
        "March",
        "MYSQL",
        "database",
        "server",
        "webapps",
        "progress",
        "views",
        "templates",
        "Python",
        "Django",
        "View",
        "controller",
        "templating",
        "language",
        "website",
        "interface",
        "Python",
        "LibrariesPackages",
        "HTTPLib2",
        "Urllib2",
        "Beautiful",
        "Soup",
        "Py",
        "Query",
        "Numpy",
        "SciPy",
        "Pickle",
        "PyQT",
        "PySide",
        "wxPython",
        "PyTables",
        "Data",
        "Frames",
        "SQLAlchemy",
        "Twisted",
        "Pygame",
        "Pandas",
        "Matplotlib",
        "frontend",
        "easytouse",
        "UI",
        "access",
        "Django",
        "framework",
        "application",
        "development",
        "application",
        "Python",
        "Django",
        "MySQL",
        "Linux",
        "Programming",
        "Python",
        "Perl",
        "Business",
        "Rules",
        "scope",
        "project",
        "needs",
        "customers",
        "API",
        "module",
        "help",
        "pyyaml",
        "libraries",
        "MySQL",
        "database",
        "server",
        "web",
        "apps",
        "report",
        "progress",
        "methodology",
        "PythonDjango",
        "modules",
        "format",
        "data",
        "project",
        "JIRA",
        "Worked",
        "Agile",
        "Software",
        "Development",
        "environment",
        "SCRUM",
        "Kanban",
        "tools",
        "Bamboo",
        "Bit",
        "Bucket",
        "Confluence",
        "JIRA",
        "GIT",
        "solutions",
        "Inquiry",
        "Tool",
        "Automated",
        "Asset",
        "Department",
        "Reporting",
        "features",
        "bugs",
        "code",
        "libraries",
        "analytics",
        "Numpy",
        "SciPy",
        "Pygal",
        "visualization",
        "data",
        "Scrapy",
        "Locking",
        "Mechanism",
        "DLM",
        "CentOS",
        "Linux",
        "cluster",
        "Python",
        "Twisted",
        "Framework",
        "database",
        "configurations",
        "Googles",
        "Tesseract",
        "OCR",
        "image",
        "recognition",
        "feature",
        "web",
        "applications",
        "Object",
        "Oriented",
        "Design",
        "Programming",
        "concepts",
        "unit",
        "testing",
        "Pythons",
        "unit",
        "test",
        "library",
        "Jasmine",
        "Karma",
        "ANT",
        "Puppet",
        "Chef",
        "Scripts",
        "Ivy",
        "application",
        "twitter",
        "keyword",
        "pythontwitter",
        "library",
        "Python",
        "library",
        "Beautiful",
        "soup",
        "web",
        "scrapings",
        "Performed",
        "troubleshooting",
        "Python",
        "bug",
        "fixes",
        "applications",
        "source",
        "data",
        "customers",
        "customer",
        "service",
        "team",
        "database",
        "Model",
        "APIs",
        "Views",
        "Python",
        "solution",
        "API",
        "system",
        "deployment",
        "http",
        "server",
        "Amazon",
        "AWS",
        "architecture",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Web",
        "Framework",
        "XML",
        "Schema",
        "documents",
        "framework",
        "XML",
        "documents",
        "GIT",
        "version",
        "control",
        "tool",
        "teamdevelopment",
        "JavaScript",
        "MVC",
        "Framework",
        "AngularJS",
        "internet",
        "web",
        "application",
        "page",
        "application",
        "Python",
        "Integrated",
        "Development",
        "Environments",
        "Spyder",
        "PyCharm",
        "NetBeans",
        "Sublime",
        "functions",
        "AWS",
        "Lambda",
        "scripts",
        "AWS",
        "Lambda",
        "event",
        "Test",
        "Cases",
        "Test",
        "Scripts",
        "selenium",
        "web",
        "driver",
        "Java",
        "Cucumber",
        "framework",
        "build",
        "management",
        "tool",
        "Maven",
        "NodeJS",
        "ExpressJS",
        "Cassandra",
        "NodeJS",
        "testing",
        "frameworks",
        "development",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "platform",
        "instances",
        "Puppet",
        "Chef",
        "Configuration",
        "management",
        "core",
        "cache",
        "abstraction",
        "Jasmine",
        "Redis",
        "cache",
        "server",
        "Web",
        "servers",
        "Gunicorn",
        "Supervisor",
        "Nginx",
        "Deep",
        "Learning",
        "platforms",
        "TensorFlow",
        "Caffe",
        "Keras",
        "datasets",
        "TensorFlow",
        "SQLAlchemy",
        "process",
        "data",
        "Kubernetes",
        "Docker",
        "runtime",
        "environment",
        "CICD",
        "system",
        "test",
        "Python",
        "Django",
        "jQuery",
        "UI",
        "storage",
        "deletion",
        "content",
        "data",
        "post",
        "processing",
        "ingestion",
        "data",
        "lake",
        "modules",
        "Pandas",
        "Spark",
        "Celery",
        "RabbitMQ",
        "Chef",
        "deployment",
        "process",
        "migrating",
        "house",
        "systems",
        "Amazon",
        "Cloud",
        "Services",
        "Expertise",
        "GUI",
        "frameworks",
        "PyJamas",
        "python",
        "databases",
        "Python",
        "API",
        "Flask",
        "PostgreSQL",
        "web",
        "pages",
        "HTML5",
        "CSS3",
        "techniques",
        "jQuery",
        "user",
        "experience",
        "site",
        "custom",
        "columns",
        "use",
        "case",
        "data",
        "Hadoop",
        "lake",
        "PyTable",
        "PySpark",
        "PyMongo",
        "Pickle",
        "Pyside",
        "custom",
        "JSP",
        "tags",
        "application",
        "phases",
        "SDLC",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "Requirement",
        "collection",
        "Design",
        "analysis",
        "Customer",
        "specification",
        "Development",
        "Customization",
        "application",
        "report",
        "application",
        "production",
        "site",
        "Apache",
        "Servers",
        "Python",
        "AWS",
        "Integrated",
        "Spring",
        "web",
        "services",
        "Zookeeper",
        "Camel",
        "RabbitMQ",
        "Docker",
        "environment",
        "Prepared",
        "feature",
        "file",
        "Cucumber",
        "framework",
        "step",
        "definitions",
        "runner",
        "file",
        "Cucumber",
        "TensorFlow",
        "handson",
        "exercises",
        "command",
        "line",
        "API",
        "services",
        "PythonTornado",
        "Nodejs",
        "RabbitMQ",
        "architectures",
        "ground",
        "multiplatform",
        "C",
        "framework",
        "support",
        "algorithms",
        "sockets",
        "Education",
        "Masters"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T21:15:04.427396",
    "resume_data": "PYTHON DEVELOPER span lPYTHONspan span lDEVELOPERspan PYTHON DEVELOPER FACEBOOK Menlo Park CA Around 5 years of experience as a Python Developer with a deep understanding of technology trends with expertise in the core of complex technologies Solid experience in analysis design and development testing implementation and maintenance of various web applications using Python and Django Hands on Experience with the implementation Development and Scientific Programing of Python libraries NumPy Pyunit Pickle SciPy PyTables SQLAlchemy Matplotlib Pandas Beautiful Soup and urllib in various tasks Expertise in developing webbased applications using Bash Perl Python PHP XML DHTML XHTML Ajax JOOMLA CSS HTML JSON JavaScript and Bootstrap Expertise working in WAMP Windows Apache MYSQL and PythonPHP and LAMP Linux Apache MySQL and PythonPHP Architecture Experience in developing Web Services with Python programming language Expertise in working with GUI frameworksPyjamas Jytho guidata PyGUI PyQt PyWebkitGtk and Experienced with Elasticsearch Logstash and Kibana ELK Experienced in working on Application Servers like WebSphere WebLogic Tomcat Web Servers like Apache server NGINX and Integrated Development Environments like PyCharm Eclipse MyEclipse JDeveloper and RAD Experience in implementing Object Oriented Python Hash Tables Dictionaries and Multithreading Django and MYSQL Experience on Python Testing frameworks like zope pytest NOSE and Robot framework Experience of dealing with various development methodologies like Waterfall Scrum and Agile Good experience in developing web applications and implementing Model View Control MVC architecture using serverside applications Django Flask and Pyramid Designed and developed data management system using MySQL and used Django APIs to access database Understanding of the threading limitations of Python and multiprocess architecture Hands on experience in Agile Methodologies Scrum stories and sprints experience in a Python based environment Wrote Python based APIs to interface between software and hardware by using Web Sockets and Flask Experience in designing the automation framework using Python Corn and Shell scripting Experience in writing test scripts test cases test specifications and test coverage Experienced with version control systems like Git GitHub CVS SVN Chef Puppet Ansible Crytograph and REST API to keep the versions and configurations of the code organized Experienced in using Integrated Development Environment IDEs in PyDev PyScripter Pycharm Spider Python IDLE Brackets Eclipse JBuilder Sublime and NetBeans JDeveloper Eric Komodo Edit Komodo IDE Cloud9 IDE DrPython and NetBeans for debugging and worked with SublimeText2 Edit Plus Notepad Vim Editors for coding Experience in deploying Microservices using Docker and using Docker containers along with Kubernetes Good Analytical and ProblemSolving skills and ability to work on own besides being a valuable and contributing team player Good experience in working with Python Django Zope Bottle Swagger PyramidTurbogears Pylons Flask Web2py Gunicorn Totnado CherryPy Spring Frame works for developing backend of web applications Authorized to work in the US for any employer Work Experience PYTHON DEVELOPER FACEBOOK Menlo Park CA September 2018 to Present Used Python and Django creating graphics XML processing data exchange and business logic implementation Utilized Python Libraries like Boto3 for AWS Managed Container using Docker by writing Docker files and set up the automated build on Docker HUB and installed and configured Kubernetes Developed PLSQL routines to extract data from another database and load it into the Oracle database Used modules Beautiful Soup SciPy pythontwitter PyMongo Celery NumPy matplotlib Urllib2 etc for generating complex graphical data creation of histograms etc Work in installing softwares using pip command for python libraries like Scrapy and used PEP8 coding convention Worked with Requests Pysftp Gnupg Report Lab HTTPLib2 and Pandas python libraries during development lifecycle Worked with Python LibrariesPackages such as Py Query Pickle PyQT Py mmock PySide wxPython PyTables Data Frames SQLAlchemy Twisted Pygame pyGtk Pandas and Pyglet PyQT PyGtkpywin32 ntlk nose SymPy Ipython Generated graphical reports using Python package NumPy and used advanced features like pickleunpickle in Python for sharing the information across the applications to deploy into AWS with toolsplatforms such as JIRA Jenkins Docker and Elasticsearch Involved in converting HiveSQL queries into Spark transformations using Spark RDDs Python and Scala Designed and implemented open source AI frameworks Pytorch TensorFlow Scikitlearn Apache Open Source Kafka Storm Spark for NLP and ML Algorithms Responsible in using the AWS tools like RDS Cloud watch EC2 Elastic load Balancer Route53 KMS SNS S3 Lambda Functions IAM Implemented Jenkins in a Docker container with EC2 slaves in Amazon AWS cloud configuration Built complete Configuration Management for the Microservices using Kubernetes Docker and Ansible Designed front end using HTML AngularJS CSS and JavaScript Implemented SOAPRESTful web services in JSON format Generated Python Django forms to record data of online users and used Pytest for writing test cases Deployed the project into Jenkins using GIT version control system Worked on monitoring developing and transforming data using SQL Server Integration Service SSIS and SQL Server Analysis Service SSAS Optimized SQL queries used in batch processing and Wrote validation scripts in SQL to validate data loading Developed web applications in Python Django with clientspecific customizations Created Data tables utilizing PySpark PyQT to display customer and policy information and add delete update customer records Worked on the project for Master Data Management MDM team for designing and developing the ETL process in AWS glue and launching and extracting the data from MDM tool called Reltio Extracted and loaded data using Python scripts and PLSQL packages Proficient with structures semistructured and unstructured data using a broad range of data science programming languages and big data tools including R Python Spark SQL Scikit Learn Hadoop MapReduce Utilized PyUnit the Python Unit test framework for all Python applications and used Django Database APIs to access database objects Worked on PEP8 coding standard and test a program by running it across test cases to ensure validity and effectiveness of code using PyChecker and PyLint Designed and maintained databases using Python and developed Python based API RESTful Web Service using Flask SQLAlchemy and PostgreSQL Designed and implemented open source AI frameworks Pytorch TensorFlow Scikitlearn Apache Open Source Kafka Storm Spark for NLP and ML Algorithms Deployed debugged and maintained complex distributed software stacks containing Apache Spark Hadoop HDFS and I Python Notebook servers on cloudbased AWS system by optimizing the stacks for best computational performance and stability Involved in writing unit test cases for the functionalities using Nose Test Worked on development and maintenance of SQL code embedded in PLSQL Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Worked on Python OpenStack APIs and used NumPy for Numerical analysis Worked on installation of Docker using Docker toolbox Developed and implemented block chain application using ECDS algorithm Implementing Python alongside using various libraries such as matplotlib for charts and graphs Python twitter PySide Pickle Pandas data frame requests network urllib2 and MySQL dB for database connectivity Worked on creation of custom Docker container images tagging and pushing the images Used Jenkins to build and troubleshoot automated testing and for continuous integration and deployment Used Amazon Elastic Beanstalk with Amazon EC2 to deploy project into AWS Focus on integration overlap and Informatica newer commitment to MDM with the acquisition of Identity Systems Wrote and executed various MySQL database queries from PythonMySQL connector and MySQL dB package Generated automated documentation for the Python scripts using sphinx Designed and developed continuous integration using Python Flask GitHub Generated Python Django Forms Crispy forms to record data login and signup of online users Utilized Python libraries with Python NumPy Twisted and matplotlib Scraped and retrieved web data as JSON using Scrapy presented with Pandas library Involved in packaging deployment and upgrade of different modules of SAS on JBoss App Server VB code Analysis and Sybase store procedure converted into SQL Developed Chef Cookbooks to install and configure Apache Tomcat Jenkins and deployment automation Developed entire frontend and backend modules using Python on Django including Tasty pie Web Framework using Git Designed and developed scalable Azure APIs using Flask web framework in Python and Integrated with Azure API Management Logical Apps and other Azure services Extensively involved in performing unit testing using PyUnit which are bundled and imported automatically Developed and executed various MySQL database queries from Python using PythonMySQL connector and MySQL database package Worked PIP community most used Python Package Manager PyVows BDD tool for Python Wrote Python scripts to parse XML and JSON documents and load the data in database Worked on installing software using pip command for python libraries and extensive usage of the PEP8 coding convention Implemented SqlAlchemy ORM which is a python library for complete access over SQL as python objects Used JIRA as Issue Tracking Tool Setup Docker on Linux and configured Jenkins to run under Docker host Worked on front end frameworks like Bootstrap for responsive web pages and AngularJS for Single page application Involved in writing SQL Queries Stored procedures functions packages tables views triggers Involved Developed dynamic web pages using python Django Frameworks and used Python and Django creating graphics XML processing data exchange and business logic implementation Installation and setting up PythonUnix test beds and supported Apache Server on Linux Platform Developed highperformance distributed queueing system Scala Redis Akka closure MQ messaging Json Developed new functionality for interactive healthcare system Worked on Installing JenkinsPlugins for GIT Repository Setup SCM Polling for Immediate Build with Maven and Maven Repository and Deployment of apps using custom modules through Puppet as a CICD Process Worked on several standard Python packages like Numpy matplotlib SciPy Pandas and PyTables etc Developed automation scripting in Python core using Puppet to deploy and manage Java applications across Linux servers Worked on objectoriented programming OOP concepts using Python Django and Linux Developed a fully automated continuous integration system using Git Gerrit Jenkins MySQL and custom tools developed in Python and Bash Wrote Lambda functions in python for AWSs Lambda Kinesis and Elastic Search which invokes python scripts to perform various transformations and analytics on large data sets in AMAZON EMR clusters Performed data cleaning and feature selection using MLlib package in PySpark and working with deep learning frameworks such as Caffe Neon etc Worked on data analysis and data mining algorithms using Teradata Implemented Cloud Infrastructure as a Service environment using open source technology OpenStack to enable portability of cloud services across hybrid cloud environments Worked on quantdata Python libraries pandasNumPy Knowledge on NV Me and SAS regarding transfer of data between client systems and SSDs Involved in development of Web Services using SOAP for sending and getting data from the external interface in the XML format Responsible for the project monitored on JIRA Agile PYTHON DEVELOPER TWITTER San Francisco CA November 2015 to December 2016 Involved in building database Model APIs and Views utilizing Python to build an interactive webbased solution Responsible for gathering requirements system analysis design development testing and deployment Worked on developing internal testing tools which were written in Python Generated Python Django Forms to record data of online users Worked on Python LibrariesPackages such as HTTPLib2 Urllib2 Beautiful Soup Py Query Numpy SciPy Pickle PyQT PySide wxPython PyTables Data Frames SQLAlchemy Twisted Pygame pyGtk Pandas and Matplotlib Performed job functions using Spark APIs in Scala for real time analysis and for fast querying purposes Worked on Python Nameko decorators generators list comprehensions list tuples cache pandas and NumPy Rewrite existing Java application in Python module to deliver certain format of data Worked on developing internal testing tools which were written in Python Developed consumerbased features and applications using Python and Django in test driven Development Launched Kubernetes to provide a platform for automating deployment scaling and operations of application containers across clusters of hosts Installed and configured WebSphere Studio Application Developer WSAD to connect Central CVS and SVN repositories Develop consumerbased features and applications using Python Django pyramid Flask Web2py HTML and other web technologies Designed and created backend data access modules using PLSQL stored procedures With using of Python OS module on UNIX environment made job cloning and forking Wrote Python modules to extractload asset data from the MySQL source database Python Scripting using the Python Twisted Framework Initiated Block Chain for security clearing and settlement Utilized Cloud Watch Events to collect data from other AWS resources and transfer them to SQS and SNS for alerting solar Built the web application by using Python Django AWS J2EE PostgreSQL MySQL Oracle 10g and MongoDB and Knowledgeable with continuous deployment using Heroku and Jenkins Involved and worked on different Rest APIs development by using Flask and Swagger Responsible for build and test of applications Experience in handling database issues and connections with SQL and NoSQL databases like MongoDB by installing and configuring various packages in python Teradata MySQL dB MySQL connector PyMongo and SQL Alchemy Extensively worked on Jenkins by installing configuring and maintaining for Continuous integration CI and for End to End automation for all build and deployments Worked on various Python packages such as SQLAlchemy Pickle Pyside PySpark PyMongo Pytables Developed the notification service by posting the JSON request in AWS API Gateway Validating the response in Lambda by getting the data from DynamoDB and sending the notification through AWS SNS Implemented REST APIs in Python using microframework like Flask with SQLAlchemy in the backend for management of data center resources on which OpenStack would be deployed Involved in development of Web Services using and REST for sending and getting data from the external interface in XML and JSON format Used JIRA for issue tracking and bug tracking for each individual sprint and used pyChecker tool to fix bugs Worked on Atlassian tools like Bamboo Jira and confluence Developed application which accessed the Cloud foundry API to monitor trends in development environments using other CF tools Jenkins Chef and Puppet Proficient in SQL databases MS SQL MYSQL Oracle and NO SQL databases MongoDB Cassandra Worked on developing consumerbased features and applications with Python Django HTML Behavior Driven Development BDD and pairbased programming Developed and Deployed SOAP based Web Services on Tomcat Server Worked on controllers views and models in Django working as an application developer Develop consumerbased features and applications using Python and Django in test driven Development and pairbased programming Created PyUnit test cases for unit testing Development of test framework using the Python Managed code with unit tests and GitHub Proven ability in developing selenium automation framework like Page Objects Hybrid Frameworks Using Chef and AWS allowed me to reduce costs for the department and eliminate unwarranted resources Automated provisioning of cloud infrastructure with Chef Developed the ETL mappings in PLSQL via packages procedures functions views and triggers Worked on developing web applications and implementing Model View Control MVC architecture using serverside applications like Django and Flask Developed Python Script for moving files from drop box to Amazon server Used Python modules such as requests urllib and urllib2 for web crawling and Performed Design involved in code reviews and wrote unit tests in Python and Updated site with JavaScript jQuery Python Django and SQL Deployed Django web application in Apache webserver and Carpathia cloud web deployment Build JSON objects using the framework which will be used by JavaScript to control the flow of the page Resolved performance related issues using efficient coding Develop dynamic webpages using HTML5 CSS3 JavaScript and AJAX Good knowledge on Python pickles Worked on Bug fixes Developed complex web middleware and back end systems in Python SQL and pearl for Linux and windows Used Pandas API to put the data as time series and tabular format for east timestamp data manipulation and retrieval Created proofofconcept using responsive web design Nodejs React JS HTML5 and CSS3 Involved in converting HiveSQL queries into Spark transformations using Spark RDD Scala and Python Developed an API that asynchronously distributes task using RabbitMQ and Celery Writing Python scripts with Cloud Formation templates to automate installation of Auto scaling EC2 VPC DynamoDB Beautiful soup and other services Worked on various Python Integrated Development Environments like NetBeans PyCharm PyDev and Sublime Text Used the Python modules mat plotid etc for generating complex graphical data creation of histograms etc Independent template engine agnostic integration with ninja2 Mako Tenjin and wheezy template plus html widgets Used Python based GUI components for the frontend functionality such as selection criteria Worked with View Sets in DjangoREST framework for providing web services and consumed web services performing CRUD operations Developed internal project in Flask to generate report from google analytics on daily monthly and weekly basis Wrote and executed various MYSQL database queries from python using PythonMySQL connector and MySQL dB package Designed and developed data management system using MySQL Involved in Agile Methodologies and SCRUM Process Developed serverbased web traffic statistical analysis tool using Flask Pandas and had implemented and tested pythonbased web applications interacting with MySQL Responsible for designing and deploying new ELK clusters Elasticsearch Logstash Graphite Kibana beats Kafka zookeeper etc Worked on containerbased deployments using Docker working with Docker images Docker Hub and Docker registries and Kubernetes Actively involved in building Cassandra data store integrating data in real time from Oracle to Cassandra using Cassandra Spark streaming Built various graphs for business decision making using Python matplotlib library Created activated and programmed in Anaconda environment Wrote programs for performance calculations using NumPy File handling for the client data in files like txt and xlxs file for data retrieval and storing purpose Graphical data representation using python modules like NumPy SciPy Pandas Pygal and installed using pip command toolkit Was responsible for analyzing various crossfunctional multiplatform applications systems enforcing Python best practices and provide guidance in making long term scalable architectural design decisions PYTHON DEVELOPER BYN MELLON IN June 2013 to March 2015 Designed and implemented a dedicated MYSQL database server to drive the webapps and report on daily progress Developed views and templates with Python and Django View controller and templating language to create a userfriendly website interface Worked on Python LibrariesPackages such as HTTPLib2 Urllib2 Beautiful Soup Py Query Numpy SciPy Pickle PyQT PySide wxPython PyTables Data Frames SQLAlchemy Twisted Pygame pyGtk Pandas and Matplotlib Developed the consumerfriendly frontend with an easytouse OpenCV UI and fast access MongoDB Used Django framework for application development Created entire application using Python Django MySQL and Linux Programming in Python as well as Perl Created most important Business Rules which are useful for the scope of project and needs of customers Developed API modularizing existing python module with the help of pyyaml libraries Designed and implemented a dedicated MySQL database server to drive the web apps and report on daily progress Used Agile methodology for rewriting existing PythonDjango modules to deliver certain format of data and responsible for debugging the project monitored on JIRA Worked with Agile Software Development environment using SCRUM and Kanban Worked on maintaining all the tools like Bamboo Bit Bucket Confluence JIRA and GIT Enhanced existing automated solutions such as the Inquiry Tool for Automated Asset Department Reporting and added new features and fixed bugs Built and maintained code libraries to support analytics using Numpy and SciPy Used Pygal and plotly for visualization of the data retrieved using Scrapy Designed built and tested a Dynamic Locking Mechanism DLM for a sixnode CentOS Linux cluster in Python and Twisted Framework using an SQLite database to manage configurations Worked on OpenCV and Googles Tesseract OCR to implement an image recognition feature to web or mobile applications Worked on Object Oriented Design Programming concepts and unit testing using Pythons unit test library Jasmine and Karma Using ANT Puppet Chef Scripts with Ivy to build the application and deploy Fetched twitter feeds for certain important keyword using pythontwitter library Used Python library Beautiful soup for web scrapings Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Involved in building database Model APIs and Views utilizing Python to build an interactive webbased solution Designed and managed API system deployment using fast http server and Amazon AWS architecture Developed entire frontend and backend modules using Python on Django Web Framework Developed the required XML Schema documents and implemented the framework for parsing XML documents Using GIT version control tool to coordinate teamdevelopment Extensively used JavaScript MVC Framework AngularJS to make rich internet web application for a Single page application Worked on various Python Integrated Development Environments like Spyder PyCharm NetBeans and Sublime Created functions in AWS Lambda to run python scripts and AWS Lambda using java to perform event driven processing Developed Test Cases and Test Scripts in selenium web driver with Java using Cucumber framework with build management tool Maven Used AngularJS NodeJS ExpressJS MongoDB Couchbase Cassandra and various NodeJS testing frameworks for fullstack development on the Amazon Web Services AWS platform instances using Puppet Chef Configuration management Worked on implementing core cache and abstraction with Jasmine and Redis cache server Worked with various Web servers such as Gunicorn Supervisor Nginx etc Worked on some of the Deep Learning platforms such as TensorFlow Caffe and Keras Accessed public datasets and use TensorFlow and SQLAlchemy to load process clean and transform data Utilized Kubernetes and Docker for the runtime environment of the CICD system to build and test deploy Used Python and Django to interface with the jQuery UI and manage the storage and deletion of content Designed and implemented data post processing ingestion and data lake modules Pandas Spark Celery RabbitMQ Worked with Chef to aid with deployment process and migrating in house systems to Amazon Cloud Services Expertise in working with GUI frameworks PyJamas python Designed and maintained databases using Python and developed Pythonbased API using Flask and PostgreSQL Developed web pages using advanced HTML5 and CSS3 techniques backed by jQuery to enable optimum user experience throughout the site Created custom new columns depending up on the use case while ingesting data into Hadoop lake using PyTable PySpark PyMongo Pickle and Pyside Developed custom JSP tags for the application Involved in the phases of SDLC Software Development Life Cycle including Requirement collection Design and analysis of Customer specification Development and Customization of the application Worked on resulting report of application and Deployed production site using Apache Servers with Python and AWS Integrated Spring web services with Zookeeper Camel RabbitMQ in Docker environment Prepared feature file for Cucumber framework and created step definitions and created runner file to run the Cucumber features Applying TensorFlow in various handson exercises using the command line Developed API services in PythonTornado Nodejs while leveraging RabbitMQ for distributed architectures Specified prototyped developed and tested from the ground up an objectoriented multiplatform C framework containing support to datastructures common algorithms sorting etc sockets threading Education Masters",
    "unique_id": "93c03315-0485-4848-af06-cf71b0d1a5c6"
}