{
    "clean_data": "Full Stack Developer Full Stack span lDeveloperspan Full Stack Developer MetLife Bridgewater NJ Over 7 years of experience in designing and developing JavaJ2EE Client and Server side Enterprise Applications using objectoriented methodologies enterprisetechnologies frameworks and design patterns Experience in messaging queue services like JMS IBM MQ Rabbit MQ Active MQ and Apache Kafka Experience in developing Apache Kafka as a distributed publishsubscribe messaging system and a robust queue that can handle a high volume of data Involved in using Amazon Web Services like RDS EC2 Redshift SQS SNS Cloud Watch and S3 Designed and created highly scalable highly available fault tolerant highly secured distributed infrastructure IAAS using EC2 instances S3 EBS API Gateway Elastic Bean Stalk ECS Deployed our Application on Pivotal Cloud Foundry which is used to reduce the development overhead by providing a ready to use platform Good Knowledge on Docker components like Docker Engine Hub Machine Compose and Docker Registry and worked on configuring Docker Tool Box and Kubernetes as deployment manager Implemented the Zuul APIGateway in the spring cloud for the dynamic routing monitoring resiliency and security Used Spring Boot to develop and deploy both RESTful web services and MVC applications Developed Micro services based on RESTful API utilizing Spring Boot with Spring MVC Implemented exception handling in Java Spring boot for REST API by making use of Exception Handler and Controller Advice annotations Using Swagger Framework actualizing the RESTful API and Swagger gives the rich UI to test API Implemented Business layer using Spring 40 IOC AOP Spring MVC and persistent layer using DAO and Hibernate Implemented security functionality OAuth 20 Spring security SSL and site minder SSO Implemented secure authentication with LDAPOAuth2 for generating tokens in the application using Spring Security Solid Experience with Java based ORM frameworks such as Hibernate JPA Spring Data and IBATIS Implemented Hibernatefirstlevel cache and Second Level Cache Worked with NoSQL based ORM frameworks like Mongoose Connector and Cassandra Node Driver Experienced in building applications using Maven Gradle and ANT tools Extensive hands on experience in setting up CICD pipelines using Jenkins Bambooand GOCD Experience in Integration tools Oracle SOA SuiteBPELFusion Middleware webmethods and Apache CAMEL Involved in using Grunt as a JavaScript Task Runner which can be used as a command line tool for JavaScriptobjects Grunt can perform repetitive tasks very easily such as compilation unit testing minifying files running tests etc Extensive experience in FrontEnd UI technologies like HTML45 XHTML DHTML CSS23using SASS and LESS Bootstrap Angular JS Angular20 in developing dynamic and responsive web pages Good experience in ClientSide Scripting like JavaScript ES6 to build highly interactive web pages Experience in application ofclientside JavaScript frameworks such as Backbone JS Ember JS to create Controllers to handle events triggered by clients and send request to server Developed various Typescripts ES6 objects including Components NgModules Providers Services and classes using arrow functions and optional types Extensively used view rendering JavaScript frameworks like jQuery React JS and HandleBarJS Experience in ReactJS which is JavaScript library used for building reusable UI components Used ReactJS virtual DOM which is a JavaScript object This will improve apps performance and it can be used on client and server side as well as with other frameworks Implemented React JS and working with Redux and Flux architecture Experience in developing MVC based Java script frameworks like Angular JS Back Bone JS Ember JS and KnockOutJS Experience in using MVVM frameworks and developing single page applications using Angular 2 Experience in developing Angular 2 advanced features such as interfaces nested components services routing and modules Experience in developing clientside validations using Angular 2 and in developing Custom pipes Experience in designing and developing various Angular 2 Components NgModules Servicesobservablepromises Directive and Pipes Experience in using the Angular 2 Lazy Loading to increase the performance of the application Achieved the encapsulation of custom elements in Web Components using Angular ShadowDOMs Developed unit test scripts using Karma and Jasmine for Angular 2 framework and Mocha for Node JS API end points Experience in developing network applications using Nodejs with an eventdriven Asynchronous approach and single threaded model with event loops Good understanding on Serverside JavaScript structures like NodeJS with ExpressJS Experience in applications using SOA architecture with SOAP and used XML for messagecommunication Used Expressjs for development of RESTful web services and middleware configurations Developed REST API services using Node JS Express JS BodyParse and other node modules to serve the web application with JSON data Extensively used XML documents with XSLT and CSS to translate the content into HTML to present to GUI Developed SOAP services using Axis2 and Apache CXF Worked with NoSQL database Mongo DB and created pipeline from Mongo DB Cluster UsedHystrix in the building fault tolerant and resilience in Distributed systems Implemented Load Balancing of the servers using Eureka and Ribbon Excellent experience with Relational databases like MySQL Oracle SQL Server DB2 and No SQL databases likeCouch DB and Cassandra Experience in writing complex SQL Queries Stored Procedures Triggers Cursors and Functions Used java SE8 features like stream lambda expressions functional interface and type annotations andworked with core java concepts like Multithreading Transaction Management and Exception Handling Experience in architect design build and prototyping models using the design patterns like Session Facade Service Locator Singleton Abstract Factory and Factory Method In depth and extensive knowledge of Splunkarchitecture and various components Expert in Splunk Development Configuration and Administration and used Kibana to view using Elasticsearch ELK Experience in Deploying and Configuring Application Web Servers such as Oracle WebLogic IBM WebSphere JBoss Glassfish and Apache Tomcat Wrote unit tests for JavaScript based Applications using Karma Jasmine Angular Protractor Mocha and Chai testing frameworks Involved in writing test cases and test plans using TestNG Spock Mockito and JunitPower mock HQL embedded DB to test databases Proficient in creating rules using Business Rules Engines Drools ILOG Proficient in using the WebPack to compile JavaScript modules Used log4j which is a reliable fast and flexible logging framework APIs written in Java which is distributed under the Apache Software License Used various version control software such as SVN GIT GITLAB CVS Big Bucket for maintaining code repositories Worked on various SDLC Software Development Life Cycle from Waterfall to Agile SCRUM models Authorized to work in the US for any employer Work Experience Full Stack Developer MetLife Bridgewater NJ July 2018 to Present Description Metlife Inc is the holding corporation for the Metropolitan Life Insurance Company MLIC2 better known as MetLife and its affiliates MetLife is among the largest global providers of insurance annuities and employee benefit programs with 90 million customers in over 60 countries Designed and built technical solutions for complex business problems based on MetLife standards functioning as a toplevel expert throughout the development lifecycle to ensure the ability of the code to deliver value to the business Responsibilities Developed data transformer for converting legacy data from source tables to Avro format and fed into Kafka using Camel to process the file for multiple routes to different host locations Handled consumer logs and monitor Kafka Metricsntact using Kafka Manager Created AWS Lambda EC2 instances provisioning on AWS environment and implemented security groups administered Amazon VPCs Implemented Spring CloudNetflixOSSStack along with NetflixZuul API Gateway with Eureka Service Registry for reverse proxy infrastructure and Hystrix Circuit Breaker for fault tolerance Deployed the Dockerized Spring Boot application that is intended to be run on dev local machine using PCF Pivotal Cloud Foundry Deployed the Dockerimage of services building Docker file and build a continuous delivery pipeline for containers using AWSCode Pipeline and Amazon ECS Deployed the DockerizedSpring Boot application using AWS Elastic Bean Stalk Deployed docker containers on server nodes with master node using Kubernetes Developed RESTFUL web services using Spring Boot and Apace CXF framework Used complete annotation driven approach to develop the application using Spring Boot and was involved in setting up the Spring bean profiling Worked with Spring Boot for automatic configuration and starter for Maven configuration and performed metrics and externalized configuration Implemented Spring Boot to create a CRUD backend for our Reactfronted application Migrating existing Designed and developed RESTful web services using Spring Boot and Jersey framework Extensively worked on Microservices for creating APIs services with Spring Boot to modularize code and implemented Swagger for dynamic API documentation Developed a Micro Service Oriented applicationwith React JS in the front end and Spring Boot services in the back end Modules for the Frontend are integrated to Backend using iBATIS framework Gradle build tool is used to deploy the application on the web servers like JBoss Integration of automation batch run job with Jenkins Worked with Jenkins Continuous Integration and Continuous Deployment CICD Used Git for version control and Jenkins for Continuous Integration and Continuous Deployment CICD Involved in development design and implementation front end part of the widgetbased application using HTML5 CSS3LESS AJAX Bootstrap 40 For clientside view rendering servicesused React JS typically used various predefined Redux libraries Configured ReactRedux for state management and ReactRouter for programmatic navigation Experience in developing Nodejs in a single threaded program and the same program can provide service to a much larger number of requests than traditional servers like ApacheHTTP Server Implemented email and SSO integration using Nodejs for backend Implemented StoreRedux for holding the whole state tree of application and ReducerRedux for describing actions Used Axios AJAX request to data from backend based on user interface input and post updated data back to backend Mocha test runner and Chai test framework are used to test React JS components Used Webpack module bundler and Babel java script compiler in accompanying React JS Webpack module bundler and Babel java script compiler used accompanyingReact JS Experience in developing and publishing RESTfulweb services using Node JS Asynchronous programming and express JS Used Swagger specification for documenting REST APIs which exposes description of a RESTful web services to different clients Bottle microframework implemented with RESTful service and used WADL Web Application Description Language for modelling the resources provided by the services and relationships between them Junit is implemented along with Mockito to perform unit testing on our RESTful web application Implemented JWT JSON Web Tokens for creating tokens to assert claims in the application and thus providing authentication of RESTful services Worked with NoSQL database Mongo DB and created pipeline from Mongo DB Cluster Extensively used Git for version controlling and regularly Pushed the code to GitHub Splunk is implemented in the application for log errors exceptions and business logic and log analytics Behavioral and Integration testing is done using Cucumber and Selenium respectively Environment JavaScript React JSRedux HTML5 CSS3LESS AJAX Bootstrap jQuery Spring Security Rabbit MQ Spring Data Spring Batch Quartz Scheduler Hibernate Spring Boot Micro services RESTful services Netflix OSS Eclipse Java EE IDE Jenkins Spring CloudNetflix Splunk MySQL Docker Apache tomcat Jenkins Netflix Zuul API Ribbon Eureka Hystrix JUnit Mockito Mocha Chai Selenium Cucumber Cassandra DB Cassandra Node Connector Gradle JBoss JIRA JWT WADL Webpack Babel Full Stack Developer Cummins Columbus IN August 2017 to June 2018 Description Cummins is an American Fortune 500 Corporation that designs manufactures and distributes engines filtration and power generation products Cummins also serves engines and related equipment including controls air handling filtration emission control electrical power generation systems and semi trucks The website functionality was extended by providing the retailers to login and perform online transactions like ordering engines online Responsibilities Used Apache Kafka in cluster as messaging system between the APIs and microservices and worked on Splunk search processing language SPL queries reports dashboard and logging using Log4J Created AWSLambda functions for AWS config rules using Nodejs Heavily used Lambda function on text object methods Context object properties using Nodejs Deployed EC2 instances provisioning on AWS environment and implemented security groups administered Amazon VPCs Worked with Netflix OSS Eureka servicein spring cloud for service registration and discovery and spring config for centralized configuration Created various docker images from the docker containers and published these images in the Dockerhub repository Created various Dockerimages from the Docker containers and published these images in the Docker hub repositoryDeployed the Dockerized Spring Boot application using AWS Elastic Bean Stalk EBS Worked on Deployment Automation of all micro services to pull image from Private Docker registry and deploy to Kubernetes Cluster Worked with various features in spring such as Spring AOP Spring Transaction management Implemented Spring Bean Factory using IOC Configured Bean properties using dependency injection Migrating existing application into REST based Micro services to provide all the CRUD capabilities using Spring Boot Used Spring Boot which is radically faster in building cloud Micro Services and develop Spring based application with very less configuration Designed and developed RESTFUL web services using Spring Boot and Jersey framework Used SpringDataJPA as the ORM framework to connect with MYSQL database Utilized createreactapp to launch product to stay update with the most current Webpack and babel build configurations Used Swagger specification for documenting REST APIs which exposes description of a RESTFUL web services to different clients Used GIT for version control and Jenkins for Continuous Integration and Continuous Deployment CICD Extensively used Git for version controlling and regularly pushed the code to GitHub Developed Web pages from scratch using HTML5 CSS 3using SASS and JavaScript Used Angular 2 component router for navigation Worked with Angular 2 directives components pipes and injectable Programmed in Angular 2 to upload post filesimages to the AWS S3 from the Frontend by installing NPM package of AWSSDK Created Typescript reusable components and services to consume REST APIs using Componentbased architecture provided by Angular 2 Involved in the development of services with Angular 2 injectable property as to make the service available for dependency injection when creating components Developed various single page applications SPA using REACT JS Involved in responsive design and developed a single ISOMORPHIC responsive website that could be served to desktop Tablets and mobile users using ReactJS Closely worked with Application using ReactJS and Nodejs libraries NPM gulp directories to generate desired view Involved in using Redux library and NPM Node Package Manager and used various screens for the front end using Reactjs Used Postman tool to test the API workflow tested on the JSON files which are generated by the NodeJS with ExpressJS Performed Verification and validation process for the code written by making use of Jasmine and KarmaJavaScript testing framework by testing across various scenarios of the Angular 2 applications Worked with the Node package manager NPM along with Gulp Worked with SASS to build better and optimized Style sheets Worked with ZUUL API Gateway for Authentication and Hystrix Circuit Breaker for fault tolerance Used Node JS to run Angular 2 on server with mock JSON data and completed the UI development independent of server Wrote services with Angular2 to store and retrieve user data from the Mongo DB for the application on devices with HTTP service Developed application from scratch including Mongo DB server setup and Expressjs server development Used Mongoose API to access the Mongo DB from Node JS and used Angular CLI and NPM for scaffolding the Angular 2 application Authenticating Users and to provide the security to RESTful web services using OAUTH 20 Used JIRA as the bug tracking system to track and maintain the history of bugsissues on everyday basis Environment Angular 2 HTML5 CSS 3 JavaScript AWS S3 NPM React JS Redux Gulp Expressjs RESTful Web Services Webpack Babel Jasmine Karma Spring Boot Jersey Micro Services Rest Services AWS Node JS Cassandra GitHub JIRA Jenkins Swagger Netflix OSS Eureka ribbon Zuul API gateway Hystrix circuit breaker Docker Java Developer Dominos Inc Ann Arbor MI October 2016 to July 2017 Description Dominos Inc is an American pizza restaurant chain founded in 1960 The corporationis headquartered at the Dominos Farms Office Park in Ann Arbor Michigan United States In Dominos ecommerce project my role is to facilitate the enhanced features to take orders through smart devices which will help Dominos Pizza customers to make orders by providing them various benefits such as Ease of access Convenience make order faster and saving the orders Reduce the use of sales assistant Responsibilities Utilized Futures and Spring Framework to make Asynchronous calls to the application Developed Rest Web services using Spring MVC and migrated few services from servlets to Spring MVC Responsible for using Spring MVC to develop REST web services within the application Developed application on Spring framework by utilizing its features like Spring Dependency injection Spring Beans Spring Security Spring JPA Spring AOP Spring IOC Spring Web flow using MVC Used Spring Gem Fire Cache Transactions with Springs Declarative Transaction Management and their annotations Used Spring Transactions in the application and developed Session beans for the business logic at the middle tier level Implemented the Spring IOC for the core business application logic and used Hibernate as persistence framework Implemented Spring Batch for processing large volumes of records including loggingtracing transaction management job processing statistics job restart skip and resource management in the application using Quartzscheduler Used Spring Batch framework to create custom readers and writers to work with the application Used Spring Batch framework to update data in databases Worked with Spring Batch to convert xml files to data base records Created custom readers processors Validators Field Extractors for various Spring Batch applications Spring Security designed for authorization and authentication and manages the CORS and CRSF security issues Designed the user interface screen and its functionality as per user requirements Developed dynamic web pages using HTML CSSBootstrap jQuery and AJAX for building up a Monolithic application Created responsive UI modules using Backbone JS with hard coded dependencyof Underscore JS in combination with Handlebar JS for templating Used Backbone JS to utilize its minimal set of datastructuring models and collections and user interface views and URLs primitives for building aMVC work flow design Performed a lot of DOM manipulations using native JS and jQuery for loading and manipulating dynamic content on webpages Used jQuery in developing the Rich Internet Applications RIA with AJAX mechanism and JSON as a data exchange tool Created Mockup designs and developed various functionalities with JavaScript and jQuery Used Log4J to capture the log that includes runtime exceptions Designed new queries in app to enhance MySQL database performance Developed stored procedures triggers in MySQL for lowering traffic between servers clients Environment HTML CSS jQuery Bootstrap Less CSS Ajax jQuery JSON Spring MVC Spring Gem Fire Spring Batch Framework Spring Security Drools Engine MYSQL Java Developer Faujnet Solutions Private Limited Hyderabad Telangana May 2013 to May 2013 India Description Faujnet is the leading career management firm for exmilitary professionals We run the largest career membership site integrating the Global Industry and the military community I am responsible for the design development and management of Java based applications and collaborate with web developers and software engineers to integrate java into business applications software and websites Responsibilities Worked on Struts framework and production support issues of the existing applications Development of Action Forms Action Servlets Action and Validating Action Forms in Struts framework Used Strut and spring frame works to design and develop applications Implemented the project using Singleton Factory Design Patterns The Strut Validator frame works are used for serverside and clientside validations Involved in developing the business components and responsible for developing the user interfaces using JSPs Used the Strut Tiles framework for developing User Interface Developed JSPs with Struts custom tags and implemented JavaScript validation of data Primarily focused on the spring components such as action Servlets actions Model and View Objects View Resolver Used JavaScript for the web page validation and Struts Validator for serverside validation Wrote the high performance multithreaded Java code using singleton mediator visitor facade observer template factory publish and subscribe design pattern Involved in the extensive coding of JavaScript to handle the clientside validations Coded JDBC calls in the Servlets to access the SQL Server database tables Used SQL and PLSQL queries to perform database operations on Web Sphere Developed action classes and action form classes created JSPs using Strut Tag libraries and configured in configxml  For encapsulating the dynamic functionality TLD Tag Library Descriptor and used JSTL tags for populating data on to JSPs The Strut framework is implemented to enable JDBC Connection for data access Environment Java v6 JavaScript v18 JSP spring Struts 2x EJB SQL PLSQL JDBC Eclipse Web Sphere v 70 Associate Software Engineer Intergraph Hyderabad Telangana January 2012 to April 2013 India Description Intergraph Corporation is an American software development and services company It provides enterprise engineering and geospatially powered software to businesses governments and organizations around the world My role is to contribute to the entire development life cycles write well designed testable and efficient code I should ensure that designs in compliance to the specifications Responsibilities Developed applications using JAVA SpringFramework Spring MVC and Spring Core Developed stored procedures and triggers using PLSQL on SpringJDBC template to access and maintain the application database Used Maven build tool to maintain Project dependencies Involved in requirement and impact analysis designing the enhancements across the various modules and development using JavaJ2EE components like JSP Servlets and JDBC Used different CoreJava concepts such as MultiThreading ExceptionHandling Collection APIs to implement various features and enhancements Implemented Business logic in the middletier using Java classes Java beans Used JIRA for bug tracking Experience in working with version control system GIT Used Maven build tool to maintain Project dependencies Developed the presentation layer using Struts Framework JSP Servlets JavaScript jQuery and AJAX JSPJavaScript are used to create the frontend development The UserInterface UI components are implemented using HTML CSS Designed and implemented RESTfulwebAPIs Compiled the project modules on Maven and deployed them using ANTscript Actively involved in client meetings and requirement gathering sessions to evaluate and analyse the IT business requirement standards Worked with team members and business analysts in project planning sessions to create the working model Implemented Junit and Java SIM test cases to test the application functionality and to ensure code coverage Used Agile and Scrummethodologies to improve the efficiency of the applications Environment Java J2EE JSP Multithreading Eclipse Struts2 XML XSLT XPATH Design Patterns IBM DB2 WebSphere Server web services Soap and Rest UML HTML CSS Education Bachelors Skills Git 3 years java 3 years java script 4 years Jira 3 years Rest 4 years Angular Javascript Node React",
    "entities": [
        "Session Facade Service Locator Singleton Abstract Factory",
        "Micro Services",
        "Responsibilities Developed",
        "Oracle SQL Server",
        "Spring Framework",
        "WebSphere Server",
        "Continuous Deployment CICD Involved",
        "AJAX",
        "Serverside JavaScript",
        "Responsibilities Utilized Futures",
        "IOC Configured Bean",
        "ORM",
        "Docker Engine Hub Machine Compose",
        "Nodejs",
        "Kubernetes Developed RESTFUL",
        "Relational",
        "ISOMORPHIC",
        "log analytics Behavioral",
        "Convenience",
        "PCF Pivotal Cloud Foundry Deployed",
        "Jersey",
        "Nodejs Deployed EC2",
        "HTTP",
        "Spring Core Developed",
        "SPL",
        "Jenkins Netflix Zuul",
        "Mongo DB Cluster UsedHystrix",
        "IBM",
        "Hibernate JPA Spring Data",
        "Components NgModules Providers Services",
        "Camel",
        "Application using ReactJS",
        "Implemented React JS",
        "CoreJava",
        "Controller Advice",
        "Jenkins for Continuous Integration",
        "Multithreading Transaction Management",
        "SOAP",
        "XML",
        "SSO",
        "Componentbased",
        "OAuth",
        "Boot Micro",
        "Nodejs Heavily",
        "Model and View Objects View Resolver",
        "the Metropolitan Life Insurance Company MLIC2",
        "Implemented Junit",
        "AWS Elastic Bean Stalk EBS Worked on Deployment Automation",
        "Amazon",
        "Spring Boot",
        "Angular 2 Components",
        "ReactRouter",
        "JavaJ2EE",
        "API Implemented Business layer",
        "Development of Action Forms Action Servlets Action",
        "SQL Server",
        "Developed",
        "DAO",
        "Business Rules Engines Drools ILOG Proficient",
        "IAAS",
        "IDE Jenkins Spring CloudNetflix Splunk",
        "Angular 2 Involved",
        "KnockOutJS Experience",
        "Mockito",
        "ShadowDOMs",
        "AWS Elastic Bean Stalk Deployed",
        "WebPack",
        "Waterfall",
        "Implemented Spring Bean Factory",
        "MQ",
        "TLD",
        "JavaScript AWS S3 NPM React",
        "HTML5 CSS3LESS AJAX Bootstrap 40",
        "Ribbon Excellent",
        "Description Intergraph Corporation",
        "SOA",
        "Spring Security",
        "JavaJ2EE Client",
        "Second Level Cache Worked",
        "JBoss Integration",
        "GitHub Splunk",
        "JSP",
        "Private Docker",
        "Micro",
        "Worked",
        "Cucumber and Selenium",
        "the Global Industry",
        "React JS Webpack",
        "Docker",
        "DOM",
        "Continuous Deployment CICD",
        "Singleton Factory Design Patterns",
        "SSL",
        "CLI",
        "Docker Registry",
        "MVC",
        "Created AWS",
        "Authenticating Users",
        "Description Dominos Inc",
        "JMS IBM",
        "Jenkins Continuous Integration",
        "Redux",
        "EJB",
        "GIT",
        "Node JS",
        "the Dominos Farms Office Park",
        "Exception Handler",
        "Cummins",
        "API",
        "UserInterface",
        "Applications using Karma Jasmine Angular",
        "US",
        "Implemented Business",
        "Spring Security Solid",
        "the Apache Software License",
        "Splunk Development Configuration and Administration",
        "Created",
        "AWS",
        "Server",
        "Developed Micro",
        "HTML CSSBootstrap jQuery",
        "Handlebar JS",
        "Backbone JS",
        "React JS",
        "Hystrix Circuit Breaker",
        "the Rich Internet Applications",
        "Netflix",
        "fed",
        "RESTfulweb",
        "BodyParse",
        "Elasticsearch",
        "Columbus",
        "RESTFUL",
        "Struts Framework JSP",
        "Apache CAMEL Involved",
        "Amazon Web Services",
        "the Spring IOC",
        "ReducerRedux",
        "Axis2",
        "Kubernetes",
        "jQuery React JS",
        "NPM",
        "Deploying and Configuring Application Web Servers",
        "Maven Gradle",
        "Mongo DB Cluster",
        "AWSSDK Created Typescript",
        "OAUTH",
        "CICD",
        "Present Description Metlife Inc",
        "GUI Developed SOAP",
        "Spring MVC Responsible",
        "United States",
        "HTML CSS Designed",
        "Amazon ECS Deployed",
        "ANTscript Actively",
        "ClientSide Scripting",
        "CRUD",
        "Flux",
        "Backend",
        "Oracle WebLogic IBM",
        "Maven",
        "a Micro Service Oriented",
        "Node JS Express",
        "XSLT",
        "Hibernate Implemented",
        "JavaScript",
        "MQ Active",
        "ANT",
        "UI",
        "Created Mockup",
        "MetLife",
        "Ann Arbor",
        "JSP Servlets",
        "Springs Declarative Transaction Management",
        "the Angular 2 Lazy Loading",
        "MultiThreading ExceptionHandling Collection",
        "SVN",
        "CSS",
        "Dominos",
        "Mongoose Connector",
        "jQuery",
        "Performed Verification",
        "SPA",
        "REST",
        "American Fortune 500 Corporation",
        "NoSQL",
        "Project dependencies Involved",
        "the Zuul APIGateway",
        "FrontEnd UI",
        "JS Experience",
        "Boot Jersey Micro Services Rest Services AWS",
        "Node"
    ],
    "experience": "Experience in messaging queue services like JMS IBM MQ Rabbit MQ Active MQ and Apache Kafka Experience in developing Apache Kafka as a distributed publishsubscribe messaging system and a robust queue that can handle a high volume of data Involved in using Amazon Web Services like RDS EC2 Redshift SQS SNS Cloud Watch and S3 Designed and created highly scalable highly available fault tolerant highly secured distributed infrastructure IAAS using EC2 instances S3 EBS API Gateway Elastic Bean Stalk ECS Deployed our Application on Pivotal Cloud Foundry which is used to reduce the development overhead by providing a ready to use platform Good Knowledge on Docker components like Docker Engine Hub Machine Compose and Docker Registry and worked on configuring Docker Tool Box and Kubernetes as deployment manager Implemented the Zuul APIGateway in the spring cloud for the dynamic routing monitoring resiliency and security Used Spring Boot to develop and deploy both RESTful web services and MVC applications Developed Micro services based on RESTful API utilizing Spring Boot with Spring MVC Implemented exception handling in Java Spring boot for REST API by making use of Exception Handler and Controller Advice annotations Using Swagger Framework actualizing the RESTful API and Swagger gives the rich UI to test API Implemented Business layer using Spring 40 IOC AOP Spring MVC and persistent layer using DAO and Hibernate Implemented security functionality OAuth 20 Spring security SSL and site minder SSO Implemented secure authentication with LDAPOAuth2 for generating tokens in the application using Spring Security Solid Experience with Java based ORM frameworks such as Hibernate JPA Spring Data and IBATIS Implemented Hibernatefirstlevel cache and Second Level Cache Worked with NoSQL based ORM frameworks like Mongoose Connector and Cassandra Node Driver Experienced in building applications using Maven Gradle and ANT tools Extensive hands on experience in setting up CICD pipelines using Jenkins Bambooand GOCD Experience in Integration tools Oracle SOA SuiteBPELFusion Middleware webmethods and Apache CAMEL Involved in using Grunt as a JavaScript Task Runner which can be used as a command line tool for JavaScriptobjects Grunt can perform repetitive tasks very easily such as compilation unit testing minifying files running tests etc Extensive experience in FrontEnd UI technologies like HTML45 XHTML DHTML CSS23using SASS and LESS Bootstrap Angular JS Angular20 in developing dynamic and responsive web pages Good experience in ClientSide Scripting like JavaScript ES6 to build highly interactive web pages Experience in application ofclientside JavaScript frameworks such as Backbone JS Ember JS to create Controllers to handle events triggered by clients and send request to server Developed various Typescripts ES6 objects including Components NgModules Providers Services and classes using arrow functions and optional types Extensively used view rendering JavaScript frameworks like jQuery React JS and HandleBarJS Experience in ReactJS which is JavaScript library used for building reusable UI components Used ReactJS virtual DOM which is a JavaScript object This will improve apps performance and it can be used on client and server side as well as with other frameworks Implemented React JS and working with Redux and Flux architecture Experience in developing MVC based Java script frameworks like Angular JS Back Bone JS Ember JS and KnockOutJS Experience in using MVVM frameworks and developing single page applications using Angular 2 Experience in developing Angular 2 advanced features such as interfaces nested components services routing and modules Experience in developing clientside validations using Angular 2 and in developing Custom pipes Experience in designing and developing various Angular 2 Components NgModules Servicesobservablepromises Directive and Pipes Experience in using the Angular 2 Lazy Loading to increase the performance of the application Achieved the encapsulation of custom elements in Web Components using Angular ShadowDOMs Developed unit test scripts using Karma and Jasmine for Angular 2 framework and Mocha for Node JS API end points Experience in developing network applications using Nodejs with an eventdriven Asynchronous approach and single threaded model with event loops Good understanding on Serverside JavaScript structures like NodeJS with ExpressJS Experience in applications using SOA architecture with SOAP and used XML for messagecommunication Used Expressjs for development of RESTful web services and middleware configurations Developed REST API services using Node JS Express JS BodyParse and other node modules to serve the web application with JSON data Extensively used XML documents with XSLT and CSS to translate the content into HTML to present to GUI Developed SOAP services using Axis2 and Apache CXF Worked with NoSQL database Mongo DB and created pipeline from Mongo DB Cluster UsedHystrix in the building fault tolerant and resilience in Distributed systems Implemented Load Balancing of the servers using Eureka and Ribbon Excellent experience with Relational databases like MySQL Oracle SQL Server DB2 and No SQL databases likeCouch DB and Cassandra Experience in writing complex SQL Queries Stored Procedures Triggers Cursors and Functions Used java SE8 features like stream lambda expressions functional interface and type annotations andworked with core java concepts like Multithreading Transaction Management and Exception Handling Experience in architect design build and prototyping models using the design patterns like Session Facade Service Locator Singleton Abstract Factory and Factory Method In depth and extensive knowledge of Splunkarchitecture and various components Expert in Splunk Development Configuration and Administration and used Kibana to view using Elasticsearch ELK Experience in Deploying and Configuring Application Web Servers such as Oracle WebLogic IBM WebSphere JBoss Glassfish and Apache Tomcat Wrote unit tests for JavaScript based Applications using Karma Jasmine Angular Protractor Mocha and Chai testing frameworks Involved in writing test cases and test plans using TestNG Spock Mockito and JunitPower mock HQL embedded DB to test databases Proficient in creating rules using Business Rules Engines Drools ILOG Proficient in using the WebPack to compile JavaScript modules Used log4j which is a reliable fast and flexible logging framework APIs written in Java which is distributed under the Apache Software License Used various version control software such as SVN GIT GITLAB CVS Big Bucket for maintaining code repositories Worked on various SDLC Software Development Life Cycle from Waterfall to Agile SCRUM models Authorized to work in the US for any employer Work Experience Full Stack Developer MetLife Bridgewater NJ July 2018 to Present Description Metlife Inc is the holding corporation for the Metropolitan Life Insurance Company MLIC2 better known as MetLife and its affiliates MetLife is among the largest global providers of insurance annuities and employee benefit programs with 90 million customers in over 60 countries Designed and built technical solutions for complex business problems based on MetLife standards functioning as a toplevel expert throughout the development lifecycle to ensure the ability of the code to deliver value to the business Responsibilities Developed data transformer for converting legacy data from source tables to Avro format and fed into Kafka using Camel to process the file for multiple routes to different host locations Handled consumer logs and monitor Kafka Metricsntact using Kafka Manager Created AWS Lambda EC2 instances provisioning on AWS environment and implemented security groups administered Amazon VPCs Implemented Spring CloudNetflixOSSStack along with NetflixZuul API Gateway with Eureka Service Registry for reverse proxy infrastructure and Hystrix Circuit Breaker for fault tolerance Deployed the Dockerized Spring Boot application that is intended to be run on dev local machine using PCF Pivotal Cloud Foundry Deployed the Dockerimage of services building Docker file and build a continuous delivery pipeline for containers using AWSCode Pipeline and Amazon ECS Deployed the DockerizedSpring Boot application using AWS Elastic Bean Stalk Deployed docker containers on server nodes with master node using Kubernetes Developed RESTFUL web services using Spring Boot and Apace CXF framework Used complete annotation driven approach to develop the application using Spring Boot and was involved in setting up the Spring bean profiling Worked with Spring Boot for automatic configuration and starter for Maven configuration and performed metrics and externalized configuration Implemented Spring Boot to create a CRUD backend for our Reactfronted application Migrating existing Designed and developed RESTful web services using Spring Boot and Jersey framework Extensively worked on Microservices for creating APIs services with Spring Boot to modularize code and implemented Swagger for dynamic API documentation Developed a Micro Service Oriented applicationwith React JS in the front end and Spring Boot services in the back end Modules for the Frontend are integrated to Backend using iBATIS framework Gradle build tool is used to deploy the application on the web servers like JBoss Integration of automation batch run job with Jenkins Worked with Jenkins Continuous Integration and Continuous Deployment CICD Used Git for version control and Jenkins for Continuous Integration and Continuous Deployment CICD Involved in development design and implementation front end part of the widgetbased application using HTML5 CSS3LESS AJAX Bootstrap 40 For clientside view rendering servicesused React JS typically used various predefined Redux libraries Configured ReactRedux for state management and ReactRouter for programmatic navigation Experience in developing Nodejs in a single threaded program and the same program can provide service to a much larger number of requests than traditional servers like ApacheHTTP Server Implemented email and SSO integration using Nodejs for backend Implemented StoreRedux for holding the whole state tree of application and ReducerRedux for describing actions Used Axios AJAX request to data from backend based on user interface input and post updated data back to backend Mocha test runner and Chai test framework are used to test React JS components Used Webpack module bundler and Babel java script compiler in accompanying React JS Webpack module bundler and Babel java script compiler used accompanyingReact JS Experience in developing and publishing RESTfulweb services using Node JS Asynchronous programming and express JS Used Swagger specification for documenting REST APIs which exposes description of a RESTful web services to different clients Bottle microframework implemented with RESTful service and used WADL Web Application Description Language for modelling the resources provided by the services and relationships between them Junit is implemented along with Mockito to perform unit testing on our RESTful web application Implemented JWT JSON Web Tokens for creating tokens to assert claims in the application and thus providing authentication of RESTful services Worked with NoSQL database Mongo DB and created pipeline from Mongo DB Cluster Extensively used Git for version controlling and regularly Pushed the code to GitHub Splunk is implemented in the application for log errors exceptions and business logic and log analytics Behavioral and Integration testing is done using Cucumber and Selenium respectively Environment JavaScript React JSRedux HTML5 CSS3LESS AJAX Bootstrap jQuery Spring Security Rabbit MQ Spring Data Spring Batch Quartz Scheduler Hibernate Spring Boot Micro services RESTful services Netflix OSS Eclipse Java EE IDE Jenkins Spring CloudNetflix Splunk MySQL Docker Apache tomcat Jenkins Netflix Zuul API Ribbon Eureka Hystrix JUnit Mockito Mocha Chai Selenium Cucumber Cassandra DB Cassandra Node Connector Gradle JBoss JIRA JWT WADL Webpack Babel Full Stack Developer Cummins Columbus IN August 2017 to June 2018 Description Cummins is an American Fortune 500 Corporation that designs manufactures and distributes engines filtration and power generation products Cummins also serves engines and related equipment including controls air handling filtration emission control electrical power generation systems and semi trucks The website functionality was extended by providing the retailers to login and perform online transactions like ordering engines online Responsibilities Used Apache Kafka in cluster as messaging system between the APIs and microservices and worked on Splunk search processing language SPL queries reports dashboard and logging using Log4J Created AWSLambda functions for AWS config rules using Nodejs Heavily used Lambda function on text object methods Context object properties using Nodejs Deployed EC2 instances provisioning on AWS environment and implemented security groups administered Amazon VPCs Worked with Netflix OSS Eureka servicein spring cloud for service registration and discovery and spring config for centralized configuration Created various docker images from the docker containers and published these images in the Dockerhub repository Created various Dockerimages from the Docker containers and published these images in the Docker hub repositoryDeployed the Dockerized Spring Boot application using AWS Elastic Bean Stalk EBS Worked on Deployment Automation of all micro services to pull image from Private Docker registry and deploy to Kubernetes Cluster Worked with various features in spring such as Spring AOP Spring Transaction management Implemented Spring Bean Factory using IOC Configured Bean properties using dependency injection Migrating existing application into REST based Micro services to provide all the CRUD capabilities using Spring Boot Used Spring Boot which is radically faster in building cloud Micro Services and develop Spring based application with very less configuration Designed and developed RESTFUL web services using Spring Boot and Jersey framework Used SpringDataJPA as the ORM framework to connect with MYSQL database Utilized createreactapp to launch product to stay update with the most current Webpack and babel build configurations Used Swagger specification for documenting REST APIs which exposes description of a RESTFUL web services to different clients Used GIT for version control and Jenkins for Continuous Integration and Continuous Deployment CICD Extensively used Git for version controlling and regularly pushed the code to GitHub Developed Web pages from scratch using HTML5 CSS 3using SASS and JavaScript Used Angular 2 component router for navigation Worked with Angular 2 directives components pipes and injectable Programmed in Angular 2 to upload post filesimages to the AWS S3 from the Frontend by installing NPM package of AWSSDK Created Typescript reusable components and services to consume REST APIs using Componentbased architecture provided by Angular 2 Involved in the development of services with Angular 2 injectable property as to make the service available for dependency injection when creating components Developed various single page applications SPA using REACT JS Involved in responsive design and developed a single ISOMORPHIC responsive website that could be served to desktop Tablets and mobile users using ReactJS Closely worked with Application using ReactJS and Nodejs libraries NPM gulp directories to generate desired view Involved in using Redux library and NPM Node Package Manager and used various screens for the front end using Reactjs Used Postman tool to test the API workflow tested on the JSON files which are generated by the NodeJS with ExpressJS Performed Verification and validation process for the code written by making use of Jasmine and KarmaJavaScript testing framework by testing across various scenarios of the Angular 2 applications Worked with the Node package manager NPM along with Gulp Worked with SASS to build better and optimized Style sheets Worked with ZUUL API Gateway for Authentication and Hystrix Circuit Breaker for fault tolerance Used Node JS to run Angular 2 on server with mock JSON data and completed the UI development independent of server Wrote services with Angular2 to store and retrieve user data from the Mongo DB for the application on devices with HTTP service Developed application from scratch including Mongo DB server setup and Expressjs server development Used Mongoose API to access the Mongo DB from Node JS and used Angular CLI and NPM for scaffolding the Angular 2 application Authenticating Users and to provide the security to RESTful web services using OAUTH 20 Used JIRA as the bug tracking system to track and maintain the history of bugsissues on everyday basis Environment Angular 2 HTML5 CSS 3 JavaScript AWS S3 NPM React JS Redux Gulp Expressjs RESTful Web Services Webpack Babel Jasmine Karma Spring Boot Jersey Micro Services Rest Services AWS Node JS Cassandra GitHub JIRA Jenkins Swagger Netflix OSS Eureka ribbon Zuul API gateway Hystrix circuit breaker Docker Java Developer Dominos Inc Ann Arbor MI October 2016 to July 2017 Description Dominos Inc is an American pizza restaurant chain founded in 1960 The corporationis headquartered at the Dominos Farms Office Park in Ann Arbor Michigan United States In Dominos ecommerce project my role is to facilitate the enhanced features to take orders through smart devices which will help Dominos Pizza customers to make orders by providing them various benefits such as Ease of access Convenience make order faster and saving the orders Reduce the use of sales assistant Responsibilities Utilized Futures and Spring Framework to make Asynchronous calls to the application Developed Rest Web services using Spring MVC and migrated few services from servlets to Spring MVC Responsible for using Spring MVC to develop REST web services within the application Developed application on Spring framework by utilizing its features like Spring Dependency injection Spring Beans Spring Security Spring JPA Spring AOP Spring IOC Spring Web flow using MVC Used Spring Gem Fire Cache Transactions with Springs Declarative Transaction Management and their annotations Used Spring Transactions in the application and developed Session beans for the business logic at the middle tier level Implemented the Spring IOC for the core business application logic and used Hibernate as persistence framework Implemented Spring Batch for processing large volumes of records including loggingtracing transaction management job processing statistics job restart skip and resource management in the application using Quartzscheduler Used Spring Batch framework to create custom readers and writers to work with the application Used Spring Batch framework to update data in databases Worked with Spring Batch to convert xml files to data base records Created custom readers processors Validators Field Extractors for various Spring Batch applications Spring Security designed for authorization and authentication and manages the CORS and CRSF security issues Designed the user interface screen and its functionality as per user requirements Developed dynamic web pages using HTML CSSBootstrap jQuery and AJAX for building up a Monolithic application Created responsive UI modules using Backbone JS with hard coded dependencyof Underscore JS in combination with Handlebar JS for templating Used Backbone JS to utilize its minimal set of datastructuring models and collections and user interface views and URLs primitives for building aMVC work flow design Performed a lot of DOM manipulations using native JS and jQuery for loading and manipulating dynamic content on webpages Used jQuery in developing the Rich Internet Applications RIA with AJAX mechanism and JSON as a data exchange tool Created Mockup designs and developed various functionalities with JavaScript and jQuery Used Log4J to capture the log that includes runtime exceptions Designed new queries in app to enhance MySQL database performance Developed stored procedures triggers in MySQL for lowering traffic between servers clients Environment HTML CSS jQuery Bootstrap Less CSS Ajax jQuery JSON Spring MVC Spring Gem Fire Spring Batch Framework Spring Security Drools Engine MYSQL Java Developer Faujnet Solutions Private Limited Hyderabad Telangana May 2013 to May 2013 India Description Faujnet is the leading career management firm for exmilitary professionals We run the largest career membership site integrating the Global Industry and the military community I am responsible for the design development and management of Java based applications and collaborate with web developers and software engineers to integrate java into business applications software and websites Responsibilities Worked on Struts framework and production support issues of the existing applications Development of Action Forms Action Servlets Action and Validating Action Forms in Struts framework Used Strut and spring frame works to design and develop applications Implemented the project using Singleton Factory Design Patterns The Strut Validator frame works are used for serverside and clientside validations Involved in developing the business components and responsible for developing the user interfaces using JSPs Used the Strut Tiles framework for developing User Interface Developed JSPs with Struts custom tags and implemented JavaScript validation of data Primarily focused on the spring components such as action Servlets actions Model and View Objects View Resolver Used JavaScript for the web page validation and Struts Validator for serverside validation Wrote the high performance multithreaded Java code using singleton mediator visitor facade observer template factory publish and subscribe design pattern Involved in the extensive coding of JavaScript to handle the clientside validations Coded JDBC calls in the Servlets to access the SQL Server database tables Used SQL and PLSQL queries to perform database operations on Web Sphere Developed action classes and action form classes created JSPs using Strut Tag libraries and configured in configxml   For encapsulating the dynamic functionality TLD Tag Library Descriptor and used JSTL tags for populating data on to JSPs The Strut framework is implemented to enable JDBC Connection for data access Environment Java v6 JavaScript v18 JSP spring Struts 2x EJB SQL PLSQL JDBC Eclipse Web Sphere v 70 Associate Software Engineer Intergraph Hyderabad Telangana January 2012 to April 2013 India Description Intergraph Corporation is an American software development and services company It provides enterprise engineering and geospatially powered software to businesses governments and organizations around the world My role is to contribute to the entire development life cycles write well designed testable and efficient code I should ensure that designs in compliance to the specifications Responsibilities Developed applications using JAVA SpringFramework Spring MVC and Spring Core Developed stored procedures and triggers using PLSQL on SpringJDBC template to access and maintain the application database Used Maven build tool to maintain Project dependencies Involved in requirement and impact analysis designing the enhancements across the various modules and development using JavaJ2EE components like JSP Servlets and JDBC Used different CoreJava concepts such as MultiThreading ExceptionHandling Collection APIs to implement various features and enhancements Implemented Business logic in the middletier using Java classes Java beans Used JIRA for bug tracking Experience in working with version control system GIT Used Maven build tool to maintain Project dependencies Developed the presentation layer using Struts Framework JSP Servlets JavaScript jQuery and AJAX JSPJavaScript are used to create the frontend development The UserInterface UI components are implemented using HTML CSS Designed and implemented RESTfulwebAPIs Compiled the project modules on Maven and deployed them using ANTscript Actively involved in client meetings and requirement gathering sessions to evaluate and analyse the IT business requirement standards Worked with team members and business analysts in project planning sessions to create the working model Implemented Junit and Java SIM test cases to test the application functionality and to ensure code coverage Used Agile and Scrummethodologies to improve the efficiency of the applications Environment Java J2EE JSP Multithreading Eclipse Struts2 XML XSLT XPATH Design Patterns IBM DB2 WebSphere Server web services Soap and Rest UML HTML CSS Education Bachelors Skills Git 3 years java 3 years java script 4 years Jira 3 years Rest 4 years Angular Javascript Node React",
    "extracted_keywords": [
        "Stack",
        "Developer",
        "Full",
        "Stack",
        "span",
        "lDeveloperspan",
        "Full",
        "Stack",
        "Developer",
        "MetLife",
        "Bridgewater",
        "NJ",
        "years",
        "experience",
        "JavaJ2EE",
        "Client",
        "Server",
        "side",
        "Enterprise",
        "Applications",
        "methodologies",
        "enterprisetechnologies",
        "frameworks",
        "design",
        "patterns",
        "Experience",
        "queue",
        "services",
        "JMS",
        "IBM",
        "MQ",
        "Rabbit",
        "MQ",
        "MQ",
        "Apache",
        "Kafka",
        "Experience",
        "Apache",
        "Kafka",
        "publishsubscribe",
        "system",
        "queue",
        "volume",
        "data",
        "Amazon",
        "Web",
        "Services",
        "RDS",
        "EC2",
        "Redshift",
        "SQS",
        "SNS",
        "Cloud",
        "Watch",
        "S3",
        "fault",
        "infrastructure",
        "IAAS",
        "EC2",
        "instances",
        "EBS",
        "API",
        "Gateway",
        "Elastic",
        "Bean",
        "Stalk",
        "ECS",
        "Application",
        "Cloud",
        "Foundry",
        "development",
        "platform",
        "Good",
        "Knowledge",
        "Docker",
        "components",
        "Docker",
        "Engine",
        "Hub",
        "Machine",
        "Compose",
        "Docker",
        "Registry",
        "Docker",
        "Tool",
        "Box",
        "Kubernetes",
        "deployment",
        "manager",
        "Zuul",
        "APIGateway",
        "spring",
        "cloud",
        "routing",
        "resiliency",
        "security",
        "Spring",
        "Boot",
        "web",
        "services",
        "MVC",
        "applications",
        "Developed",
        "Micro",
        "services",
        "API",
        "Spring",
        "Boot",
        "Spring",
        "MVC",
        "exception",
        "handling",
        "Java",
        "Spring",
        "boot",
        "REST",
        "API",
        "use",
        "Exception",
        "Handler",
        "Controller",
        "Advice",
        "annotations",
        "Swagger",
        "Framework",
        "API",
        "Swagger",
        "UI",
        "API",
        "Business",
        "layer",
        "Spring",
        "IOC",
        "AOP",
        "Spring",
        "MVC",
        "layer",
        "DAO",
        "Hibernate",
        "security",
        "functionality",
        "OAuth",
        "Spring",
        "security",
        "SSL",
        "site",
        "minder",
        "SSO",
        "authentication",
        "LDAPOAuth2",
        "tokens",
        "application",
        "Spring",
        "Security",
        "Solid",
        "Experience",
        "Java",
        "ORM",
        "frameworks",
        "Hibernate",
        "JPA",
        "Spring",
        "Data",
        "IBATIS",
        "Hibernatefirstlevel",
        "cache",
        "Second",
        "Level",
        "Cache",
        "Worked",
        "NoSQL",
        "ORM",
        "frameworks",
        "Mongoose",
        "Connector",
        "Cassandra",
        "Node",
        "Driver",
        "building",
        "applications",
        "Maven",
        "Gradle",
        "ANT",
        "hands",
        "experience",
        "CICD",
        "pipelines",
        "Jenkins",
        "Bambooand",
        "GOCD",
        "Experience",
        "Integration",
        "tools",
        "Oracle",
        "SOA",
        "SuiteBPELFusion",
        "Middleware",
        "webmethods",
        "Apache",
        "CAMEL",
        "Grunt",
        "JavaScript",
        "Task",
        "Runner",
        "command",
        "line",
        "tool",
        "JavaScriptobjects",
        "Grunt",
        "tasks",
        "compilation",
        "unit",
        "testing",
        "minifying",
        "files",
        "tests",
        "experience",
        "FrontEnd",
        "UI",
        "technologies",
        "HTML45",
        "XHTML",
        "DHTML",
        "SASS",
        "Bootstrap",
        "Angular",
        "JS",
        "Angular20",
        "web",
        "pages",
        "experience",
        "ClientSide",
        "Scripting",
        "JavaScript",
        "ES6",
        "web",
        "pages",
        "Experience",
        "application",
        "ofclientside",
        "JavaScript",
        "frameworks",
        "Backbone",
        "JS",
        "Ember",
        "JS",
        "Controllers",
        "events",
        "clients",
        "request",
        "Typescripts",
        "objects",
        "Components",
        "NgModules",
        "Providers",
        "Services",
        "classes",
        "arrow",
        "functions",
        "types",
        "view",
        "JavaScript",
        "frameworks",
        "jQuery",
        "React",
        "JS",
        "HandleBarJS",
        "Experience",
        "ReactJS",
        "JavaScript",
        "library",
        "UI",
        "components",
        "ReactJS",
        "DOM",
        "JavaScript",
        "object",
        "apps",
        "performance",
        "client",
        "server",
        "side",
        "frameworks",
        "React",
        "JS",
        "Redux",
        "Flux",
        "architecture",
        "Experience",
        "MVC",
        "Java",
        "script",
        "frameworks",
        "JS",
        "Back",
        "Bone",
        "JS",
        "Ember",
        "JS",
        "KnockOutJS",
        "Experience",
        "MVVM",
        "frameworks",
        "page",
        "applications",
        "Angular",
        "Experience",
        "Angular",
        "features",
        "interfaces",
        "components",
        "services",
        "modules",
        "validations",
        "Angular",
        "Custom",
        "pipes",
        "Experience",
        "Angular",
        "Components",
        "NgModules",
        "Servicesobservablepromises",
        "Directive",
        "Pipes",
        "Experience",
        "Angular",
        "Lazy",
        "Loading",
        "performance",
        "application",
        "encapsulation",
        "custom",
        "elements",
        "Web",
        "Components",
        "Angular",
        "ShadowDOMs",
        "Developed",
        "unit",
        "test",
        "scripts",
        "Karma",
        "Jasmine",
        "Angular",
        "framework",
        "Mocha",
        "Node",
        "JS",
        "API",
        "end",
        "Experience",
        "network",
        "applications",
        "Nodejs",
        "approach",
        "model",
        "event",
        "loops",
        "understanding",
        "Serverside",
        "JavaScript",
        "structures",
        "NodeJS",
        "ExpressJS",
        "Experience",
        "applications",
        "SOA",
        "architecture",
        "SOAP",
        "XML",
        "messagecommunication",
        "Expressjs",
        "development",
        "web",
        "services",
        "middleware",
        "configurations",
        "REST",
        "API",
        "services",
        "Node",
        "JS",
        "Express",
        "JS",
        "BodyParse",
        "node",
        "modules",
        "web",
        "application",
        "JSON",
        "data",
        "XML",
        "documents",
        "XSLT",
        "CSS",
        "content",
        "HTML",
        "GUI",
        "SOAP",
        "services",
        "Apache",
        "CXF",
        "NoSQL",
        "database",
        "Mongo",
        "DB",
        "pipeline",
        "Mongo",
        "DB",
        "Cluster",
        "UsedHystrix",
        "building",
        "fault",
        "resilience",
        "systems",
        "Load",
        "Balancing",
        "servers",
        "Eureka",
        "Ribbon",
        "Excellent",
        "experience",
        "Relational",
        "databases",
        "MySQL",
        "Oracle",
        "SQL",
        "Server",
        "DB2",
        "SQL",
        "DB",
        "Cassandra",
        "Experience",
        "SQL",
        "Queries",
        "Stored",
        "Procedures",
        "Triggers",
        "Cursors",
        "Functions",
        "SE8",
        "stream",
        "lambda",
        "expressions",
        "interface",
        "type",
        "annotations",
        "core",
        "concepts",
        "Multithreading",
        "Transaction",
        "Management",
        "Exception",
        "Handling",
        "Experience",
        "architect",
        "design",
        "build",
        "models",
        "design",
        "patterns",
        "Session",
        "Facade",
        "Service",
        "Locator",
        "Singleton",
        "Abstract",
        "Factory",
        "Factory",
        "Method",
        "depth",
        "knowledge",
        "Splunkarchitecture",
        "components",
        "Expert",
        "Splunk",
        "Development",
        "Configuration",
        "Administration",
        "Kibana",
        "Elasticsearch",
        "ELK",
        "Experience",
        "Deploying",
        "Configuring",
        "Application",
        "Web",
        "Servers",
        "Oracle",
        "WebLogic",
        "IBM",
        "WebSphere",
        "JBoss",
        "Glassfish",
        "Apache",
        "Tomcat",
        "Wrote",
        "unit",
        "tests",
        "JavaScript",
        "Applications",
        "Karma",
        "Jasmine",
        "Angular",
        "Protractor",
        "Mocha",
        "Chai",
        "testing",
        "frameworks",
        "test",
        "cases",
        "test",
        "plans",
        "TestNG",
        "Spock",
        "Mockito",
        "JunitPower",
        "mock",
        "HQL",
        "DB",
        "databases",
        "rules",
        "Business",
        "Rules",
        "Engines",
        "Drools",
        "Proficient",
        "WebPack",
        "JavaScript",
        "modules",
        "log4j",
        "framework",
        "APIs",
        "Java",
        "Apache",
        "Software",
        "License",
        "version",
        "control",
        "software",
        "SVN",
        "GIT",
        "GITLAB",
        "CVS",
        "Big",
        "Bucket",
        "code",
        "repositories",
        "SDLC",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "Waterfall",
        "SCRUM",
        "models",
        "US",
        "employer",
        "Work",
        "Experience",
        "Full",
        "Stack",
        "Developer",
        "MetLife",
        "Bridgewater",
        "NJ",
        "July",
        "Present",
        "Description",
        "Metlife",
        "Inc",
        "corporation",
        "Metropolitan",
        "Life",
        "Insurance",
        "Company",
        "MLIC2",
        "MetLife",
        "affiliates",
        "MetLife",
        "providers",
        "insurance",
        "annuities",
        "employee",
        "benefit",
        "programs",
        "customers",
        "countries",
        "solutions",
        "business",
        "problems",
        "MetLife",
        "standards",
        "toplevel",
        "expert",
        "development",
        "lifecycle",
        "ability",
        "code",
        "value",
        "business",
        "Responsibilities",
        "data",
        "transformer",
        "legacy",
        "data",
        "source",
        "tables",
        "Avro",
        "format",
        "Kafka",
        "Camel",
        "file",
        "routes",
        "host",
        "locations",
        "consumer",
        "logs",
        "Kafka",
        "Metricsntact",
        "Kafka",
        "Manager",
        "Created",
        "AWS",
        "Lambda",
        "EC2",
        "AWS",
        "environment",
        "security",
        "groups",
        "Amazon",
        "VPCs",
        "Spring",
        "CloudNetflixOSSStack",
        "NetflixZuul",
        "API",
        "Gateway",
        "Eureka",
        "Service",
        "Registry",
        "proxy",
        "infrastructure",
        "Hystrix",
        "Circuit",
        "Breaker",
        "fault",
        "tolerance",
        "Dockerized",
        "Spring",
        "Boot",
        "application",
        "dev",
        "machine",
        "PCF",
        "Cloud",
        "Foundry",
        "Dockerimage",
        "services",
        "Docker",
        "file",
        "delivery",
        "pipeline",
        "containers",
        "AWSCode",
        "Pipeline",
        "Amazon",
        "ECS",
        "DockerizedSpring",
        "Boot",
        "application",
        "AWS",
        "Elastic",
        "Bean",
        "Stalk",
        "docker",
        "containers",
        "server",
        "nodes",
        "master",
        "node",
        "Kubernetes",
        "Developed",
        "RESTFUL",
        "web",
        "services",
        "Spring",
        "Boot",
        "Apace",
        "CXF",
        "framework",
        "annotation",
        "approach",
        "application",
        "Spring",
        "Boot",
        "Spring",
        "bean",
        "profiling",
        "Spring",
        "Boot",
        "configuration",
        "starter",
        "Maven",
        "configuration",
        "metrics",
        "configuration",
        "Spring",
        "Boot",
        "CRUD",
        "backend",
        "application",
        "Migrating",
        "web",
        "services",
        "Spring",
        "Boot",
        "Jersey",
        "framework",
        "Microservices",
        "APIs",
        "services",
        "Spring",
        "Boot",
        "code",
        "Swagger",
        "API",
        "documentation",
        "Micro",
        "Service",
        "React",
        "JS",
        "end",
        "Spring",
        "Boot",
        "services",
        "end",
        "Modules",
        "Frontend",
        "Backend",
        "framework",
        "Gradle",
        "build",
        "tool",
        "application",
        "web",
        "servers",
        "JBoss",
        "Integration",
        "automation",
        "batch",
        "run",
        "job",
        "Jenkins",
        "Worked",
        "Jenkins",
        "Continuous",
        "Integration",
        "Continuous",
        "Deployment",
        "CICD",
        "Git",
        "version",
        "control",
        "Jenkins",
        "Continuous",
        "Integration",
        "Continuous",
        "Deployment",
        "CICD",
        "development",
        "design",
        "implementation",
        "part",
        "application",
        "HTML5",
        "CSS3LESS",
        "AJAX",
        "Bootstrap",
        "view",
        "React",
        "JS",
        "Redux",
        "libraries",
        "Configured",
        "ReactRedux",
        "state",
        "management",
        "ReactRouter",
        "navigation",
        "Experience",
        "Nodejs",
        "program",
        "program",
        "service",
        "number",
        "requests",
        "servers",
        "Server",
        "email",
        "SSO",
        "integration",
        "Nodejs",
        "StoreRedux",
        "state",
        "tree",
        "application",
        "ReducerRedux",
        "actions",
        "Axios",
        "AJAX",
        "request",
        "data",
        "backend",
        "user",
        "interface",
        "input",
        "data",
        "Mocha",
        "test",
        "runner",
        "Chai",
        "test",
        "framework",
        "React",
        "JS",
        "components",
        "Webpack",
        "module",
        "bundler",
        "Babel",
        "java",
        "script",
        "compiler",
        "React",
        "JS",
        "Webpack",
        "module",
        "bundler",
        "Babel",
        "java",
        "script",
        "compiler",
        "accompanyingReact",
        "JS",
        "Experience",
        "RESTfulweb",
        "services",
        "Node",
        "JS",
        "programming",
        "JS",
        "Swagger",
        "specification",
        "REST",
        "APIs",
        "description",
        "web",
        "services",
        "clients",
        "Bottle",
        "microframework",
        "service",
        "WADL",
        "Web",
        "Application",
        "Description",
        "Language",
        "resources",
        "services",
        "relationships",
        "Junit",
        "Mockito",
        "unit",
        "testing",
        "web",
        "application",
        "JWT",
        "JSON",
        "Web",
        "Tokens",
        "tokens",
        "claims",
        "application",
        "authentication",
        "services",
        "NoSQL",
        "database",
        "Mongo",
        "DB",
        "pipeline",
        "Mongo",
        "DB",
        "Cluster",
        "Git",
        "version",
        "code",
        "GitHub",
        "Splunk",
        "application",
        "log",
        "errors",
        "exceptions",
        "business",
        "logic",
        "analytics",
        "Behavioral",
        "Integration",
        "testing",
        "Cucumber",
        "Selenium",
        "Environment",
        "JavaScript",
        "React",
        "JSRedux",
        "HTML5",
        "CSS3LESS",
        "AJAX",
        "Bootstrap",
        "jQuery",
        "Spring",
        "Security",
        "Rabbit",
        "MQ",
        "Spring",
        "Data",
        "Spring",
        "Batch",
        "Quartz",
        "Scheduler",
        "Hibernate",
        "Spring",
        "Boot",
        "Micro",
        "services",
        "Netflix",
        "OSS",
        "Eclipse",
        "Java",
        "EE",
        "IDE",
        "Jenkins",
        "Spring",
        "CloudNetflix",
        "Splunk",
        "MySQL",
        "Docker",
        "Apache",
        "tomcat",
        "Jenkins",
        "Netflix",
        "Zuul",
        "API",
        "Ribbon",
        "Eureka",
        "Hystrix",
        "JUnit",
        "Mockito",
        "Mocha",
        "Chai",
        "Selenium",
        "Cucumber",
        "Cassandra",
        "DB",
        "Cassandra",
        "Node",
        "Connector",
        "Gradle",
        "JBoss",
        "JIRA",
        "JWT",
        "WADL",
        "Webpack",
        "Babel",
        "Full",
        "Stack",
        "Developer",
        "Cummins",
        "Columbus",
        "August",
        "June",
        "Description",
        "Cummins",
        "American",
        "Fortune",
        "Corporation",
        "manufactures",
        "engines",
        "filtration",
        "power",
        "generation",
        "products",
        "Cummins",
        "engines",
        "equipment",
        "controls",
        "air",
        "filtration",
        "emission",
        "control",
        "power",
        "generation",
        "systems",
        "trucks",
        "website",
        "functionality",
        "retailers",
        "transactions",
        "engines",
        "Responsibilities",
        "Apache",
        "Kafka",
        "cluster",
        "system",
        "APIs",
        "microservices",
        "Splunk",
        "search",
        "processing",
        "language",
        "SPL",
        "queries",
        "dashboard",
        "Log4J",
        "AWSLambda",
        "functions",
        "AWS",
        "config",
        "rules",
        "Nodejs",
        "Lambda",
        "function",
        "text",
        "object",
        "methods",
        "Context",
        "object",
        "properties",
        "Nodejs",
        "EC2",
        "instances",
        "AWS",
        "environment",
        "security",
        "groups",
        "Amazon",
        "VPCs",
        "Netflix",
        "OSS",
        "Eureka",
        "servicein",
        "spring",
        "cloud",
        "service",
        "registration",
        "discovery",
        "spring",
        "config",
        "configuration",
        "docker",
        "images",
        "docker",
        "containers",
        "images",
        "Dockerhub",
        "repository",
        "Dockerimages",
        "Docker",
        "containers",
        "images",
        "Docker",
        "hub",
        "Dockerized",
        "Spring",
        "Boot",
        "application",
        "AWS",
        "Bean",
        "Stalk",
        "EBS",
        "Deployment",
        "Automation",
        "micro",
        "services",
        "image",
        "Private",
        "Docker",
        "registry",
        "Kubernetes",
        "Cluster",
        "Worked",
        "features",
        "spring",
        "Spring",
        "AOP",
        "Spring",
        "Transaction",
        "management",
        "Spring",
        "Bean",
        "Factory",
        "IOC",
        "Configured",
        "Bean",
        "properties",
        "dependency",
        "injection",
        "application",
        "REST",
        "Micro",
        "services",
        "CRUD",
        "capabilities",
        "Spring",
        "Boot",
        "Spring",
        "Boot",
        "cloud",
        "Micro",
        "Services",
        "Spring",
        "application",
        "configuration",
        "RESTFUL",
        "web",
        "services",
        "Spring",
        "Boot",
        "Jersey",
        "framework",
        "SpringDataJPA",
        "ORM",
        "framework",
        "MYSQL",
        "database",
        "createreactapp",
        "product",
        "update",
        "Webpack",
        "babel",
        "build",
        "configurations",
        "Swagger",
        "specification",
        "REST",
        "APIs",
        "description",
        "RESTFUL",
        "web",
        "services",
        "clients",
        "GIT",
        "version",
        "control",
        "Jenkins",
        "Continuous",
        "Integration",
        "Continuous",
        "Deployment",
        "CICD",
        "Git",
        "version",
        "code",
        "GitHub",
        "Web",
        "pages",
        "scratch",
        "HTML5",
        "CSS",
        "SASS",
        "JavaScript",
        "Angular",
        "component",
        "router",
        "navigation",
        "Angular",
        "directives",
        "components",
        "pipes",
        "Angular",
        "post",
        "filesimages",
        "AWS",
        "S3",
        "Frontend",
        "NPM",
        "package",
        "AWSSDK",
        "Typescript",
        "components",
        "services",
        "REST",
        "APIs",
        "architecture",
        "Angular",
        "development",
        "services",
        "Angular",
        "property",
        "service",
        "dependency",
        "injection",
        "components",
        "page",
        "applications",
        "SPA",
        "REACT",
        "JS",
        "design",
        "ISOMORPHIC",
        "website",
        "Tablets",
        "users",
        "ReactJS",
        "Application",
        "ReactJS",
        "Nodejs",
        "NPM",
        "gulp",
        "directories",
        "view",
        "Redux",
        "library",
        "NPM",
        "Node",
        "Package",
        "Manager",
        "screens",
        "end",
        "Reactjs",
        "Used",
        "Postman",
        "tool",
        "API",
        "workflow",
        "files",
        "NodeJS",
        "ExpressJS",
        "Performed",
        "Verification",
        "validation",
        "process",
        "code",
        "use",
        "Jasmine",
        "KarmaJavaScript",
        "testing",
        "framework",
        "scenarios",
        "Angular",
        "applications",
        "Node",
        "package",
        "manager",
        "NPM",
        "Gulp",
        "Worked",
        "SASS",
        "Style",
        "sheets",
        "ZUUL",
        "API",
        "Gateway",
        "Authentication",
        "Hystrix",
        "Circuit",
        "Breaker",
        "fault",
        "tolerance",
        "Node",
        "JS",
        "Angular",
        "server",
        "JSON",
        "data",
        "UI",
        "development",
        "server",
        "Wrote",
        "services",
        "Angular2",
        "user",
        "data",
        "Mongo",
        "DB",
        "application",
        "devices",
        "HTTP",
        "service",
        "application",
        "scratch",
        "Mongo",
        "DB",
        "server",
        "setup",
        "Expressjs",
        "server",
        "development",
        "Mongoose",
        "API",
        "Mongo",
        "DB",
        "Node",
        "JS",
        "Angular",
        "CLI",
        "NPM",
        "Angular",
        "application",
        "Authenticating",
        "Users",
        "security",
        "web",
        "services",
        "JIRA",
        "bug",
        "system",
        "history",
        "bugsissues",
        "basis",
        "Environment",
        "Angular",
        "HTML5",
        "CSS",
        "JavaScript",
        "AWS",
        "S3",
        "NPM",
        "React",
        "JS",
        "Redux",
        "Gulp",
        "Expressjs",
        "Web",
        "Services",
        "Webpack",
        "Babel",
        "Jasmine",
        "Karma",
        "Spring",
        "Boot",
        "Jersey",
        "Micro",
        "Services",
        "Rest",
        "Services",
        "Node",
        "JS",
        "Cassandra",
        "GitHub",
        "JIRA",
        "Jenkins",
        "Swagger",
        "Netflix",
        "OSS",
        "Eureka",
        "ribbon",
        "Zuul",
        "API",
        "gateway",
        "Hystrix",
        "circuit",
        "breaker",
        "Docker",
        "Java",
        "Developer",
        "Dominos",
        "Inc",
        "Ann",
        "Arbor",
        "MI",
        "October",
        "July",
        "Description",
        "Dominos",
        "Inc",
        "pizza",
        "restaurant",
        "chain",
        "corporationis",
        "Dominos",
        "Farms",
        "Office",
        "Park",
        "Ann",
        "Arbor",
        "Michigan",
        "United",
        "States",
        "Dominos",
        "role",
        "features",
        "orders",
        "devices",
        "Dominos",
        "Pizza",
        "customers",
        "orders",
        "benefits",
        "Ease",
        "access",
        "Convenience",
        "order",
        "orders",
        "use",
        "sales",
        "assistant",
        "Responsibilities",
        "Futures",
        "Spring",
        "Framework",
        "calls",
        "application",
        "Rest",
        "Web",
        "services",
        "Spring",
        "MVC",
        "services",
        "servlets",
        "Spring",
        "MVC",
        "Responsible",
        "Spring",
        "MVC",
        "REST",
        "web",
        "services",
        "application",
        "application",
        "Spring",
        "framework",
        "features",
        "Spring",
        "Dependency",
        "injection",
        "Spring",
        "Beans",
        "Spring",
        "Security",
        "Spring",
        "JPA",
        "Spring",
        "AOP",
        "Spring",
        "IOC",
        "Spring",
        "Web",
        "flow",
        "MVC",
        "Used",
        "Spring",
        "Gem",
        "Fire",
        "Cache",
        "Transactions",
        "Springs",
        "Declarative",
        "Transaction",
        "Management",
        "annotations",
        "Spring",
        "Transactions",
        "application",
        "Session",
        "beans",
        "business",
        "logic",
        "tier",
        "level",
        "Spring",
        "IOC",
        "core",
        "business",
        "application",
        "logic",
        "Hibernate",
        "persistence",
        "framework",
        "Spring",
        "Batch",
        "volumes",
        "records",
        "transaction",
        "management",
        "job",
        "processing",
        "statistics",
        "job",
        "restart",
        "skip",
        "resource",
        "management",
        "application",
        "Quartzscheduler",
        "Spring",
        "Batch",
        "framework",
        "custom",
        "readers",
        "writers",
        "application",
        "Spring",
        "Batch",
        "framework",
        "data",
        "databases",
        "Spring",
        "Batch",
        "xml",
        "files",
        "data",
        "base",
        "records",
        "custom",
        "readers",
        "processors",
        "Validators",
        "Field",
        "Extractors",
        "Spring",
        "Batch",
        "applications",
        "Spring",
        "Security",
        "authorization",
        "authentication",
        "CORS",
        "security",
        "issues",
        "user",
        "interface",
        "screen",
        "functionality",
        "user",
        "requirements",
        "web",
        "pages",
        "HTML",
        "CSSBootstrap",
        "jQuery",
        "AJAX",
        "application",
        "UI",
        "modules",
        "Backbone",
        "JS",
        "dependencyof",
        "Underscore",
        "JS",
        "combination",
        "Handlebar",
        "JS",
        "Backbone",
        "JS",
        "set",
        "datastructuring",
        "models",
        "collections",
        "user",
        "interface",
        "views",
        "URLs",
        "primitives",
        "work",
        "flow",
        "design",
        "Performed",
        "lot",
        "DOM",
        "manipulations",
        "JS",
        "jQuery",
        "loading",
        "content",
        "webpages",
        "jQuery",
        "Rich",
        "Internet",
        "Applications",
        "RIA",
        "AJAX",
        "mechanism",
        "JSON",
        "data",
        "exchange",
        "tool",
        "Mockup",
        "designs",
        "functionalities",
        "JavaScript",
        "jQuery",
        "Log4J",
        "log",
        "runtime",
        "exceptions",
        "queries",
        "app",
        "MySQL",
        "database",
        "performance",
        "Developed",
        "procedures",
        "MySQL",
        "traffic",
        "servers",
        "clients",
        "Environment",
        "HTML",
        "CSS",
        "jQuery",
        "Bootstrap",
        "CSS",
        "Ajax",
        "jQuery",
        "JSON",
        "Spring",
        "MVC",
        "Spring",
        "Gem",
        "Fire",
        "Spring",
        "Batch",
        "Framework",
        "Spring",
        "Security",
        "Drools",
        "Engine",
        "MYSQL",
        "Java",
        "Developer",
        "Faujnet",
        "Solutions",
        "Private",
        "Limited",
        "Hyderabad",
        "Telangana",
        "May",
        "May",
        "India",
        "Description",
        "Faujnet",
        "career",
        "management",
        "firm",
        "professionals",
        "career",
        "membership",
        "site",
        "Global",
        "Industry",
        "community",
        "design",
        "development",
        "management",
        "Java",
        "applications",
        "collaborate",
        "web",
        "developers",
        "software",
        "engineers",
        "business",
        "applications",
        "software",
        "websites",
        "Responsibilities",
        "Struts",
        "framework",
        "production",
        "support",
        "issues",
        "applications",
        "Development",
        "Action",
        "Forms",
        "Action",
        "Servlets",
        "Action",
        "Action",
        "Forms",
        "Struts",
        "framework",
        "Strut",
        "spring",
        "frame",
        "applications",
        "project",
        "Singleton",
        "Factory",
        "Design",
        "Patterns",
        "Strut",
        "Validator",
        "frame",
        "works",
        "serverside",
        "validations",
        "business",
        "components",
        "user",
        "interfaces",
        "JSPs",
        "Strut",
        "Tiles",
        "framework",
        "User",
        "Interface",
        "JSPs",
        "Struts",
        "custom",
        "tags",
        "JavaScript",
        "validation",
        "data",
        "spring",
        "components",
        "action",
        "Servlets",
        "actions",
        "Model",
        "View",
        "View",
        "Resolver",
        "JavaScript",
        "web",
        "page",
        "validation",
        "Struts",
        "Validator",
        "serverside",
        "validation",
        "performance",
        "Java",
        "code",
        "singleton",
        "mediator",
        "visitor",
        "facade",
        "observer",
        "template",
        "factory",
        "publish",
        "design",
        "pattern",
        "coding",
        "JavaScript",
        "validations",
        "JDBC",
        "Servlets",
        "SQL",
        "Server",
        "database",
        "SQL",
        "PLSQL",
        "database",
        "operations",
        "Web",
        "Sphere",
        "action",
        "classes",
        "action",
        "form",
        "classes",
        "JSPs",
        "Strut",
        "Tag",
        "libraries",
        "configxml",
        "functionality",
        "TLD",
        "Tag",
        "Library",
        "Descriptor",
        "JSTL",
        "tags",
        "data",
        "JSPs",
        "Strut",
        "framework",
        "JDBC",
        "Connection",
        "data",
        "access",
        "Environment",
        "Java",
        "v6",
        "JavaScript",
        "v18",
        "JSP",
        "spring",
        "Struts",
        "EJB",
        "SQL",
        "PLSQL",
        "JDBC",
        "Eclipse",
        "Web",
        "Sphere",
        "Associate",
        "Software",
        "Engineer",
        "Intergraph",
        "Hyderabad",
        "Telangana",
        "January",
        "April",
        "India",
        "Description",
        "Intergraph",
        "Corporation",
        "software",
        "development",
        "services",
        "company",
        "enterprise",
        "engineering",
        "software",
        "businesses",
        "governments",
        "organizations",
        "world",
        "role",
        "development",
        "life",
        "cycles",
        "code",
        "designs",
        "compliance",
        "specifications",
        "applications",
        "JAVA",
        "SpringFramework",
        "Spring",
        "MVC",
        "Spring",
        "Core",
        "procedures",
        "triggers",
        "PLSQL",
        "template",
        "application",
        "database",
        "Maven",
        "tool",
        "Project",
        "dependencies",
        "requirement",
        "analysis",
        "enhancements",
        "modules",
        "development",
        "JavaJ2EE",
        "components",
        "JSP",
        "Servlets",
        "JDBC",
        "CoreJava",
        "concepts",
        "MultiThreading",
        "ExceptionHandling",
        "Collection",
        "APIs",
        "features",
        "enhancements",
        "Business",
        "logic",
        "middletier",
        "Java",
        "classes",
        "Java",
        "beans",
        "JIRA",
        "bug",
        "Experience",
        "version",
        "control",
        "system",
        "GIT",
        "Maven",
        "tool",
        "Project",
        "dependencies",
        "presentation",
        "layer",
        "Struts",
        "Framework",
        "JSP",
        "Servlets",
        "JavaScript",
        "jQuery",
        "AJAX",
        "JSPJavaScript",
        "frontend",
        "development",
        "UserInterface",
        "UI",
        "components",
        "HTML",
        "CSS",
        "RESTfulwebAPIs",
        "project",
        "modules",
        "Maven",
        "ANTscript",
        "client",
        "meetings",
        "requirement",
        "gathering",
        "sessions",
        "IT",
        "business",
        "requirement",
        "standards",
        "team",
        "members",
        "business",
        "analysts",
        "project",
        "planning",
        "sessions",
        "model",
        "Junit",
        "Java",
        "SIM",
        "test",
        "cases",
        "application",
        "functionality",
        "code",
        "coverage",
        "Agile",
        "Scrummethodologies",
        "efficiency",
        "applications",
        "Environment",
        "Java",
        "J2EE",
        "JSP",
        "Multithreading",
        "Eclipse",
        "Struts2",
        "XML",
        "XSLT",
        "XPATH",
        "Design",
        "Patterns",
        "IBM",
        "DB2",
        "WebSphere",
        "Server",
        "web",
        "services",
        "Soap",
        "Rest",
        "UML",
        "HTML",
        "CSS",
        "Education",
        "Bachelors",
        "Skills",
        "Git",
        "years",
        "years",
        "script",
        "years",
        "Jira",
        "years",
        "Rest",
        "years",
        "Angular",
        "Javascript",
        "Node",
        "React"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T20:45:16.915618",
    "resume_data": "Full Stack Developer Full Stack span lDeveloperspan Full Stack Developer MetLife Bridgewater NJ Over 7 years of experience in designing and developing JavaJ2EE Client and Server side Enterprise Applications using objectoriented methodologies enterprisetechnologies frameworks and design patterns Experience in messaging queue services like JMS IBM MQ Rabbit MQ Active MQ and Apache Kafka Experience in developing Apache Kafka as a distributed publishsubscribe messaging system and a robust queue that can handle a high volume of data Involved in using Amazon Web Services like RDS EC2 Redshift SQS SNS Cloud Watch and S3 Designed and created highly scalable highly available fault tolerant highly secured distributed infrastructure IAAS using EC2 instances S3 EBS API Gateway Elastic Bean Stalk ECS Deployed our Application on Pivotal Cloud Foundry which is used to reduce the development overhead by providing a ready to use platform Good Knowledge on Docker components like Docker Engine Hub Machine Compose and Docker Registry and worked on configuring Docker Tool Box and Kubernetes as deployment manager Implemented the Zuul APIGateway in the spring cloud for the dynamic routing monitoring resiliency and security Used Spring Boot to develop and deploy both RESTful web services and MVC applications Developed Micro services based on RESTful API utilizing Spring Boot with Spring MVC Implemented exception handling in Java Spring boot for REST API by making use of Exception Handler and Controller Advice annotations Using Swagger Framework actualizing the RESTful API and Swagger gives the rich UI to test API Implemented Business layer using Spring 40 IOC AOP Spring MVC and persistent layer using DAO and Hibernate Implemented security functionality OAuth 20 Spring security SSL and site minder SSO Implemented secure authentication with LDAPOAuth2 for generating tokens in the application using Spring Security Solid Experience with Java based ORM frameworks such as Hibernate JPA Spring Data and IBATIS Implemented Hibernatefirstlevel cache and Second Level Cache Worked with NoSQL based ORM frameworks like Mongoose Connector and Cassandra Node Driver Experienced in building applications using Maven Gradle and ANT tools Extensive hands on experience in setting up CICD pipelines using Jenkins Bambooand GOCD Experience in Integration tools Oracle SOA SuiteBPELFusion Middleware webmethods and Apache CAMEL Involved in using Grunt as a JavaScript Task Runner which can be used as a command line tool for JavaScriptobjects Grunt can perform repetitive tasks very easily such as compilation unit testing minifying files running tests etc Extensive experience in FrontEnd UI technologies like HTML45 XHTML DHTML CSS23using SASS and LESS Bootstrap Angular JS Angular20 in developing dynamic and responsive web pages Good experience in ClientSide Scripting like JavaScript ES6 to build highly interactive web pages Experience in application ofclientside JavaScript frameworks such as Backbone JS Ember JS to create Controllers to handle events triggered by clients and send request to server Developed various Typescripts ES6 objects including Components NgModules Providers Services and classes using arrow functions and optional types Extensively used view rendering JavaScript frameworks like jQuery React JS and HandleBarJS Experience in ReactJS which is JavaScript library used for building reusable UI components Used ReactJS virtual DOM which is a JavaScript object This will improve apps performance and it can be used on client and server side as well as with other frameworks Implemented React JS and working with Redux and Flux architecture Experience in developing MVC based Java script frameworks like Angular JS Back Bone JS Ember JS and KnockOutJS Experience in using MVVM frameworks and developing single page applications using Angular 2 Experience in developing Angular 2 advanced features such as interfaces nested components services routing and modules Experience in developing clientside validations using Angular 2 and in developing Custom pipes Experience in designing and developing various Angular 2 Components NgModules Servicesobservablepromises Directive and Pipes Experience in using the Angular 2 Lazy Loading to increase the performance of the application Achieved the encapsulation of custom elements in Web Components using Angular ShadowDOMs Developed unit test scripts using Karma and Jasmine for Angular 2 framework and Mocha for Node JS API end points Experience in developing network applications using Nodejs with an eventdriven Asynchronous approach and single threaded model with event loops Good understanding on Serverside JavaScript structures like NodeJS with ExpressJS Experience in applications using SOA architecture with SOAP and used XML for messagecommunication Used Expressjs for development of RESTful web services and middleware configurations Developed REST API services using Node JS Express JS BodyParse and other node modules to serve the web application with JSON data Extensively used XML documents with XSLT and CSS to translate the content into HTML to present to GUI Developed SOAP services using Axis2 and Apache CXF Worked with NoSQL database Mongo DB and created pipeline from Mongo DB Cluster UsedHystrix in the building fault tolerant and resilience in Distributed systems Implemented Load Balancing of the servers using Eureka and Ribbon Excellent experience with Relational databases like MySQL Oracle SQL Server DB2 and No SQL databases likeCouch DB and Cassandra Experience in writing complex SQL Queries Stored Procedures Triggers Cursors and Functions Used java SE8 features like stream lambda expressions functional interface and type annotations andworked with core java concepts like Multithreading Transaction Management and Exception Handling Experience in architect design build and prototyping models using the design patterns like Session Facade Service Locator Singleton Abstract Factory and Factory Method In depth and extensive knowledge of Splunkarchitecture and various components Expert in Splunk Development Configuration and Administration and used Kibana to view using Elasticsearch ELK Experience in Deploying and Configuring Application Web Servers such as Oracle WebLogic IBM WebSphere JBoss Glassfish and Apache Tomcat Wrote unit tests for JavaScript based Applications using Karma Jasmine Angular Protractor Mocha and Chai testing frameworks Involved in writing test cases and test plans using TestNG Spock Mockito and JunitPower mock HQL embedded DB to test databases Proficient in creating rules using Business Rules Engines Drools ILOG Proficient in using the WebPack to compile JavaScript modules Used log4j which is a reliable fast and flexible logging framework APIs written in Java which is distributed under the Apache Software License Used various version control software such as SVN GIT GITLAB CVS Big Bucket for maintaining code repositories Worked on various SDLC Software Development Life Cycle from Waterfall to Agile SCRUM models Authorized to work in the US for any employer Work Experience Full Stack Developer MetLife Bridgewater NJ July 2018 to Present Description Metlife Inc is the holding corporation for the Metropolitan Life Insurance Company MLIC2 better known as MetLife and its affiliates MetLife is among the largest global providers of insurance annuities and employee benefit programs with 90 million customers in over 60 countries Designed and built technical solutions for complex business problems based on MetLife standards functioning as a toplevel expert throughout the development lifecycle to ensure the ability of the code to deliver value to the business Responsibilities Developed data transformer for converting legacy data from source tables to Avro format and fed into Kafka using Camel to process the file for multiple routes to different host locations Handled consumer logs and monitor Kafka Metricsntact using Kafka Manager Created AWS Lambda EC2 instances provisioning on AWS environment and implemented security groups administered Amazon VPCs Implemented Spring CloudNetflixOSSStack along with NetflixZuul API Gateway with Eureka Service Registry for reverse proxy infrastructure and Hystrix Circuit Breaker for fault tolerance Deployed the Dockerized Spring Boot application that is intended to be run on dev local machine using PCF Pivotal Cloud Foundry Deployed the Dockerimage of services building Docker file and build a continuous delivery pipeline for containers using AWSCode Pipeline and Amazon ECS Deployed the DockerizedSpring Boot application using AWS Elastic Bean Stalk Deployed docker containers on server nodes with master node using Kubernetes Developed RESTFUL web services using Spring Boot and Apace CXF framework Used complete annotation driven approach to develop the application using Spring Boot and was involved in setting up the Spring bean profiling Worked with Spring Boot for automatic configuration and starter for Maven configuration and performed metrics and externalized configuration Implemented Spring Boot to create a CRUD backend for our Reactfronted application Migrating existing Designed and developed RESTful web services using Spring Boot and Jersey framework Extensively worked on Microservices for creating APIs services with Spring Boot to modularize code and implemented Swagger for dynamic API documentation Developed a Micro Service Oriented applicationwith React JS in the front end and Spring Boot services in the back end Modules for the Frontend are integrated to Backend using iBATIS framework Gradle build tool is used to deploy the application on the web servers like JBoss Integration of automation batch run job with Jenkins Worked with Jenkins Continuous Integration and Continuous Deployment CICD Used Git for version control and Jenkins for Continuous Integration and Continuous Deployment CICD Involved in development design and implementation front end part of the widgetbased application using HTML5 CSS3LESS AJAX Bootstrap 40 For clientside view rendering servicesused React JS typically used various predefined Redux libraries Configured ReactRedux for state management and ReactRouter for programmatic navigation Experience in developing Nodejs in a single threaded program and the same program can provide service to a much larger number of requests than traditional servers like ApacheHTTP Server Implemented email and SSO integration using Nodejs for backend Implemented StoreRedux for holding the whole state tree of application and ReducerRedux for describing actions Used Axios AJAX request to data from backend based on user interface input and post updated data back to backend Mocha test runner and Chai test framework are used to test React JS components Used Webpack module bundler and Babel java script compiler in accompanying React JS Webpack module bundler and Babel java script compiler used accompanyingReact JS Experience in developing and publishing RESTfulweb services using Node JS Asynchronous programming and express JS Used Swagger specification for documenting REST APIs which exposes description of a RESTful web services to different clients Bottle microframework implemented with RESTful service and used WADL Web Application Description Language for modelling the resources provided by the services and relationships between them Junit is implemented along with Mockito to perform unit testing on our RESTful web application Implemented JWT JSON Web Tokens for creating tokens to assert claims in the application and thus providing authentication of RESTful services Worked with NoSQL database Mongo DB and created pipeline from Mongo DB Cluster Extensively used Git for version controlling and regularly Pushed the code to GitHub Splunk is implemented in the application for log errors exceptions and business logic and log analytics Behavioral and Integration testing is done using Cucumber and Selenium respectively Environment JavaScript React JSRedux HTML5 CSS3LESS AJAX Bootstrap jQuery Spring Security Rabbit MQ Spring Data Spring Batch Quartz Scheduler Hibernate Spring Boot Micro services RESTful services Netflix OSS Eclipse Java EE IDE Jenkins Spring CloudNetflix Splunk MySQL Docker Apache tomcat Jenkins Netflix Zuul API Ribbon Eureka Hystrix JUnit Mockito Mocha Chai Selenium Cucumber Cassandra DB Cassandra Node Connector Gradle JBoss JIRA JWT WADL Webpack Babel Full Stack Developer Cummins Columbus IN August 2017 to June 2018 Description Cummins is an American Fortune 500 Corporation that designs manufactures and distributes engines filtration and power generation products Cummins also serves engines and related equipment including controls air handling filtration emission control electrical power generation systems and semi trucks The website functionality was extended by providing the retailers to login and perform online transactions like ordering engines online Responsibilities Used Apache Kafka in cluster as messaging system between the APIs and microservices and worked on Splunk search processing language SPL queries reports dashboard and logging using Log4J Created AWSLambda functions for AWS config rules using Nodejs Heavily used Lambda function on text object methods Context object properties using Nodejs Deployed EC2 instances provisioning on AWS environment and implemented security groups administered Amazon VPCs Worked with Netflix OSS Eureka servicein spring cloud for service registration and discovery and spring config for centralized configuration Created various docker images from the docker containers and published these images in the Dockerhub repository Created various Dockerimages from the Docker containers and published these images in the Docker hub repositoryDeployed the Dockerized Spring Boot application using AWS Elastic Bean Stalk EBS Worked on Deployment Automation of all micro services to pull image from Private Docker registry and deploy to Kubernetes Cluster Worked with various features in spring such as Spring AOP Spring Transaction management Implemented Spring Bean Factory using IOC Configured Bean properties using dependency injection Migrating existing application into REST based Micro services to provide all the CRUD capabilities using Spring Boot Used Spring Boot which is radically faster in building cloud Micro Services and develop Spring based application with very less configuration Designed and developed RESTFUL web services using Spring Boot and Jersey framework Used SpringDataJPA as the ORM framework to connect with MYSQL database Utilized createreactapp to launch product to stay update with the most current Webpack and babel build configurations Used Swagger specification for documenting REST APIs which exposes description of a RESTFUL web services to different clients Used GIT for version control and Jenkins for Continuous Integration and Continuous Deployment CICD Extensively used Git for version controlling and regularly pushed the code to GitHub Developed Web pages from scratch using HTML5 CSS 3using SASS and JavaScript Used Angular 2 component router for navigation Worked with Angular 2 directives components pipes and injectable Programmed in Angular 2 to upload post filesimages to the AWS S3 from the Frontend by installing NPM package of AWSSDK Created Typescript reusable components and services to consume REST APIs using Componentbased architecture provided by Angular 2 Involved in the development of services with Angular 2 injectable property as to make the service available for dependency injection when creating components Developed various single page applications SPA using REACT JS Involved in responsive design and developed a single ISOMORPHIC responsive website that could be served to desktop Tablets and mobile users using ReactJS Closely worked with Application using ReactJS and Nodejs libraries NPM gulp directories to generate desired view Involved in using Redux library and NPM Node Package Manager and used various screens for the front end using Reactjs Used Postman tool to test the API workflow tested on the JSON files which are generated by the NodeJS with ExpressJS Performed Verification and validation process for the code written by making use of Jasmine and KarmaJavaScript testing framework by testing across various scenarios of the Angular 2 applications Worked with the Node package manager NPM along with Gulp Worked with SASS to build better and optimized Style sheets Worked with ZUUL API Gateway for Authentication and Hystrix Circuit Breaker for fault tolerance Used Node JS to run Angular 2 on server with mock JSON data and completed the UI development independent of server Wrote services with Angular2 to store and retrieve user data from the Mongo DB for the application on devices with HTTP service Developed application from scratch including Mongo DB server setup and Expressjs server development Used Mongoose API to access the Mongo DB from Node JS and used Angular CLI and NPM for scaffolding the Angular 2 application Authenticating Users and to provide the security to RESTful web services using OAUTH 20 Used JIRA as the bug tracking system to track and maintain the history of bugsissues on everyday basis Environment Angular 2 HTML5 CSS 3 JavaScript AWS S3 NPM React JS Redux Gulp Expressjs RESTful Web Services Webpack Babel Jasmine Karma Spring Boot Jersey Micro Services Rest Services AWS Node JS Cassandra GitHub JIRA Jenkins Swagger Netflix OSS Eureka ribbon Zuul API gateway Hystrix circuit breaker Docker Java Developer Dominos Inc Ann Arbor MI October 2016 to July 2017 Description Dominos Inc is an American pizza restaurant chain founded in 1960 The corporationis headquartered at the Dominos Farms Office Park in Ann Arbor Michigan United States In Dominos ecommerce project my role is to facilitate the enhanced features to take orders through smart devices which will help Dominos Pizza customers to make orders by providing them various benefits such as Ease of access Convenience make order faster and saving the orders Reduce the use of sales assistant Responsibilities Utilized Futures and Spring Framework to make Asynchronous calls to the application Developed Rest Web services using Spring MVC and migrated few services from servlets to Spring MVC Responsible for using Spring MVC to develop REST web services within the application Developed application on Spring framework by utilizing its features like Spring Dependency injection Spring Beans Spring Security Spring JPA Spring AOP Spring IOC Spring Web flow using MVC Used Spring Gem Fire Cache Transactions with Springs Declarative Transaction Management and their annotations Used Spring Transactions in the application and developed Session beans for the business logic at the middle tier level Implemented the Spring IOC for the core business application logic and used Hibernate as persistence framework Implemented Spring Batch for processing large volumes of records including loggingtracing transaction management job processing statistics job restart skip and resource management in the application using Quartzscheduler Used Spring Batch framework to create custom readers and writers to work with the application Used Spring Batch framework to update data in databases Worked with Spring Batch to convert xml files to data base records Created custom readers processors Validators Field Extractors for various Spring Batch applications Spring Security designed for authorization and authentication and manages the CORS and CRSF security issues Designed the user interface screen and its functionality as per user requirements Developed dynamic web pages using HTML CSSBootstrap jQuery and AJAX for building up a Monolithic application Created responsive UI modules using Backbone JS with hard coded dependencyof Underscore JS in combination with Handlebar JS for templating Used Backbone JS to utilize its minimal set of datastructuring models and collections and user interface views and URLs primitives for building aMVC work flow design Performed a lot of DOM manipulations using native JS and jQuery for loading and manipulating dynamic content on webpages Used jQuery in developing the Rich Internet Applications RIA with AJAX mechanism and JSON as a data exchange tool Created Mockup designs and developed various functionalities with JavaScript and jQuery Used Log4J to capture the log that includes runtime exceptions Designed new queries in app to enhance MySQL database performance Developed stored procedures triggers in MySQL for lowering traffic between servers clients Environment HTML CSS jQuery Bootstrap Less CSS Ajax jQuery JSON Spring MVC Spring Gem Fire Spring Batch Framework Spring Security Drools Engine MYSQL Java Developer Faujnet Solutions Private Limited Hyderabad Telangana May 2013 to May 2013 India Description Faujnet is the leading career management firm for exmilitary professionals We run the largest career membership site integrating the Global Industry and the military community I am responsible for the design development and management of Java based applications and collaborate with web developers and software engineers to integrate java into business applications software and websites Responsibilities Worked on Struts framework and production support issues of the existing applications Development of Action Forms Action Servlets Action and Validating Action Forms in Struts framework Used Strut and spring frame works to design and develop applications Implemented the project using Singleton Factory Design Patterns The Strut Validator frame works are used for serverside and clientside validations Involved in developing the business components and responsible for developing the user interfaces using JSPs Used the Strut Tiles framework for developing User Interface Developed JSPs with Struts custom tags and implemented JavaScript validation of data Primarily focused on the spring components such as action Servlets actions Model and View Objects View Resolver Used JavaScript for the web page validation and Struts Validator for serverside validation Wrote the high performance multithreaded Java code using singleton mediator visitor facade observer template factory publish and subscribe design pattern Involved in the extensive coding of JavaScript to handle the clientside validations Coded JDBC calls in the Servlets to access the SQL Server database tables Used SQL and PLSQL queries to perform database operations on Web Sphere Developed action classes and action form classes created JSPs using Strut Tag libraries and configured in configxml webxml For encapsulating the dynamic functionality TLD Tag Library Descriptor and used JSTL tags for populating data on to JSPs The Strut framework is implemented to enable JDBC Connection for data access Environment Java v6 JavaScript v18 JSP spring Struts 2x EJB SQL PLSQL JDBC Eclipse Web Sphere v 70 Associate Software Engineer Intergraph Hyderabad Telangana January 2012 to April 2013 India Description Intergraph Corporation is an American software development and services company It provides enterprise engineering and geospatially powered software to businesses governments and organizations around the world My role is to contribute to the entire development life cycles write well designed testable and efficient code I should ensure that designs in compliance to the specifications Responsibilities Developed applications using JAVA SpringFramework Spring MVC and Spring Core Developed stored procedures and triggers using PLSQL on SpringJDBC template to access and maintain the application database Used Maven build tool to maintain Project dependencies Involved in requirement and impact analysis designing the enhancements across the various modules and development using JavaJ2EE components like JSP Servlets and JDBC Used different CoreJava concepts such as MultiThreading ExceptionHandling Collection APIs to implement various features and enhancements Implemented Business logic in the middletier using Java classes Java beans Used JIRA for bug tracking Experience in working with version control system GIT Used Maven build tool to maintain Project dependencies Developed the presentation layer using Struts Framework JSP Servlets JavaScript jQuery and AJAX JSPJavaScript are used to create the frontend development The UserInterface UI components are implemented using HTML CSS Designed and implemented RESTfulwebAPIs Compiled the project modules on Maven and deployed them using ANTscript Actively involved in client meetings and requirement gathering sessions to evaluate and analyse the IT business requirement standards Worked with team members and business analysts in project planning sessions to create the working model Implemented Junit and Java SIM test cases to test the application functionality and to ensure code coverage Used Agile and Scrummethodologies to improve the efficiency of the applications Environment Java J2EE JSP Multithreading Eclipse Struts2 XML XSLT XPATH Design Patterns IBM DB2 WebSphere Server web services Soap and Rest UML HTML CSS Education Bachelors Skills Git 3 years java 3 years java script 4 years Jira 3 years Rest 4 years Angular Javascript Node React",
    "unique_id": "e90370cd-c2e2-4ecb-bc2b-d1498383ddbb"
}