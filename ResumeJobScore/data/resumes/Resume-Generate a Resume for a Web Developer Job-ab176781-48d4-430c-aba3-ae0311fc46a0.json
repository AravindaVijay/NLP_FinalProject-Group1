{
    "clean_data": "Sr Java J2EE Full Stack Developer Sr span lJavaspan J2EE Full Stack span lDeveloperspan Sr Java J2EE Full Stack Developer CSX Jacksonville FL Authorized to work in the US for any employer Work Experience Sr Java J2EE Full Stack Developer CSX Jacksonville FL March 2016 to Present Description The application is a web based application designed and developed to support the Ship CSX Equipment Diversion System initiative by providing a means to receive review process and track diversion requests that will be submitted through Ship CSX Also other major goals of this project include workflow notifications and work queuing to eliminate the need to print and maintain printed copies of diversion file documentation Responsibilities Involved in various phases of Software Development Life Cycle SDLC of the application like Requirement gathering Design Analysis and Code development by following Test Driven Development TDD and agile methodology Developed UI pages with HTML5 CSS3 JavaScript JQuery and used Boot Strap for creating Responsive Web pages Created AngularJS Controller to control the flow of data which isolate scopes perform operations in UI pages Creating a range loop directive modules Expressions scope Templates and components in AngularJS ReactJS NodeJS and developed the server side single page applications on AngularJS platform using JavaScript programming Followed the strict patterns of implementing modelviewcontroller MVC architecture using Angular Framework Developed a dashboard based on Ajax calls with Business Customers Count Realtime graphs for Analytical Reporting and client side Interface using Node JS and Used for creating reusable UI components Used Multithreading to overcome the errors in transactions and to handle all the threads by the main thread process Developed the Application using Spring Features like Spring MVC Spring DAO Spring Boot Spring Batch and Spring Security for application access and authorization Spring Integration Spring AOP for crosscutting concerns Used Spring Ribbon API to check servers are up and running in live environment to detect those servers that are down Developed RESTful service interface using Spring MVC to the underlying Agent Services API and Implemented RESTful web services for communication between client and servers to run application on variety platforms and frameworks Used Spring Annotations for mapping and to simplify the business logic for creating Spring MVC RESTful web services Designed spring boot mechanism without configuration XMLs and replaced it with Java classes and also used spring boot Actuator to externalize applications configuration properties for different environments Used Spring Batch as spring batch jobs can meet the requirements of reliability flexibility robustness and traceability which are essential for automatic processing of large amount of data in the application Designing and implementing scalable RESTful and microservicesbased services for mobile backend The backend is being written in Java using Spring Boot for simplicity and scalability Spring MVC Framework IOC design pattern is used to have relationships between application components It is also used to separate the application configuration and dependency specification from the actual application code Used Micro service architecture with Spring Boot based services interacting through a combination of REST and Apache Kafka message brokers Produced and consumed centralized Spring Restful Web Services for Enterprise and web applications to consume in JSON format and in trusted clientserver environment Used Hibernate environment for configurations mappings annotation extensions for easy mappings relationships between tables and entity classes to access and update information in the database Extensively used Hibernate concepts such as inheritance lazy loading dirty checking locking and transactions Defined Hibernate Named Queries for Batch related operations while defined Criteria Queries for Micro services Worked with ELK stack for searching the log routing the log data and for visualizing the logged data Worked with Advanced Java 18 features like Lambda for adding functionality processing capability and Stream API to facilitate pipeline processing and method to eliminate elements based on the criteria Worked on Oracle 11g database concepts such as locking transactions indexes sharing replication schema design Created Stored Procedures User Defined functions Views and implemented the Error Handling in the Stored Procedures and Modified already existing stored procedures triggers views indexes depending on the requirement Migration of Existing Application to AWS cloud platform Used Amazon Web Services AWS like EC2 servers S3 storage RDS instances cloud watch and Cloud Front for promoting code in multiple environments Deployed Microservices as Restful Web Services on Amazon Elastic Beanstalk TIBCO EMS extensively Worked on creation of custom Docker container images tagging and pushing the images to the servers and used Docker coupled with loadbalancing tool NGNIX to achieve continuous delivery Used slick to query and storing in database in a Scala fashion using the powerful Scala collection framework Design and implementation of accessibility features and collaborating with user requirements up to date Used Spring Core for dependency injection and Hibernate Framework persistence API onto Oracle database Setup the continuous Integration CI process and continuous deployment CD pipeline jobs in Jenkins brew master instance Ansible on Kubernetes container environment utilizing kubernetes Designing Development JUnit testing and Integration of many components of the applications from endto end and Prepared Junit test cases and executed them using Junit and Continuum for integration testing Develop unit test using Karma and Jasmine Followed strict patterns of RA team for unit test cases with jasmine Used JMeter for stress testing Selenium WebDriver for testing the automation code Followed strict patterns of RA team for unit test cases with jasmine and Used Drools Decision table using excel sheets with a Spring MVC project Used Maven as a build tool for compilation and building JAR WAR and EAR files and retrieved all the dependencies required for the running the application Log4J for logging errors messages and control log statements Used Rabbit MQ to incorporate pubsub design pattern to send messages to subscribers Worked on Git as version control management and JIRA as Defect management for bug issue tracking of application Used JENKINS for continuous integration CI and continuous deployment CD pipeline Implemented the application using design patterns such as Session Faade Business Delegate Adaptor Bean Factory and Singleton and Deployed the application in Apache Tomcat Server Environment HTML CSS Bootstrap AngularJS 20 React JS Ajax Rest web services Micro Services SpringMVC Java 1718 Scala Spring Boot Spring Actuator Multithreading Spring 4x Hibernate 4x Spring Batch Oracle 11g Apache Kafka AWS Docker ELKElastic search Logstash and Kabana Spring Security JUnit Karma jasmine Jenkins Apache Maven JIRA Git Sr JavaJ2EE Full Stack Developer Mercury Insurance Group Los Angeles CA December 2014 to February 2016 Description The insurance based company provides insurance for car homes Condo business auto insurance etc The developed application provides web based online insurance services Application also supports features for customer care services and internal reporting and log maintenance The application had been developed using Struts framework along with hibernate and log4j Responsibilities Involved in all the phases of software development lifecycle SDLC including Requirements Collection Design Analysis of the Customer Specifications Development Deployment and Customization of the Application Developed UI using HTML CSS and jQuery to display the data on the client side Wrote SPA Single page web applications using NodeJs as the server side GULP WEBPACK ES6 Restful web services plus AJAX and Angular JS Used backbone JS to optimize inbrowser use to load the module and to improve the Speed Frontend development by utilizing Java script frameworks such as JQuery Backbone Js NodeJS and AngularJS Developed a dashboard based on Ajax calls with Business Customers Count Flags Realtime graphs for Analytical Reporting using NodeJs and Wrote code to fetch data from web services using jQuery AJAX for asynchronous communication via JSON response and updating the modified data to display in UI pages Called web services with REST Architecture to specify constraints through Angular JS services to get XML file data Involved in implementation of enterprise application communication and integration with Web Services and Legacy Systems using REST Using Axis and Jersey frameworks Used various Core Java concepts such as MultiThreading Exception Handling Collections framework extensively to store retrieve and manipulate data objects of application in the business logic layer Involved in writing Spring Configuration XML file that contains declarations and other dependent objects declaration Used J2EE Design patterns like Singleton Service Locator Session Faade and Business Delegate during development Developed micro services with Spring Eureka to retrieve API routes for the entire cluster Using this strategy each micro service in a cluster can be load balanced and exposed through one API gateway Used Spring Transactions in the application and spring beans to develop Session beans for the business logic Spring MVC Framework IOC design pattern is used to have relationships between application components It is also used to separate the application configuration and dependency specification from the actual application code Implemented spring service layer with dependency wiring transaction DAO Annotations for Dependency Injection Designed and developed Application based on Spring Framework Spring MVC and spring templates Used Spring Framework for Dependency Injection and integrated with Hibernate DAOs for ORM mapping Composed and executed MongoDB document scripts to insert update NoSQL database automating data changes reporting and also wrote MongoDB client to receive data from AMC for Companies Used NoSQL MongoDB database to provide recommendations on Performance tuning for applications Used Hibernate framework in persistence layer for mapping an objectoriented domain model to a relational database Worked on Pivotal Cloud Foundry to host Application which used to rolebased access controls applying enforcing roles and permissions to ensure that users can only view and affect the spaces for which they have been granted access Rearchitect monolithic service into micro services based architecture using spring boot and pivotal cloud foundry Developed EJS access layer and components using JPAHibernate frameworks implementations for object persistence to Derby database for mock domain and in Oracle database for real time domains Used Selenium Data Driven framework for testing the application and integrating it with Maven Build Management Tool TestNG Unit Testing tool and Jenkins Continuous Integration Tool for continuous delivery pipeline Involved in Code Review Unit Testing and Integration Testing Tested cross browser functionality and fixed major layout bugs for supported browsers including IE6 Worked in agile methodology for Test Driven Development Created and configured management reports and dashboard using Splunk by identifying data patterns metrics Used Maven as the Build tool Experienced in using assistant tools such as GIT to access the code repository and version control repository SVN Subversion by apache Implemented the logging using log4j framework which is used to log both User Interface and Domain Level Messages Environment J2EE 18 spring 40 Hibernate 40 AJAX JMS 11 XML SOAP WSDL REST JDBC JAX WS 22 JavaScript 182 AngularJS NodeJS UML HTML5 JAXB 22 SVN Log4J JMeter WebSphere 85 Application Server Eclipse Oracle 11g Maven Jasmine Karma Protractor Jira Sr J2EE Developer State farm Insurance Bloomington IL March 2014 to November 2014 Project Customer Transfer is UI and Back end based application It can be used as a customer can transfer the agent for his State Farm Insurance policies It includes all policies depends on the customers requirement and rendering the complete transferring to the agent as well as customer Responsibilities Participated in designing of the framework required technique to use in each components Involved in requirements gathering and analysis from the existing system Captured requirements using Use Cases and Sequence Diagrams Designed Prototype project layout skeletons using JQuery CSS HTML5 JavaScript and various jQuery used JSP custom tags to dynamically generate web pages Bootstrap plugin like date picker Bootstrap templates and selectors Used JavaScript jQuery for user interactions pages and creating responsive web application integrating Twitter Bootstrap with Angular JS React js media queries and JSF validation framework for frontend validations Experience in Single Page Application SPA using AngularJS created Multiple Nested Views Routing Controllers Services and Custom Directives Nodejs Bower Grunt Actively involved in using MVC HTML5 to enable client side date to meets specific criteria by applying various validation variables and used the Backbone JS validation CSS classes to provide visual feedback on validation Implemented the associated business modules integration using Spring and Hibernate data ORM mapping Used spring dependency injection MVC components to implement business layer and navigation part of application Worked on Rest Web services Node Rest framework for backend services Apache Casandra for database services Designed the framework mainly in Spring MVC built from scratch and wrote filters to limit the use inheritance of some methods class components such as Action Mapping Action class Dispatch action class Action Form bean Developed new features for a RESTful backend services in Closure and led evolution of an entire backend architecture and used RAML based REST web services for APIs using MuleESB Exposed and consumed Rest based Web Services to communicate between systems Consumed Rest Web Services for communication and getting the credit card information from third party application Used Java Messaging Services JMS for reliable and asynchronous communication and exchange of important required information such as payment status report and credit card information Responsible for building scalable distributed data solutions using Data stax Cassandra Developed Dao Layer in CQL Cassandra Query Language for retrieving the data present in Cassandra cluster by running queries in CQL Configured and verified AWS workstations as per application requirement and deployed application to AWS cloud Defined and constructed layers serverside objects and clientside interfaces based on J2EE design patterns and implemented Swing spring and J2EE based MVC ModelViewController framework for the application Used Active MQ to improve the stability and scaled the system for more concurrent users of the application Created JUNIT Test Cases Test Suites using JUnit for Java Service Layer data access layer for model and repository which was developed using spring Persistence layer using Hibernate Used Junit and TestNG testing Framework as a test runner with Selenium and JMeter to test performance both on static dynamic resources and developed Protractor test classes for end to end testing in Front end Developed Maven scripts and developed builds using Maven and continuous integration servers like Jenkins Created and configured new JIRA projects and worked with departments to maintain existing JIRA projects Used log4j to deliver control over logging and Used Git as Version Control System for the application Use of data structures and algorithms for time and memory complexity reduction oops concepts like inheritance encapsulation reusability and better performance of application Configured the Web sphere application server to connect with Oracle Server in the back end by creating JDBC data source and configured MQ Series and JMS Queues with IBM RAD and WAS to create new connection queues Environment Java J2EE JDK 18 RCP AWS SDK Ext JS Git Spring 4x AWS SNSSQS hibernate4x Core Java SOAPRest Web Services JavaScript clojure UML Web Services HTML5 CSS SDKs JIRA 5x6x JAXB Linux JAXWS JAX RPC JMS JSF UNIX Selenium Angular JS NodeJs Apache JMeter JQuery JUnit Maven EMR Oracle 10g Full Stack Developer Broadridge Financial Solutions Inc Jersey City NJ August 2013 to March 2014 Project Impact is a Product Developed for the Brokerage Dealers It is integrating a suite of front middle backoffice functions and is enhanced with Web Enabled Interface Realtime Disaster Recovery Support Responsibilities Participated in all phases of development analysis design program analysis programming debugging testing documentation delivery implementation and production Involved in all phases and process of iterations under the Agile Scrum methodology Used the functionalities for writing code in HTML CSS AngularJS D3 NodeJS JavaScript Ajax JSON and Bootstrap Created branding in the web UI using CSS classes and JQuery to display the data on the client side application Worked through cross browser compatibility issues with layout and styles for all new CSS that was implemented CSS latest tags are used to design the webpages and HTML local storage web applications are used to store data developed JavaScript for user interfaces and DIV tags made upgrades using Twitter Bootstrap model Used JQuery Ajax for service calls on pages to interact with the server for information and implement the AngularJS in creating animations based on CSS classes required for every module of application Built html templates for high traffic and complex data driven website and Development of MQ application programs for Java JMS environments using queues and messages Used Multithreading as a programming and an execution model that allows multiple threads to exist within the context of a single process and to pull data concurrently from multiple resources in order to generate required files Developed Spring Application using Spring Core Spring AOP Spring Batch Spring Security and Spring DAO Extensively worked on Java server side programming using Spring MVC Servlets and JSP Extensively used spring core springcontext springbeans spring test Filters servlets and server side programming Integrated spring with Hibernate using Hibernate Template to perform CRUD operations against database Implemented MVC architecture using spring Hibernate frameworks combined with Hibernate for database persistence Designed and Implemented the DAO layer using spring hibernate Designed and developed middleware application using spring core framework and Implemented Java EE components using Spring MVC Spring IOC spring transactions spring Aop for cross cutting concerns and spring security modules Used Spring JDBC template to retrieve the data and represented the data in the form of tree which has seven hierarchies and implemented drag and drop functionality to Jdbc template Developed SOAP web service using Apache CXF web services and spring framework for communication of application Wrote various scripts for creatingmodifying tables SQL queries and stored procedures and explain plans and triggers as per applications requirements and enhanced performance by running the application Developed BDD tests using Cucumber by writing behaviors and step definitions Developed required Selenium support code in Java for Cucumber and Expert in designing Test Automation framework and report generation strategies in Selenium for webbased applications and prepared test cases for unit testing Used Jenkins for the automatic build process and Worked with SVN as a version control tool in the project and Used Maven for building JAR WAR and EAR files which are pulled to repository of SVN Debugged issues in the target browsers in conjunction with quality assurance and Provided Technical support for production environment by analyzing the defects implementing the solution defects Environment Spring MVC Spring Core Spring AOP Spring MVC Spring DAO Batch processing Multithreading JSP Servlet JQuery HTML CSS AJAX MAVEN Jenkins JUnit JMS J2EE Mule ESB Apache CXF Oracle 10g JavaJ2EE Developer HealthLine Systems INC San Diego CA November 2012 to July 2013 Description The project is to develop a system that provides Patient Administration Billing and Pharmacy Management functions for the hospital The major functions are Allocating Registration Recording Personal Details Handling Admissions and Assigning Insurance Details for Billing Recording Transfers within the hospital Creation of Discharge Summary Responsibilities Involved in the Requirements collection Analysis from the business team preparing functional specifications and technical specifications as per requirements includes a detailed plan to develop alter and maintain software system Developed UI using HTML CSS JQuery to display the data on client side and HTML templates for high traffic websites Worked on JAVA Collections API for handling the java data objects between the business layers and the front end Worked with JAXB SAXP and XML Schema for exporting data into XML format and importing data from XML format to data base and JAXB in the web services request response data marshalling as well as un marshalling process Implemented the web services client to consume the thirdparty service API for validating credit cards information Used XML Web Services using SOAP to transfer the amount to transfer application that is remote and global to different financial institutions and designed configuration XML Schema for the application Used Java Messaging Services JMS for reliable and asynchronous exchange of important information such as payment status report parsing of JMS XML messages and developed generic Java packages to produce and consume JMS messages through topics and queues in asynchronous message processing with guaranteed delivery Implemented the Email module which included setting up JMS message queue designing and developing email client which sent Java messages to the message queue designing and developing message driven beans that consumed the messages from the queue and sent emails using contents from the message Implemented session beans to handle business logic for fund transfer loan credit card fixed deposit modules Implemented Action Classes and server side validations for account activity payment history and Transactions Implemented views modules using Struts tags JSTL20 Mappings Expression Language controller components and Configured all Strutsconfigxml with all the mappings required by the architecture Implemented the MVC architecture using Apache Struts12 Framework and Tiles Framework for the views layout Used Spring 20 Framework for Dependency injection and integrated it with the Struts Framework and Hibernate Validated all forms using Struts validation framework and implemented Tiles framework in the presentation layer Worked with various java patterns such as Service Locater and Abstract Factory Pattern at the business layer for effective object behaviors used to have relationships between application components Wrote SQL queries stored procedures modifications to existing database structure for addition features Controller Servlets Action Form objects for process of interacting with Oracle database and retrieving dynamic data Developed Unit test cases using Junit and Developed ant scripts and developed builds using Apache ANT Used Log4J to capture the log that includes runtime exceptions and to create Daily Rolling Log Created the design documents with use case diagram class diagrams and sequence diagrams using Rational Rose and Used Clear Case for source code maintenance Environment J2EE Java SDK XML SAX JSP JMS HTML JavaScript Struts Hibernate Servlets Eclipse Web Services JUnit Unix JNI WebSphere Application Server ANT CVS Oracle 10g JavaJ2EE Developer Matrix solutions IN June 2009 to October 2012 Project This project enables the dealers to provide service warranty to the end customers The end customers can buy the warranty from one dealer and can utilize the warranty service at any other dealer IT system for this acts as the centralized system It aids the IT systems of the dealers to generate the invoice to the end customers for service repairs It makes payments to the dealers for the service repairs The dealer warranty system works in conjunction with the Billing and Invoice system Responsibilities Highly responsive in Design development Implementation and deployment of SDLC of entire project Agile methodology has been followed Experience with Retrospective meetings and actively involved in Client Interaction and Timely delivery of modules and resolving product issues Developed frontend using JSPs HTML CSS Bootstrap and JavaScript for client side validations and JSF validation framework for frontend validations and JSP custom tags in the web tier to dynamically generate web pages Analyzed the User Interface UI requirements and developed the complete UI pages for web portal from the scratch Contributed to project by working on end to end flow developing JSPs for front end by developing Servlets as Controller BO classes in middle tier and EJB as model in the Struts Framework Developed Enterprise Java Beans like Entity Beans Session Beans both Stateless and State Full Session beans Developed Session Beans to process requests from the user and used entity beans to retrieve and update customer information and also various EJB components to fulfill the business functionality Worked on Web Logic application server to deploy JSP and Stateless session Beans implemented the business logic Implemented the Email module which included setting up JMS message queue designing and developing email client which sent Java messages to the message queue designing and developing message driven beans that consumed the messages from the queue and sent emails using contents from the message Involved in writing and executing stored procedures functions and triggers for ORACLE to create a Database Management System and also Wrote Prepared statement and used API Created Unit test Acceptance test and Integration Test Documents and Code Review Documents Performed regression testing on application modules delivering 100 user accepted applications Written ANT scripts for building application artifacts and Used JIRA for issue tracking Designed the workflow for the client side and server side in UML using Rational Unified Process RUP and created the detailed Design documentation Involved in walk through with the analysis for Use Cases feasibility scope and designed Class Diagrams Sequence Diagrams and Object Diagrams using IBM Rational Rose to model the detail design of the application Environment Java J2EE HTML CSS JSP Servlets EJB JavaScript MySQL Struts JMS Eclipse Web logic Server Jdbc Junit UML Rational Clear Case Ant Jira Education Bachelors Skills CSS 8 years database 8 years J2EE 8 years Java 8 years JavaScript 8 years HTML CSS Bootstrap AngularJS 20 React JS Ajax Rest web services Micro Services SpringMVC Java 1718 Scala Spring Boot Spring Actuator Multithreading Spring 4x Hibernate 4x Spring Batch Oracle 11g Apache Kafka AWS Docker ELKElastic search Logstash and Kabana Spring Security JUnit Karma jasmine Jenkins Apache Maven JIRA Git Additional Information SKILLS CSS 8 years database 8 years J2EE 8 years Java 8 years JavaScript 8 years Technical Skills Programming Language Core Java SQL PLSQL JavaJ2EE Technologies Servlets JSP JSTL JDBC JMS JNDI RMI EJB Swing AWT Multithreading Java Networking Java Frameworks Spring MVC Struts 20 JSF ApplicationWeb Servers WebLogic IBM WebSphere JBoss Tomcat ORM Frameworks Hibernate JSF IBATIS Web Technologies JSP JavaScript JQuery AJAX XML XSLT XHTML DHTML CSS SASS HTML AngularJS Ext JS backbone JS Spring Framework Spring IOC Spring Batch Spring Boot Spring Security Database Server Oracle DB2 SQL Server MySQL RDBMS MongoDB Cassandra IDE Eclipse NetBeans Intellij STS Web Services REST SOAP JAXWS JAXRPC JAXRS WSDLAxis2 UDDI Apache CXF Version Control GIT CVS SVN Clear case Build Tools ANT Maven Gradle Methodologies Agile Scrum WaterFall Rapid Application Development Test Driven development Modelling Tools Microsoft Visio Rational Rose Operating System Windows Mac Linux UNIX Tools Apache Camel ESB cucumber Rational Rose Microsoft Visio Testing logging Junit Jasmine JUnit Log4J SoapUI Test NG easy mock and power mock Karma Protractor Mockito Selenium Jenkins Docker",
    "entities": [
        "Criteria Queries for Micro services",
        "Micro Services",
        "REST Using Axis",
        "Twitter Bootstrap with Angular JS React",
        "Designing Development JUnit",
        "Used Hibernate",
        "CSX",
        "Jenkins Continuous Integration Tool",
        "Spring MVC Spring",
        "Used Jenkins",
        "Test Driven Development TDD",
        "MultiThreading Exception Handling Collections",
        "REST Architecture",
        "Hibernate Named Queries for Batch",
        "Used Spring Framework for Dependency Injection",
        "Transactions Implemented",
        "WebSphere Application",
        "Strutsconfigxml",
        "ANT",
        "the Customer Specifications Development Deployment and Customization of the Application Developed UI",
        "Rational Unified Process RUP",
        "UML Web Services HTML5 CSS",
        "Jersey",
        "Used Micro",
        "JSON",
        "MVC Spring",
        "Rational Rose and Used Clear Case",
        "Los Angeles",
        "Deployed",
        "Spring Configuration XML",
        "Multiple Nested Views Routing Controllers Services",
        "IBM",
        "JMS XML",
        "JS Spring Framework",
        "Amazon Web Services AWS",
        "Derby",
        "Ajax",
        "SVN Subversion",
        "Requirements",
        "XML",
        "SOAP",
        "AMC",
        "EAR",
        "Acceptance",
        "WebLogic",
        "Software Development Life Cycle SDLC",
        "JUnit",
        "IE6 Worked",
        "GULP WEBPACK ES6 Restful",
        "Amazon",
        "Angular JS services",
        "Spring Boot",
        "MQ Series",
        "Hibernate Framework",
        "ELK",
        "Closure",
        "Apache CXF Version",
        "Developed the Application",
        "NodeJs",
        "Test Automation",
        "Developed",
        "DAO",
        "Test Driven Development Created",
        "Jenkins",
        "CSS Bootstrap",
        "NGNIX",
        "Provided Technical",
        "Custom Directives Nodejs Bower Grunt Actively",
        "Responsibilities Involved",
        "UML",
        "Git",
        "UML HTML5",
        "un",
        "Servlets",
        "Requirements Collection Design Analysis",
        "Stream API",
        "HTML CSS JQuery",
        "Spring and Hibernate",
        "ORACLE",
        "Spring MVC Servlets",
        "Development of MQ",
        "HTML5",
        "Develop",
        "RCP AWS SDK Ext",
        "Pharmacy Management",
        "Java Service Layer",
        "Linux",
        "JSP",
        "Integration of many components",
        "Responsibilities Participated",
        "SDLC",
        "Developed BDD",
        "Database Management System",
        "SoapUI Test NG",
        "JPAHibernate",
        "Kabana Spring Security JUnit Karma",
        "RDS",
        "API Created Unit",
        "Views",
        "Implemented Action Classes",
        "Integration Test Documents",
        "Action Mapping Action",
        "Used Active MQ",
        "MVC",
        "Interface",
        "Agile",
        "EJB",
        "GIT",
        "Node JS",
        "Hibernate using Hibernate Template",
        "HTML CSS",
        "TIBCO EMS",
        "API",
        "Migration of Existing Application",
        "US",
        "Allocating Registration Recording Personal Details Handling Admissions",
        "CQL Configured",
        "Developed Spring Application",
        "Filters",
        "Created",
        "NetBeans Intellij STS Web Services REST SOAP",
        "the Ship CSX Equipment Diversion System",
        "AWS",
        "State Farm Insurance",
        "Maven Build Management Tool TestNG Unit Testing",
        "Oracle",
        "Framework",
        "Singleton",
        "Integration CI",
        "JSF",
        "Creation of Discharge Summary Responsibilities Involved",
        "Backbone JS",
        "Actuator",
        "HTML",
        "java",
        "Spring Restful Web Services for Enterprise",
        "Contributed",
        "Use Cases",
        "Singleton Service",
        "SQL",
        "Kubernetes",
        "J2EE",
        "Bootstrap Created",
        "Created JUNIT Test Cases Test Suites",
        "Jenkins Created",
        "Used Git",
        "Created Stored Procedures User",
        "Spring Eureka",
        "Sequence Diagrams Designed Prototype",
        "JavaJ2EE Developer HealthLine Systems",
        "UDDI",
        "Business Customers",
        "CRUD",
        "the Struts Framework and Hibernate Validated",
        "Session Faade Business Delegate Adaptor Bean Factory",
        "Domain Level Messages Environment",
        "Maven",
        "SVN Debugged",
        "Developed Unit",
        "Responsive",
        "JavaScript",
        "Logstash",
        "MVC HTML5",
        "TestNG",
        "Controller Servlets Action Form",
        "UI",
        "Spring MVC Framework IOC",
        "Front",
        "XML Web Services",
        "Client Interaction",
        "Selenium",
        "Responsibilities Highly",
        "Selenium WebDriver",
        "SVN",
        "Version Control System",
        "CSS",
        "jQuery",
        "Restful Web Services",
        "REST",
        "Data",
        "NoSQL",
        "Patient Administration Billing",
        "JMeter WebSphere 85",
        "Application",
        "Single Page Application",
        "JQuery",
        "Action Form",
        "Oracle Server",
        "HTML CSS Bootstrap",
        "RA",
        "CXF Oracle"
    ],
    "experience": "Experience Sr Java J2EE Full Stack Developer CSX Jacksonville FL March 2016 to Present Description The application is a web based application designed and developed to support the Ship CSX Equipment Diversion System initiative by providing a means to receive review process and track diversion requests that will be submitted through Ship CSX Also other major goals of this project include workflow notifications and work queuing to eliminate the need to print and maintain printed copies of diversion file documentation Responsibilities Involved in various phases of Software Development Life Cycle SDLC of the application like Requirement gathering Design Analysis and Code development by following Test Driven Development TDD and agile methodology Developed UI pages with HTML5 CSS3 JavaScript JQuery and used Boot Strap for creating Responsive Web pages Created AngularJS Controller to control the flow of data which isolate scopes perform operations in UI pages Creating a range loop directive modules Expressions scope Templates and components in AngularJS ReactJS NodeJS and developed the server side single page applications on AngularJS platform using JavaScript programming Followed the strict patterns of implementing modelviewcontroller MVC architecture using Angular Framework Developed a dashboard based on Ajax calls with Business Customers Count Realtime graphs for Analytical Reporting and client side Interface using Node JS and Used for creating reusable UI components Used Multithreading to overcome the errors in transactions and to handle all the threads by the main thread process Developed the Application using Spring Features like Spring MVC Spring DAO Spring Boot Spring Batch and Spring Security for application access and authorization Spring Integration Spring AOP for crosscutting concerns Used Spring Ribbon API to check servers are up and running in live environment to detect those servers that are down Developed RESTful service interface using Spring MVC to the underlying Agent Services API and Implemented RESTful web services for communication between client and servers to run application on variety platforms and frameworks Used Spring Annotations for mapping and to simplify the business logic for creating Spring MVC RESTful web services Designed spring boot mechanism without configuration XMLs and replaced it with Java classes and also used spring boot Actuator to externalize applications configuration properties for different environments Used Spring Batch as spring batch jobs can meet the requirements of reliability flexibility robustness and traceability which are essential for automatic processing of large amount of data in the application Designing and implementing scalable RESTful and microservicesbased services for mobile backend The backend is being written in Java using Spring Boot for simplicity and scalability Spring MVC Framework IOC design pattern is used to have relationships between application components It is also used to separate the application configuration and dependency specification from the actual application code Used Micro service architecture with Spring Boot based services interacting through a combination of REST and Apache Kafka message brokers Produced and consumed centralized Spring Restful Web Services for Enterprise and web applications to consume in JSON format and in trusted clientserver environment Used Hibernate environment for configurations mappings annotation extensions for easy mappings relationships between tables and entity classes to access and update information in the database Extensively used Hibernate concepts such as inheritance lazy loading dirty checking locking and transactions Defined Hibernate Named Queries for Batch related operations while defined Criteria Queries for Micro services Worked with ELK stack for searching the log routing the log data and for visualizing the logged data Worked with Advanced Java 18 features like Lambda for adding functionality processing capability and Stream API to facilitate pipeline processing and method to eliminate elements based on the criteria Worked on Oracle 11 g database concepts such as locking transactions indexes sharing replication schema design Created Stored Procedures User Defined functions Views and implemented the Error Handling in the Stored Procedures and Modified already existing stored procedures triggers views indexes depending on the requirement Migration of Existing Application to AWS cloud platform Used Amazon Web Services AWS like EC2 servers S3 storage RDS instances cloud watch and Cloud Front for promoting code in multiple environments Deployed Microservices as Restful Web Services on Amazon Elastic Beanstalk TIBCO EMS extensively Worked on creation of custom Docker container images tagging and pushing the images to the servers and used Docker coupled with loadbalancing tool NGNIX to achieve continuous delivery Used slick to query and storing in database in a Scala fashion using the powerful Scala collection framework Design and implementation of accessibility features and collaborating with user requirements up to date Used Spring Core for dependency injection and Hibernate Framework persistence API onto Oracle database Setup the continuous Integration CI process and continuous deployment CD pipeline jobs in Jenkins brew master instance Ansible on Kubernetes container environment utilizing kubernetes Designing Development JUnit testing and Integration of many components of the applications from endto end and Prepared Junit test cases and executed them using Junit and Continuum for integration testing Develop unit test using Karma and Jasmine Followed strict patterns of RA team for unit test cases with jasmine Used JMeter for stress testing Selenium WebDriver for testing the automation code Followed strict patterns of RA team for unit test cases with jasmine and Used Drools Decision table using excel sheets with a Spring MVC project Used Maven as a build tool for compilation and building JAR WAR and EAR files and retrieved all the dependencies required for the running the application Log4J for logging errors messages and control log statements Used Rabbit MQ to incorporate pubsub design pattern to send messages to subscribers Worked on Git as version control management and JIRA as Defect management for bug issue tracking of application Used JENKINS for continuous integration CI and continuous deployment CD pipeline Implemented the application using design patterns such as Session Faade Business Delegate Adaptor Bean Factory and Singleton and Deployed the application in Apache Tomcat Server Environment HTML CSS Bootstrap AngularJS 20 React JS Ajax Rest web services Micro Services SpringMVC Java 1718 Scala Spring Boot Spring Actuator Multithreading Spring 4x Hibernate 4x Spring Batch Oracle 11 g Apache Kafka AWS Docker ELKElastic search Logstash and Kabana Spring Security JUnit Karma jasmine Jenkins Apache Maven JIRA Git Sr JavaJ2EE Full Stack Developer Mercury Insurance Group Los Angeles CA December 2014 to February 2016 Description The insurance based company provides insurance for car homes Condo business auto insurance etc The developed application provides web based online insurance services Application also supports features for customer care services and internal reporting and log maintenance The application had been developed using Struts framework along with hibernate and log4j Responsibilities Involved in all the phases of software development lifecycle SDLC including Requirements Collection Design Analysis of the Customer Specifications Development Deployment and Customization of the Application Developed UI using HTML CSS and jQuery to display the data on the client side Wrote SPA Single page web applications using NodeJs as the server side GULP WEBPACK ES6 Restful web services plus AJAX and Angular JS Used backbone JS to optimize inbrowser use to load the module and to improve the Speed Frontend development by utilizing Java script frameworks such as JQuery Backbone Js NodeJS and AngularJS Developed a dashboard based on Ajax calls with Business Customers Count Flags Realtime graphs for Analytical Reporting using NodeJs and Wrote code to fetch data from web services using jQuery AJAX for asynchronous communication via JSON response and updating the modified data to display in UI pages Called web services with REST Architecture to specify constraints through Angular JS services to get XML file data Involved in implementation of enterprise application communication and integration with Web Services and Legacy Systems using REST Using Axis and Jersey frameworks Used various Core Java concepts such as MultiThreading Exception Handling Collections framework extensively to store retrieve and manipulate data objects of application in the business logic layer Involved in writing Spring Configuration XML file that contains declarations and other dependent objects declaration Used J2EE Design patterns like Singleton Service Locator Session Faade and Business Delegate during development Developed micro services with Spring Eureka to retrieve API routes for the entire cluster Using this strategy each micro service in a cluster can be load balanced and exposed through one API gateway Used Spring Transactions in the application and spring beans to develop Session beans for the business logic Spring MVC Framework IOC design pattern is used to have relationships between application components It is also used to separate the application configuration and dependency specification from the actual application code Implemented spring service layer with dependency wiring transaction DAO Annotations for Dependency Injection Designed and developed Application based on Spring Framework Spring MVC and spring templates Used Spring Framework for Dependency Injection and integrated with Hibernate DAOs for ORM mapping Composed and executed MongoDB document scripts to insert update NoSQL database automating data changes reporting and also wrote MongoDB client to receive data from AMC for Companies Used NoSQL MongoDB database to provide recommendations on Performance tuning for applications Used Hibernate framework in persistence layer for mapping an objectoriented domain model to a relational database Worked on Pivotal Cloud Foundry to host Application which used to rolebased access controls applying enforcing roles and permissions to ensure that users can only view and affect the spaces for which they have been granted access Rearchitect monolithic service into micro services based architecture using spring boot and pivotal cloud foundry Developed EJS access layer and components using JPAHibernate frameworks implementations for object persistence to Derby database for mock domain and in Oracle database for real time domains Used Selenium Data Driven framework for testing the application and integrating it with Maven Build Management Tool TestNG Unit Testing tool and Jenkins Continuous Integration Tool for continuous delivery pipeline Involved in Code Review Unit Testing and Integration Testing Tested cross browser functionality and fixed major layout bugs for supported browsers including IE6 Worked in agile methodology for Test Driven Development Created and configured management reports and dashboard using Splunk by identifying data patterns metrics Used Maven as the Build tool Experienced in using assistant tools such as GIT to access the code repository and version control repository SVN Subversion by apache Implemented the logging using log4j framework which is used to log both User Interface and Domain Level Messages Environment J2EE 18 spring 40 Hibernate 40 AJAX JMS 11 XML SOAP WSDL REST JDBC JAX WS 22 JavaScript 182 AngularJS NodeJS UML HTML5 JAXB 22 SVN Log4J JMeter WebSphere 85 Application Server Eclipse Oracle 11 g Maven Jasmine Karma Protractor Jira Sr J2EE Developer State farm Insurance Bloomington IL March 2014 to November 2014 Project Customer Transfer is UI and Back end based application It can be used as a customer can transfer the agent for his State Farm Insurance policies It includes all policies depends on the customers requirement and rendering the complete transferring to the agent as well as customer Responsibilities Participated in designing of the framework required technique to use in each components Involved in requirements gathering and analysis from the existing system Captured requirements using Use Cases and Sequence Diagrams Designed Prototype project layout skeletons using JQuery CSS HTML5 JavaScript and various jQuery used JSP custom tags to dynamically generate web pages Bootstrap plugin like date picker Bootstrap templates and selectors Used JavaScript jQuery for user interactions pages and creating responsive web application integrating Twitter Bootstrap with Angular JS React js media queries and JSF validation framework for frontend validations Experience in Single Page Application SPA using AngularJS created Multiple Nested Views Routing Controllers Services and Custom Directives Nodejs Bower Grunt Actively involved in using MVC HTML5 to enable client side date to meets specific criteria by applying various validation variables and used the Backbone JS validation CSS classes to provide visual feedback on validation Implemented the associated business modules integration using Spring and Hibernate data ORM mapping Used spring dependency injection MVC components to implement business layer and navigation part of application Worked on Rest Web services Node Rest framework for backend services Apache Casandra for database services Designed the framework mainly in Spring MVC built from scratch and wrote filters to limit the use inheritance of some methods class components such as Action Mapping Action class Dispatch action class Action Form bean Developed new features for a RESTful backend services in Closure and led evolution of an entire backend architecture and used RAML based REST web services for APIs using MuleESB Exposed and consumed Rest based Web Services to communicate between systems Consumed Rest Web Services for communication and getting the credit card information from third party application Used Java Messaging Services JMS for reliable and asynchronous communication and exchange of important required information such as payment status report and credit card information Responsible for building scalable distributed data solutions using Data stax Cassandra Developed Dao Layer in CQL Cassandra Query Language for retrieving the data present in Cassandra cluster by running queries in CQL Configured and verified AWS workstations as per application requirement and deployed application to AWS cloud Defined and constructed layers serverside objects and clientside interfaces based on J2EE design patterns and implemented Swing spring and J2EE based MVC ModelViewController framework for the application Used Active MQ to improve the stability and scaled the system for more concurrent users of the application Created JUNIT Test Cases Test Suites using JUnit for Java Service Layer data access layer for model and repository which was developed using spring Persistence layer using Hibernate Used Junit and TestNG testing Framework as a test runner with Selenium and JMeter to test performance both on static dynamic resources and developed Protractor test classes for end to end testing in Front end Developed Maven scripts and developed builds using Maven and continuous integration servers like Jenkins Created and configured new JIRA projects and worked with departments to maintain existing JIRA projects Used log4j to deliver control over logging and Used Git as Version Control System for the application Use of data structures and algorithms for time and memory complexity reduction oops concepts like inheritance encapsulation reusability and better performance of application Configured the Web sphere application server to connect with Oracle Server in the back end by creating JDBC data source and configured MQ Series and JMS Queues with IBM RAD and WAS to create new connection queues Environment Java J2EE JDK 18 RCP AWS SDK Ext JS Git Spring 4x AWS SNSSQS hibernate4x Core Java SOAPRest Web Services JavaScript clojure UML Web Services HTML5 CSS SDKs JIRA 5x6x JAXB Linux JAXWS JAX RPC JMS JSF UNIX Selenium Angular JS NodeJs Apache JMeter JQuery JUnit Maven EMR Oracle 10 g Full Stack Developer Broadridge Financial Solutions Inc Jersey City NJ August 2013 to March 2014 Project Impact is a Product Developed for the Brokerage Dealers It is integrating a suite of front middle backoffice functions and is enhanced with Web Enabled Interface Realtime Disaster Recovery Support Responsibilities Participated in all phases of development analysis design program analysis programming debugging testing documentation delivery implementation and production Involved in all phases and process of iterations under the Agile Scrum methodology Used the functionalities for writing code in HTML CSS AngularJS D3 NodeJS JavaScript Ajax JSON and Bootstrap Created branding in the web UI using CSS classes and JQuery to display the data on the client side application Worked through cross browser compatibility issues with layout and styles for all new CSS that was implemented CSS latest tags are used to design the webpages and HTML local storage web applications are used to store data developed JavaScript for user interfaces and DIV tags made upgrades using Twitter Bootstrap model Used JQuery Ajax for service calls on pages to interact with the server for information and implement the AngularJS in creating animations based on CSS classes required for every module of application Built html templates for high traffic and complex data driven website and Development of MQ application programs for Java JMS environments using queues and messages Used Multithreading as a programming and an execution model that allows multiple threads to exist within the context of a single process and to pull data concurrently from multiple resources in order to generate required files Developed Spring Application using Spring Core Spring AOP Spring Batch Spring Security and Spring DAO Extensively worked on Java server side programming using Spring MVC Servlets and JSP Extensively used spring core springcontext springbeans spring test Filters servlets and server side programming Integrated spring with Hibernate using Hibernate Template to perform CRUD operations against database Implemented MVC architecture using spring Hibernate frameworks combined with Hibernate for database persistence Designed and Implemented the DAO layer using spring hibernate Designed and developed middleware application using spring core framework and Implemented Java EE components using Spring MVC Spring IOC spring transactions spring Aop for cross cutting concerns and spring security modules Used Spring JDBC template to retrieve the data and represented the data in the form of tree which has seven hierarchies and implemented drag and drop functionality to Jdbc template Developed SOAP web service using Apache CXF web services and spring framework for communication of application Wrote various scripts for creatingmodifying tables SQL queries and stored procedures and explain plans and triggers as per applications requirements and enhanced performance by running the application Developed BDD tests using Cucumber by writing behaviors and step definitions Developed required Selenium support code in Java for Cucumber and Expert in designing Test Automation framework and report generation strategies in Selenium for webbased applications and prepared test cases for unit testing Used Jenkins for the automatic build process and Worked with SVN as a version control tool in the project and Used Maven for building JAR WAR and EAR files which are pulled to repository of SVN Debugged issues in the target browsers in conjunction with quality assurance and Provided Technical support for production environment by analyzing the defects implementing the solution defects Environment Spring MVC Spring Core Spring AOP Spring MVC Spring DAO Batch processing Multithreading JSP Servlet JQuery HTML CSS AJAX MAVEN Jenkins JUnit JMS J2EE Mule ESB Apache CXF Oracle 10 g JavaJ2EE Developer HealthLine Systems INC San Diego CA November 2012 to July 2013 Description The project is to develop a system that provides Patient Administration Billing and Pharmacy Management functions for the hospital The major functions are Allocating Registration Recording Personal Details Handling Admissions and Assigning Insurance Details for Billing Recording Transfers within the hospital Creation of Discharge Summary Responsibilities Involved in the Requirements collection Analysis from the business team preparing functional specifications and technical specifications as per requirements includes a detailed plan to develop alter and maintain software system Developed UI using HTML CSS JQuery to display the data on client side and HTML templates for high traffic websites Worked on JAVA Collections API for handling the java data objects between the business layers and the front end Worked with JAXB SAXP and XML Schema for exporting data into XML format and importing data from XML format to data base and JAXB in the web services request response data marshalling as well as un marshalling process Implemented the web services client to consume the thirdparty service API for validating credit cards information Used XML Web Services using SOAP to transfer the amount to transfer application that is remote and global to different financial institutions and designed configuration XML Schema for the application Used Java Messaging Services JMS for reliable and asynchronous exchange of important information such as payment status report parsing of JMS XML messages and developed generic Java packages to produce and consume JMS messages through topics and queues in asynchronous message processing with guaranteed delivery Implemented the Email module which included setting up JMS message queue designing and developing email client which sent Java messages to the message queue designing and developing message driven beans that consumed the messages from the queue and sent emails using contents from the message Implemented session beans to handle business logic for fund transfer loan credit card fixed deposit modules Implemented Action Classes and server side validations for account activity payment history and Transactions Implemented views modules using Struts tags JSTL20 Mappings Expression Language controller components and Configured all Strutsconfigxml with all the mappings required by the architecture Implemented the MVC architecture using Apache Struts12 Framework and Tiles Framework for the views layout Used Spring 20 Framework for Dependency injection and integrated it with the Struts Framework and Hibernate Validated all forms using Struts validation framework and implemented Tiles framework in the presentation layer Worked with various java patterns such as Service Locater and Abstract Factory Pattern at the business layer for effective object behaviors used to have relationships between application components Wrote SQL queries stored procedures modifications to existing database structure for addition features Controller Servlets Action Form objects for process of interacting with Oracle database and retrieving dynamic data Developed Unit test cases using Junit and Developed ant scripts and developed builds using Apache ANT Used Log4J to capture the log that includes runtime exceptions and to create Daily Rolling Log Created the design documents with use case diagram class diagrams and sequence diagrams using Rational Rose and Used Clear Case for source code maintenance Environment J2EE Java SDK XML SAX JSP JMS HTML JavaScript Struts Hibernate Servlets Eclipse Web Services JUnit Unix JNI WebSphere Application Server ANT CVS Oracle 10 g JavaJ2EE Developer Matrix solutions IN June 2009 to October 2012 Project This project enables the dealers to provide service warranty to the end customers The end customers can buy the warranty from one dealer and can utilize the warranty service at any other dealer IT system for this acts as the centralized system It aids the IT systems of the dealers to generate the invoice to the end customers for service repairs It makes payments to the dealers for the service repairs The dealer warranty system works in conjunction with the Billing and Invoice system Responsibilities Highly responsive in Design development Implementation and deployment of SDLC of entire project Agile methodology has been followed Experience with Retrospective meetings and actively involved in Client Interaction and Timely delivery of modules and resolving product issues Developed frontend using JSPs HTML CSS Bootstrap and JavaScript for client side validations and JSF validation framework for frontend validations and JSP custom tags in the web tier to dynamically generate web pages Analyzed the User Interface UI requirements and developed the complete UI pages for web portal from the scratch Contributed to project by working on end to end flow developing JSPs for front end by developing Servlets as Controller BO classes in middle tier and EJB as model in the Struts Framework Developed Enterprise Java Beans like Entity Beans Session Beans both Stateless and State Full Session beans Developed Session Beans to process requests from the user and used entity beans to retrieve and update customer information and also various EJB components to fulfill the business functionality Worked on Web Logic application server to deploy JSP and Stateless session Beans implemented the business logic Implemented the Email module which included setting up JMS message queue designing and developing email client which sent Java messages to the message queue designing and developing message driven beans that consumed the messages from the queue and sent emails using contents from the message Involved in writing and executing stored procedures functions and triggers for ORACLE to create a Database Management System and also Wrote Prepared statement and used API Created Unit test Acceptance test and Integration Test Documents and Code Review Documents Performed regression testing on application modules delivering 100 user accepted applications Written ANT scripts for building application artifacts and Used JIRA for issue tracking Designed the workflow for the client side and server side in UML using Rational Unified Process RUP and created the detailed Design documentation Involved in walk through with the analysis for Use Cases feasibility scope and designed Class Diagrams Sequence Diagrams and Object Diagrams using IBM Rational Rose to model the detail design of the application Environment Java J2EE HTML CSS JSP Servlets EJB JavaScript MySQL Struts JMS Eclipse Web logic Server Jdbc Junit UML Rational Clear Case Ant Jira Education Bachelors Skills CSS 8 years database 8 years J2EE 8 years Java 8 years JavaScript 8 years HTML CSS Bootstrap AngularJS 20 React JS Ajax Rest web services Micro Services SpringMVC Java 1718 Scala Spring Boot Spring Actuator Multithreading Spring 4x Hibernate 4x Spring Batch Oracle 11 g Apache Kafka AWS Docker ELKElastic search Logstash and Kabana Spring Security JUnit Karma jasmine Jenkins Apache Maven JIRA Git Additional Information SKILLS CSS 8 years database 8 years J2EE 8 years Java 8 years JavaScript 8 years Technical Skills Programming Language Core Java SQL PLSQL JavaJ2EE Technologies Servlets JSP JSTL JDBC JMS JNDI RMI EJB Swing AWT Multithreading Java Networking Java Frameworks Spring MVC Struts 20 JSF ApplicationWeb Servers WebLogic IBM WebSphere JBoss Tomcat ORM Frameworks Hibernate JSF IBATIS Web Technologies JSP JavaScript JQuery AJAX XML XSLT XHTML DHTML CSS SASS HTML AngularJS Ext JS backbone JS Spring Framework Spring IOC Spring Batch Spring Boot Spring Security Database Server Oracle DB2 SQL Server MySQL RDBMS MongoDB Cassandra IDE Eclipse NetBeans Intellij STS Web Services REST SOAP JAXWS JAXRPC JAXRS WSDLAxis2 UDDI Apache CXF Version Control GIT CVS SVN Clear case Build Tools ANT Maven Gradle Methodologies Agile Scrum WaterFall Rapid Application Development Test Driven development Modelling Tools Microsoft Visio Rational Rose Operating System Windows Mac Linux UNIX Tools Apache Camel ESB cucumber Rational Rose Microsoft Visio Testing logging Junit Jasmine JUnit Log4J SoapUI Test NG easy mock and power mock Karma Protractor Mockito Selenium Jenkins Docker",
    "extracted_keywords": [
        "Sr",
        "Java",
        "J2EE",
        "Full",
        "Stack",
        "Developer",
        "Sr",
        "lJavaspan",
        "J2EE",
        "Full",
        "Stack",
        "span",
        "lDeveloperspan",
        "Sr",
        "Java",
        "J2EE",
        "Full",
        "Stack",
        "Developer",
        "CSX",
        "Jacksonville",
        "FL",
        "Authorized",
        "US",
        "employer",
        "Work",
        "Experience",
        "Sr",
        "Java",
        "J2EE",
        "Full",
        "Stack",
        "Developer",
        "CSX",
        "Jacksonville",
        "FL",
        "March",
        "Present",
        "Description",
        "application",
        "web",
        "application",
        "Ship",
        "CSX",
        "Equipment",
        "Diversion",
        "System",
        "initiative",
        "means",
        "review",
        "process",
        "diversion",
        "requests",
        "Ship",
        "CSX",
        "goals",
        "project",
        "workflow",
        "notifications",
        "work",
        "need",
        "copies",
        "diversion",
        "file",
        "documentation",
        "Responsibilities",
        "phases",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "SDLC",
        "application",
        "Requirement",
        "Design",
        "Analysis",
        "Code",
        "development",
        "Test",
        "Driven",
        "Development",
        "TDD",
        "methodology",
        "UI",
        "pages",
        "HTML5",
        "CSS3",
        "JavaScript",
        "JQuery",
        "Boot",
        "Strap",
        "Responsive",
        "Web",
        "pages",
        "Controller",
        "flow",
        "data",
        "scopes",
        "operations",
        "UI",
        "pages",
        "range",
        "loop",
        "directive",
        "Expressions",
        "scope",
        "Templates",
        "components",
        "AngularJS",
        "ReactJS",
        "NodeJS",
        "server",
        "side",
        "page",
        "applications",
        "platform",
        "JavaScript",
        "programming",
        "patterns",
        "MVC",
        "architecture",
        "Angular",
        "Framework",
        "dashboard",
        "calls",
        "Business",
        "Customers",
        "Count",
        "Realtime",
        "graphs",
        "Analytical",
        "Reporting",
        "client",
        "side",
        "Interface",
        "Node",
        "JS",
        "UI",
        "components",
        "Multithreading",
        "errors",
        "transactions",
        "threads",
        "thread",
        "process",
        "Application",
        "Spring",
        "Features",
        "Spring",
        "MVC",
        "Spring",
        "DAO",
        "Spring",
        "Boot",
        "Spring",
        "Batch",
        "Spring",
        "Security",
        "application",
        "access",
        "authorization",
        "Spring",
        "Integration",
        "Spring",
        "AOP",
        "concerns",
        "Spring",
        "Ribbon",
        "API",
        "servers",
        "environment",
        "servers",
        "service",
        "interface",
        "Spring",
        "MVC",
        "Agent",
        "Services",
        "API",
        "web",
        "services",
        "communication",
        "client",
        "servers",
        "application",
        "variety",
        "platforms",
        "frameworks",
        "Spring",
        "Annotations",
        "mapping",
        "business",
        "logic",
        "Spring",
        "MVC",
        "web",
        "services",
        "spring",
        "boot",
        "mechanism",
        "configuration",
        "XMLs",
        "Java",
        "classes",
        "spring",
        "boot",
        "Actuator",
        "applications",
        "configuration",
        "properties",
        "environments",
        "Spring",
        "Batch",
        "spring",
        "batch",
        "jobs",
        "requirements",
        "reliability",
        "flexibility",
        "robustness",
        "traceability",
        "processing",
        "amount",
        "data",
        "application",
        "services",
        "backend",
        "backend",
        "Java",
        "Spring",
        "Boot",
        "simplicity",
        "scalability",
        "Spring",
        "MVC",
        "Framework",
        "IOC",
        "design",
        "pattern",
        "relationships",
        "application",
        "components",
        "application",
        "configuration",
        "dependency",
        "specification",
        "application",
        "code",
        "Micro",
        "service",
        "architecture",
        "Spring",
        "Boot",
        "services",
        "combination",
        "REST",
        "Apache",
        "Kafka",
        "message",
        "brokers",
        "Spring",
        "Restful",
        "Web",
        "Services",
        "Enterprise",
        "web",
        "applications",
        "format",
        "clientserver",
        "environment",
        "Hibernate",
        "environment",
        "configurations",
        "mappings",
        "annotation",
        "extensions",
        "mappings",
        "relationships",
        "tables",
        "entity",
        "classes",
        "information",
        "database",
        "Hibernate",
        "concepts",
        "inheritance",
        "loading",
        "dirty",
        "locking",
        "transactions",
        "Hibernate",
        "Queries",
        "Batch",
        "operations",
        "Criteria",
        "Queries",
        "Micro",
        "services",
        "ELK",
        "stack",
        "log",
        "log",
        "data",
        "data",
        "Advanced",
        "Java",
        "features",
        "Lambda",
        "functionality",
        "processing",
        "capability",
        "Stream",
        "API",
        "pipeline",
        "processing",
        "method",
        "elements",
        "criteria",
        "Oracle",
        "g",
        "database",
        "concepts",
        "transactions",
        "indexes",
        "replication",
        "schema",
        "design",
        "Stored",
        "Procedures",
        "User",
        "functions",
        "Views",
        "Error",
        "Handling",
        "Stored",
        "Procedures",
        "Modified",
        "procedures",
        "views",
        "indexes",
        "requirement",
        "Migration",
        "Existing",
        "Application",
        "AWS",
        "cloud",
        "platform",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "EC2",
        "servers",
        "S3",
        "storage",
        "RDS",
        "cloud",
        "watch",
        "Cloud",
        "Front",
        "code",
        "environments",
        "Deployed",
        "Microservices",
        "Restful",
        "Web",
        "Services",
        "Amazon",
        "Elastic",
        "Beanstalk",
        "TIBCO",
        "EMS",
        "creation",
        "custom",
        "Docker",
        "container",
        "images",
        "images",
        "servers",
        "Docker",
        "tool",
        "NGNIX",
        "delivery",
        "slick",
        "query",
        "database",
        "Scala",
        "fashion",
        "Scala",
        "collection",
        "framework",
        "Design",
        "implementation",
        "accessibility",
        "features",
        "user",
        "requirements",
        "date",
        "Spring",
        "Core",
        "dependency",
        "injection",
        "Hibernate",
        "Framework",
        "persistence",
        "API",
        "Oracle",
        "database",
        "Setup",
        "Integration",
        "CI",
        "process",
        "CD",
        "pipeline",
        "jobs",
        "Jenkins",
        "master",
        "instance",
        "Ansible",
        "Kubernetes",
        "container",
        "environment",
        "kubernetes",
        "Designing",
        "Development",
        "JUnit",
        "testing",
        "Integration",
        "components",
        "applications",
        "endto",
        "end",
        "Prepared",
        "Junit",
        "test",
        "cases",
        "Junit",
        "Continuum",
        "integration",
        "testing",
        "Develop",
        "unit",
        "test",
        "Karma",
        "Jasmine",
        "patterns",
        "RA",
        "team",
        "unit",
        "test",
        "cases",
        "jasmine",
        "JMeter",
        "stress",
        "testing",
        "Selenium",
        "WebDriver",
        "automation",
        "code",
        "patterns",
        "RA",
        "team",
        "unit",
        "test",
        "cases",
        "jasmine",
        "Drools",
        "Decision",
        "table",
        "sheets",
        "Spring",
        "MVC",
        "project",
        "Maven",
        "build",
        "tool",
        "compilation",
        "JAR",
        "WAR",
        "EAR",
        "files",
        "dependencies",
        "application",
        "Log4J",
        "errors",
        "messages",
        "control",
        "log",
        "statements",
        "Rabbit",
        "MQ",
        "design",
        "pattern",
        "messages",
        "subscribers",
        "Git",
        "version",
        "control",
        "management",
        "JIRA",
        "Defect",
        "management",
        "bug",
        "issue",
        "tracking",
        "application",
        "JENKINS",
        "integration",
        "CI",
        "CD",
        "pipeline",
        "application",
        "design",
        "patterns",
        "Session",
        "Faade",
        "Business",
        "Delegate",
        "Adaptor",
        "Bean",
        "Factory",
        "Singleton",
        "application",
        "Apache",
        "Tomcat",
        "Server",
        "Environment",
        "HTML",
        "CSS",
        "Bootstrap",
        "React",
        "JS",
        "Ajax",
        "Rest",
        "web",
        "services",
        "Micro",
        "Services",
        "SpringMVC",
        "Java",
        "Scala",
        "Spring",
        "Boot",
        "Spring",
        "Actuator",
        "Multithreading",
        "Spring",
        "Hibernate",
        "4x",
        "Spring",
        "Batch",
        "Oracle",
        "g",
        "Apache",
        "Kafka",
        "Docker",
        "ELKElastic",
        "search",
        "Logstash",
        "Kabana",
        "Spring",
        "Security",
        "JUnit",
        "Karma",
        "jasmine",
        "Jenkins",
        "Apache",
        "Maven",
        "JIRA",
        "Git",
        "Sr",
        "JavaJ2EE",
        "Full",
        "Stack",
        "Developer",
        "Mercury",
        "Insurance",
        "Group",
        "Los",
        "Angeles",
        "CA",
        "December",
        "February",
        "Description",
        "insurance",
        "company",
        "insurance",
        "car",
        "homes",
        "Condo",
        "business",
        "auto",
        "insurance",
        "application",
        "web",
        "insurance",
        "services",
        "Application",
        "features",
        "customer",
        "care",
        "services",
        "reporting",
        "log",
        "maintenance",
        "application",
        "Struts",
        "framework",
        "hibernate",
        "log4j",
        "Responsibilities",
        "phases",
        "software",
        "development",
        "lifecycle",
        "SDLC",
        "Requirements",
        "Collection",
        "Design",
        "Analysis",
        "Customer",
        "Specifications",
        "Development",
        "Deployment",
        "Customization",
        "Application",
        "UI",
        "HTML",
        "CSS",
        "jQuery",
        "data",
        "client",
        "side",
        "SPA",
        "Single",
        "page",
        "web",
        "applications",
        "NodeJs",
        "server",
        "side",
        "GULP",
        "WEBPACK",
        "ES6",
        "Restful",
        "web",
        "services",
        "AJAX",
        "JS",
        "backbone",
        "JS",
        "use",
        "module",
        "Speed",
        "Frontend",
        "development",
        "Java",
        "script",
        "frameworks",
        "JQuery",
        "Backbone",
        "Js",
        "NodeJS",
        "AngularJS",
        "dashboard",
        "calls",
        "Business",
        "Customers",
        "Count",
        "Flags",
        "Realtime",
        "graphs",
        "Analytical",
        "Reporting",
        "NodeJs",
        "Wrote",
        "code",
        "data",
        "web",
        "services",
        "jQuery",
        "AJAX",
        "communication",
        "response",
        "data",
        "UI",
        "pages",
        "web",
        "services",
        "REST",
        "Architecture",
        "constraints",
        "JS",
        "services",
        "XML",
        "file",
        "data",
        "implementation",
        "enterprise",
        "application",
        "communication",
        "integration",
        "Web",
        "Services",
        "Legacy",
        "Systems",
        "REST",
        "Axis",
        "Jersey",
        "frameworks",
        "Core",
        "Java",
        "concepts",
        "MultiThreading",
        "Exception",
        "Handling",
        "Collections",
        "framework",
        "retrieve",
        "manipulate",
        "data",
        "objects",
        "application",
        "business",
        "logic",
        "layer",
        "Spring",
        "Configuration",
        "XML",
        "file",
        "declarations",
        "objects",
        "declaration",
        "J2EE",
        "Design",
        "patterns",
        "Singleton",
        "Service",
        "Locator",
        "Session",
        "Faade",
        "Business",
        "Delegate",
        "development",
        "Developed",
        "micro",
        "services",
        "Spring",
        "Eureka",
        "API",
        "routes",
        "cluster",
        "strategy",
        "micro",
        "service",
        "cluster",
        "load",
        "API",
        "gateway",
        "Spring",
        "Transactions",
        "application",
        "spring",
        "beans",
        "Session",
        "beans",
        "business",
        "logic",
        "Spring",
        "MVC",
        "Framework",
        "IOC",
        "design",
        "pattern",
        "relationships",
        "application",
        "components",
        "application",
        "configuration",
        "dependency",
        "specification",
        "application",
        "code",
        "spring",
        "service",
        "layer",
        "dependency",
        "wiring",
        "transaction",
        "DAO",
        "Annotations",
        "Dependency",
        "Injection",
        "Application",
        "Spring",
        "Framework",
        "Spring",
        "MVC",
        "spring",
        "templates",
        "Spring",
        "Framework",
        "Dependency",
        "Injection",
        "Hibernate",
        "DAOs",
        "ORM",
        "mapping",
        "MongoDB",
        "document",
        "scripts",
        "update",
        "NoSQL",
        "database",
        "data",
        "changes",
        "client",
        "data",
        "AMC",
        "Companies",
        "NoSQL",
        "database",
        "recommendations",
        "Performance",
        "applications",
        "Hibernate",
        "framework",
        "persistence",
        "layer",
        "domain",
        "model",
        "database",
        "Cloud",
        "Foundry",
        "Application",
        "access",
        "controls",
        "roles",
        "permissions",
        "users",
        "spaces",
        "access",
        "service",
        "micro",
        "services",
        "architecture",
        "spring",
        "boot",
        "cloud",
        "foundry",
        "Developed",
        "EJS",
        "access",
        "layer",
        "components",
        "JPAHibernate",
        "frameworks",
        "implementations",
        "persistence",
        "Derby",
        "database",
        "domain",
        "Oracle",
        "database",
        "time",
        "domains",
        "Selenium",
        "Data",
        "framework",
        "application",
        "Maven",
        "Build",
        "Management",
        "Tool",
        "TestNG",
        "Unit",
        "Testing",
        "tool",
        "Jenkins",
        "Continuous",
        "Integration",
        "Tool",
        "delivery",
        "pipeline",
        "Code",
        "Review",
        "Unit",
        "Testing",
        "Integration",
        "Testing",
        "cross",
        "browser",
        "functionality",
        "layout",
        "bugs",
        "browsers",
        "IE6",
        "Worked",
        "methodology",
        "Test",
        "Driven",
        "Development",
        "Created",
        "management",
        "reports",
        "dashboard",
        "Splunk",
        "data",
        "patterns",
        "metrics",
        "Maven",
        "Build",
        "tool",
        "tools",
        "GIT",
        "code",
        "repository",
        "version",
        "control",
        "repository",
        "SVN",
        "Subversion",
        "apache",
        "logging",
        "log4j",
        "framework",
        "User",
        "Interface",
        "Domain",
        "Level",
        "Messages",
        "Environment",
        "J2EE",
        "spring",
        "Hibernate",
        "AJAX",
        "JMS",
        "XML",
        "SOAP",
        "WSDL",
        "REST",
        "JDBC",
        "JAX",
        "WS",
        "JavaScript",
        "NodeJS",
        "UML",
        "HTML5",
        "JAXB",
        "SVN",
        "Log4J",
        "JMeter",
        "WebSphere",
        "Application",
        "Server",
        "Eclipse",
        "Oracle",
        "g",
        "Maven",
        "Jasmine",
        "Karma",
        "Protractor",
        "Jira",
        "Sr",
        "J2EE",
        "Developer",
        "State",
        "farm",
        "Insurance",
        "Bloomington",
        "IL",
        "March",
        "November",
        "Project",
        "Customer",
        "Transfer",
        "UI",
        "Back",
        "end",
        "application",
        "customer",
        "agent",
        "State",
        "Farm",
        "Insurance",
        "policies",
        "policies",
        "customers",
        "requirement",
        "transferring",
        "agent",
        "customer",
        "Responsibilities",
        "designing",
        "framework",
        "technique",
        "components",
        "requirements",
        "gathering",
        "analysis",
        "system",
        "requirements",
        "Use",
        "Cases",
        "Sequence",
        "Diagrams",
        "Designed",
        "Prototype",
        "project",
        "layout",
        "skeletons",
        "JQuery",
        "CSS",
        "HTML5",
        "JavaScript",
        "jQuery",
        "JSP",
        "custom",
        "tags",
        "web",
        "pages",
        "Bootstrap",
        "date",
        "picker",
        "Bootstrap",
        "templates",
        "selectors",
        "JavaScript",
        "jQuery",
        "user",
        "interactions",
        "pages",
        "web",
        "application",
        "Twitter",
        "Bootstrap",
        "JS",
        "React",
        "media",
        "queries",
        "JSF",
        "validation",
        "framework",
        "frontend",
        "validations",
        "Experience",
        "Single",
        "Page",
        "Application",
        "SPA",
        "Multiple",
        "Nested",
        "Views",
        "Routing",
        "Controllers",
        "Services",
        "Custom",
        "Directives",
        "Nodejs",
        "Bower",
        "Grunt",
        "MVC",
        "HTML5",
        "client",
        "side",
        "date",
        "criteria",
        "validation",
        "variables",
        "Backbone",
        "JS",
        "validation",
        "CSS",
        "classes",
        "feedback",
        "validation",
        "business",
        "modules",
        "integration",
        "Spring",
        "Hibernate",
        "data",
        "ORM",
        "mapping",
        "spring",
        "dependency",
        "injection",
        "MVC",
        "components",
        "business",
        "layer",
        "navigation",
        "part",
        "application",
        "Rest",
        "Web",
        "services",
        "Node",
        "Rest",
        "framework",
        "services",
        "Apache",
        "Casandra",
        "database",
        "services",
        "framework",
        "Spring",
        "MVC",
        "scratch",
        "filters",
        "use",
        "inheritance",
        "methods",
        "class",
        "components",
        "Action",
        "Mapping",
        "Action",
        "class",
        "Dispatch",
        "action",
        "class",
        "Action",
        "Form",
        "bean",
        "features",
        "services",
        "Closure",
        "evolution",
        "architecture",
        "RAML",
        "REST",
        "web",
        "services",
        "APIs",
        "MuleESB",
        "Exposed",
        "Rest",
        "Web",
        "Services",
        "systems",
        "Consumed",
        "Rest",
        "Web",
        "Services",
        "communication",
        "credit",
        "card",
        "information",
        "party",
        "application",
        "Java",
        "Messaging",
        "Services",
        "JMS",
        "communication",
        "exchange",
        "information",
        "payment",
        "status",
        "report",
        "credit",
        "card",
        "information",
        "data",
        "solutions",
        "Data",
        "stax",
        "Cassandra",
        "Developed",
        "Dao",
        "Layer",
        "CQL",
        "Cassandra",
        "Query",
        "Language",
        "data",
        "Cassandra",
        "cluster",
        "queries",
        "CQL",
        "Configured",
        "AWS",
        "workstations",
        "application",
        "requirement",
        "application",
        "AWS",
        "cloud",
        "layers",
        "serverside",
        "objects",
        "interfaces",
        "J2EE",
        "design",
        "patterns",
        "Swing",
        "spring",
        "J2EE",
        "MVC",
        "ModelViewController",
        "framework",
        "application",
        "MQ",
        "stability",
        "system",
        "users",
        "application",
        "JUNIT",
        "Test",
        "Cases",
        "Test",
        "Suites",
        "JUnit",
        "Java",
        "Service",
        "Layer",
        "data",
        "access",
        "layer",
        "model",
        "repository",
        "spring",
        "Persistence",
        "layer",
        "Hibernate",
        "Junit",
        "TestNG",
        "Framework",
        "test",
        "runner",
        "Selenium",
        "JMeter",
        "performance",
        "resources",
        "Protractor",
        "test",
        "classes",
        "end",
        "testing",
        "Front",
        "end",
        "Developed",
        "Maven",
        "scripts",
        "builds",
        "Maven",
        "integration",
        "servers",
        "Jenkins",
        "Created",
        "JIRA",
        "projects",
        "departments",
        "JIRA",
        "projects",
        "log4j",
        "control",
        "Git",
        "Version",
        "Control",
        "System",
        "application",
        "Use",
        "data",
        "structures",
        "algorithms",
        "time",
        "memory",
        "complexity",
        "reduction",
        "oops",
        "concepts",
        "inheritance",
        "encapsulation",
        "reusability",
        "performance",
        "application",
        "Web",
        "sphere",
        "application",
        "server",
        "Oracle",
        "Server",
        "end",
        "JDBC",
        "data",
        "source",
        "MQ",
        "Series",
        "JMS",
        "Queues",
        "IBM",
        "RAD",
        "connection",
        "queues",
        "Environment",
        "Java",
        "J2EE",
        "JDK",
        "RCP",
        "AWS",
        "SDK",
        "Ext",
        "JS",
        "Git",
        "Spring",
        "4x",
        "AWS",
        "Core",
        "Java",
        "SOAPRest",
        "Web",
        "Services",
        "JavaScript",
        "clojure",
        "UML",
        "Web",
        "Services",
        "HTML5",
        "CSS",
        "SDKs",
        "JIRA",
        "5x6x",
        "JAXB",
        "Linux",
        "JAXWS",
        "JAX",
        "RPC",
        "JMS",
        "JSF",
        "UNIX",
        "Selenium",
        "Angular",
        "JS",
        "Apache",
        "JMeter",
        "JQuery",
        "JUnit",
        "Maven",
        "EMR",
        "Oracle",
        "g",
        "Stack",
        "Developer",
        "Broadridge",
        "Financial",
        "Solutions",
        "Inc",
        "Jersey",
        "City",
        "NJ",
        "August",
        "March",
        "Project",
        "Impact",
        "Product",
        "Brokerage",
        "Dealers",
        "suite",
        "backoffice",
        "functions",
        "Web",
        "Interface",
        "Realtime",
        "Disaster",
        "Recovery",
        "Support",
        "Responsibilities",
        "phases",
        "development",
        "analysis",
        "design",
        "program",
        "analysis",
        "programming",
        "debugging",
        "testing",
        "documentation",
        "delivery",
        "implementation",
        "production",
        "phases",
        "process",
        "iterations",
        "Agile",
        "Scrum",
        "methodology",
        "functionalities",
        "code",
        "HTML",
        "CSS",
        "AngularJS",
        "D3",
        "NodeJS",
        "JavaScript",
        "Ajax",
        "JSON",
        "Bootstrap",
        "branding",
        "web",
        "UI",
        "CSS",
        "classes",
        "JQuery",
        "data",
        "client",
        "side",
        "application",
        "cross",
        "browser",
        "compatibility",
        "issues",
        "layout",
        "styles",
        "CSS",
        "CSS",
        "tags",
        "webpages",
        "HTML",
        "storage",
        "web",
        "applications",
        "data",
        "JavaScript",
        "user",
        "interfaces",
        "DIV",
        "tags",
        "upgrades",
        "Twitter",
        "Bootstrap",
        "model",
        "JQuery",
        "Ajax",
        "service",
        "calls",
        "pages",
        "server",
        "information",
        "AngularJS",
        "animations",
        "CSS",
        "classes",
        "module",
        "application",
        "html",
        "traffic",
        "data",
        "website",
        "Development",
        "MQ",
        "application",
        "programs",
        "Java",
        "JMS",
        "queues",
        "messages",
        "Multithreading",
        "programming",
        "execution",
        "model",
        "threads",
        "context",
        "process",
        "data",
        "resources",
        "order",
        "files",
        "Developed",
        "Spring",
        "Application",
        "Spring",
        "Core",
        "Spring",
        "AOP",
        "Spring",
        "Batch",
        "Spring",
        "Security",
        "Spring",
        "DAO",
        "Java",
        "server",
        "side",
        "programming",
        "Spring",
        "MVC",
        "Servlets",
        "JSP",
        "spring",
        "core",
        "springbeans",
        "spring",
        "test",
        "Filters",
        "servlets",
        "server",
        "side",
        "programming",
        "Integrated",
        "spring",
        "Hibernate",
        "Hibernate",
        "Template",
        "CRUD",
        "operations",
        "database",
        "MVC",
        "architecture",
        "spring",
        "Hibernate",
        "frameworks",
        "Hibernate",
        "database",
        "persistence",
        "DAO",
        "layer",
        "spring",
        "hibernate",
        "middleware",
        "application",
        "spring",
        "core",
        "framework",
        "Java",
        "EE",
        "components",
        "Spring",
        "MVC",
        "Spring",
        "IOC",
        "spring",
        "transactions",
        "spring",
        "Aop",
        "cross",
        "concerns",
        "spring",
        "security",
        "modules",
        "Spring",
        "JDBC",
        "template",
        "data",
        "data",
        "form",
        "tree",
        "hierarchies",
        "drag",
        "functionality",
        "Jdbc",
        "template",
        "Developed",
        "SOAP",
        "web",
        "service",
        "Apache",
        "CXF",
        "web",
        "services",
        "spring",
        "framework",
        "communication",
        "application",
        "scripts",
        "tables",
        "SQL",
        "queries",
        "procedures",
        "plans",
        "triggers",
        "applications",
        "requirements",
        "performance",
        "application",
        "BDD",
        "tests",
        "Cucumber",
        "behaviors",
        "step",
        "definitions",
        "Selenium",
        "support",
        "code",
        "Java",
        "Cucumber",
        "Expert",
        "Test",
        "Automation",
        "framework",
        "report",
        "generation",
        "strategies",
        "Selenium",
        "applications",
        "test",
        "cases",
        "unit",
        "testing",
        "Jenkins",
        "build",
        "process",
        "SVN",
        "version",
        "control",
        "tool",
        "project",
        "Maven",
        "JAR",
        "WAR",
        "EAR",
        "files",
        "repository",
        "SVN",
        "issues",
        "target",
        "browsers",
        "conjunction",
        "quality",
        "assurance",
        "support",
        "production",
        "environment",
        "defects",
        "solution",
        "defects",
        "Environment",
        "Spring",
        "MVC",
        "Spring",
        "Core",
        "Spring",
        "AOP",
        "Spring",
        "MVC",
        "Spring",
        "DAO",
        "Batch",
        "processing",
        "Multithreading",
        "JSP",
        "Servlet",
        "JQuery",
        "HTML",
        "CSS",
        "AJAX",
        "MAVEN",
        "Jenkins",
        "JUnit",
        "JMS",
        "J2EE",
        "Mule",
        "ESB",
        "Apache",
        "CXF",
        "Oracle",
        "g",
        "JavaJ2EE",
        "Developer",
        "HealthLine",
        "Systems",
        "INC",
        "San",
        "Diego",
        "CA",
        "November",
        "July",
        "Description",
        "project",
        "system",
        "Patient",
        "Administration",
        "Billing",
        "Pharmacy",
        "Management",
        "functions",
        "hospital",
        "functions",
        "Registration",
        "Recording",
        "Personal",
        "Details",
        "Handling",
        "Admissions",
        "Assigning",
        "Insurance",
        "Details",
        "Billing",
        "Recording",
        "Transfers",
        "hospital",
        "Creation",
        "Discharge",
        "Summary",
        "Responsibilities",
        "Requirements",
        "collection",
        "Analysis",
        "business",
        "team",
        "specifications",
        "specifications",
        "requirements",
        "plan",
        "software",
        "system",
        "UI",
        "HTML",
        "CSS",
        "JQuery",
        "data",
        "client",
        "side",
        "HTML",
        "templates",
        "traffic",
        "websites",
        "Collections",
        "API",
        "data",
        "business",
        "layers",
        "end",
        "JAXB",
        "SAXP",
        "XML",
        "Schema",
        "data",
        "XML",
        "format",
        "data",
        "XML",
        "format",
        "data",
        "base",
        "JAXB",
        "web",
        "services",
        "response",
        "data",
        "un",
        "marshalling",
        "process",
        "web",
        "services",
        "client",
        "thirdparty",
        "service",
        "API",
        "credit",
        "cards",
        "information",
        "XML",
        "Web",
        "Services",
        "SOAP",
        "amount",
        "application",
        "institutions",
        "configuration",
        "XML",
        "Schema",
        "application",
        "Java",
        "Messaging",
        "Services",
        "JMS",
        "exchange",
        "information",
        "payment",
        "status",
        "report",
        "JMS",
        "XML",
        "messages",
        "Java",
        "packages",
        "JMS",
        "messages",
        "topics",
        "queues",
        "message",
        "processing",
        "delivery",
        "Email",
        "module",
        "JMS",
        "message",
        "queue",
        "email",
        "client",
        "Java",
        "messages",
        "message",
        "queue",
        "message",
        "beans",
        "messages",
        "queue",
        "emails",
        "contents",
        "message",
        "session",
        "beans",
        "business",
        "logic",
        "fund",
        "transfer",
        "loan",
        "credit",
        "card",
        "deposit",
        "modules",
        "Action",
        "Classes",
        "server",
        "side",
        "validations",
        "account",
        "activity",
        "payment",
        "history",
        "Transactions",
        "views",
        "modules",
        "Struts",
        "tags",
        "JSTL20",
        "Mappings",
        "Expression",
        "Language",
        "controller",
        "components",
        "Strutsconfigxml",
        "mappings",
        "architecture",
        "MVC",
        "architecture",
        "Apache",
        "Struts12",
        "Framework",
        "Tiles",
        "Framework",
        "views",
        "layout",
        "Used",
        "Spring",
        "Framework",
        "Dependency",
        "injection",
        "Struts",
        "Framework",
        "Hibernate",
        "forms",
        "Struts",
        "validation",
        "framework",
        "Tiles",
        "framework",
        "presentation",
        "layer",
        "patterns",
        "Service",
        "Locater",
        "Abstract",
        "Factory",
        "Pattern",
        "business",
        "layer",
        "object",
        "behaviors",
        "relationships",
        "application",
        "components",
        "Wrote",
        "SQL",
        "procedures",
        "modifications",
        "database",
        "structure",
        "addition",
        "Controller",
        "Servlets",
        "Action",
        "Form",
        "process",
        "Oracle",
        "database",
        "data",
        "Developed",
        "Unit",
        "test",
        "cases",
        "Junit",
        "scripts",
        "builds",
        "Apache",
        "ANT",
        "Log4J",
        "log",
        "runtime",
        "exceptions",
        "Daily",
        "Rolling",
        "Log",
        "design",
        "documents",
        "use",
        "case",
        "diagram",
        "class",
        "diagrams",
        "sequence",
        "diagrams",
        "Rational",
        "Rose",
        "Clear",
        "Case",
        "source",
        "code",
        "maintenance",
        "Environment",
        "J2EE",
        "Java",
        "SDK",
        "SAX",
        "JSP",
        "JMS",
        "HTML",
        "JavaScript",
        "Struts",
        "Hibernate",
        "Servlets",
        "Eclipse",
        "Web",
        "Services",
        "JUnit",
        "Unix",
        "JNI",
        "WebSphere",
        "Application",
        "Server",
        "ANT",
        "CVS",
        "Oracle",
        "g",
        "JavaJ2EE",
        "Developer",
        "Matrix",
        "solutions",
        "June",
        "October",
        "Project",
        "project",
        "dealers",
        "service",
        "warranty",
        "end",
        "customers",
        "end",
        "customers",
        "warranty",
        "dealer",
        "warranty",
        "service",
        "dealer",
        "IT",
        "system",
        "acts",
        "system",
        "IT",
        "systems",
        "dealers",
        "invoice",
        "end",
        "customers",
        "service",
        "repairs",
        "payments",
        "dealers",
        "service",
        "repairs",
        "dealer",
        "warranty",
        "system",
        "conjunction",
        "Billing",
        "Invoice",
        "system",
        "Design",
        "development",
        "Implementation",
        "deployment",
        "SDLC",
        "project",
        "methodology",
        "Experience",
        "Retrospective",
        "meetings",
        "Client",
        "Interaction",
        "Timely",
        "delivery",
        "modules",
        "product",
        "issues",
        "frontend",
        "JSPs",
        "HTML",
        "CSS",
        "Bootstrap",
        "JavaScript",
        "client",
        "side",
        "validations",
        "JSF",
        "validation",
        "framework",
        "frontend",
        "validations",
        "JSP",
        "custom",
        "tags",
        "web",
        "tier",
        "web",
        "pages",
        "User",
        "Interface",
        "UI",
        "requirements",
        "UI",
        "pages",
        "web",
        "scratch",
        "Contributed",
        "end",
        "end",
        "flow",
        "JSPs",
        "end",
        "Servlets",
        "Controller",
        "BO",
        "classes",
        "tier",
        "EJB",
        "model",
        "Struts",
        "Framework",
        "Developed",
        "Enterprise",
        "Java",
        "Beans",
        "Entity",
        "Beans",
        "Session",
        "Beans",
        "Stateless",
        "State",
        "Full",
        "Session",
        "beans",
        "Developed",
        "Session",
        "Beans",
        "requests",
        "user",
        "entity",
        "beans",
        "customer",
        "information",
        "EJB",
        "components",
        "business",
        "functionality",
        "Web",
        "Logic",
        "application",
        "server",
        "JSP",
        "Stateless",
        "session",
        "Beans",
        "business",
        "logic",
        "Email",
        "module",
        "JMS",
        "message",
        "queue",
        "email",
        "client",
        "Java",
        "messages",
        "message",
        "queue",
        "message",
        "beans",
        "messages",
        "queue",
        "emails",
        "contents",
        "message",
        "writing",
        "procedures",
        "functions",
        "triggers",
        "ORACLE",
        "Database",
        "Management",
        "System",
        "Wrote",
        "statement",
        "API",
        "Created",
        "Unit",
        "test",
        "Acceptance",
        "test",
        "Integration",
        "Test",
        "Documents",
        "Code",
        "Review",
        "Documents",
        "Performed",
        "regression",
        "testing",
        "application",
        "modules",
        "user",
        "applications",
        "ANT",
        "scripts",
        "application",
        "artifacts",
        "JIRA",
        "issue",
        "workflow",
        "client",
        "side",
        "server",
        "side",
        "UML",
        "Rational",
        "Unified",
        "Process",
        "RUP",
        "Design",
        "documentation",
        "walk",
        "analysis",
        "Use",
        "Cases",
        "feasibility",
        "scope",
        "Class",
        "Diagrams",
        "Sequence",
        "Diagrams",
        "Object",
        "Diagrams",
        "IBM",
        "Rational",
        "Rose",
        "detail",
        "design",
        "application",
        "Environment",
        "Java",
        "J2EE",
        "HTML",
        "CSS",
        "JSP",
        "Servlets",
        "EJB",
        "JavaScript",
        "MySQL",
        "Struts",
        "JMS",
        "Eclipse",
        "Web",
        "logic",
        "Server",
        "Jdbc",
        "Junit",
        "UML",
        "Rational",
        "Clear",
        "Case",
        "Ant",
        "Jira",
        "Education",
        "Bachelors",
        "Skills",
        "CSS",
        "years",
        "database",
        "years",
        "J2EE",
        "years",
        "Java",
        "years",
        "JavaScript",
        "years",
        "HTML",
        "CSS",
        "Bootstrap",
        "React",
        "JS",
        "Ajax",
        "Rest",
        "web",
        "services",
        "Micro",
        "Services",
        "SpringMVC",
        "Java",
        "Scala",
        "Spring",
        "Boot",
        "Spring",
        "Actuator",
        "Multithreading",
        "Spring",
        "Hibernate",
        "4x",
        "Spring",
        "Batch",
        "Oracle",
        "g",
        "Apache",
        "Kafka",
        "Docker",
        "ELKElastic",
        "search",
        "Logstash",
        "Kabana",
        "Spring",
        "Security",
        "JUnit",
        "Karma",
        "jasmine",
        "Jenkins",
        "Apache",
        "Maven",
        "JIRA",
        "Git",
        "Additional",
        "Information",
        "SKILLS",
        "CSS",
        "years",
        "database",
        "years",
        "J2EE",
        "years",
        "Java",
        "years",
        "JavaScript",
        "years",
        "Technical",
        "Skills",
        "Programming",
        "Language",
        "Core",
        "Java",
        "SQL",
        "PLSQL",
        "JavaJ2EE",
        "Technologies",
        "Servlets",
        "JSP",
        "JSTL",
        "JDBC",
        "JMS",
        "JNDI",
        "RMI",
        "EJB",
        "Swing",
        "AWT",
        "Multithreading",
        "Java",
        "Networking",
        "Java",
        "Frameworks",
        "Spring",
        "MVC",
        "Struts",
        "JSF",
        "ApplicationWeb",
        "Servers",
        "WebLogic",
        "IBM",
        "WebSphere",
        "JBoss",
        "Tomcat",
        "ORM",
        "Frameworks",
        "Hibernate",
        "JSF",
        "IBATIS",
        "Web",
        "Technologies",
        "JSP",
        "JavaScript",
        "JQuery",
        "AJAX",
        "XML",
        "XSLT",
        "XHTML",
        "DHTML",
        "CSS",
        "SASS",
        "HTML",
        "AngularJS",
        "Ext",
        "JS",
        "backbone",
        "JS",
        "Spring",
        "Framework",
        "Spring",
        "IOC",
        "Spring",
        "Batch",
        "Spring",
        "Boot",
        "Spring",
        "Security",
        "Database",
        "Server",
        "Oracle",
        "DB2",
        "SQL",
        "Server",
        "MySQL",
        "RDBMS",
        "MongoDB",
        "Cassandra",
        "IDE",
        "Eclipse",
        "NetBeans",
        "Intellij",
        "STS",
        "Web",
        "Services",
        "REST",
        "JAXWS",
        "JAXRPC",
        "JAXRS",
        "UDDI",
        "Apache",
        "CXF",
        "Version",
        "Control",
        "GIT",
        "CVS",
        "SVN",
        "Clear",
        "case",
        "Build",
        "Tools",
        "ANT",
        "Maven",
        "Gradle",
        "Methodologies",
        "Agile",
        "Scrum",
        "WaterFall",
        "Rapid",
        "Application",
        "Development",
        "Test",
        "development",
        "Modelling",
        "Tools",
        "Microsoft",
        "Visio",
        "Rational",
        "Rose",
        "Operating",
        "System",
        "Windows",
        "Mac",
        "Linux",
        "UNIX",
        "Tools",
        "Apache",
        "Camel",
        "ESB",
        "cucumber",
        "Rational",
        "Rose",
        "Microsoft",
        "Visio",
        "Testing",
        "Junit",
        "Jasmine",
        "JUnit",
        "SoapUI",
        "Test",
        "NG",
        "mock",
        "power",
        "mock",
        "Karma",
        "Protractor",
        "Mockito",
        "Selenium",
        "Jenkins",
        "Docker"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T22:59:53.794885",
    "resume_data": "Sr Java J2EE Full Stack Developer Sr span lJavaspan J2EE Full Stack span lDeveloperspan Sr Java J2EE Full Stack Developer CSX Jacksonville FL Authorized to work in the US for any employer Work Experience Sr Java J2EE Full Stack Developer CSX Jacksonville FL March 2016 to Present Description The application is a web based application designed and developed to support the Ship CSX Equipment Diversion System initiative by providing a means to receive review process and track diversion requests that will be submitted through Ship CSX Also other major goals of this project include workflow notifications and work queuing to eliminate the need to print and maintain printed copies of diversion file documentation Responsibilities Involved in various phases of Software Development Life Cycle SDLC of the application like Requirement gathering Design Analysis and Code development by following Test Driven Development TDD and agile methodology Developed UI pages with HTML5 CSS3 JavaScript JQuery and used Boot Strap for creating Responsive Web pages Created AngularJS Controller to control the flow of data which isolate scopes perform operations in UI pages Creating a range loop directive modules Expressions scope Templates and components in AngularJS ReactJS NodeJS and developed the server side single page applications on AngularJS platform using JavaScript programming Followed the strict patterns of implementing modelviewcontroller MVC architecture using Angular Framework Developed a dashboard based on Ajax calls with Business Customers Count Realtime graphs for Analytical Reporting and client side Interface using Node JS and Used for creating reusable UI components Used Multithreading to overcome the errors in transactions and to handle all the threads by the main thread process Developed the Application using Spring Features like Spring MVC Spring DAO Spring Boot Spring Batch and Spring Security for application access and authorization Spring Integration Spring AOP for crosscutting concerns Used Spring Ribbon API to check servers are up and running in live environment to detect those servers that are down Developed RESTful service interface using Spring MVC to the underlying Agent Services API and Implemented RESTful web services for communication between client and servers to run application on variety platforms and frameworks Used Spring Annotations for mapping and to simplify the business logic for creating Spring MVC RESTful web services Designed spring boot mechanism without configuration XMLs and replaced it with Java classes and also used spring boot Actuator to externalize applications configuration properties for different environments Used Spring Batch as spring batch jobs can meet the requirements of reliability flexibility robustness and traceability which are essential for automatic processing of large amount of data in the application Designing and implementing scalable RESTful and microservicesbased services for mobile backend The backend is being written in Java using Spring Boot for simplicity and scalability Spring MVC Framework IOC design pattern is used to have relationships between application components It is also used to separate the application configuration and dependency specification from the actual application code Used Micro service architecture with Spring Boot based services interacting through a combination of REST and Apache Kafka message brokers Produced and consumed centralized Spring Restful Web Services for Enterprise and web applications to consume in JSON format and in trusted clientserver environment Used Hibernate environment for configurations mappings annotation extensions for easy mappings relationships between tables and entity classes to access and update information in the database Extensively used Hibernate concepts such as inheritance lazy loading dirty checking locking and transactions Defined Hibernate Named Queries for Batch related operations while defined Criteria Queries for Micro services Worked with ELK stack for searching the log routing the log data and for visualizing the logged data Worked with Advanced Java 18 features like Lambda for adding functionality processing capability and Stream API to facilitate pipeline processing and method to eliminate elements based on the criteria Worked on Oracle 11g database concepts such as locking transactions indexes sharing replication schema design Created Stored Procedures User Defined functions Views and implemented the Error Handling in the Stored Procedures and Modified already existing stored procedures triggers views indexes depending on the requirement Migration of Existing Application to AWS cloud platform Used Amazon Web Services AWS like EC2 servers S3 storage RDS instances cloud watch and Cloud Front for promoting code in multiple environments Deployed Microservices as Restful Web Services on Amazon Elastic Beanstalk TIBCO EMS extensively Worked on creation of custom Docker container images tagging and pushing the images to the servers and used Docker coupled with loadbalancing tool NGNIX to achieve continuous delivery Used slick to query and storing in database in a Scala fashion using the powerful Scala collection framework Design and implementation of accessibility features and collaborating with user requirements up to date Used Spring Core for dependency injection and Hibernate Framework persistence API onto Oracle database Setup the continuous Integration CI process and continuous deployment CD pipeline jobs in Jenkins brew master instance Ansible on Kubernetes container environment utilizing kubernetes Designing Development JUnit testing and Integration of many components of the applications from endto end and Prepared Junit test cases and executed them using Junit and Continuum for integration testing Develop unit test using Karma and Jasmine Followed strict patterns of RA team for unit test cases with jasmine Used JMeter for stress testing Selenium WebDriver for testing the automation code Followed strict patterns of RA team for unit test cases with jasmine and Used Drools Decision table using excel sheets with a Spring MVC project Used Maven as a build tool for compilation and building JAR WAR and EAR files and retrieved all the dependencies required for the running the application Log4J for logging errors messages and control log statements Used Rabbit MQ to incorporate pubsub design pattern to send messages to subscribers Worked on Git as version control management and JIRA as Defect management for bug issue tracking of application Used JENKINS for continuous integration CI and continuous deployment CD pipeline Implemented the application using design patterns such as Session Faade Business Delegate Adaptor Bean Factory and Singleton and Deployed the application in Apache Tomcat Server Environment HTML CSS Bootstrap AngularJS 20 React JS Ajax Rest web services Micro Services SpringMVC Java 1718 Scala Spring Boot Spring Actuator Multithreading Spring 4x Hibernate 4x Spring Batch Oracle 11g Apache Kafka AWS Docker ELKElastic search Logstash and Kabana Spring Security JUnit Karma jasmine Jenkins Apache Maven JIRA Git Sr JavaJ2EE Full Stack Developer Mercury Insurance Group Los Angeles CA December 2014 to February 2016 Description The insurance based company provides insurance for car homes Condo business auto insurance etc The developed application provides web based online insurance services Application also supports features for customer care services and internal reporting and log maintenance The application had been developed using Struts framework along with hibernate and log4j Responsibilities Involved in all the phases of software development lifecycle SDLC including Requirements Collection Design Analysis of the Customer Specifications Development Deployment and Customization of the Application Developed UI using HTML CSS and jQuery to display the data on the client side Wrote SPA Single page web applications using NodeJs as the server side GULP WEBPACK ES6 Restful web services plus AJAX and Angular JS Used backbone JS to optimize inbrowser use to load the module and to improve the Speed Frontend development by utilizing Java script frameworks such as JQuery Backbone Js NodeJS and AngularJS Developed a dashboard based on Ajax calls with Business Customers Count Flags Realtime graphs for Analytical Reporting using NodeJs and Wrote code to fetch data from web services using jQuery AJAX for asynchronous communication via JSON response and updating the modified data to display in UI pages Called web services with REST Architecture to specify constraints through Angular JS services to get XML file data Involved in implementation of enterprise application communication and integration with Web Services and Legacy Systems using REST Using Axis and Jersey frameworks Used various Core Java concepts such as MultiThreading Exception Handling Collections framework extensively to store retrieve and manipulate data objects of application in the business logic layer Involved in writing Spring Configuration XML file that contains declarations and other dependent objects declaration Used J2EE Design patterns like Singleton Service Locator Session Faade and Business Delegate during development Developed micro services with Spring Eureka to retrieve API routes for the entire cluster Using this strategy each micro service in a cluster can be load balanced and exposed through one API gateway Used Spring Transactions in the application and spring beans to develop Session beans for the business logic Spring MVC Framework IOC design pattern is used to have relationships between application components It is also used to separate the application configuration and dependency specification from the actual application code Implemented spring service layer with dependency wiring transaction DAO Annotations for Dependency Injection Designed and developed Application based on Spring Framework Spring MVC and spring templates Used Spring Framework for Dependency Injection and integrated with Hibernate DAOs for ORM mapping Composed and executed MongoDB document scripts to insert update NoSQL database automating data changes reporting and also wrote MongoDB client to receive data from AMC for Companies Used NoSQL MongoDB database to provide recommendations on Performance tuning for applications Used Hibernate framework in persistence layer for mapping an objectoriented domain model to a relational database Worked on Pivotal Cloud Foundry to host Application which used to rolebased access controls applying enforcing roles and permissions to ensure that users can only view and affect the spaces for which they have been granted access Rearchitect monolithic service into micro services based architecture using spring boot and pivotal cloud foundry Developed EJS access layer and components using JPAHibernate frameworks implementations for object persistence to Derby database for mock domain and in Oracle database for real time domains Used Selenium Data Driven framework for testing the application and integrating it with Maven Build Management Tool TestNG Unit Testing tool and Jenkins Continuous Integration Tool for continuous delivery pipeline Involved in Code Review Unit Testing and Integration Testing Tested cross browser functionality and fixed major layout bugs for supported browsers including IE6 Worked in agile methodology for Test Driven Development Created and configured management reports and dashboard using Splunk by identifying data patterns metrics Used Maven as the Build tool Experienced in using assistant tools such as GIT to access the code repository and version control repository SVN Subversion by apache Implemented the logging using log4j framework which is used to log both User Interface and Domain Level Messages Environment J2EE 18 spring 40 Hibernate 40 AJAX JMS 11 XML SOAP WSDL REST JDBC JAX WS 22 JavaScript 182 AngularJS NodeJS UML HTML5 JAXB 22 SVN Log4J JMeter WebSphere 85 Application Server Eclipse Oracle 11g Maven Jasmine Karma Protractor Jira Sr J2EE Developer State farm Insurance Bloomington IL March 2014 to November 2014 Project Customer Transfer is UI and Back end based application It can be used as a customer can transfer the agent for his State Farm Insurance policies It includes all policies depends on the customers requirement and rendering the complete transferring to the agent as well as customer Responsibilities Participated in designing of the framework required technique to use in each components Involved in requirements gathering and analysis from the existing system Captured requirements using Use Cases and Sequence Diagrams Designed Prototype project layout skeletons using JQuery CSS HTML5 JavaScript and various jQuery used JSP custom tags to dynamically generate web pages Bootstrap plugin like date picker Bootstrap templates and selectors Used JavaScript jQuery for user interactions pages and creating responsive web application integrating Twitter Bootstrap with Angular JS React js media queries and JSF validation framework for frontend validations Experience in Single Page Application SPA using AngularJS created Multiple Nested Views Routing Controllers Services and Custom Directives Nodejs Bower Grunt Actively involved in using MVC HTML5 to enable client side date to meets specific criteria by applying various validation variables and used the Backbone JS validation CSS classes to provide visual feedback on validation Implemented the associated business modules integration using Spring and Hibernate data ORM mapping Used spring dependency injection MVC components to implement business layer and navigation part of application Worked on Rest Web services Node Rest framework for backend services Apache Casandra for database services Designed the framework mainly in Spring MVC built from scratch and wrote filters to limit the use inheritance of some methods class components such as Action Mapping Action class Dispatch action class Action Form bean Developed new features for a RESTful backend services in Closure and led evolution of an entire backend architecture and used RAML based REST web services for APIs using MuleESB Exposed and consumed Rest based Web Services to communicate between systems Consumed Rest Web Services for communication and getting the credit card information from third party application Used Java Messaging Services JMS for reliable and asynchronous communication and exchange of important required information such as payment status report and credit card information Responsible for building scalable distributed data solutions using Data stax Cassandra Developed Dao Layer in CQL Cassandra Query Language for retrieving the data present in Cassandra cluster by running queries in CQL Configured and verified AWS workstations as per application requirement and deployed application to AWS cloud Defined and constructed layers serverside objects and clientside interfaces based on J2EE design patterns and implemented Swing spring and J2EE based MVC ModelViewController framework for the application Used Active MQ to improve the stability and scaled the system for more concurrent users of the application Created JUNIT Test Cases Test Suites using JUnit for Java Service Layer data access layer for model and repository which was developed using spring Persistence layer using Hibernate Used Junit and TestNG testing Framework as a test runner with Selenium and JMeter to test performance both on static dynamic resources and developed Protractor test classes for end to end testing in Front end Developed Maven scripts and developed builds using Maven and continuous integration servers like Jenkins Created and configured new JIRA projects and worked with departments to maintain existing JIRA projects Used log4j to deliver control over logging and Used Git as Version Control System for the application Use of data structures and algorithms for time and memory complexity reduction oops concepts like inheritance encapsulation reusability and better performance of application Configured the Web sphere application server to connect with Oracle Server in the back end by creating JDBC data source and configured MQ Series and JMS Queues with IBM RAD and WAS to create new connection queues Environment Java J2EE JDK 18 RCP AWS SDK Ext JS Git Spring 4x AWS SNSSQS hibernate4x Core Java SOAPRest Web Services JavaScript clojure UML Web Services HTML5 CSS SDKs JIRA 5x6x JAXB Linux JAXWS JAX RPC JMS JSF UNIX Selenium Angular JS NodeJs Apache JMeter JQuery JUnit Maven EMR Oracle 10g Full Stack Developer Broadridge Financial Solutions Inc Jersey City NJ August 2013 to March 2014 Project Impact is a Product Developed for the Brokerage Dealers It is integrating a suite of front middle backoffice functions and is enhanced with Web Enabled Interface Realtime Disaster Recovery Support Responsibilities Participated in all phases of development analysis design program analysis programming debugging testing documentation delivery implementation and production Involved in all phases and process of iterations under the Agile Scrum methodology Used the functionalities for writing code in HTML CSS AngularJS D3 NodeJS JavaScript Ajax JSON and Bootstrap Created branding in the web UI using CSS classes and JQuery to display the data on the client side application Worked through cross browser compatibility issues with layout and styles for all new CSS that was implemented CSS latest tags are used to design the webpages and HTML local storage web applications are used to store data developed JavaScript for user interfaces and DIV tags made upgrades using Twitter Bootstrap model Used JQuery Ajax for service calls on pages to interact with the server for information and implement the AngularJS in creating animations based on CSS classes required for every module of application Built html templates for high traffic and complex data driven website and Development of MQ application programs for Java JMS environments using queues and messages Used Multithreading as a programming and an execution model that allows multiple threads to exist within the context of a single process and to pull data concurrently from multiple resources in order to generate required files Developed Spring Application using Spring Core Spring AOP Spring Batch Spring Security and Spring DAO Extensively worked on Java server side programming using Spring MVC Servlets and JSP Extensively used spring core springcontext springbeans spring test Filters servlets and server side programming Integrated spring with Hibernate using Hibernate Template to perform CRUD operations against database Implemented MVC architecture using spring Hibernate frameworks combined with Hibernate for database persistence Designed and Implemented the DAO layer using spring hibernate Designed and developed middleware application using spring core framework and Implemented Java EE components using Spring MVC Spring IOC spring transactions spring Aop for cross cutting concerns and spring security modules Used Spring JDBC template to retrieve the data and represented the data in the form of tree which has seven hierarchies and implemented drag and drop functionality to Jdbc template Developed SOAP web service using Apache CXF web services and spring framework for communication of application Wrote various scripts for creatingmodifying tables SQL queries and stored procedures and explain plans and triggers as per applications requirements and enhanced performance by running the application Developed BDD tests using Cucumber by writing behaviors and step definitions Developed required Selenium support code in Java for Cucumber and Expert in designing Test Automation framework and report generation strategies in Selenium for webbased applications and prepared test cases for unit testing Used Jenkins for the automatic build process and Worked with SVN as a version control tool in the project and Used Maven for building JAR WAR and EAR files which are pulled to repository of SVN Debugged issues in the target browsers in conjunction with quality assurance and Provided Technical support for production environment by analyzing the defects implementing the solution defects Environment Spring MVC Spring Core Spring AOP Spring MVC Spring DAO Batch processing Multithreading JSP Servlet JQuery HTML CSS AJAX MAVEN Jenkins JUnit JMS J2EE Mule ESB Apache CXF Oracle 10g JavaJ2EE Developer HealthLine Systems INC San Diego CA November 2012 to July 2013 Description The project is to develop a system that provides Patient Administration Billing and Pharmacy Management functions for the hospital The major functions are Allocating Registration Recording Personal Details Handling Admissions and Assigning Insurance Details for Billing Recording Transfers within the hospital Creation of Discharge Summary Responsibilities Involved in the Requirements collection Analysis from the business team preparing functional specifications and technical specifications as per requirements includes a detailed plan to develop alter and maintain software system Developed UI using HTML CSS JQuery to display the data on client side and HTML templates for high traffic websites Worked on JAVA Collections API for handling the java data objects between the business layers and the front end Worked with JAXB SAXP and XML Schema for exporting data into XML format and importing data from XML format to data base and JAXB in the web services request response data marshalling as well as un marshalling process Implemented the web services client to consume the thirdparty service API for validating credit cards information Used XML Web Services using SOAP to transfer the amount to transfer application that is remote and global to different financial institutions and designed configuration XML Schema for the application Used Java Messaging Services JMS for reliable and asynchronous exchange of important information such as payment status report parsing of JMS XML messages and developed generic Java packages to produce and consume JMS messages through topics and queues in asynchronous message processing with guaranteed delivery Implemented the Email module which included setting up JMS message queue designing and developing email client which sent Java messages to the message queue designing and developing message driven beans that consumed the messages from the queue and sent emails using contents from the message Implemented session beans to handle business logic for fund transfer loan credit card fixed deposit modules Implemented Action Classes and server side validations for account activity payment history and Transactions Implemented views modules using Struts tags JSTL20 Mappings Expression Language controller components and Configured all Strutsconfigxml with all the mappings required by the architecture Implemented the MVC architecture using Apache Struts12 Framework and Tiles Framework for the views layout Used Spring 20 Framework for Dependency injection and integrated it with the Struts Framework and Hibernate Validated all forms using Struts validation framework and implemented Tiles framework in the presentation layer Worked with various java patterns such as Service Locater and Abstract Factory Pattern at the business layer for effective object behaviors used to have relationships between application components Wrote SQL queries stored procedures modifications to existing database structure for addition features Controller Servlets Action Form objects for process of interacting with Oracle database and retrieving dynamic data Developed Unit test cases using Junit and Developed ant scripts and developed builds using Apache ANT Used Log4J to capture the log that includes runtime exceptions and to create Daily Rolling Log Created the design documents with use case diagram class diagrams and sequence diagrams using Rational Rose and Used Clear Case for source code maintenance Environment J2EE Java SDK XML SAX JSP JMS HTML JavaScript Struts Hibernate Servlets Eclipse Web Services JUnit Unix JNI WebSphere Application Server ANT CVS Oracle 10g JavaJ2EE Developer Matrix solutions IN June 2009 to October 2012 Project This project enables the dealers to provide service warranty to the end customers The end customers can buy the warranty from one dealer and can utilize the warranty service at any other dealer IT system for this acts as the centralized system It aids the IT systems of the dealers to generate the invoice to the end customers for service repairs It makes payments to the dealers for the service repairs The dealer warranty system works in conjunction with the Billing and Invoice system Responsibilities Highly responsive in Design development Implementation and deployment of SDLC of entire project Agile methodology has been followed Experience with Retrospective meetings and actively involved in Client Interaction and Timely delivery of modules and resolving product issues Developed frontend using JSPs HTML CSS Bootstrap and JavaScript for client side validations and JSF validation framework for frontend validations and JSP custom tags in the web tier to dynamically generate web pages Analyzed the User Interface UI requirements and developed the complete UI pages for web portal from the scratch Contributed to project by working on end to end flow developing JSPs for front end by developing Servlets as Controller BO classes in middle tier and EJB as model in the Struts Framework Developed Enterprise Java Beans like Entity Beans Session Beans both Stateless and State Full Session beans Developed Session Beans to process requests from the user and used entity beans to retrieve and update customer information and also various EJB components to fulfill the business functionality Worked on Web Logic application server to deploy JSP and Stateless session Beans implemented the business logic Implemented the Email module which included setting up JMS message queue designing and developing email client which sent Java messages to the message queue designing and developing message driven beans that consumed the messages from the queue and sent emails using contents from the message Involved in writing and executing stored procedures functions and triggers for ORACLE to create a Database Management System and also Wrote Prepared statement and used API Created Unit test Acceptance test and Integration Test Documents and Code Review Documents Performed regression testing on application modules delivering 100 user accepted applications Written ANT scripts for building application artifacts and Used JIRA for issue tracking Designed the workflow for the client side and server side in UML using Rational Unified Process RUP and created the detailed Design documentation Involved in walk through with the analysis for Use Cases feasibility scope and designed Class Diagrams Sequence Diagrams and Object Diagrams using IBM Rational Rose to model the detail design of the application Environment Java J2EE HTML CSS JSP Servlets EJB JavaScript MySQL Struts JMS Eclipse Web logic Server Jdbc Junit UML Rational Clear Case Ant Jira Education Bachelors Skills CSS 8 years database 8 years J2EE 8 years Java 8 years JavaScript 8 years HTML CSS Bootstrap AngularJS 20 React JS Ajax Rest web services Micro Services SpringMVC Java 1718 Scala Spring Boot Spring Actuator Multithreading Spring 4x Hibernate 4x Spring Batch Oracle 11g Apache Kafka AWS Docker ELKElastic search Logstash and Kabana Spring Security JUnit Karma jasmine Jenkins Apache Maven JIRA Git Additional Information SKILLS CSS 8 years database 8 years J2EE 8 years Java 8 years JavaScript 8 years Technical Skills Programming Language Core Java SQL PLSQL JavaJ2EE Technologies Servlets JSP JSTL JDBC JMS JNDI RMI EJB Swing AWT Multithreading Java Networking Java Frameworks Spring MVC Struts 20 JSF ApplicationWeb Servers WebLogic IBM WebSphere JBoss Tomcat ORM Frameworks Hibernate JSF IBATIS Web Technologies JSP JavaScript JQuery AJAX XML XSLT XHTML DHTML CSS SASS HTML AngularJS Ext JS backbone JS Spring Framework Spring IOC Spring Batch Spring Boot Spring Security Database Server Oracle DB2 SQL Server MySQL RDBMS MongoDB Cassandra IDE Eclipse NetBeans Intellij STS Web Services REST SOAP JAXWS JAXRPC JAXRS WSDLAxis2 UDDI Apache CXF Version Control GIT CVS SVN Clear case Build Tools ANT Maven Gradle Methodologies Agile Scrum WaterFall Rapid Application Development Test Driven development Modelling Tools Microsoft Visio Rational Rose Operating System Windows Mac Linux UNIX Tools Apache Camel ESB cucumber Rational Rose Microsoft Visio Testing logging Junit Jasmine JUnit Log4J SoapUI Test NG easy mock and power mock Karma Protractor Mockito Selenium Jenkins Docker",
    "unique_id": "ab176781-48d4-430c-aba3-ae0311fc46a0"
}