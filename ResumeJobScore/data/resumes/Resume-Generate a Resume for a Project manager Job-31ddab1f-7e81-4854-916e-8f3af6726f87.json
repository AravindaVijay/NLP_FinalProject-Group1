{
    "clean_data": "Sr Python Developer Sr span lPythonspan span lDeveloperspan Sr Python Developer JPMorgan Chase New York NY 4 years of experience in developing webbased applications software development and design using Python Django XML CSS HTML C jQuery and AngularJS Experienced with WAMP Windows Apache MySQL and PythonPHP and LAMP Linux Apache MySQL and PythonPHP Architecture Experience of using Python modules like NumPy Matplotlib Pickle Pandas SciPy wxPython PyTables PyQt etc for generating complex graphical data creation of histograms etc Experienced in implementing Model View Control MVC architecture using serverside applications like Django and Flask for developing web applications Experienced with JSON based RESTful web services and XML based SOAP web services Worked on various applications using python integrated IDEs like Eclipse IntelliJ Sublime Text and PyCharm Experience of working with relational databases like Oracle SQLite PostgreSQL MySQL DB2 and nonrelational databases like MongoDB and Cassandra Worked on JIRA for bug tracking and communicating for better results Strong Experience in Big data technologies including Apache Spark Hadoop HDFS Hive MongoDB Experience in project deployment using Jenkins and Amazon Web Services AWS Proficient in using editors Eclipse PyCharm PyScripter Notepad and Sublime Text while developing different applications Good experience of software development in Python libraries used Beautiful Soup NumPy SciPy Matplotlib Pandas data frame urllib2 MySQL dB for database connectivity and IDEs sublime text PyCharm Microsoft Visual Code Experienced in all facets of full CM process with tools such as SVN GIT PVCS Clear Case Clear Quest Perforce Cruise Control Jenkins Bamboo Chef and Puppet Experience to build servers using AWS which includes importing necessary volumes launching the EC2 instance creating security groups autoscaling load balancers Route 53 and SNS as per the architecture Strong and deep Knowledge about setting up Python REST API Frame work using Django and Experience in working with Python ORM Libraries including Django ORM Expertise in AWS platform and its dimensions of scalability including EC2 ECS Elastic Beanstalk S3 EBS VPC ELB SNS RDS IAM Route 53 Auto scaling Cloud Front Cloud Watch Security Groups Having experienced in Agile Methodologies PCI Scrum stories and sprints experience in a Python based environment Data analytics data wrangling and Excel data extracts Experience in application development using PYTHON Django HTML5 CSS JavaScript and jQuery MySQL PostgreSQL and SQLite Experience with continuous integration and automation using Jenkins and basic knowledge Unit testing Test driven Development TDD Load Testing Experience in project deployment using Google CloudJenkins Elastic Search and using web Services like Amazon Web Services AWS Experience in working on different operating systemswindows Linux UNIX and Mac also strong development experience on Linux based operating systems such as Ubuntu Red Hat and CentOS Having good domain expertise in developing applicationstools using Perl and programming in C C Basic knowledge on developing J2EE applications using IDEs like RAD Eclipse WSAD and NetBeans Experience in NoSQL databases like Apache Cassandra 12 20 and 21 and MongoDB 26 24 Orient DB Experience in using Git GitHub and Amazon EC2 and deployment using Heroku Experience working with Vagrant and Docker images and containers and Ansible Experience in database programming using RDBMS like ORACLE and SQL R22012 and maintaining the database including requirement analysis design data conversion loading testing and implementation Work Experience Sr Python Developer JPMorgan Chase New York NY April 2018 to Present Involved in developing test automation framework with Python scripting Selenium Generating various capacity planning reports graphical using Python packages like NumPy matplotlib Wrote and executed various MYSQL database queries from python using pythonMySQL connector and MySQL dB package Automate different workflows which are initiated manually with Python scripts and Unix shell scripting Created activated and programed in Anaconda environment Use Python unit and functional testing modules such as unit test unittest2 mock and custom frameworks inline with Agile Software Development methodologies Extensively used Django micro service framework for simple request and response Designed RESTful XML web service for handling AJAX requests Develop Sqoop scripts to handle change data capture for processing incremental records between new arrived and existing data in RDBMS tables Manage datasets using Panda data frames and MySQL queried MYSQL database queries from python using PythonMySQL connector and MySQL dB package to retrieve information Developed and tested many features for dashboard using Python 37 Java Bootstrap CSS JavaScript and jQuery Generated Python Django forms to record data of online users and used PyTest for writing test cases Worked on creating and documenting POC for helping migrate the current application to micro service architecture The architecture included Docker as the container technology with Kubernetes and worked on with REST API Implemented and modified various SQL queries and Functions Cursors and Triggers as per the client requirements Used Pandas as API to put the data as time series and tabular format for manipulation and retrieval of data Clean data and processed third party spending data into maneuverable deliverables within specific format with Excel macros and python libraries such as NumPy SQL Alchemy and matplotlib Helped with the migration from the old server to Jira database Matching Fields with Python scripts for transferring and verifying the information Used Selenium Library to write fully functioning test automation process that allowed the simulation of submitting different requests from multiple browsers to web application Analyzed Format data using Machine Learning algorithm by Python ScikitLearn and worked on python Jupyter Scientific computing stack NumPy SciPy pandas and matplotlib Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Write Python scripts to parse JSON documents and load the data in database Developed single page application by using Angular JS backed by MongoDB and NodeJS Analyzing various logs that are been generating and predictingforecasting next occurrence of event with various Python libraries Using a Docker file created docker images worked on Docker container removing images and managing Docker volumes Used Selenium Library to write fully functioning test automation process that allowed the simulation of submitting different we request from multiple browser to web application Design and maintain databases using Python and developed Python based API RESTful Web Service using Flask SQL Alchemy and PostgreSQL Manage code versioning with GitHub Bit Bucket and deployment to staging and production servers and implement MVC architecture in developing the web application with the help of Django framework Use Celery as task queue and RabbitMQ Redis as messaging broker to execute asynchronous tasks Design and manage API system deployment using fast http server and Amazon AWS architecture Involved in development of Web Services using SOAP for sending and getting data from the external interface in the XML format Export Test case Scripts and modified the selenium scripts and executed in Selenium environment Built various graphs for business decision making using Python mat plotid library Developed entire frontend and backend modules using Python on Django Web Framework Scraping website using Python Beautiful Soup and then parsed it with XML Outputting the parsed data as JSONBSON and stored into MongoDB Querying data from MongoDB and use them as input for the machine learning models Using AWS for application deployment and configuration Wrote UNIX shell scripting for automation Developed views and templates with Django view controller and template Language to create a userfriendly website interface Worked on AWS CLI Auto Scaling and Cloud Watch Monitoring creation and update Used JavaScript and JSON to update a portion of a webpage Develop consumerbased features using Django HTML and TestDriven Development TDD Worked on AWS CLI Auto Scaling and Cloud Watch Monitoring creation and update Used Apache CouchDB NoSQL in AWS Linux instance in parallel to RDS MySQL to store and analyze job market info Developed Python web services for processing JSON and interfacing with the Data layer Increased the speed of preexisting search indexes through Django ORM optimizations Developed module to build Django ORM queries that can preload data to greatly reduce the number of databases queries needed to retrieve the same amount of data Intel Python Developer Report Lab Santa Clara CA October 2016 to August 2017 Used Django frameworks and Python to build dynamic webpages Developed tools for monitoring and notification using Python Used data structures like directories tuples objectoriented classbased inheritance features for making complex algorithms of networks Work on SCRs source change request involved working on Perl Python PHP and Shell Scripting Created PHPMySQL backend for data entry from Flash and worked in tandem with the Flash developer to obtain the correct data through query string Carried out various mathematical operations for calculation purpose using python libraries Involved in designing database Model APIs Views using python to build an interactive webbased solution Generated Python Django Forms to record data of online users Enhanced the application by using HTML and Java script for design and development Implemented Data tables to add delete update and display patient records and policy information using PyQt Implemented a module to connect and view the status of an Apache Cassandra instance using python Managed datasets using Panda data frames and MYSQL Queried the database queries using PythonMySQL connector and retrieved information using MySQL Utilized Python Libraries like Scrapy Beautiful Soup NumPy Requests URL LibLib 2 Pandas Matplotlib SQL Alchemy Worked with Requests Pysftp Gnupg Report Lab NumPy SciPy Matplotlib HTTPLib2 Urllib2 Beautiful Soup and Pandas python libraries during development lifecycle Recorded the online users data using Python Django forms and implemented test case using Pytest Developed MVC prototype replacement of current product with Django Developed the application using the Testdriven methodology and designed the unit tests using Python Unit test framework Created Docker images using a Docker file worked on Docker container snapshots removing images and managing Docker volumes Created web application prototype using jQuery and Angular JS Deployed the project into Heroku using GIT version control system Maintained and Updated the application in accordance to the clienteles requirement Expanded website functionality using Flask framework in Python to control the web application logic Exchanged data with SQL database and NoSQL database such as MongoDB Generated datadriven reports data visualization using Tableau Used EC2 Container Service ECS to support Docker containers to easily run applications on a managed cluster of Amazon EC2 instances Used HTML CSS AJAX JSON designed and developed the user interface of the website Used JavaScript and JSON to update a portion of a webpage Developed views and templates with Django view controller and template Language to create a userfriendly website interface Wrote Ansible playbooks for automating the process of provisioning custom Docker containers using AWSEC2 machines as hosts Used AWS Beanstalk for deploying and scaling web applications and services developed with Java Designed infrastructure for AWS application and workflow using Terraform and had done implementation and continuous delivery of AWS infrastructure using Terraform Develop consumerbased features using Django HTML and TestDriven Development TDD Developed Python web services for processing JSON and interfacing with the Data layer Used GIT version control and deployed project to Heroku and Increased the speed of preexisting search indexes through Django ORM optimizations Designed front end and backend of the application using Python on Django Web Framework Used Pandas datamining library for statistics Analysis NumPy for Numerical analysis Craped and retrieved web data as JSON using Scrapy presented with Pandas library Jr Python Developer Accenture Pune Maharashtra May 2014 to September 2016 Worked as a part of team in developing the UI and other frontend programming including layout of web application matching the Autodesk requirements Maintaining the coordination of all the project activities and make sure all the phases of the project are properly followed and documented regularly Worked on various applications using python integrated IDEs Sublime Text PyCharm NetBeans Spyder and IntelliJ Carried out various mathematical operations for calculation purpose using Python libraries NUMPY Inputs on layouts were provided after detailed design discussions and user experience sessions Managed large datasets using Panda data frames and MySQL and creating efficient system Angular JS directives were used to develop custom HTML elements Using jQuery Angular Java script clientside validation techniques were developed Using web technologies like HTML XHTML CSS Responsive Web design and Bootstrap front end applications user interactive web pages were designed Nonfunctional HTML CSS pages from mock ups were developed and was a part of the UI review UI with business units and UI architects Extensively used Selenium Library to write fully functioning test automation process that allowed the simulation of submitting different requests from multiple browsers to web applications Used Unit Test Python library for testing many Python programs and block of codes Utilized Python specific tools including Django Django Rest Framework Django SQLAlchemy Pandas NumPy Using JavaScript HTML DOM XHTML AJAX CSS and jQuery in ongoing projects GUI was developed Used MySQL as backend database and MySQL dB of python as database connector to interact with MySQL server Helped with the migration from the old server to Jira database with Python scripts for transferring and verifying the information Used Python NumPy SciPy Pandas ScikitLearn Seaborn and Spark 20 PySpark MLlib to develop variety of models and algorithms for analytic purposes Generating various capacity planning reports graphical using Python packages like NumPy matplotlib Did Represented the system in hierarchy form by defining the components subcomponents using Python and developed set of library functions over the system based on the user needs Handwritten HTML CSS XHTML JavaScript jQuery AJAX XML and JSON were converted to mockups New web components and features were designed and created for improved user experience Using server and clientbased State Management options application state was managed Created Python scripts to automate AWS services which include web servers ELB Cloud Front distribution database EC2 and database security groups S3 bucket and application configuration Was a part of complete Software development Lifecycle Requirement Analysis Development System and Integration Testing cross browserplatform compatibility issues IE Firefox and Safari on both Windows were handled",
    "entities": [
        "Intel Python Developer Report Lab",
        "AJAX",
        "SNS",
        "Develop Sqoop",
        "GUI",
        "New York",
        "Sublime Text",
        "Scrapy",
        "Google CloudJenkins Elastic Search",
        "JSON",
        "LAMP Linux",
        "PyCharm Microsoft Visual",
        "Heroku",
        "Panda",
        "Model View Control MVC",
        "SOAP",
        "XML",
        "Use Python",
        "Maintained",
        "GitHub Bit Bucket",
        "Amazon",
        "Developed",
        "MySQL Utilized Python Libraries like Scrapy Beautiful Soup NumPy Requests URL LibLib",
        "Python REST API Frame",
        "Amazon Web Services AWS Experience",
        "Shell Scripting Created PHPMySQL",
        "Created Python",
        "Django",
        "Python Unit",
        "RAD",
        "ORACLE",
        "ScikitLearn",
        "PythonPHP",
        "Develop",
        "XML Outputting",
        "Linux",
        "API RESTful Web Service",
        "Python Beautiful Soup",
        "HTML CSS AJAX JSON",
        "Flask",
        "Automate",
        "Docker",
        "HTML XHTML CSS Responsive",
        "RDS",
        "PyQt",
        "Created Docker",
        "TestDriven Development",
        "MVC",
        "Flask SQL Alchemy",
        "Spark",
        "Apache Spark Hadoop HDFS Hive MongoDB",
        "PythonPHP Architecture",
        "IE Firefox",
        "GIT",
        "Export Test",
        "API",
        "Terraform",
        "Model APIs Views",
        "Santa Clara",
        "Created",
        "Tableau Used EC2 Container Service",
        "AWS",
        "ECS",
        "Perl",
        "WAMP Windows Apache",
        "CA",
        "Django Developed",
        "State Management",
        "TestDriven Development TDD Worked",
        "HTML",
        "Ubuntu Red Hat",
        "Implemented Data",
        "Python ORM Libraries",
        "SQL",
        "lPythonspan",
        "Kubernetes",
        "Python Django",
        "Testdriven",
        "PySpark MLlib",
        "Oracle SQLite PostgreSQL MySQL DB2",
        "jQuery MySQL PostgreSQL",
        "Anaconda",
        "Amazon AWS",
        "Pandas",
        "Agile Software Development",
        "Lifecycle Requirement Analysis Development System",
        "Terraform Develop",
        "Performed",
        "CM",
        "NumPy SQL Alchemy",
        "unittest2",
        "Exchanged",
        "UI",
        "Selenium",
        "SVN",
        "AWSEC2",
        "AWS CLI Auto Scaling",
        "jQuery",
        "Data",
        "NetBeans",
        "Present Involved",
        "NoSQL",
        "Machine Learning",
        "Nonfunctional HTML CSS",
        "PyTest",
        "Amazon Web Services AWS Proficient",
        "Sublime Text PyCharm NetBeans Spyder"
    ],
    "experience": "Experience of using Python modules like NumPy Matplotlib Pickle Pandas SciPy wxPython PyTables PyQt etc for generating complex graphical data creation of histograms etc Experienced in implementing Model View Control MVC architecture using serverside applications like Django and Flask for developing web applications Experienced with JSON based RESTful web services and XML based SOAP web services Worked on various applications using python integrated IDEs like Eclipse IntelliJ Sublime Text and PyCharm Experience of working with relational databases like Oracle SQLite PostgreSQL MySQL DB2 and nonrelational databases like MongoDB and Cassandra Worked on JIRA for bug tracking and communicating for better results Strong Experience in Big data technologies including Apache Spark Hadoop HDFS Hive MongoDB Experience in project deployment using Jenkins and Amazon Web Services AWS Proficient in using editors Eclipse PyCharm PyScripter Notepad and Sublime Text while developing different applications Good experience of software development in Python libraries used Beautiful Soup NumPy SciPy Matplotlib Pandas data frame urllib2 MySQL dB for database connectivity and IDEs sublime text PyCharm Microsoft Visual Code Experienced in all facets of full CM process with tools such as SVN GIT PVCS Clear Case Clear Quest Perforce Cruise Control Jenkins Bamboo Chef and Puppet Experience to build servers using AWS which includes importing necessary volumes launching the EC2 instance creating security groups autoscaling load balancers Route 53 and SNS as per the architecture Strong and deep Knowledge about setting up Python REST API Frame work using Django and Experience in working with Python ORM Libraries including Django ORM Expertise in AWS platform and its dimensions of scalability including EC2 ECS Elastic Beanstalk S3 EBS VPC ELB SNS RDS IAM Route 53 Auto scaling Cloud Front Cloud Watch Security Groups Having experienced in Agile Methodologies PCI Scrum stories and sprints experience in a Python based environment Data analytics data wrangling and Excel data extracts Experience in application development using PYTHON Django HTML5 CSS JavaScript and jQuery MySQL PostgreSQL and SQLite Experience with continuous integration and automation using Jenkins and basic knowledge Unit testing Test driven Development TDD Load Testing Experience in project deployment using Google CloudJenkins Elastic Search and using web Services like Amazon Web Services AWS Experience in working on different operating systemswindows Linux UNIX and Mac also strong development experience on Linux based operating systems such as Ubuntu Red Hat and CentOS Having good domain expertise in developing applicationstools using Perl and programming in C C Basic knowledge on developing J2EE applications using IDEs like RAD Eclipse WSAD and NetBeans Experience in NoSQL databases like Apache Cassandra 12 20 and 21 and MongoDB 26 24 Orient DB Experience in using Git GitHub and Amazon EC2 and deployment using Heroku Experience working with Vagrant and Docker images and containers and Ansible Experience in database programming using RDBMS like ORACLE and SQL R22012 and maintaining the database including requirement analysis design data conversion loading testing and implementation Work Experience Sr Python Developer JPMorgan Chase New York NY April 2018 to Present Involved in developing test automation framework with Python scripting Selenium Generating various capacity planning reports graphical using Python packages like NumPy matplotlib Wrote and executed various MYSQL database queries from python using pythonMySQL connector and MySQL dB package Automate different workflows which are initiated manually with Python scripts and Unix shell scripting Created activated and programed in Anaconda environment Use Python unit and functional testing modules such as unit test unittest2 mock and custom frameworks inline with Agile Software Development methodologies Extensively used Django micro service framework for simple request and response Designed RESTful XML web service for handling AJAX requests Develop Sqoop scripts to handle change data capture for processing incremental records between new arrived and existing data in RDBMS tables Manage datasets using Panda data frames and MySQL queried MYSQL database queries from python using PythonMySQL connector and MySQL dB package to retrieve information Developed and tested many features for dashboard using Python 37 Java Bootstrap CSS JavaScript and jQuery Generated Python Django forms to record data of online users and used PyTest for writing test cases Worked on creating and documenting POC for helping migrate the current application to micro service architecture The architecture included Docker as the container technology with Kubernetes and worked on with REST API Implemented and modified various SQL queries and Functions Cursors and Triggers as per the client requirements Used Pandas as API to put the data as time series and tabular format for manipulation and retrieval of data Clean data and processed third party spending data into maneuverable deliverables within specific format with Excel macros and python libraries such as NumPy SQL Alchemy and matplotlib Helped with the migration from the old server to Jira database Matching Fields with Python scripts for transferring and verifying the information Used Selenium Library to write fully functioning test automation process that allowed the simulation of submitting different requests from multiple browsers to web application Analyzed Format data using Machine Learning algorithm by Python ScikitLearn and worked on python Jupyter Scientific computing stack NumPy SciPy pandas and matplotlib Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Write Python scripts to parse JSON documents and load the data in database Developed single page application by using Angular JS backed by MongoDB and NodeJS Analyzing various logs that are been generating and predictingforecasting next occurrence of event with various Python libraries Using a Docker file created docker images worked on Docker container removing images and managing Docker volumes Used Selenium Library to write fully functioning test automation process that allowed the simulation of submitting different we request from multiple browser to web application Design and maintain databases using Python and developed Python based API RESTful Web Service using Flask SQL Alchemy and PostgreSQL Manage code versioning with GitHub Bit Bucket and deployment to staging and production servers and implement MVC architecture in developing the web application with the help of Django framework Use Celery as task queue and RabbitMQ Redis as messaging broker to execute asynchronous tasks Design and manage API system deployment using fast http server and Amazon AWS architecture Involved in development of Web Services using SOAP for sending and getting data from the external interface in the XML format Export Test case Scripts and modified the selenium scripts and executed in Selenium environment Built various graphs for business decision making using Python mat plotid library Developed entire frontend and backend modules using Python on Django Web Framework Scraping website using Python Beautiful Soup and then parsed it with XML Outputting the parsed data as JSONBSON and stored into MongoDB Querying data from MongoDB and use them as input for the machine learning models Using AWS for application deployment and configuration Wrote UNIX shell scripting for automation Developed views and templates with Django view controller and template Language to create a userfriendly website interface Worked on AWS CLI Auto Scaling and Cloud Watch Monitoring creation and update Used JavaScript and JSON to update a portion of a webpage Develop consumerbased features using Django HTML and TestDriven Development TDD Worked on AWS CLI Auto Scaling and Cloud Watch Monitoring creation and update Used Apache CouchDB NoSQL in AWS Linux instance in parallel to RDS MySQL to store and analyze job market info Developed Python web services for processing JSON and interfacing with the Data layer Increased the speed of preexisting search indexes through Django ORM optimizations Developed module to build Django ORM queries that can preload data to greatly reduce the number of databases queries needed to retrieve the same amount of data Intel Python Developer Report Lab Santa Clara CA October 2016 to August 2017 Used Django frameworks and Python to build dynamic webpages Developed tools for monitoring and notification using Python Used data structures like directories tuples objectoriented classbased inheritance features for making complex algorithms of networks Work on SCRs source change request involved working on Perl Python PHP and Shell Scripting Created PHPMySQL backend for data entry from Flash and worked in tandem with the Flash developer to obtain the correct data through query string Carried out various mathematical operations for calculation purpose using python libraries Involved in designing database Model APIs Views using python to build an interactive webbased solution Generated Python Django Forms to record data of online users Enhanced the application by using HTML and Java script for design and development Implemented Data tables to add delete update and display patient records and policy information using PyQt Implemented a module to connect and view the status of an Apache Cassandra instance using python Managed datasets using Panda data frames and MYSQL Queried the database queries using PythonMySQL connector and retrieved information using MySQL Utilized Python Libraries like Scrapy Beautiful Soup NumPy Requests URL LibLib 2 Pandas Matplotlib SQL Alchemy Worked with Requests Pysftp Gnupg Report Lab NumPy SciPy Matplotlib HTTPLib2 Urllib2 Beautiful Soup and Pandas python libraries during development lifecycle Recorded the online users data using Python Django forms and implemented test case using Pytest Developed MVC prototype replacement of current product with Django Developed the application using the Testdriven methodology and designed the unit tests using Python Unit test framework Created Docker images using a Docker file worked on Docker container snapshots removing images and managing Docker volumes Created web application prototype using jQuery and Angular JS Deployed the project into Heroku using GIT version control system Maintained and Updated the application in accordance to the clienteles requirement Expanded website functionality using Flask framework in Python to control the web application logic Exchanged data with SQL database and NoSQL database such as MongoDB Generated datadriven reports data visualization using Tableau Used EC2 Container Service ECS to support Docker containers to easily run applications on a managed cluster of Amazon EC2 instances Used HTML CSS AJAX JSON designed and developed the user interface of the website Used JavaScript and JSON to update a portion of a webpage Developed views and templates with Django view controller and template Language to create a userfriendly website interface Wrote Ansible playbooks for automating the process of provisioning custom Docker containers using AWSEC2 machines as hosts Used AWS Beanstalk for deploying and scaling web applications and services developed with Java Designed infrastructure for AWS application and workflow using Terraform and had done implementation and continuous delivery of AWS infrastructure using Terraform Develop consumerbased features using Django HTML and TestDriven Development TDD Developed Python web services for processing JSON and interfacing with the Data layer Used GIT version control and deployed project to Heroku and Increased the speed of preexisting search indexes through Django ORM optimizations Designed front end and backend of the application using Python on Django Web Framework Used Pandas datamining library for statistics Analysis NumPy for Numerical analysis Craped and retrieved web data as JSON using Scrapy presented with Pandas library Jr Python Developer Accenture Pune Maharashtra May 2014 to September 2016 Worked as a part of team in developing the UI and other frontend programming including layout of web application matching the Autodesk requirements Maintaining the coordination of all the project activities and make sure all the phases of the project are properly followed and documented regularly Worked on various applications using python integrated IDEs Sublime Text PyCharm NetBeans Spyder and IntelliJ Carried out various mathematical operations for calculation purpose using Python libraries NUMPY Inputs on layouts were provided after detailed design discussions and user experience sessions Managed large datasets using Panda data frames and MySQL and creating efficient system Angular JS directives were used to develop custom HTML elements Using jQuery Angular Java script clientside validation techniques were developed Using web technologies like HTML XHTML CSS Responsive Web design and Bootstrap front end applications user interactive web pages were designed Nonfunctional HTML CSS pages from mock ups were developed and was a part of the UI review UI with business units and UI architects Extensively used Selenium Library to write fully functioning test automation process that allowed the simulation of submitting different requests from multiple browsers to web applications Used Unit Test Python library for testing many Python programs and block of codes Utilized Python specific tools including Django Django Rest Framework Django SQLAlchemy Pandas NumPy Using JavaScript HTML DOM XHTML AJAX CSS and jQuery in ongoing projects GUI was developed Used MySQL as backend database and MySQL dB of python as database connector to interact with MySQL server Helped with the migration from the old server to Jira database with Python scripts for transferring and verifying the information Used Python NumPy SciPy Pandas ScikitLearn Seaborn and Spark 20 PySpark MLlib to develop variety of models and algorithms for analytic purposes Generating various capacity planning reports graphical using Python packages like NumPy matplotlib Did Represented the system in hierarchy form by defining the components subcomponents using Python and developed set of library functions over the system based on the user needs Handwritten HTML CSS XHTML JavaScript jQuery AJAX XML and JSON were converted to mockups New web components and features were designed and created for improved user experience Using server and clientbased State Management options application state was managed Created Python scripts to automate AWS services which include web servers ELB Cloud Front distribution database EC2 and database security groups S3 bucket and application configuration Was a part of complete Software development Lifecycle Requirement Analysis Development System and Integration Testing cross browserplatform compatibility issues IE Firefox and Safari on both Windows were handled",
    "extracted_keywords": [
        "Sr",
        "Python",
        "Developer",
        "Sr",
        "lPythonspan",
        "span",
        "lDeveloperspan",
        "Sr",
        "Python",
        "Developer",
        "JPMorgan",
        "Chase",
        "New",
        "York",
        "NY",
        "years",
        "experience",
        "applications",
        "software",
        "development",
        "design",
        "Python",
        "Django",
        "XML",
        "CSS",
        "HTML",
        "C",
        "jQuery",
        "AngularJS",
        "WAMP",
        "Windows",
        "Apache",
        "MySQL",
        "PythonPHP",
        "LAMP",
        "Linux",
        "Apache",
        "MySQL",
        "PythonPHP",
        "Architecture",
        "Experience",
        "Python",
        "modules",
        "NumPy",
        "Matplotlib",
        "Pickle",
        "SciPy",
        "wxPython",
        "PyTables",
        "PyQt",
        "data",
        "creation",
        "histograms",
        "Model",
        "View",
        "Control",
        "MVC",
        "architecture",
        "serverside",
        "applications",
        "Django",
        "Flask",
        "web",
        "applications",
        "JSON",
        "web",
        "services",
        "XML",
        "SOAP",
        "web",
        "services",
        "applications",
        "IDEs",
        "Eclipse",
        "IntelliJ",
        "Sublime",
        "Text",
        "PyCharm",
        "Experience",
        "databases",
        "Oracle",
        "SQLite",
        "PostgreSQL",
        "MySQL",
        "DB2",
        "databases",
        "MongoDB",
        "Cassandra",
        "JIRA",
        "bug",
        "tracking",
        "communicating",
        "results",
        "Strong",
        "Experience",
        "data",
        "technologies",
        "Apache",
        "Spark",
        "Hadoop",
        "HDFS",
        "Hive",
        "MongoDB",
        "Experience",
        "project",
        "deployment",
        "Jenkins",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "Proficient",
        "editors",
        "Eclipse",
        "PyCharm",
        "PyScripter",
        "Notepad",
        "Sublime",
        "Text",
        "applications",
        "experience",
        "software",
        "development",
        "Python",
        "libraries",
        "Beautiful",
        "Soup",
        "NumPy",
        "SciPy",
        "Matplotlib",
        "Pandas",
        "data",
        "frame",
        "urllib2",
        "MySQL",
        "database",
        "connectivity",
        "IDEs",
        "text",
        "PyCharm",
        "Microsoft",
        "Visual",
        "Code",
        "facets",
        "process",
        "tools",
        "SVN",
        "GIT",
        "PVCS",
        "Clear",
        "Case",
        "Clear",
        "Quest",
        "Perforce",
        "Cruise",
        "Control",
        "Jenkins",
        "Bamboo",
        "Chef",
        "Puppet",
        "Experience",
        "servers",
        "AWS",
        "volumes",
        "EC2",
        "instance",
        "security",
        "groups",
        "load",
        "balancers",
        "Route",
        "SNS",
        "architecture",
        "Strong",
        "Knowledge",
        "Python",
        "REST",
        "API",
        "Frame",
        "work",
        "Django",
        "Experience",
        "Python",
        "ORM",
        "Libraries",
        "Django",
        "ORM",
        "Expertise",
        "AWS",
        "platform",
        "dimensions",
        "scalability",
        "EC2",
        "ECS",
        "Elastic",
        "Beanstalk",
        "S3",
        "EBS",
        "VPC",
        "ELB",
        "SNS",
        "RDS",
        "IAM",
        "Route",
        "Auto",
        "Cloud",
        "Front",
        "Cloud",
        "Watch",
        "Security",
        "Groups",
        "Agile",
        "Methodologies",
        "Scrum",
        "stories",
        "sprints",
        "experience",
        "Python",
        "environment",
        "Data",
        "analytics",
        "data",
        "Excel",
        "data",
        "Experience",
        "application",
        "development",
        "PYTHON",
        "Django",
        "HTML5",
        "CSS",
        "JavaScript",
        "jQuery",
        "MySQL",
        "PostgreSQL",
        "SQLite",
        "Experience",
        "integration",
        "automation",
        "Jenkins",
        "knowledge",
        "Unit",
        "testing",
        "Test",
        "Development",
        "TDD",
        "Load",
        "Testing",
        "Experience",
        "project",
        "deployment",
        "Google",
        "CloudJenkins",
        "Elastic",
        "Search",
        "web",
        "Services",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "Experience",
        "operating",
        "systemswindows",
        "Linux",
        "UNIX",
        "Mac",
        "development",
        "experience",
        "Linux",
        "operating",
        "systems",
        "Ubuntu",
        "Red",
        "Hat",
        "CentOS",
        "domain",
        "expertise",
        "applicationstools",
        "Perl",
        "programming",
        "C",
        "C",
        "Basic",
        "knowledge",
        "J2EE",
        "applications",
        "IDEs",
        "RAD",
        "Eclipse",
        "WSAD",
        "NetBeans",
        "Experience",
        "NoSQL",
        "Apache",
        "Cassandra",
        "Orient",
        "DB",
        "Experience",
        "Git",
        "GitHub",
        "Amazon",
        "EC2",
        "deployment",
        "Heroku",
        "Experience",
        "Vagrant",
        "Docker",
        "images",
        "containers",
        "Experience",
        "database",
        "programming",
        "RDBMS",
        "ORACLE",
        "SQL",
        "R22012",
        "database",
        "requirement",
        "analysis",
        "design",
        "data",
        "conversion",
        "loading",
        "testing",
        "implementation",
        "Work",
        "Experience",
        "Sr",
        "Python",
        "Developer",
        "JPMorgan",
        "Chase",
        "New",
        "York",
        "NY",
        "April",
        "Present",
        "test",
        "automation",
        "framework",
        "Python",
        "Selenium",
        "capacity",
        "planning",
        "reports",
        "Python",
        "packages",
        "NumPy",
        "matplotlib",
        "Wrote",
        "MYSQL",
        "database",
        "python",
        "pythonMySQL",
        "connector",
        "MySQL",
        "package",
        "workflows",
        "Python",
        "scripts",
        "Unix",
        "shell",
        "scripting",
        "Anaconda",
        "environment",
        "Use",
        "Python",
        "unit",
        "testing",
        "modules",
        "unit",
        "test",
        "custom",
        "frameworks",
        "Agile",
        "Software",
        "Development",
        "methodologies",
        "Django",
        "micro",
        "service",
        "framework",
        "request",
        "response",
        "XML",
        "web",
        "service",
        "AJAX",
        "requests",
        "Develop",
        "Sqoop",
        "scripts",
        "change",
        "data",
        "capture",
        "records",
        "data",
        "tables",
        "Manage",
        "datasets",
        "Panda",
        "data",
        "frames",
        "MySQL",
        "MYSQL",
        "database",
        "python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "package",
        "information",
        "features",
        "dashboard",
        "Python",
        "Java",
        "Bootstrap",
        "CSS",
        "JavaScript",
        "jQuery",
        "Python",
        "Django",
        "data",
        "users",
        "PyTest",
        "test",
        "cases",
        "POC",
        "application",
        "service",
        "architecture",
        "architecture",
        "Docker",
        "container",
        "technology",
        "Kubernetes",
        "REST",
        "API",
        "SQL",
        "queries",
        "Functions",
        "Cursors",
        "Triggers",
        "client",
        "requirements",
        "Pandas",
        "API",
        "data",
        "time",
        "series",
        "format",
        "manipulation",
        "retrieval",
        "data",
        "data",
        "party",
        "spending",
        "data",
        "deliverables",
        "format",
        "Excel",
        "macros",
        "python",
        "libraries",
        "NumPy",
        "SQL",
        "Alchemy",
        "matplotlib",
        "migration",
        "server",
        "Jira",
        "database",
        "Matching",
        "Fields",
        "Python",
        "scripts",
        "information",
        "Selenium",
        "Library",
        "test",
        "automation",
        "process",
        "simulation",
        "requests",
        "browsers",
        "web",
        "application",
        "Format",
        "data",
        "Machine",
        "Learning",
        "algorithm",
        "Python",
        "ScikitLearn",
        "python",
        "Jupyter",
        "computing",
        "stack",
        "NumPy",
        "SciPy",
        "pandas",
        "Performed",
        "troubleshooting",
        "Python",
        "bug",
        "fixes",
        "applications",
        "source",
        "data",
        "customers",
        "customer",
        "service",
        "team",
        "Python",
        "scripts",
        "documents",
        "data",
        "database",
        "page",
        "application",
        "Angular",
        "JS",
        "MongoDB",
        "NodeJS",
        "logs",
        "occurrence",
        "event",
        "Python",
        "libraries",
        "Docker",
        "file",
        "docker",
        "images",
        "Docker",
        "container",
        "images",
        "Docker",
        "volumes",
        "Selenium",
        "Library",
        "test",
        "automation",
        "process",
        "simulation",
        "browser",
        "web",
        "application",
        "Design",
        "databases",
        "Python",
        "Python",
        "API",
        "RESTful",
        "Web",
        "Service",
        "Flask",
        "SQL",
        "Alchemy",
        "PostgreSQL",
        "Manage",
        "code",
        "GitHub",
        "Bit",
        "Bucket",
        "deployment",
        "staging",
        "production",
        "servers",
        "MVC",
        "architecture",
        "web",
        "application",
        "help",
        "Django",
        "framework",
        "Use",
        "Celery",
        "task",
        "queue",
        "Redis",
        "broker",
        "tasks",
        "Design",
        "API",
        "system",
        "deployment",
        "http",
        "server",
        "Amazon",
        "AWS",
        "architecture",
        "development",
        "Web",
        "Services",
        "SOAP",
        "data",
        "interface",
        "XML",
        "format",
        "Export",
        "Test",
        "case",
        "Scripts",
        "selenium",
        "scripts",
        "Selenium",
        "environment",
        "graphs",
        "business",
        "decision",
        "Python",
        "mat",
        "plotid",
        "library",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Web",
        "Framework",
        "website",
        "Python",
        "Beautiful",
        "Soup",
        "XML",
        "data",
        "JSONBSON",
        "MongoDB",
        "Querying",
        "data",
        "MongoDB",
        "input",
        "machine",
        "learning",
        "models",
        "AWS",
        "application",
        "deployment",
        "configuration",
        "Wrote",
        "UNIX",
        "shell",
        "scripting",
        "automation",
        "views",
        "templates",
        "Django",
        "controller",
        "template",
        "Language",
        "website",
        "interface",
        "AWS",
        "CLI",
        "Auto",
        "Scaling",
        "Cloud",
        "Watch",
        "creation",
        "JavaScript",
        "JSON",
        "portion",
        "webpage",
        "Develop",
        "features",
        "Django",
        "HTML",
        "TestDriven",
        "Development",
        "TDD",
        "AWS",
        "CLI",
        "Auto",
        "Scaling",
        "Cloud",
        "Watch",
        "creation",
        "Used",
        "Apache",
        "CouchDB",
        "NoSQL",
        "AWS",
        "Linux",
        "instance",
        "parallel",
        "RDS",
        "MySQL",
        "job",
        "market",
        "info",
        "Developed",
        "Python",
        "web",
        "services",
        "JSON",
        "Data",
        "layer",
        "speed",
        "search",
        "indexes",
        "Django",
        "ORM",
        "optimizations",
        "module",
        "Django",
        "ORM",
        "queries",
        "data",
        "number",
        "databases",
        "queries",
        "amount",
        "data",
        "Intel",
        "Python",
        "Developer",
        "Report",
        "Lab",
        "Santa",
        "Clara",
        "CA",
        "October",
        "August",
        "Used",
        "Django",
        "frameworks",
        "Python",
        "webpages",
        "tools",
        "monitoring",
        "notification",
        "Python",
        "data",
        "structures",
        "directories",
        "tuples",
        "inheritance",
        "features",
        "algorithms",
        "networks",
        "SCRs",
        "source",
        "change",
        "request",
        "Perl",
        "Python",
        "PHP",
        "Shell",
        "Scripting",
        "PHPMySQL",
        "backend",
        "data",
        "entry",
        "Flash",
        "tandem",
        "Flash",
        "developer",
        "data",
        "query",
        "string",
        "operations",
        "calculation",
        "purpose",
        "python",
        "libraries",
        "database",
        "Model",
        "APIs",
        "Views",
        "python",
        "solution",
        "Python",
        "Django",
        "Forms",
        "data",
        "users",
        "application",
        "HTML",
        "Java",
        "script",
        "design",
        "development",
        "Data",
        "tables",
        "update",
        "patient",
        "records",
        "policy",
        "information",
        "PyQt",
        "module",
        "status",
        "Apache",
        "Cassandra",
        "instance",
        "python",
        "datasets",
        "Panda",
        "data",
        "frames",
        "MYSQL",
        "database",
        "connector",
        "information",
        "MySQL",
        "Python",
        "Libraries",
        "Scrapy",
        "Beautiful",
        "Soup",
        "NumPy",
        "Requests",
        "URL",
        "LibLib",
        "Pandas",
        "Matplotlib",
        "SQL",
        "Alchemy",
        "Requests",
        "Pysftp",
        "Gnupg",
        "Report",
        "Lab",
        "NumPy",
        "SciPy",
        "Matplotlib",
        "HTTPLib2",
        "Urllib2",
        "Beautiful",
        "Soup",
        "Pandas",
        "libraries",
        "development",
        "lifecycle",
        "users",
        "data",
        "Python",
        "Django",
        "forms",
        "test",
        "case",
        "Pytest",
        "Developed",
        "MVC",
        "prototype",
        "replacement",
        "product",
        "Django",
        "application",
        "Testdriven",
        "methodology",
        "unit",
        "tests",
        "Python",
        "Unit",
        "test",
        "framework",
        "Created",
        "Docker",
        "images",
        "Docker",
        "file",
        "Docker",
        "container",
        "snapshots",
        "images",
        "Docker",
        "volumes",
        "web",
        "application",
        "prototype",
        "jQuery",
        "Angular",
        "JS",
        "project",
        "Heroku",
        "GIT",
        "version",
        "control",
        "system",
        "application",
        "accordance",
        "clienteles",
        "requirement",
        "website",
        "functionality",
        "Flask",
        "framework",
        "Python",
        "web",
        "application",
        "logic",
        "data",
        "SQL",
        "database",
        "NoSQL",
        "database",
        "MongoDB",
        "reports",
        "data",
        "visualization",
        "Tableau",
        "EC2",
        "Container",
        "Service",
        "ECS",
        "Docker",
        "containers",
        "applications",
        "cluster",
        "Amazon",
        "EC2",
        "instances",
        "HTML",
        "CSS",
        "AJAX",
        "JSON",
        "user",
        "interface",
        "website",
        "JavaScript",
        "JSON",
        "portion",
        "webpage",
        "views",
        "templates",
        "Django",
        "controller",
        "template",
        "Language",
        "website",
        "interface",
        "Wrote",
        "playbooks",
        "process",
        "custom",
        "Docker",
        "containers",
        "AWSEC2",
        "machines",
        "hosts",
        "AWS",
        "Beanstalk",
        "web",
        "applications",
        "services",
        "Java",
        "infrastructure",
        "AWS",
        "application",
        "workflow",
        "Terraform",
        "implementation",
        "delivery",
        "AWS",
        "infrastructure",
        "Terraform",
        "Develop",
        "features",
        "Django",
        "HTML",
        "TestDriven",
        "Development",
        "TDD",
        "Developed",
        "Python",
        "web",
        "services",
        "JSON",
        "Data",
        "layer",
        "GIT",
        "version",
        "control",
        "project",
        "Heroku",
        "speed",
        "search",
        "indexes",
        "Django",
        "ORM",
        "optimizations",
        "end",
        "backend",
        "application",
        "Python",
        "Django",
        "Web",
        "Framework",
        "Pandas",
        "library",
        "statistics",
        "Analysis",
        "NumPy",
        "analysis",
        "Craped",
        "web",
        "data",
        "JSON",
        "Scrapy",
        "Pandas",
        "library",
        "Jr",
        "Python",
        "Developer",
        "Accenture",
        "Pune",
        "Maharashtra",
        "May",
        "September",
        "part",
        "team",
        "UI",
        "frontend",
        "programming",
        "layout",
        "web",
        "application",
        "Autodesk",
        "requirements",
        "coordination",
        "project",
        "activities",
        "phases",
        "project",
        "applications",
        "IDEs",
        "Sublime",
        "Text",
        "PyCharm",
        "NetBeans",
        "Spyder",
        "IntelliJ",
        "operations",
        "calculation",
        "purpose",
        "Python",
        "Inputs",
        "layouts",
        "design",
        "discussions",
        "user",
        "experience",
        "sessions",
        "datasets",
        "Panda",
        "data",
        "frames",
        "MySQL",
        "system",
        "Angular",
        "JS",
        "directives",
        "custom",
        "HTML",
        "elements",
        "jQuery",
        "Angular",
        "Java",
        "script",
        "validation",
        "techniques",
        "web",
        "technologies",
        "HTML",
        "XHTML",
        "CSS",
        "Responsive",
        "Web",
        "design",
        "end",
        "applications",
        "user",
        "web",
        "pages",
        "Nonfunctional",
        "HTML",
        "CSS",
        "pages",
        "ups",
        "part",
        "UI",
        "review",
        "UI",
        "business",
        "units",
        "UI",
        "architects",
        "Selenium",
        "Library",
        "test",
        "automation",
        "process",
        "simulation",
        "requests",
        "browsers",
        "web",
        "applications",
        "Unit",
        "Test",
        "Python",
        "library",
        "Python",
        "programs",
        "block",
        "codes",
        "Python",
        "tools",
        "Django",
        "Django",
        "Rest",
        "Framework",
        "Django",
        "SQLAlchemy",
        "Pandas",
        "NumPy",
        "JavaScript",
        "HTML",
        "DOM",
        "XHTML",
        "AJAX",
        "CSS",
        "jQuery",
        "projects",
        "GUI",
        "MySQL",
        "database",
        "MySQL",
        "dB",
        "python",
        "database",
        "connector",
        "MySQL",
        "server",
        "migration",
        "server",
        "Jira",
        "database",
        "Python",
        "scripts",
        "information",
        "Python",
        "NumPy",
        "SciPy",
        "Pandas",
        "ScikitLearn",
        "Seaborn",
        "Spark",
        "PySpark",
        "MLlib",
        "variety",
        "models",
        "algorithms",
        "purposes",
        "capacity",
        "planning",
        "reports",
        "Python",
        "packages",
        "NumPy",
        "matplotlib",
        "system",
        "hierarchy",
        "form",
        "components",
        "subcomponents",
        "Python",
        "set",
        "library",
        "functions",
        "system",
        "user",
        "Handwritten",
        "HTML",
        "CSS",
        "XHTML",
        "JavaScript",
        "jQuery",
        "AJAX",
        "XML",
        "JSON",
        "mockups",
        "New",
        "web",
        "components",
        "features",
        "user",
        "experience",
        "server",
        "State",
        "Management",
        "options",
        "application",
        "state",
        "Python",
        "scripts",
        "AWS",
        "services",
        "web",
        "servers",
        "ELB",
        "Cloud",
        "Front",
        "distribution",
        "database",
        "EC2",
        "database",
        "security",
        "groups",
        "S3",
        "bucket",
        "application",
        "configuration",
        "part",
        "Software",
        "development",
        "Lifecycle",
        "Requirement",
        "Analysis",
        "Development",
        "System",
        "Integration",
        "Testing",
        "cross",
        "browserplatform",
        "compatibility",
        "issues",
        "IE",
        "Firefox",
        "Safari",
        "Windows"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T20:49:32.593236",
    "resume_data": "Sr Python Developer Sr span lPythonspan span lDeveloperspan Sr Python Developer JPMorgan Chase New York NY 4 years of experience in developing webbased applications software development and design using Python Django XML CSS HTML C jQuery and AngularJS Experienced with WAMP Windows Apache MySQL and PythonPHP and LAMP Linux Apache MySQL and PythonPHP Architecture Experience of using Python modules like NumPy Matplotlib Pickle Pandas SciPy wxPython PyTables PyQt etc for generating complex graphical data creation of histograms etc Experienced in implementing Model View Control MVC architecture using serverside applications like Django and Flask for developing web applications Experienced with JSON based RESTful web services and XML based SOAP web services Worked on various applications using python integrated IDEs like Eclipse IntelliJ Sublime Text and PyCharm Experience of working with relational databases like Oracle SQLite PostgreSQL MySQL DB2 and nonrelational databases like MongoDB and Cassandra Worked on JIRA for bug tracking and communicating for better results Strong Experience in Big data technologies including Apache Spark Hadoop HDFS Hive MongoDB Experience in project deployment using Jenkins and Amazon Web Services AWS Proficient in using editors Eclipse PyCharm PyScripter Notepad and Sublime Text while developing different applications Good experience of software development in Python libraries used Beautiful Soup NumPy SciPy Matplotlib Pandas data frame urllib2 MySQL dB for database connectivity and IDEs sublime text PyCharm Microsoft Visual Code Experienced in all facets of full CM process with tools such as SVN GIT PVCS Clear Case Clear Quest Perforce Cruise Control Jenkins Bamboo Chef and Puppet Experience to build servers using AWS which includes importing necessary volumes launching the EC2 instance creating security groups autoscaling load balancers Route 53 and SNS as per the architecture Strong and deep Knowledge about setting up Python REST API Frame work using Django and Experience in working with Python ORM Libraries including Django ORM Expertise in AWS platform and its dimensions of scalability including EC2 ECS Elastic Beanstalk S3 EBS VPC ELB SNS RDS IAM Route 53 Auto scaling Cloud Front Cloud Watch Security Groups Having experienced in Agile Methodologies PCI Scrum stories and sprints experience in a Python based environment Data analytics data wrangling and Excel data extracts Experience in application development using PYTHON Django HTML5 CSS JavaScript and jQuery MySQL PostgreSQL and SQLite Experience with continuous integration and automation using Jenkins and basic knowledge Unit testing Test driven Development TDD Load Testing Experience in project deployment using Google CloudJenkins Elastic Search and using web Services like Amazon Web Services AWS Experience in working on different operating systemswindows Linux UNIX and Mac also strong development experience on Linux based operating systems such as Ubuntu Red Hat and CentOS Having good domain expertise in developing applicationstools using Perl and programming in C C Basic knowledge on developing J2EE applications using IDEs like RAD Eclipse WSAD and NetBeans Experience in NoSQL databases like Apache Cassandra 12 20 and 21 and MongoDB 26 24 Orient DB Experience in using Git GitHub and Amazon EC2 and deployment using Heroku Experience working with Vagrant and Docker images and containers and Ansible Experience in database programming using RDBMS like ORACLE and SQL R22012 and maintaining the database including requirement analysis design data conversion loading testing and implementation Work Experience Sr Python Developer JPMorgan Chase New York NY April 2018 to Present Involved in developing test automation framework with Python scripting Selenium Generating various capacity planning reports graphical using Python packages like NumPy matplotlib Wrote and executed various MYSQL database queries from python using pythonMySQL connector and MySQL dB package Automate different workflows which are initiated manually with Python scripts and Unix shell scripting Created activated and programed in Anaconda environment Use Python unit and functional testing modules such as unit test unittest2 mock and custom frameworks inline with Agile Software Development methodologies Extensively used Django micro service framework for simple request and response Designed RESTful XML web service for handling AJAX requests Develop Sqoop scripts to handle change data capture for processing incremental records between new arrived and existing data in RDBMS tables Manage datasets using Panda data frames and MySQL queried MYSQL database queries from python using PythonMySQL connector and MySQL dB package to retrieve information Developed and tested many features for dashboard using Python 37 Java Bootstrap CSS JavaScript and jQuery Generated Python Django forms to record data of online users and used PyTest for writing test cases Worked on creating and documenting POC for helping migrate the current application to micro service architecture The architecture included Docker as the container technology with Kubernetes and worked on with REST API Implemented and modified various SQL queries and Functions Cursors and Triggers as per the client requirements Used Pandas as API to put the data as time series and tabular format for manipulation and retrieval of data Clean data and processed third party spending data into maneuverable deliverables within specific format with Excel macros and python libraries such as NumPy SQL Alchemy and matplotlib Helped with the migration from the old server to Jira database Matching Fields with Python scripts for transferring and verifying the information Used Selenium Library to write fully functioning test automation process that allowed the simulation of submitting different requests from multiple browsers to web application Analyzed Format data using Machine Learning algorithm by Python ScikitLearn and worked on python Jupyter Scientific computing stack NumPy SciPy pandas and matplotlib Performed troubleshooting fixed and deployed many Python bug fixes of the two main applications that were a main source of data for both customers and internal customer service team Write Python scripts to parse JSON documents and load the data in database Developed single page application by using Angular JS backed by MongoDB and NodeJS Analyzing various logs that are been generating and predictingforecasting next occurrence of event with various Python libraries Using a Docker file created docker images worked on Docker container removing images and managing Docker volumes Used Selenium Library to write fully functioning test automation process that allowed the simulation of submitting different we request from multiple browser to web application Design and maintain databases using Python and developed Python based API RESTful Web Service using Flask SQL Alchemy and PostgreSQL Manage code versioning with GitHub Bit Bucket and deployment to staging and production servers and implement MVC architecture in developing the web application with the help of Django framework Use Celery as task queue and RabbitMQ Redis as messaging broker to execute asynchronous tasks Design and manage API system deployment using fast http server and Amazon AWS architecture Involved in development of Web Services using SOAP for sending and getting data from the external interface in the XML format Export Test case Scripts and modified the selenium scripts and executed in Selenium environment Built various graphs for business decision making using Python mat plotid library Developed entire frontend and backend modules using Python on Django Web Framework Scraping website using Python Beautiful Soup and then parsed it with XML Outputting the parsed data as JSONBSON and stored into MongoDB Querying data from MongoDB and use them as input for the machine learning models Using AWS for application deployment and configuration Wrote UNIX shell scripting for automation Developed views and templates with Django view controller and template Language to create a userfriendly website interface Worked on AWS CLI Auto Scaling and Cloud Watch Monitoring creation and update Used JavaScript and JSON to update a portion of a webpage Develop consumerbased features using Django HTML and TestDriven Development TDD Worked on AWS CLI Auto Scaling and Cloud Watch Monitoring creation and update Used Apache CouchDB NoSQL in AWS Linux instance in parallel to RDS MySQL to store and analyze job market info Developed Python web services for processing JSON and interfacing with the Data layer Increased the speed of preexisting search indexes through Django ORM optimizations Developed module to build Django ORM queries that can preload data to greatly reduce the number of databases queries needed to retrieve the same amount of data Intel Python Developer Report Lab Santa Clara CA October 2016 to August 2017 Used Django frameworks and Python to build dynamic webpages Developed tools for monitoring and notification using Python Used data structures like directories tuples objectoriented classbased inheritance features for making complex algorithms of networks Work on SCRs source change request involved working on Perl Python PHP and Shell Scripting Created PHPMySQL backend for data entry from Flash and worked in tandem with the Flash developer to obtain the correct data through query string Carried out various mathematical operations for calculation purpose using python libraries Involved in designing database Model APIs Views using python to build an interactive webbased solution Generated Python Django Forms to record data of online users Enhanced the application by using HTML and Java script for design and development Implemented Data tables to add delete update and display patient records and policy information using PyQt Implemented a module to connect and view the status of an Apache Cassandra instance using python Managed datasets using Panda data frames and MYSQL Queried the database queries using PythonMySQL connector and retrieved information using MySQL Utilized Python Libraries like Scrapy Beautiful Soup NumPy Requests URL LibLib 2 Pandas Matplotlib SQL Alchemy Worked with Requests Pysftp Gnupg Report Lab NumPy SciPy Matplotlib HTTPLib2 Urllib2 Beautiful Soup and Pandas python libraries during development lifecycle Recorded the online users data using Python Django forms and implemented test case using Pytest Developed MVC prototype replacement of current product with Django Developed the application using the Testdriven methodology and designed the unit tests using Python Unit test framework Created Docker images using a Docker file worked on Docker container snapshots removing images and managing Docker volumes Created web application prototype using jQuery and Angular JS Deployed the project into Heroku using GIT version control system Maintained and Updated the application in accordance to the clienteles requirement Expanded website functionality using Flask framework in Python to control the web application logic Exchanged data with SQL database and NoSQL database such as MongoDB Generated datadriven reports data visualization using Tableau Used EC2 Container Service ECS to support Docker containers to easily run applications on a managed cluster of Amazon EC2 instances Used HTML CSS AJAX JSON designed and developed the user interface of the website Used JavaScript and JSON to update a portion of a webpage Developed views and templates with Django view controller and template Language to create a userfriendly website interface Wrote Ansible playbooks for automating the process of provisioning custom Docker containers using AWSEC2 machines as hosts Used AWS Beanstalk for deploying and scaling web applications and services developed with Java Designed infrastructure for AWS application and workflow using Terraform and had done implementation and continuous delivery of AWS infrastructure using Terraform Develop consumerbased features using Django HTML and TestDriven Development TDD Developed Python web services for processing JSON and interfacing with the Data layer Used GIT version control and deployed project to Heroku and Increased the speed of preexisting search indexes through Django ORM optimizations Designed front end and backend of the application using Python on Django Web Framework Used Pandas datamining library for statistics Analysis NumPy for Numerical analysis Craped and retrieved web data as JSON using Scrapy presented with Pandas library Jr Python Developer Accenture Pune Maharashtra May 2014 to September 2016 Worked as a part of team in developing the UI and other frontend programming including layout of web application matching the Autodesk requirements Maintaining the coordination of all the project activities and make sure all the phases of the project are properly followed and documented regularly Worked on various applications using python integrated IDEs Sublime Text PyCharm NetBeans Spyder and IntelliJ Carried out various mathematical operations for calculation purpose using Python libraries NUMPY Inputs on layouts were provided after detailed design discussions and user experience sessions Managed large datasets using Panda data frames and MySQL and creating efficient system Angular JS directives were used to develop custom HTML elements Using jQuery Angular Java script clientside validation techniques were developed Using web technologies like HTML XHTML CSS Responsive Web design and Bootstrap front end applications user interactive web pages were designed Nonfunctional HTML CSS pages from mock ups were developed and was a part of the UI review UI with business units and UI architects Extensively used Selenium Library to write fully functioning test automation process that allowed the simulation of submitting different requests from multiple browsers to web applications Used Unit Test Python library for testing many Python programs and block of codes Utilized Python specific tools including Django Django Rest Framework Django SQLAlchemy Pandas NumPy Using JavaScript HTML DOM XHTML AJAX CSS and jQuery in ongoing projects GUI was developed Used MySQL as backend database and MySQL dB of python as database connector to interact with MySQL server Helped with the migration from the old server to Jira database with Python scripts for transferring and verifying the information Used Python NumPy SciPy Pandas ScikitLearn Seaborn and Spark 20 PySpark MLlib to develop variety of models and algorithms for analytic purposes Generating various capacity planning reports graphical using Python packages like NumPy matplotlib Did Represented the system in hierarchy form by defining the components subcomponents using Python and developed set of library functions over the system based on the user needs Handwritten HTML CSS XHTML JavaScript jQuery AJAX XML and JSON were converted to mockups New web components and features were designed and created for improved user experience Using server and clientbased State Management options application state was managed Created Python scripts to automate AWS services which include web servers ELB Cloud Front distribution database EC2 and database security groups S3 bucket and application configuration Was a part of complete Software development Lifecycle Requirement Analysis Development System and Integration Testing cross browserplatform compatibility issues IE Firefox and Safari on both Windows were handled",
    "unique_id": "31ddab1f-7e81-4854-916e-8f3af6726f87"
}