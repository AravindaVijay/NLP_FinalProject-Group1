{
    "clean_data": "Sr Python Developer Sr span lPythonspan span lDeveloperspan Sr Python Developer Fidelity Investments Merrimack NH Over 11 Years of experience in Analysis Design Development Testing Customization Bug fixes Enhancement Support and Implementation of various web standalone clientserver enterprise applications using Python C Django Django Rest Framework in various domains Experienced with Object Oriented Programming Software Development Life Cycle Database designs agile methodologies coding and testing of enterprise applications Experienced in developing webbased applications using Python Django XML CSS HTML JavaScript jQuery Experienced in LAMP Linux Apache MySQL and PythonPHP and WAMP Windows Apache MYSQL and PythonPHP Architecture Skilled in Developing Microservices based on Restful web service using Akka Actors and AkkaHttp framework in Scala which handles high concurrency and high volume of traffic Experience in configuring and implementing various AWS components such as Elastic IPs EBS ElastiCache Elastic Beanstalk DynamoDB Redshift and Cloud Formation Strong Development Skills on Cloud Amazon Web Service AWS Familiar with JSON based REST Web services and Amazon Web services Strong Operational skills on Cloud Services EC2 S3 VPC Cloud Formation Cloud Watch RDS Dynamo DB SQS SNS API Gateway Experience in writing scripts using Gherkin Syntax in Behave framework in Python Experienced in writing Sub Queries Stored Procedures Triggers Cursors Subroutines functions on SQL PLSQL and PostgreSQL database Worked on refactoring the code Struts JSP and JavaScript by restructuring it for better performance Proficient in Front end development experience using Python 3627 Django 1718 HTML XML CSS JavaScript Bootstrap JQuery JSON and Angularjs Nodejs Good knowledge of web services with protocols SOAP REST and knowledge of server Apache Tomcat Web logic Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML CSS JavaScript and JQuery Hands on experience in SVN Git JIRA and Bugzilla worked in SQL databases MS SQL Apache Cassandra Oracle and MongoDB SQL and PLSQL programming developing complex code units database triggers and using the latest features to optimize performance Bulk Binds Materialized views Inline views Global Temporary Tables Leveraging queueing architectures with Rabbit MQ for scalability performance and building Proficient in Unit testing Testdriven Development TDD Load Testing and Integration Testing Experienced in using SVN Eclipse Pycharm Pyscript Spyder JIRA and GIT Used Ansible and Ansible Tower as Configuration management tool to automate repetitive tasks quickly deploys critical applications and proactively manages change Written Python Code using Ansible Python API to Automate Cloud Deployment Process Good knowledge in strategy and implementation of AWS technologies such as EC2 S3 and EBS Having experience in Agile Methodologies Scrum stories and sprints experience in a Python based environment along with data analytics data wrangling and Excel data extracts Experienced in various types of testing such as Unit testing Integration testing User acceptance testing Functional testing Ability to work on own initiative and as a part of team Willingness to learn new Technologies openness to new ideas and ability to learn very quickly Authorized to work in the US for any employer Work Experience Sr Python Developer Fidelity Investments Merrimack NH May 2017 to Present Responsibilities Implemented or exposing the Micro services to base on RESTful API utilizing Spring Boot with Spring MVC and Apache Kafka Developed Rest APIs with python with Django framework mongo DB for front end team Designed DynamoDB pipeline for routingstoring of email bounce handling records Used Pandas API to put the data as time series and tabular format for local timestamp data manipulation and retrieval and storing it into MongoDB Created UI Screens for initiation and validation Design and developing User Interaction screens using HTML5 XHTML CSS3 JavaScript AngularJS Bootstrap AJAX JSON and Gulp Used PyQuery for selecting particular DOM elements when parsing HTML Developed Single Page applications using angular JS2 DHTML CSS Semantic UI libraries Used Python Perl CGI jQuery JavaScript and JSON at the front end and experience in Shell Scripting SQL Server UNIX and Linux Open stock Successfully migrated the Django database from SQLite to MySQL to PostgreSQL with complete data integrity Developed various web components for screens using ReactJS and used various predefined components from NPM Node Package Manager Wrote and executed various MySQL database queries from python using PythonMySQL connector and MySQL DB package Used Apache Spark Scala as machine learning language for model creation and predictions using Logistic Regression algorithm Worked on migrating MapReduce programs into Spark transformations using Spark and Scala Used Python for data analytics data wrangling and extracting data using Pandas Pyexcel NumPy and SciPy Added support for Amazon AWSS3 and RDS to host staticmedia files and the database into Amazon Cloud Infrastructure as code with Terraform Packer Cloudformation ServerSpec and Ansible to manage AWS infrastructure Responsible for writingmodifying scripts using sh ksh and Bash for daytoday administration Experienced in developing Web Services with Python programming language and experienced in MVC frameworks like Django Flask and Pyramid Worked on Setup Git revision control system on Atlassian Bitbucket and local development environments Successfully migrated the DynamoDB from PostgreSQL with complete data integrity Used Amazon Elastic Beanstalk with Amazon EC2 instance to deploy Django project into AWS Configured continuous integration with Jenkins on Amazon EC2 Worked in team of Architects and Developers to build and deploy Python Django Peewee Linux AWS Worked in AWS S3 buckets instances using python boto3 Worked on AWS SDK gem including utilities that initialize local application environments mirroring Beanstalk environments Created Lambda functions and python scripts to automate the AWS environments Used AWS Cloud Watch for performing Monitoring customized metrics and file logging and successfully completed the task in using AWS Lambda to manage the servers and run the code in the AWS Used Django evolution and manual SQL modifications was able to modify Django models while retaining all data while site was in production mode Implemented AWS solutions using DynamoDB EBS Elastic Load Balancer Auto scaling groups Worked on creating the Docker containers and Docker consoles for managing the application life cycle Setup Docker on Linux and configure Jenkins to run under Docker host Worked closely with designer tightly integrating Flash into the CMS with the use of Flashvars stored in the Django models Also created XML with Django to be used by the Flash Implemented SQL Alchemyas ORM mapping tool for complete access and Wrote SQL queries and maintained PostgreSQL RDBMS in the local development environment Used Pandas library for statistical Analysis Environment Python 3627 Django 2016 Flask HTML5 CSS XML Spark Scala Java JavaScript Angular JS Backbone JS JQuery CSS Bootstrap Terraform Microservices Mongo DB MS SQL Server TSQL Eclipse Git GitHub AWS Linux Shell Scripting Python Developer Petco Sandiego CA February 2015 to May 2017 Responsibilities Good experience in developing web applications and implementing Model View Control MVC architecture using server side applications like Django and Flask Experience in developing views and templates with Python and Django view controller and templating language to create a userfriendly website interface Developed views and templates with Python and Django view controller and templating language to create a userfriendly Website interface Migrated platform from physical server to virtual environment Took it from development into production by wiring up a Nginx stack Consumed external APIs and wrote RESTful API using Django REST Framework and AngularJs Good working experience within the Django ORM or writing native SQL in SQLServer Developed Python Script for moving files from dropbox to Amazon server Build the pipelines ran the tests in Jenkins and deployed the application in AWS Created API Keys and Usage plans in AWS API Gateways and used the keys across the regions for using the API Gateway Developed the notification service by posting the JSON request in AWS API Gateway Validating the response in Lambda by getting the data from Dynamodb and sending the notification through AWS SNS Created AWS Secrets Manager to store the properties across the regions retrieve the secrets and wrote a shell script to automate the process Created AWS kinesis Firehouse and attached it to S3 bucket for having the log information and store that as Event data in the S3 storage bucket Written Python Scripts for loading data from CSV files into the database tables Documented tasks in Confluence and related them to the JIRA tickets Extensive experience in using Python Perl to code and design various phases for data processing pipeline Experience working with version control systems such as Git and Apache SVN for maintaining a consistent state throughout the application development process Involved in databasedriven web application development using a variety of frameworks such as Django on Python Excellent experience in designing and maintaining complex SQL queries and developing PLSQL stored procedures Followed the best practice of Python such as PEP8 Developed Python scripts to execute Stored Procedures and load data from various forms of csv files into staging tables in SQL Server database Involved in back end development using Python with framework Flask Developed internal project in Flask to generate report from google analytics on daily monthly and weekly basis Environment Python 33 AWS Flask Java Script Matplotlib HTML RESTful API Angular JS JQuery JSON AJAX XML CSS Oracle 10G SQL MySQL Bootstrap Restful Web Services Beautiful Soup Jenkins GitHub SVN Linux PyCharm Python Developer Time Warner Cable Renton VA December 2012 to February 2015 Responsibilities Developed Views and Templates with Django view controller and template language to create a userfriendly website interface Configured the Django admin site dashboard and created a custom Django dashboard for end users with custom look and feel Used Django APIs for database access Used Python and Django for XML JSON processing data exchange and business logic implementation created websockets by using Django to get a handle on what we needed to be done on the backend of the applications Deployed Application using AWS EC2 Standard Deployment Techniques Built database Model Views and APIs using Python for interactive web based solutions Used Python scripts to update the content in database and manipulate files Created UI using JavaScript and HTML5 Designed and developed data management system using MySQL Worked in MySQL and NoSQL database on simple queries and writing Stored Procedures for normalization and renormalization Worked on Jenkins continuous integration tool for deployment of project Played a key role in a development wide transition from Subversion to Git which resulted in increase in efficiency for the development community Developed most of the application part in Linux environment and very much familiar with all of its commands Used TKinter to implement GUI for the user to create modify and view reports based on client data Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Implemented Restful WebServices for sending and receiving the data between multiple systems Written Cloud formation templates and deployed AWS resources using it We used to send text data through we sockets with most APis and JSON Gained Knowledge on Deploying app using AWS Cloud Formation Used Python Library Beautiful Soup for webScrapping ss Responsible for debugging and troubleshooting the web application Environment Python 27 Flask Java Script Matplotlib HTML Angular JS JQuery JSON AJAX XML CSS Oracle 10G SQL MySQL Bootstrap Restful Web Services Beautiful Soup Jenkins GitHub SVN Linux PyCharm Python Developer Value Labs Chicago IL September 2010 to December 2012 Responsibilities Develop and maintain automated tests using Python and the Robot test framework Developed entire frontend and backend modules using Python on Django Web Framework Designed and developed the UI using ReactJs HTML AJAX CSS and JavaScript Implemented several Socket TCPIP UDP XMLRPC programs to retrieve data from various data centers Built python framework to transform Datasets and Data tables into HTTPserializable JSON strings Used Python inbuilt libraries urllib2 and beautiful soup modules for web scraping Developed Python scripts to store read and write data to CSV files Developed scripts to read and dump data to MySQL database Worked in Agile and scrum environment which includes daily standup and sprint planning Implemented automation script using Crontab in python to run the web crawler Used cURL for web scraping contents that cannot be scraped normally Wrote python scripts to read and write from csv files to database using Django ORM Used RAnalytics for analyzing data and plotting Pie Charts Bar Charts Box plots Histograms Line Graphs Scatter plots Implemented Google Python Coding Style and PEP8 while working with various teams Built python frameworks using Numpy and Pandas for data analysis Environment Python 27 Python Django 16 Django REST Framework Flask XML HTTP Ajax Bootstrap JSON HTML CSS jQuery Pandas Bugzilla GITHUB Java Script PLSQL Microsoft SQL Server Shell Scripting Amazon Web Services AWS Python Developer Merchant Link Silver Spring MD May 2008 to September 2010 Responsibilities Managed datasets using data frames and MySQL queried MYSQL database queries from python using PythonMySQL connector MySQL dB package to retrieve information Development of realtime multitasking systems using Python Designed and developed components using Python with Django framework Implemented code in python to retrieve and manipulate data Used Python Django creating graphics XML processing of documents data exchange business logic implementation between servers Worked on development of backend services using Python SQL and Linux Created many APIs for I scrum project which involves creating and maintaining projects in an organization and developed UI using HTML CSS and JavaScript Developed backend services and created many APIs using Python Programming Language and SQL Involved in developing a video calling application using python websockets Performed research regarding Python Programming and its uses and efficiency Developed GUI screens for XTT LD application using JSP HTML and CSS Wrote JavaScript functions to get Dynamic data and Clientside validation Used jQuery to make the frontend components interact with the JavaScript functions to add dynamism to the web pages at the client side Implemented a Nodejs server to manage authentication Created Nodejs middleware application server to encapsulate modern JS widget framework Worked with JSON objects and JavaScript and jQuery intensively to create interactive web pages Implemented web based frontend using HTML CSS jQuery and AngularJS Involved in developing the UI panels using JSF XHTML CSS DOJO and jQuery Set up the deployment environment on Web Logic Developed system preferences UI screens using JSP and HTML Created a Rich Single Page Application using HTML CSS Angularjs JQuery and REST Services Designed and implemented UI layer using JSP JavaScript HTML DHTML JSON XML XHTML XSL XSLT XSLFO Used Backbonejs Nodejs Bootstrap and other javascript libraries to create intuitive and rich Single Page Applications Used JQuery JavaScript libraries for providing richer user interface and facilitates asynchronous request invocations using AJAX Developed DashBoard to monitor and report Cache Coherence Servers Prepared statements are used for communication Sql database Involved in Requirement analysis design and Implementation applying the Water fall model Environment Python Django HTML CSS JavaScript Ajax JSON jQuery MySQL TOAD SQL DB2 Apache Axis WSDL NetBeans JBOSS Mercurial Coherence ClearCase Selenium Water Fall Model UML JSP Servlet Ant XML Jira Swing Congos Education Bachelors",
    "entities": [
        "Python 3627",
        "Flashvars",
        "Dynamodb",
        "Created Lambda",
        "Robot",
        "GUI",
        "Nodejs",
        "Testdriven Development TDD Load Testing",
        "Pandas Pyexcel NumPy",
        "JSON",
        "LAMP Linux",
        "AJAX Developed DashBoard",
        "TKinter",
        "Model View Control MVC",
        "XML",
        "JavaScript Implemented",
        "HTML Created",
        "Flask Developed",
        "Work Experience Sr Python Developer Fidelity Investments Merrimack NH",
        "Amazon",
        "Atlassian Bitbucket and local development",
        "ElastiCache",
        "SQL Server",
        "SQL Involved",
        "Created Nodejs",
        "Stored Procedures",
        "Developed",
        "Amazon AWS S3",
        "Jenkins",
        "Bash",
        "AWS S3",
        "User Interaction",
        "Python Experienced",
        "Developer Time Warner",
        "Django",
        "Git",
        "Restful",
        "Akka Actors",
        "Technologies",
        "PythonPHP",
        "CSS Wrote",
        "PythonPHP Architecture Skilled",
        "Linux",
        "Renton VA",
        "JSP",
        "Flask",
        "Micro",
        "Built",
        "Worked",
        "JavaScript Developed",
        "Shell Scripting",
        "HTML CSS jQuery",
        "DOM",
        "RDS",
        "MS",
        "MVC",
        "Created AWS",
        "Spark",
        "Bugzilla",
        "Rabbit MQ",
        "CSV",
        "HTML CSS",
        "JS",
        "API",
        "HTML CSS JavaScript",
        "US",
        "Created",
        "Django on Python Excellent",
        "AWS",
        "WAMP Windows Apache",
        "CSS Semantic UI",
        "Cache Coherence Servers Prepared",
        "REST Services Designed",
        "Sub Queries Stored Procedures Triggers Cursors Subroutines",
        "Amazon Web Services AWS Python Developer Merchant Link",
        "Terraform Packer Cloudformation ServerSpec",
        "SQL",
        "Amazon Cloud Implemented Restful WebServices",
        "AWS Created",
        "lPythonspan",
        "Nginx",
        "Amazon Cloud Infrastructure",
        "SQL PLSQL and PostgreSQL",
        "Analysis Design Development Testing Customization Bug",
        "Behave",
        "Python Programming",
        "Nodejs Bootstrap",
        "google analytics",
        "Pandas",
        "NPM Node Package",
        "SQLite",
        "SQS",
        "Object Oriented Programming Software Development Life Cycle Database",
        "Build",
        "Created UI",
        "HTML Developed Single Page",
        "AWS Configured",
        "JavaScript",
        "Cloud Services",
        "UI",
        "Front",
        "Microsoft",
        "SVN",
        "CMS",
        "Logistic Regression",
        "jQuery",
        "Responsibilities Develop",
        "REST",
        "XTT",
        "JQuery Hands",
        "MapReduce",
        "NoSQL",
        "EBS",
        "the Flash Implemented SQL Alchemyas",
        "Deployed Application"
    ],
    "experience": "Experience in configuring and implementing various AWS components such as Elastic IPs EBS ElastiCache Elastic Beanstalk DynamoDB Redshift and Cloud Formation Strong Development Skills on Cloud Amazon Web Service AWS Familiar with JSON based REST Web services and Amazon Web services Strong Operational skills on Cloud Services EC2 S3 VPC Cloud Formation Cloud Watch RDS Dynamo DB SQS SNS API Gateway Experience in writing scripts using Gherkin Syntax in Behave framework in Python Experienced in writing Sub Queries Stored Procedures Triggers Cursors Subroutines functions on SQL PLSQL and PostgreSQL database Worked on refactoring the code Struts JSP and JavaScript by restructuring it for better performance Proficient in Front end development experience using Python 3627 Django 1718 HTML XML CSS JavaScript Bootstrap JQuery JSON and Angularjs Nodejs Good knowledge of web services with protocols SOAP REST and knowledge of server Apache Tomcat Web logic Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML CSS JavaScript and JQuery Hands on experience in SVN Git JIRA and Bugzilla worked in SQL databases MS SQL Apache Cassandra Oracle and MongoDB SQL and PLSQL programming developing complex code units database triggers and using the latest features to optimize performance Bulk Binds Materialized views Inline views Global Temporary Tables Leveraging queueing architectures with Rabbit MQ for scalability performance and building Proficient in Unit testing Testdriven Development TDD Load Testing and Integration Testing Experienced in using SVN Eclipse Pycharm Pyscript Spyder JIRA and GIT Used Ansible and Ansible Tower as Configuration management tool to automate repetitive tasks quickly deploys critical applications and proactively manages change Written Python Code using Ansible Python API to Automate Cloud Deployment Process Good knowledge in strategy and implementation of AWS technologies such as EC2 S3 and EBS Having experience in Agile Methodologies Scrum stories and sprints experience in a Python based environment along with data analytics data wrangling and Excel data extracts Experienced in various types of testing such as Unit testing Integration testing User acceptance testing Functional testing Ability to work on own initiative and as a part of team Willingness to learn new Technologies openness to new ideas and ability to learn very quickly Authorized to work in the US for any employer Work Experience Sr Python Developer Fidelity Investments Merrimack NH May 2017 to Present Responsibilities Implemented or exposing the Micro services to base on RESTful API utilizing Spring Boot with Spring MVC and Apache Kafka Developed Rest APIs with python with Django framework mongo DB for front end team Designed DynamoDB pipeline for routingstoring of email bounce handling records Used Pandas API to put the data as time series and tabular format for local timestamp data manipulation and retrieval and storing it into MongoDB Created UI Screens for initiation and validation Design and developing User Interaction screens using HTML5 XHTML CSS3 JavaScript AngularJS Bootstrap AJAX JSON and Gulp Used PyQuery for selecting particular DOM elements when parsing HTML Developed Single Page applications using angular JS2 DHTML CSS Semantic UI libraries Used Python Perl CGI jQuery JavaScript and JSON at the front end and experience in Shell Scripting SQL Server UNIX and Linux Open stock Successfully migrated the Django database from SQLite to MySQL to PostgreSQL with complete data integrity Developed various web components for screens using ReactJS and used various predefined components from NPM Node Package Manager Wrote and executed various MySQL database queries from python using PythonMySQL connector and MySQL DB package Used Apache Spark Scala as machine learning language for model creation and predictions using Logistic Regression algorithm Worked on migrating MapReduce programs into Spark transformations using Spark and Scala Used Python for data analytics data wrangling and extracting data using Pandas Pyexcel NumPy and SciPy Added support for Amazon AWSS3 and RDS to host staticmedia files and the database into Amazon Cloud Infrastructure as code with Terraform Packer Cloudformation ServerSpec and Ansible to manage AWS infrastructure Responsible for writingmodifying scripts using sh ksh and Bash for daytoday administration Experienced in developing Web Services with Python programming language and experienced in MVC frameworks like Django Flask and Pyramid Worked on Setup Git revision control system on Atlassian Bitbucket and local development environments Successfully migrated the DynamoDB from PostgreSQL with complete data integrity Used Amazon Elastic Beanstalk with Amazon EC2 instance to deploy Django project into AWS Configured continuous integration with Jenkins on Amazon EC2 Worked in team of Architects and Developers to build and deploy Python Django Peewee Linux AWS Worked in AWS S3 buckets instances using python boto3 Worked on AWS SDK gem including utilities that initialize local application environments mirroring Beanstalk environments Created Lambda functions and python scripts to automate the AWS environments Used AWS Cloud Watch for performing Monitoring customized metrics and file logging and successfully completed the task in using AWS Lambda to manage the servers and run the code in the AWS Used Django evolution and manual SQL modifications was able to modify Django models while retaining all data while site was in production mode Implemented AWS solutions using DynamoDB EBS Elastic Load Balancer Auto scaling groups Worked on creating the Docker containers and Docker consoles for managing the application life cycle Setup Docker on Linux and configure Jenkins to run under Docker host Worked closely with designer tightly integrating Flash into the CMS with the use of Flashvars stored in the Django models Also created XML with Django to be used by the Flash Implemented SQL Alchemyas ORM mapping tool for complete access and Wrote SQL queries and maintained PostgreSQL RDBMS in the local development environment Used Pandas library for statistical Analysis Environment Python 3627 Django 2016 Flask HTML5 CSS XML Spark Scala Java JavaScript Angular JS Backbone JS JQuery CSS Bootstrap Terraform Microservices Mongo DB MS SQL Server TSQL Eclipse Git GitHub AWS Linux Shell Scripting Python Developer Petco Sandiego CA February 2015 to May 2017 Responsibilities Good experience in developing web applications and implementing Model View Control MVC architecture using server side applications like Django and Flask Experience in developing views and templates with Python and Django view controller and templating language to create a userfriendly website interface Developed views and templates with Python and Django view controller and templating language to create a userfriendly Website interface Migrated platform from physical server to virtual environment Took it from development into production by wiring up a Nginx stack Consumed external APIs and wrote RESTful API using Django REST Framework and AngularJs Good working experience within the Django ORM or writing native SQL in SQLServer Developed Python Script for moving files from dropbox to Amazon server Build the pipelines ran the tests in Jenkins and deployed the application in AWS Created API Keys and Usage plans in AWS API Gateways and used the keys across the regions for using the API Gateway Developed the notification service by posting the JSON request in AWS API Gateway Validating the response in Lambda by getting the data from Dynamodb and sending the notification through AWS SNS Created AWS Secrets Manager to store the properties across the regions retrieve the secrets and wrote a shell script to automate the process Created AWS kinesis Firehouse and attached it to S3 bucket for having the log information and store that as Event data in the S3 storage bucket Written Python Scripts for loading data from CSV files into the database tables Documented tasks in Confluence and related them to the JIRA tickets Extensive experience in using Python Perl to code and design various phases for data processing pipeline Experience working with version control systems such as Git and Apache SVN for maintaining a consistent state throughout the application development process Involved in databasedriven web application development using a variety of frameworks such as Django on Python Excellent experience in designing and maintaining complex SQL queries and developing PLSQL stored procedures Followed the best practice of Python such as PEP8 Developed Python scripts to execute Stored Procedures and load data from various forms of csv files into staging tables in SQL Server database Involved in back end development using Python with framework Flask Developed internal project in Flask to generate report from google analytics on daily monthly and weekly basis Environment Python 33 AWS Flask Java Script Matplotlib HTML RESTful API Angular JS JQuery JSON AJAX XML CSS Oracle 10 G SQL MySQL Bootstrap Restful Web Services Beautiful Soup Jenkins GitHub SVN Linux PyCharm Python Developer Time Warner Cable Renton VA December 2012 to February 2015 Responsibilities Developed Views and Templates with Django view controller and template language to create a userfriendly website interface Configured the Django admin site dashboard and created a custom Django dashboard for end users with custom look and feel Used Django APIs for database access Used Python and Django for XML JSON processing data exchange and business logic implementation created websockets by using Django to get a handle on what we needed to be done on the backend of the applications Deployed Application using AWS EC2 Standard Deployment Techniques Built database Model Views and APIs using Python for interactive web based solutions Used Python scripts to update the content in database and manipulate files Created UI using JavaScript and HTML5 Designed and developed data management system using MySQL Worked in MySQL and NoSQL database on simple queries and writing Stored Procedures for normalization and renormalization Worked on Jenkins continuous integration tool for deployment of project Played a key role in a development wide transition from Subversion to Git which resulted in increase in efficiency for the development community Developed most of the application part in Linux environment and very much familiar with all of its commands Used TKinter to implement GUI for the user to create modify and view reports based on client data Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Implemented Restful WebServices for sending and receiving the data between multiple systems Written Cloud formation templates and deployed AWS resources using it We used to send text data through we sockets with most APis and JSON Gained Knowledge on Deploying app using AWS Cloud Formation Used Python Library Beautiful Soup for webScrapping ss Responsible for debugging and troubleshooting the web application Environment Python 27 Flask Java Script Matplotlib HTML Angular JS JQuery JSON AJAX XML CSS Oracle 10 G SQL MySQL Bootstrap Restful Web Services Beautiful Soup Jenkins GitHub SVN Linux PyCharm Python Developer Value Labs Chicago IL September 2010 to December 2012 Responsibilities Develop and maintain automated tests using Python and the Robot test framework Developed entire frontend and backend modules using Python on Django Web Framework Designed and developed the UI using ReactJs HTML AJAX CSS and JavaScript Implemented several Socket TCPIP UDP XMLRPC programs to retrieve data from various data centers Built python framework to transform Datasets and Data tables into HTTPserializable JSON strings Used Python inbuilt libraries urllib2 and beautiful soup modules for web scraping Developed Python scripts to store read and write data to CSV files Developed scripts to read and dump data to MySQL database Worked in Agile and scrum environment which includes daily standup and sprint planning Implemented automation script using Crontab in python to run the web crawler Used cURL for web scraping contents that can not be scraped normally Wrote python scripts to read and write from csv files to database using Django ORM Used RAnalytics for analyzing data and plotting Pie Charts Bar Charts Box plots Histograms Line Graphs Scatter plots Implemented Google Python Coding Style and PEP8 while working with various teams Built python frameworks using Numpy and Pandas for data analysis Environment Python 27 Python Django 16 Django REST Framework Flask XML HTTP Ajax Bootstrap JSON HTML CSS jQuery Pandas Bugzilla GITHUB Java Script PLSQL Microsoft SQL Server Shell Scripting Amazon Web Services AWS Python Developer Merchant Link Silver Spring MD May 2008 to September 2010 Responsibilities Managed datasets using data frames and MySQL queried MYSQL database queries from python using PythonMySQL connector MySQL dB package to retrieve information Development of realtime multitasking systems using Python Designed and developed components using Python with Django framework Implemented code in python to retrieve and manipulate data Used Python Django creating graphics XML processing of documents data exchange business logic implementation between servers Worked on development of backend services using Python SQL and Linux Created many APIs for I scrum project which involves creating and maintaining projects in an organization and developed UI using HTML CSS and JavaScript Developed backend services and created many APIs using Python Programming Language and SQL Involved in developing a video calling application using python websockets Performed research regarding Python Programming and its uses and efficiency Developed GUI screens for XTT LD application using JSP HTML and CSS Wrote JavaScript functions to get Dynamic data and Clientside validation Used jQuery to make the frontend components interact with the JavaScript functions to add dynamism to the web pages at the client side Implemented a Nodejs server to manage authentication Created Nodejs middleware application server to encapsulate modern JS widget framework Worked with JSON objects and JavaScript and jQuery intensively to create interactive web pages Implemented web based frontend using HTML CSS jQuery and AngularJS Involved in developing the UI panels using JSF XHTML CSS DOJO and jQuery Set up the deployment environment on Web Logic Developed system preferences UI screens using JSP and HTML Created a Rich Single Page Application using HTML CSS Angularjs JQuery and REST Services Designed and implemented UI layer using JSP JavaScript HTML DHTML JSON XML XHTML XSL XSLT XSLFO Used Backbonejs Nodejs Bootstrap and other javascript libraries to create intuitive and rich Single Page Applications Used JQuery JavaScript libraries for providing richer user interface and facilitates asynchronous request invocations using AJAX Developed DashBoard to monitor and report Cache Coherence Servers Prepared statements are used for communication Sql database Involved in Requirement analysis design and Implementation applying the Water fall model Environment Python Django HTML CSS JavaScript Ajax JSON jQuery MySQL TOAD SQL DB2 Apache Axis WSDL NetBeans JBOSS Mercurial Coherence ClearCase Selenium Water Fall Model UML JSP Servlet Ant XML Jira Swing Congos Education Bachelors",
    "extracted_keywords": [
        "Sr",
        "Python",
        "Developer",
        "Sr",
        "lPythonspan",
        "span",
        "lDeveloperspan",
        "Sr",
        "Python",
        "Developer",
        "Fidelity",
        "Investments",
        "Merrimack",
        "NH",
        "Years",
        "experience",
        "Analysis",
        "Design",
        "Development",
        "Testing",
        "Customization",
        "Bug",
        "fixes",
        "Enhancement",
        "Support",
        "Implementation",
        "web",
        "standalone",
        "enterprise",
        "applications",
        "Python",
        "C",
        "Django",
        "Django",
        "Rest",
        "Framework",
        "domains",
        "Object",
        "Oriented",
        "Programming",
        "Software",
        "Development",
        "Life",
        "Cycle",
        "Database",
        "methodologies",
        "testing",
        "enterprise",
        "applications",
        "applications",
        "Python",
        "Django",
        "XML",
        "CSS",
        "HTML",
        "JavaScript",
        "jQuery",
        "LAMP",
        "Linux",
        "Apache",
        "MySQL",
        "PythonPHP",
        "WAMP",
        "Windows",
        "Apache",
        "MYSQL",
        "PythonPHP",
        "Architecture",
        "Skilled",
        "Developing",
        "Microservices",
        "Restful",
        "web",
        "service",
        "Akka",
        "Actors",
        "AkkaHttp",
        "framework",
        "Scala",
        "concurrency",
        "volume",
        "traffic",
        "Experience",
        "AWS",
        "components",
        "IPs",
        "EBS",
        "ElastiCache",
        "Elastic",
        "Beanstalk",
        "DynamoDB",
        "Redshift",
        "Cloud",
        "Formation",
        "Strong",
        "Development",
        "Skills",
        "Cloud",
        "Amazon",
        "Web",
        "Service",
        "AWS",
        "JSON",
        "REST",
        "Web",
        "services",
        "Amazon",
        "Web",
        "services",
        "Strong",
        "skills",
        "Cloud",
        "Services",
        "EC2",
        "S3",
        "VPC",
        "Cloud",
        "Formation",
        "Cloud",
        "RDS",
        "Dynamo",
        "DB",
        "SQS",
        "SNS",
        "API",
        "Gateway",
        "Experience",
        "scripts",
        "Gherkin",
        "Syntax",
        "Behave",
        "framework",
        "Python",
        "Sub",
        "Queries",
        "Stored",
        "Procedures",
        "Triggers",
        "Cursors",
        "Subroutines",
        "functions",
        "SQL",
        "PLSQL",
        "PostgreSQL",
        "database",
        "code",
        "Struts",
        "JSP",
        "JavaScript",
        "performance",
        "Proficient",
        "Front",
        "end",
        "development",
        "experience",
        "Python",
        "Django",
        "HTML",
        "XML",
        "CSS",
        "JavaScript",
        "Bootstrap",
        "JQuery",
        "JSON",
        "Angularjs",
        "Nodejs",
        "knowledge",
        "web",
        "services",
        "protocols",
        "SOAP",
        "REST",
        "knowledge",
        "server",
        "Apache",
        "Tomcat",
        "Web",
        "logic",
        "user",
        "interface",
        "guidelines",
        "standards",
        "development",
        "maintenance",
        "website",
        "HTML",
        "CSS",
        "JavaScript",
        "JQuery",
        "Hands",
        "experience",
        "SVN",
        "Git",
        "JIRA",
        "Bugzilla",
        "SQL",
        "MS",
        "SQL",
        "Apache",
        "Cassandra",
        "Oracle",
        "MongoDB",
        "SQL",
        "PLSQL",
        "programming",
        "code",
        "units",
        "database",
        "triggers",
        "features",
        "performance",
        "Bulk",
        "Binds",
        "views",
        "Inline",
        "Global",
        "Temporary",
        "Tables",
        "architectures",
        "Rabbit",
        "MQ",
        "scalability",
        "performance",
        "Proficient",
        "Unit",
        "testing",
        "Testdriven",
        "Development",
        "TDD",
        "Load",
        "Testing",
        "Integration",
        "Testing",
        "SVN",
        "Eclipse",
        "Pycharm",
        "Pyscript",
        "Spyder",
        "JIRA",
        "GIT",
        "Ansible",
        "Ansible",
        "Tower",
        "Configuration",
        "management",
        "tool",
        "tasks",
        "applications",
        "change",
        "Written",
        "Python",
        "Code",
        "Ansible",
        "Python",
        "API",
        "Automate",
        "Cloud",
        "Deployment",
        "Process",
        "knowledge",
        "strategy",
        "implementation",
        "AWS",
        "technologies",
        "EC2",
        "S3",
        "EBS",
        "experience",
        "Agile",
        "Methodologies",
        "Scrum",
        "stories",
        "sprints",
        "experience",
        "Python",
        "environment",
        "data",
        "analytics",
        "data",
        "Excel",
        "data",
        "extracts",
        "types",
        "testing",
        "Unit",
        "testing",
        "Integration",
        "testing",
        "User",
        "acceptance",
        "testing",
        "Ability",
        "initiative",
        "part",
        "team",
        "Willingness",
        "Technologies",
        "openness",
        "ideas",
        "ability",
        "US",
        "employer",
        "Work",
        "Experience",
        "Sr",
        "Python",
        "Developer",
        "Fidelity",
        "Investments",
        "Merrimack",
        "NH",
        "May",
        "Present",
        "Responsibilities",
        "Micro",
        "services",
        "API",
        "Spring",
        "Boot",
        "Spring",
        "MVC",
        "Apache",
        "Kafka",
        "Rest",
        "APIs",
        "python",
        "Django",
        "framework",
        "mongo",
        "DB",
        "end",
        "team",
        "DynamoDB",
        "pipeline",
        "email",
        "bounce",
        "records",
        "Pandas",
        "API",
        "data",
        "time",
        "series",
        "format",
        "timestamp",
        "data",
        "manipulation",
        "retrieval",
        "UI",
        "Screens",
        "initiation",
        "validation",
        "Design",
        "User",
        "Interaction",
        "screens",
        "HTML5",
        "XHTML",
        "CSS3",
        "JavaScript",
        "Bootstrap",
        "AJAX",
        "JSON",
        "Gulp",
        "Used",
        "PyQuery",
        "DOM",
        "elements",
        "HTML",
        "Single",
        "Page",
        "applications",
        "JS2",
        "DHTML",
        "CSS",
        "Semantic",
        "UI",
        "Python",
        "Perl",
        "CGI",
        "jQuery",
        "JavaScript",
        "JSON",
        "end",
        "experience",
        "Shell",
        "Scripting",
        "SQL",
        "Server",
        "UNIX",
        "Linux",
        "Open",
        "stock",
        "Django",
        "database",
        "SQLite",
        "PostgreSQL",
        "data",
        "integrity",
        "web",
        "components",
        "screens",
        "ReactJS",
        "components",
        "NPM",
        "Node",
        "Package",
        "Manager",
        "Wrote",
        "MySQL",
        "database",
        "python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "DB",
        "package",
        "Apache",
        "Spark",
        "Scala",
        "machine",
        "language",
        "model",
        "creation",
        "predictions",
        "Logistic",
        "Regression",
        "algorithm",
        "MapReduce",
        "programs",
        "Spark",
        "transformations",
        "Spark",
        "Scala",
        "Python",
        "data",
        "analytics",
        "data",
        "data",
        "Pandas",
        "Pyexcel",
        "NumPy",
        "SciPy",
        "support",
        "Amazon",
        "AWSS3",
        "RDS",
        "files",
        "database",
        "Amazon",
        "Cloud",
        "Infrastructure",
        "code",
        "Terraform",
        "Packer",
        "Cloudformation",
        "ServerSpec",
        "Ansible",
        "AWS",
        "infrastructure",
        "scripts",
        "sh",
        "ksh",
        "Bash",
        "daytoday",
        "administration",
        "Web",
        "Services",
        "Python",
        "programming",
        "language",
        "MVC",
        "frameworks",
        "Django",
        "Flask",
        "Pyramid",
        "Worked",
        "Setup",
        "Git",
        "revision",
        "control",
        "system",
        "Bitbucket",
        "development",
        "environments",
        "DynamoDB",
        "PostgreSQL",
        "data",
        "integrity",
        "Amazon",
        "Elastic",
        "Beanstalk",
        "Amazon",
        "EC2",
        "instance",
        "Django",
        "project",
        "AWS",
        "integration",
        "Jenkins",
        "Amazon",
        "EC2",
        "Worked",
        "team",
        "Architects",
        "Developers",
        "Python",
        "Django",
        "Peewee",
        "Linux",
        "AWS",
        "AWS",
        "S3",
        "buckets",
        "instances",
        "python",
        "boto3",
        "AWS",
        "SDK",
        "gem",
        "utilities",
        "application",
        "environments",
        "Beanstalk",
        "environments",
        "Lambda",
        "functions",
        "scripts",
        "AWS",
        "AWS",
        "Cloud",
        "Watch",
        "metrics",
        "file",
        "logging",
        "task",
        "AWS",
        "Lambda",
        "servers",
        "code",
        "AWS",
        "Django",
        "evolution",
        "SQL",
        "modifications",
        "Django",
        "models",
        "data",
        "site",
        "production",
        "mode",
        "AWS",
        "solutions",
        "EBS",
        "Elastic",
        "Load",
        "Balancer",
        "Auto",
        "scaling",
        "groups",
        "Docker",
        "containers",
        "Docker",
        "application",
        "life",
        "cycle",
        "Setup",
        "Docker",
        "Linux",
        "Jenkins",
        "Docker",
        "host",
        "designer",
        "Flash",
        "CMS",
        "use",
        "Flashvars",
        "Django",
        "models",
        "XML",
        "Django",
        "Flash",
        "SQL",
        "Alchemyas",
        "ORM",
        "mapping",
        "tool",
        "access",
        "Wrote",
        "SQL",
        "PostgreSQL",
        "RDBMS",
        "development",
        "environment",
        "Pandas",
        "library",
        "Analysis",
        "Environment",
        "Python",
        "Django",
        "Flask",
        "HTML5",
        "CSS",
        "XML",
        "Spark",
        "Scala",
        "Java",
        "JavaScript",
        "Angular",
        "JS",
        "Backbone",
        "JS",
        "JQuery",
        "CSS",
        "Bootstrap",
        "Terraform",
        "Microservices",
        "Mongo",
        "DB",
        "MS",
        "SQL",
        "Server",
        "TSQL",
        "Eclipse",
        "Git",
        "GitHub",
        "AWS",
        "Linux",
        "Shell",
        "Scripting",
        "Python",
        "Developer",
        "Petco",
        "Sandiego",
        "CA",
        "February",
        "May",
        "Responsibilities",
        "experience",
        "web",
        "applications",
        "Model",
        "View",
        "Control",
        "MVC",
        "architecture",
        "server",
        "side",
        "applications",
        "Django",
        "Flask",
        "Experience",
        "views",
        "templates",
        "Python",
        "Django",
        "controller",
        "templating",
        "language",
        "website",
        "interface",
        "Developed",
        "views",
        "templates",
        "Python",
        "Django",
        "controller",
        "templating",
        "language",
        "Website",
        "interface",
        "platform",
        "server",
        "environment",
        "development",
        "production",
        "Nginx",
        "stack",
        "APIs",
        "API",
        "Django",
        "REST",
        "Framework",
        "AngularJs",
        "working",
        "experience",
        "Django",
        "ORM",
        "SQL",
        "SQLServer",
        "Python",
        "Script",
        "files",
        "dropbox",
        "Amazon",
        "server",
        "Build",
        "pipelines",
        "tests",
        "Jenkins",
        "application",
        "AWS",
        "API",
        "Keys",
        "Usage",
        "plans",
        "AWS",
        "API",
        "Gateways",
        "keys",
        "regions",
        "API",
        "Gateway",
        "notification",
        "service",
        "request",
        "AWS",
        "API",
        "Gateway",
        "response",
        "Lambda",
        "data",
        "Dynamodb",
        "notification",
        "AWS",
        "SNS",
        "AWS",
        "Secrets",
        "Manager",
        "properties",
        "regions",
        "secrets",
        "shell",
        "script",
        "process",
        "AWS",
        "Firehouse",
        "S3",
        "bucket",
        "log",
        "information",
        "store",
        "Event",
        "data",
        "S3",
        "storage",
        "bucket",
        "Written",
        "Python",
        "Scripts",
        "loading",
        "data",
        "CSV",
        "files",
        "database",
        "tasks",
        "Confluence",
        "JIRA",
        "tickets",
        "experience",
        "Python",
        "Perl",
        "phases",
        "data",
        "processing",
        "pipeline",
        "Experience",
        "version",
        "control",
        "systems",
        "Git",
        "Apache",
        "SVN",
        "state",
        "application",
        "development",
        "process",
        "web",
        "application",
        "development",
        "variety",
        "frameworks",
        "Django",
        "Python",
        "Excellent",
        "experience",
        "SQL",
        "queries",
        "procedures",
        "practice",
        "Python",
        "PEP8",
        "Python",
        "scripts",
        "Procedures",
        "load",
        "data",
        "forms",
        "files",
        "tables",
        "SQL",
        "Server",
        "database",
        "end",
        "development",
        "Python",
        "framework",
        "Flask",
        "project",
        "Flask",
        "report",
        "google",
        "analytics",
        "basis",
        "Environment",
        "Python",
        "AWS",
        "Flask",
        "Java",
        "Script",
        "Matplotlib",
        "HTML",
        "API",
        "Angular",
        "JS",
        "JQuery",
        "JSON",
        "AJAX",
        "XML",
        "CSS",
        "Oracle",
        "G",
        "SQL",
        "MySQL",
        "Bootstrap",
        "Restful",
        "Web",
        "Services",
        "Beautiful",
        "Soup",
        "Jenkins",
        "GitHub",
        "SVN",
        "Linux",
        "PyCharm",
        "Python",
        "Developer",
        "Time",
        "Warner",
        "Cable",
        "Renton",
        "VA",
        "December",
        "February",
        "Responsibilities",
        "Views",
        "Templates",
        "Django",
        "controller",
        "template",
        "language",
        "website",
        "interface",
        "Django",
        "admin",
        "site",
        "dashboard",
        "custom",
        "Django",
        "dashboard",
        "end",
        "users",
        "custom",
        "Django",
        "APIs",
        "database",
        "access",
        "Python",
        "Django",
        "XML",
        "processing",
        "data",
        "exchange",
        "business",
        "logic",
        "implementation",
        "websockets",
        "Django",
        "handle",
        "backend",
        "applications",
        "Deployed",
        "Application",
        "AWS",
        "EC2",
        "Standard",
        "Deployment",
        "Techniques",
        "database",
        "Model",
        "Views",
        "APIs",
        "Python",
        "web",
        "solutions",
        "Python",
        "scripts",
        "content",
        "database",
        "manipulate",
        "files",
        "UI",
        "JavaScript",
        "HTML5",
        "data",
        "management",
        "system",
        "MySQL",
        "Worked",
        "MySQL",
        "NoSQL",
        "database",
        "queries",
        "Procedures",
        "normalization",
        "renormalization",
        "Jenkins",
        "integration",
        "tool",
        "deployment",
        "project",
        "role",
        "development",
        "transition",
        "Subversion",
        "Git",
        "increase",
        "efficiency",
        "development",
        "community",
        "application",
        "part",
        "Linux",
        "environment",
        "commands",
        "TKinter",
        "GUI",
        "user",
        "modify",
        "reports",
        "client",
        "data",
        "support",
        "Amazon",
        "AWS",
        "S3",
        "RDS",
        "files",
        "database",
        "Amazon",
        "Cloud",
        "Restful",
        "WebServices",
        "data",
        "systems",
        "Cloud",
        "formation",
        "templates",
        "AWS",
        "resources",
        "text",
        "data",
        "APis",
        "JSON",
        "Knowledge",
        "app",
        "AWS",
        "Cloud",
        "Formation",
        "Python",
        "Library",
        "Beautiful",
        "Soup",
        "ss",
        "web",
        "application",
        "Environment",
        "Python",
        "Flask",
        "Java",
        "Script",
        "Matplotlib",
        "HTML",
        "Angular",
        "JS",
        "JQuery",
        "JSON",
        "AJAX",
        "XML",
        "CSS",
        "Oracle",
        "G",
        "SQL",
        "MySQL",
        "Bootstrap",
        "Restful",
        "Web",
        "Services",
        "Beautiful",
        "Soup",
        "Jenkins",
        "GitHub",
        "SVN",
        "Linux",
        "PyCharm",
        "Python",
        "Developer",
        "Value",
        "Labs",
        "Chicago",
        "IL",
        "September",
        "December",
        "Responsibilities",
        "tests",
        "Python",
        "Robot",
        "test",
        "framework",
        "frontend",
        "modules",
        "Python",
        "Django",
        "Web",
        "Framework",
        "UI",
        "ReactJs",
        "HTML",
        "AJAX",
        "CSS",
        "JavaScript",
        "Socket",
        "UDP",
        "XMLRPC",
        "programs",
        "data",
        "data",
        "centers",
        "framework",
        "Datasets",
        "Data",
        "tables",
        "JSON",
        "strings",
        "Python",
        "libraries",
        "soup",
        "modules",
        "web",
        "Developed",
        "Python",
        "scripts",
        "data",
        "CSV",
        "files",
        "scripts",
        "data",
        "MySQL",
        "database",
        "Agile",
        "scrum",
        "environment",
        "standup",
        "sprint",
        "planning",
        "automation",
        "script",
        "Crontab",
        "python",
        "web",
        "crawler",
        "cURL",
        "web",
        "contents",
        "python",
        "scripts",
        "files",
        "database",
        "Django",
        "ORM",
        "RAnalytics",
        "data",
        "Pie",
        "Charts",
        "Bar",
        "Charts",
        "Box",
        "Histograms",
        "Line",
        "Graphs",
        "Scatter",
        "Google",
        "Python",
        "Coding",
        "Style",
        "PEP8",
        "teams",
        "python",
        "frameworks",
        "Numpy",
        "Pandas",
        "data",
        "analysis",
        "Environment",
        "Python",
        "Python",
        "Django",
        "Django",
        "REST",
        "Framework",
        "Flask",
        "XML",
        "HTTP",
        "Ajax",
        "Bootstrap",
        "JSON",
        "HTML",
        "CSS",
        "jQuery",
        "Pandas",
        "Bugzilla",
        "GITHUB",
        "Java",
        "Script",
        "PLSQL",
        "Microsoft",
        "SQL",
        "Server",
        "Shell",
        "Scripting",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "Python",
        "Developer",
        "Merchant",
        "Link",
        "Silver",
        "Spring",
        "MD",
        "May",
        "September",
        "Responsibilities",
        "datasets",
        "data",
        "frames",
        "MySQL",
        "MYSQL",
        "database",
        "python",
        "PythonMySQL",
        "connector",
        "MySQL",
        "package",
        "information",
        "Development",
        "systems",
        "Python",
        "components",
        "Python",
        "Django",
        "framework",
        "code",
        "python",
        "manipulate",
        "data",
        "Python",
        "Django",
        "graphics",
        "XML",
        "processing",
        "documents",
        "data",
        "exchange",
        "business",
        "logic",
        "implementation",
        "servers",
        "development",
        "services",
        "Python",
        "SQL",
        "Linux",
        "APIs",
        "project",
        "projects",
        "organization",
        "UI",
        "HTML",
        "CSS",
        "JavaScript",
        "services",
        "APIs",
        "Python",
        "Programming",
        "Language",
        "SQL",
        "video",
        "calling",
        "application",
        "python",
        "websockets",
        "Performed",
        "research",
        "Python",
        "Programming",
        "uses",
        "efficiency",
        "GUI",
        "screens",
        "XTT",
        "LD",
        "application",
        "JSP",
        "HTML",
        "CSS",
        "Wrote",
        "JavaScript",
        "functions",
        "data",
        "validation",
        "jQuery",
        "frontend",
        "components",
        "JavaScript",
        "functions",
        "dynamism",
        "web",
        "pages",
        "client",
        "side",
        "Nodejs",
        "server",
        "authentication",
        "Nodejs",
        "middleware",
        "application",
        "server",
        "JS",
        "widget",
        "framework",
        "objects",
        "JavaScript",
        "jQuery",
        "web",
        "pages",
        "web",
        "frontend",
        "HTML",
        "CSS",
        "jQuery",
        "AngularJS",
        "UI",
        "panels",
        "JSF",
        "XHTML",
        "CSS",
        "DOJO",
        "jQuery",
        "deployment",
        "environment",
        "Web",
        "system",
        "preferences",
        "UI",
        "screens",
        "JSP",
        "HTML",
        "Rich",
        "Single",
        "Page",
        "Application",
        "HTML",
        "CSS",
        "Angularjs",
        "JQuery",
        "REST",
        "Services",
        "UI",
        "layer",
        "JSP",
        "JavaScript",
        "HTML",
        "DHTML",
        "JSON",
        "XML",
        "XHTML",
        "XSL",
        "XSLT",
        "XSLFO",
        "Backbonejs",
        "Nodejs",
        "Bootstrap",
        "javascript",
        "Single",
        "Page",
        "Applications",
        "JQuery",
        "JavaScript",
        "user",
        "interface",
        "request",
        "invocations",
        "AJAX",
        "Developed",
        "DashBoard",
        "Cache",
        "Coherence",
        "Servers",
        "statements",
        "communication",
        "Sql",
        "database",
        "Requirement",
        "analysis",
        "design",
        "Implementation",
        "Water",
        "fall",
        "model",
        "Environment",
        "Python",
        "Django",
        "HTML",
        "CSS",
        "JavaScript",
        "Ajax",
        "JSON",
        "jQuery",
        "MySQL",
        "TOAD",
        "SQL",
        "DB2",
        "Apache",
        "Axis",
        "WSDL",
        "NetBeans",
        "JBOSS",
        "Mercurial",
        "Coherence",
        "ClearCase",
        "Selenium",
        "Water",
        "Fall",
        "Model",
        "UML",
        "JSP",
        "Servlet",
        "Ant",
        "XML",
        "Jira",
        "Swing",
        "Congos",
        "Education",
        "Bachelors"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T22:35:30.191332",
    "resume_data": "Sr Python Developer Sr span lPythonspan span lDeveloperspan Sr Python Developer Fidelity Investments Merrimack NH Over 11 Years of experience in Analysis Design Development Testing Customization Bug fixes Enhancement Support and Implementation of various web standalone clientserver enterprise applications using Python C Django Django Rest Framework in various domains Experienced with Object Oriented Programming Software Development Life Cycle Database designs agile methodologies coding and testing of enterprise applications Experienced in developing webbased applications using Python Django XML CSS HTML JavaScript jQuery Experienced in LAMP Linux Apache MySQL and PythonPHP and WAMP Windows Apache MYSQL and PythonPHP Architecture Skilled in Developing Microservices based on Restful web service using Akka Actors and AkkaHttp framework in Scala which handles high concurrency and high volume of traffic Experience in configuring and implementing various AWS components such as Elastic IPs EBS ElastiCache Elastic Beanstalk DynamoDB Redshift and Cloud Formation Strong Development Skills on Cloud Amazon Web Service AWS Familiar with JSON based REST Web services and Amazon Web services Strong Operational skills on Cloud Services EC2 S3 VPC Cloud Formation Cloud Watch RDS Dynamo DB SQS SNS API Gateway Experience in writing scripts using Gherkin Syntax in Behave framework in Python Experienced in writing Sub Queries Stored Procedures Triggers Cursors Subroutines functions on SQL PLSQL and PostgreSQL database Worked on refactoring the code Struts JSP and JavaScript by restructuring it for better performance Proficient in Front end development experience using Python 3627 Django 1718 HTML XML CSS JavaScript Bootstrap JQuery JSON and Angularjs Nodejs Good knowledge of web services with protocols SOAP REST and knowledge of server Apache Tomcat Web logic Implemented user interface guidelines and standards throughout the development and maintenance of the website using the HTML CSS JavaScript and JQuery Hands on experience in SVN Git JIRA and Bugzilla worked in SQL databases MS SQL Apache Cassandra Oracle and MongoDB SQL and PLSQL programming developing complex code units database triggers and using the latest features to optimize performance Bulk Binds Materialized views Inline views Global Temporary Tables Leveraging queueing architectures with Rabbit MQ for scalability performance and building Proficient in Unit testing Testdriven Development TDD Load Testing and Integration Testing Experienced in using SVN Eclipse Pycharm Pyscript Spyder JIRA and GIT Used Ansible and Ansible Tower as Configuration management tool to automate repetitive tasks quickly deploys critical applications and proactively manages change Written Python Code using Ansible Python API to Automate Cloud Deployment Process Good knowledge in strategy and implementation of AWS technologies such as EC2 S3 and EBS Having experience in Agile Methodologies Scrum stories and sprints experience in a Python based environment along with data analytics data wrangling and Excel data extracts Experienced in various types of testing such as Unit testing Integration testing User acceptance testing Functional testing Ability to work on own initiative and as a part of team Willingness to learn new Technologies openness to new ideas and ability to learn very quickly Authorized to work in the US for any employer Work Experience Sr Python Developer Fidelity Investments Merrimack NH May 2017 to Present Responsibilities Implemented or exposing the Micro services to base on RESTful API utilizing Spring Boot with Spring MVC and Apache Kafka Developed Rest APIs with python with Django framework mongo DB for front end team Designed DynamoDB pipeline for routingstoring of email bounce handling records Used Pandas API to put the data as time series and tabular format for local timestamp data manipulation and retrieval and storing it into MongoDB Created UI Screens for initiation and validation Design and developing User Interaction screens using HTML5 XHTML CSS3 JavaScript AngularJS Bootstrap AJAX JSON and Gulp Used PyQuery for selecting particular DOM elements when parsing HTML Developed Single Page applications using angular JS2 DHTML CSS Semantic UI libraries Used Python Perl CGI jQuery JavaScript and JSON at the front end and experience in Shell Scripting SQL Server UNIX and Linux Open stock Successfully migrated the Django database from SQLite to MySQL to PostgreSQL with complete data integrity Developed various web components for screens using ReactJS and used various predefined components from NPM Node Package Manager Wrote and executed various MySQL database queries from python using PythonMySQL connector and MySQL DB package Used Apache Spark Scala as machine learning language for model creation and predictions using Logistic Regression algorithm Worked on migrating MapReduce programs into Spark transformations using Spark and Scala Used Python for data analytics data wrangling and extracting data using Pandas Pyexcel NumPy and SciPy Added support for Amazon AWSS3 and RDS to host staticmedia files and the database into Amazon Cloud Infrastructure as code with Terraform Packer Cloudformation ServerSpec and Ansible to manage AWS infrastructure Responsible for writingmodifying scripts using sh ksh and Bash for daytoday administration Experienced in developing Web Services with Python programming language and experienced in MVC frameworks like Django Flask and Pyramid Worked on Setup Git revision control system on Atlassian Bitbucket and local development environments Successfully migrated the DynamoDB from PostgreSQL with complete data integrity Used Amazon Elastic Beanstalk with Amazon EC2 instance to deploy Django project into AWS Configured continuous integration with Jenkins on Amazon EC2 Worked in team of Architects and Developers to build and deploy Python Django Peewee Linux AWS Worked in AWS S3 buckets instances using python boto3 Worked on AWS SDK gem including utilities that initialize local application environments mirroring Beanstalk environments Created Lambda functions and python scripts to automate the AWS environments Used AWS Cloud Watch for performing Monitoring customized metrics and file logging and successfully completed the task in using AWS Lambda to manage the servers and run the code in the AWS Used Django evolution and manual SQL modifications was able to modify Django models while retaining all data while site was in production mode Implemented AWS solutions using DynamoDB EBS Elastic Load Balancer Auto scaling groups Worked on creating the Docker containers and Docker consoles for managing the application life cycle Setup Docker on Linux and configure Jenkins to run under Docker host Worked closely with designer tightly integrating Flash into the CMS with the use of Flashvars stored in the Django models Also created XML with Django to be used by the Flash Implemented SQL Alchemyas ORM mapping tool for complete access and Wrote SQL queries and maintained PostgreSQL RDBMS in the local development environment Used Pandas library for statistical Analysis Environment Python 3627 Django 2016 Flask HTML5 CSS XML Spark Scala Java JavaScript Angular JS Backbone JS JQuery CSS Bootstrap Terraform Microservices Mongo DB MS SQL Server TSQL Eclipse Git GitHub AWS Linux Shell Scripting Python Developer Petco Sandiego CA February 2015 to May 2017 Responsibilities Good experience in developing web applications and implementing Model View Control MVC architecture using server side applications like Django and Flask Experience in developing views and templates with Python and Django view controller and templating language to create a userfriendly website interface Developed views and templates with Python and Django view controller and templating language to create a userfriendly Website interface Migrated platform from physical server to virtual environment Took it from development into production by wiring up a Nginx stack Consumed external APIs and wrote RESTful API using Django REST Framework and AngularJs Good working experience within the Django ORM or writing native SQL in SQLServer Developed Python Script for moving files from dropbox to Amazon server Build the pipelines ran the tests in Jenkins and deployed the application in AWS Created API Keys and Usage plans in AWS API Gateways and used the keys across the regions for using the API Gateway Developed the notification service by posting the JSON request in AWS API Gateway Validating the response in Lambda by getting the data from Dynamodb and sending the notification through AWS SNS Created AWS Secrets Manager to store the properties across the regions retrieve the secrets and wrote a shell script to automate the process Created AWS kinesis Firehouse and attached it to S3 bucket for having the log information and store that as Event data in the S3 storage bucket Written Python Scripts for loading data from CSV files into the database tables Documented tasks in Confluence and related them to the JIRA tickets Extensive experience in using Python Perl to code and design various phases for data processing pipeline Experience working with version control systems such as Git and Apache SVN for maintaining a consistent state throughout the application development process Involved in databasedriven web application development using a variety of frameworks such as Django on Python Excellent experience in designing and maintaining complex SQL queries and developing PLSQL stored procedures Followed the best practice of Python such as PEP8 Developed Python scripts to execute Stored Procedures and load data from various forms of csv files into staging tables in SQL Server database Involved in back end development using Python with framework Flask Developed internal project in Flask to generate report from google analytics on daily monthly and weekly basis Environment Python 33 AWS Flask Java Script Matplotlib HTML RESTful API Angular JS JQuery JSON AJAX XML CSS Oracle 10G SQL MySQL Bootstrap Restful Web Services Beautiful Soup Jenkins GitHub SVN Linux PyCharm Python Developer Time Warner Cable Renton VA December 2012 to February 2015 Responsibilities Developed Views and Templates with Django view controller and template language to create a userfriendly website interface Configured the Django admin site dashboard and created a custom Django dashboard for end users with custom look and feel Used Django APIs for database access Used Python and Django for XML JSON processing data exchange and business logic implementation created websockets by using Django to get a handle on what we needed to be done on the backend of the applications Deployed Application using AWS EC2 Standard Deployment Techniques Built database Model Views and APIs using Python for interactive web based solutions Used Python scripts to update the content in database and manipulate files Created UI using JavaScript and HTML5 Designed and developed data management system using MySQL Worked in MySQL and NoSQL database on simple queries and writing Stored Procedures for normalization and renormalization Worked on Jenkins continuous integration tool for deployment of project Played a key role in a development wide transition from Subversion to Git which resulted in increase in efficiency for the development community Developed most of the application part in Linux environment and very much familiar with all of its commands Used TKinter to implement GUI for the user to create modify and view reports based on client data Added support for Amazon AWS S3 and RDS to host staticmedia files and the database into Amazon Cloud Implemented Restful WebServices for sending and receiving the data between multiple systems Written Cloud formation templates and deployed AWS resources using it We used to send text data through we sockets with most APis and JSON Gained Knowledge on Deploying app using AWS Cloud Formation Used Python Library Beautiful Soup for webScrapping ss Responsible for debugging and troubleshooting the web application Environment Python 27 Flask Java Script Matplotlib HTML Angular JS JQuery JSON AJAX XML CSS Oracle 10G SQL MySQL Bootstrap Restful Web Services Beautiful Soup Jenkins GitHub SVN Linux PyCharm Python Developer Value Labs Chicago IL September 2010 to December 2012 Responsibilities Develop and maintain automated tests using Python and the Robot test framework Developed entire frontend and backend modules using Python on Django Web Framework Designed and developed the UI using ReactJs HTML AJAX CSS and JavaScript Implemented several Socket TCPIP UDP XMLRPC programs to retrieve data from various data centers Built python framework to transform Datasets and Data tables into HTTPserializable JSON strings Used Python inbuilt libraries urllib2 and beautiful soup modules for web scraping Developed Python scripts to store read and write data to CSV files Developed scripts to read and dump data to MySQL database Worked in Agile and scrum environment which includes daily standup and sprint planning Implemented automation script using Crontab in python to run the web crawler Used cURL for web scraping contents that cannot be scraped normally Wrote python scripts to read and write from csv files to database using Django ORM Used RAnalytics for analyzing data and plotting Pie Charts Bar Charts Box plots Histograms Line Graphs Scatter plots Implemented Google Python Coding Style and PEP8 while working with various teams Built python frameworks using Numpy and Pandas for data analysis Environment Python 27 Python Django 16 Django REST Framework Flask XML HTTP Ajax Bootstrap JSON HTML CSS jQuery Pandas Bugzilla GITHUB Java Script PLSQL Microsoft SQL Server Shell Scripting Amazon Web Services AWS Python Developer Merchant Link Silver Spring MD May 2008 to September 2010 Responsibilities Managed datasets using data frames and MySQL queried MYSQL database queries from python using PythonMySQL connector MySQL dB package to retrieve information Development of realtime multitasking systems using Python Designed and developed components using Python with Django framework Implemented code in python to retrieve and manipulate data Used Python Django creating graphics XML processing of documents data exchange business logic implementation between servers Worked on development of backend services using Python SQL and Linux Created many APIs for I scrum project which involves creating and maintaining projects in an organization and developed UI using HTML CSS and JavaScript Developed backend services and created many APIs using Python Programming Language and SQL Involved in developing a video calling application using python websockets Performed research regarding Python Programming and its uses and efficiency Developed GUI screens for XTT LD application using JSP HTML and CSS Wrote JavaScript functions to get Dynamic data and Clientside validation Used jQuery to make the frontend components interact with the JavaScript functions to add dynamism to the web pages at the client side Implemented a Nodejs server to manage authentication Created Nodejs middleware application server to encapsulate modern JS widget framework Worked with JSON objects and JavaScript and jQuery intensively to create interactive web pages Implemented web based frontend using HTML CSS jQuery and AngularJS Involved in developing the UI panels using JSF XHTML CSS DOJO and jQuery Set up the deployment environment on Web Logic Developed system preferences UI screens using JSP and HTML Created a Rich Single Page Application using HTML CSS Angularjs JQuery and REST Services Designed and implemented UI layer using JSP JavaScript HTML DHTML JSON XML XHTML XSL XSLT XSLFO Used Backbonejs Nodejs Bootstrap and other javascript libraries to create intuitive and rich Single Page Applications Used JQuery JavaScript libraries for providing richer user interface and facilitates asynchronous request invocations using AJAX Developed DashBoard to monitor and report Cache Coherence Servers Prepared statements are used for communication Sql database Involved in Requirement analysis design and Implementation applying the Water fall model Environment Python Django HTML CSS JavaScript Ajax JSON jQuery MySQL TOAD SQL DB2 Apache Axis WSDL NetBeans JBOSS Mercurial Coherence ClearCase Selenium Water Fall Model UML JSP Servlet Ant XML Jira Swing Congos Education Bachelors",
    "unique_id": "9b81f4b8-cad4-4535-be5e-6af97c4cf40c"
}