{
    "clean_data": "Senior Java Developer Senior span lJavaspan span lDeveloperspan Senior Java Developer Securian Financial Group Saint Paul MN Expertise in the implementation of Core Java SE 8 concepts like Streams API Lambda functions Functional programming Extensive experience with Core Java concepts like Multithreading Exception Handling and Collections Expertise in using Spring frameworks for Dependency injection used spring IOC and isolating business logics with audits Spring AOP Experience in developing and deploying Micro Services based on Spring Boot and Spring Cloud Experience in Developing and publishing Service Oriented Architecture SOA using SOAP and RESTful Web services Expertise in generating Rest service templates using the swagger specifications Experience in developing User Interface with different technologies like HTML5 CSS3 JavaScript Developed applications with AJAX for handling asynchronous calls that follows W3C Web standards Good knowledge of implementing MVC architecture on client side using Angular JS React with redux React with flux Backbone JS Ext JS knockout JS Expertise in implementing MVVM architecture on client side using Angular 2x Angular 5x Experience in developing and publishing RESTful web services using Node Js Asynchronous programming and express JS Strong experience in working with Relational databases like Oracle MySQL Microsoft SQL Server PostgreSQL and NoSQL databases like MongoDB Apache Cassandra Great knowledge of writing PLSQL scripts for executing more than one query at a time Proficient in creating views for tables writing stored procedures writing Triggers Experience in using Mongoose connectors for mapping pure java script objects to the MongoDB Great understanding of Apache Cassandra driver for Node Js for Parallel Execution request pipelining Expertise in using Hibernate ORM Ibatis for implementing persistence context using JPA Java persistence API which is a first level cache In Hibernate implemented second level cache using EH cache OS cache Swarm cache JBoss cache Expertise in implementing Spring JTA for transaction management and Spring JDBC to interact with Databases Experience in configuring and deploying applications on different application servers like Apache Tomcat WebLogic IBM WebSphere JBoss and web servers like Apache HTTP Server Nginx Caddy etc Expertise in using Spring CloudNetflix OSS stack for micro services deployment and auto configurations like Ribbon for clientside Load balancing Expertise in using Hystirix circuit breaker for fault tolerance and Zuul gateway for routing Implemented the new message retry mechanism using Kafka in the event of downstream systems Implemented publisher and subscriber model with queues JMS with active MQS IBMQ Strong working knowledge on deploying the pivotal cloud foundry to deploy PAAS Platform as a service IAAS Infrastructure as a service and to run own applications Good knowledge of Working on cloud Amazon Web Services Amazon EC2 Amazon S3 Amazon simple DB Amazon Elastic Load Balancing Amazon SQS Amazon EBS and Amazon cloud front Used Docker Container to address every application across the hybrid cloud and Docker for better collaboration and innovation Automated the deployment process by integrating code repository using build pipe line Jenkins Bamboo and GoCD for continuous deployment Great experience of working with authorization and authentication of web services using OAuth 20 and JWT Good experience with automated Java based logging frameworks like log4J sl4J logcommon Experience in using JavaScript testing frameworks like Karma Jasmine Protractor for Angular 2040 and Mocha and chai for React Js and Node JS Strong Experience Test Driven Development TDD using testing frameworks like Junit Selenium TestNG Mockito Spock Cucumber Powermock MockMvc etc Experience in working with various version controlling tools like Git SVN Bitbuckets TFS CVS and different Project management tools like JIRA Rally Microsoft Project Work Experience Senior Java Developer Securian Financial Group Saint Paul MN April 2018 to Present Description Securian Financial Group is an insurance and investments group which helps people preserve and protect what they earn build own and cherish Keeping this promise means we are there when our customers need us most This application enables clients to access review and update Insurance coverages like auto health and life online The website functionality was extended by providing the customers to login using their policy number and perform online transactions like paying bills online and updating their insurance policy Customer Care website was redesigned to provide customized information for the end users Responsibilities Worked as a part of Agile Software Development Methodology including Scrum technology Implemented the web application using MEAN MongoDB Express Angular 5 Nodejs stack along with HTML5 CSS3 JavaScript jQuery Bootstrap and other web technologies Developed REST services using NodeJS ExpressJS BodyParser Mongoose and other node modules to serve the web application with JSON data Worked with HTTPHTTPS protocols by using Angular 5 components to build microservices in Node JS Used Mongoose connector to map java script objects to MongoDB Pioneered with Java8 features like Functional Interfaces Stream API Time API Transaction Management Exception Handling Collection API and Lambda Expressions Building cloud Micro services and implemented backend using Spring Boot Worked with Micro service architecture using Spring Boot to modularized code and implemented Rest APIs using Spring Rest and integrated Swagger API for documentation Capitalized complete annotation driven approach to develop application using spring Boot and was involved in setting up the spring bean profiling also created build and deployment scripts using Maven Used Postman to test the API workflow tested on the JSON files which are generated by the NodeJS Express JS Used GIT for Version Control of code for incremental development and daytoday basis to maintain the code history Used Continuous delivery Continuous Integration CDCI tools Docker Jenkins to deploy this application to AWS Created instances for AWS EC2 and created AWS S3 buckets to monitor the access to the hosted files Implemented a Robust Restful JAXRS Jersey web Services using Spring Boot to modularize code and automated documentation to the web services in the application is provided by Swagger 20 Experience in Docker Engine and Docker Machine environment to deploy the micro servicesoriented environments for scalable application Created a new cluster and container management tool using Kubernetes for Zero downtime Deployment Used Netflix OSS to allow application to change its properties Dynamically after the deployment Worked with Netflix OSS Eureka service in spring cloud for service registration and discovery and spring config for centralized configuration and used ribbon for clientside load balancing Worked with Zuul Api gateway for Authentication and hystrix circuit breaker for fault tolerance Created various docker images from the docker containers and published these images in the Docker hub repository User authentication is done through JSON Web Tokens JWT Tested Angular 5 with Jasmine unit testing framework and karma as test runner Developed the functionalities under Agile Methodology JIRA processes and used JIRA for task assignment bug tracking and fixture Environment HTML5 CSS JavaScript jQuery Bootstrap Angular5 NodeJS ExpressJS NPM Spring Boot Spring Rest Maven JWT JIRA GIT GitHub Netflix OSS Spring Cloud HTTPHTTPS Jasmine karma AWS EC2 AWS S3 postman Kubernetes Swagger API Agile Methodology Mongoose ORM MongoDB Docker Java Full Stack Developer Costco Wholesale Corporation March 2017 to April 2018 Description Costco is a membership warehouse club dedicated to bringing our members the best possible prices on quality brandname merchandise With hundreds of locations worldwide Costco provides a wide selection of merchandise plus the convenience of specialty departments and exclusive member services all designed to make your shopping experience a pleasurable one Responsibilities Involved in the creation of UI specification documents by interacting with business users and design documentation and data modelling for the entire project Expertise in using React JSRedux to build User Interface strong knowledge of state store middleware action creator reducer and container Developed user interface by using the React JS Redux for SPA development and implemented clientside Interface using React JS Written several Axios service calls like GET and POST to make REST service calls Implemented Virtual Dom for ClientSide view rendering services using React JS Proficient in writing react code with help of ECMAScript ES6 Written calls using FETCH API for fetching JSON data Implemented platform modules through spring Java micro and Nodejs services by employing Hapijs as well as frontend React JS Used complete annotation driven approach to develop the application using Spring Boot and was involved in setting up the Spring bean profiling Worked with Spring Boot for automatic configuration and starter for Maven configuration and performed metrics and externalized configuration Developed RESTFUL web services using Spring Boot and Apace CXF framework Building cloud Microservices and implemented backend using Spring Boot Worked with Microservice architecture using Spring Boot to modularized code and implemented Rest APIs using Spring Rest and integrated Swagger API for documentation Worked with JAVA8 features like Functional Interfaces Stream API for Bulk Data Operations Time API Transaction Management Concurrency API Collection API Calendar API Deployed our Application on Pivotal Cloud Foundry PCF which is used to reduce the development overhead by providing a ready to use platform Deployed and Monitored Micro Services Using Spring Cloud Foundry Managed Domains and Routes with the Spring Cloud Service Registry Deployed and Monitored Micro Services Using Spring Cloud Foundry Managed Domains and Routes with the Spring Cloud Service Registry Implemented Spring Netflix Zuul API gateway and Eureka service registry for reverse proxy and Dynamic service discovery of APIs Implemented Netflix OSS Open Source Software for Feasible changes after the deployment Implemented Spring Circuit breaker pattern integrated Hystrix dashboard to monitor Spring microservices Implemented NoSQL database like Cassandra to store key values for data analytics which is used as a Database for this project Maintaining and troubleshooting Cassandra Clusters this includes monitoring and performing troubleshooting as per requirements Worked on Docker hub creating Docker images and handling multiple images primarily for middleware installations and domain configurations Used Kubernetes to create new cluster and container management tool Used Continuous delivery Continuous Integration CDCI tools Docker and Jenkins to deploy this application Implemented a metrics collection mechanism for the server by utilizing Apache Kafka to stream serverside events Used Apache Kafka in cluster as messaging system between the APIs and microservices and worked on Splunk search processing language SPL queries reports dashboard and logging using Log4J Project code build is done using MAVEN tool Worked with Web pack for bundling application source code in convenient chunks and for loading that code from a server into a browser Adopted JMS API to setup mail notification upon the success or failure when the backend processes are completed and to send mail notifications regarding any system related problems Used Splunk to create charts for the log data and analyze log data to know customer expectations Authenticating Users and to provide the security to RESTful web services using OAUTH20 Tested REACT code on client side with CHAI testing framework and MOCHA as test runner Environment React JS Redux Hapi JS Node JS Web pack ECMA6 Mocha and Chai Spring Boot Spring cloud like Ribbon Hystrix Netflix ZUUL Micro services architecture Docker Jenkins Cassandra DB OAUTH Apache Kafka Splunk PCF Swagger Webpack JMS Maven Senior Java Developer Connexions Loyality Richmond VA March 2016 to February 2017 Description The objective of Company is to have a framework in place for the organization which allows the business users to add new customer configurations customer product catalog excluded product details list etc without depending on the development team Responsibilities Involved in SDLC requirements gathering analysis design development and testing of application developed using Agile methodology for building Service Oriented Architecture SOA Involved in developing user interface with HTML5 CSS3 SAAS JSON Used AngularJS to create views to hook up models to the DOM and synchronize data with server as a Single Page Applications SPA Extensively used http from Angular JS service to make AJAX calls and consume JSON response across numerous services Worked on Angular JS expressions and builtin directives to render functionality to the UI and jQuery for DOM manipulation and twoway binding Used Spring MVC and Dependency Injection for handling presentation and business logic Dependency Injection for managing the components and bean life cycle is achieved in the application using Spring IOC Integrated Spring DAO for data access using Hibernate and handled Transaction Management using the provided data Responsible for designing Hibernate mapping files based on business logic and Object relationships Integrated Spring and Hibernate together and worked on developing backend components and services Spring Batch was used for processing large volumes of records including loggingtracing job processing statistics job restart skip transaction management and resource management in the application using Quartz Scheduler Used Spring Security for Authentication and Authorization of the application Implemented REST APIs using Spring Rest and documented Spring RESTful APIs with Swagger to help customers better understand APIs Designed new queries in app to enhance MySQL database performance Developed stored procedures triggers in MySQL for lowering traffic between servers clients Designed configured and deployed Amazon Web Services AWS for a multitude of applications utilizing the AWS stack Including EC2 S3 focusing on highavailability fault tolerance and autoscaling Configured AWS EC2 instances domain mapping via Route53 Automated the deployment process by integrating code repository using build pipe line Jenkins for continuous deployment Implemented the function to send and receive AMQP messages on RabbitMQ synchronously and asynchronously Developed test driven development code using JUnit and Mockito framework Performed Integration testing using Selenium Environment Spring MVC Spring Batch Spring Security Spring REST Spring IOC Hibernate Angular JS AJAX HTML CSS JSON Junit Mockito Selenium Cucumber MySQL 56 AWS RabbitMQ SOA architecture Java Full Stack Developer Myntra Bengaluru Karnataka May 2014 to February 2016 Description Myntra is an Indian fashion ecommerce company headquartered in Bangalore Karnataka India Myntra maintains a web and mobile application which helps customer to create accounts buy products online The responsibilities in this project was to maintain the application available and to meet the demands of the customers Responsibilities Used Backbone JS to utilize its rendering functions and create controllers to handle events triggered by clients and send request to server Created responsive UI modules using Backbone JS with hard coded dependency of Underscore JS in combination with Handlebar JS for templating Defined and developed the applications presentation layer using HTML CSS and jQuery Used jQuery for creating different menus and dialog boxes and used different jQuery plugins for calendar calculator and printing options Implemented various crossproject functionalities using Spring AOP and implemented transaction management using Spring AOP and used Spring Aspects for implementing logging functionalities Implemented Web service calls using SOAP JAXWS frameworks to provide significant prebuild extensibility in the form of the WS standards Created WSDL Web Services Description Language document for client application web services Developed SOAP web services JAXWS for sending and getting data from different applications WSDL generation and exposed the service at serverside over the Internet Implemented persistence layer with iBATIS ORM Extensively involved in writing code by using Java Collections like LinkedList Queues HashSet and etc Worked on the Java Collections API for handling the data objects between the business layers and the front end Involved in writing MultiThreading Synchronization concepts in Java Developed backend PLSQL packages UNIX shell scripts for data migration and batch processing Created and customized UNIX shell scripts for automating regular maintenance and batch jobs Used ANT for automated build and deployment on IBM WebSphere Environment HTML CSS Backbone JS Handlebar JS jQuery IBM WebSphere Spring AOP Java Collections MultiThreading UNIX iBATIS SOAP Junior Java Developer Mysore Bank Hyderabad Telangana June 2012 to April 2014 Description Mysore Bank is an Indian banking and financial services company This is in house application portal and an Internet Banking product designed and developed using Struts and J2EE to meet the demands of the Bank customer for transactions through Internet In this we have integrated online services and made it is a powerful platform for business owners and customers Responsibilities Developed application based on Model View Controller MVC architecture Implemented forms and action classes for the application using EJB and Struts Framework Developed EJB deployment descriptor using XML and used JAXB components for transferring the objects between the application and the database Functionalities like auto completion of forms and user validation are implemented using jQuery Used Multithreading concept to post data from files to tables involving transformation of file from one format to another Developed dynamic web pages using JSP and used Struts Validation framework to perform input validation Configured Strutsconfigxml Tilesdefxml and various properties files provided by Struts Framework for the implementation module Developed and implemented the MVC Architectural pattern using STRUTS 2x framework Implemented POJO based action by STRUTS and also utilized various Tag Support given by the STRUTS 2x Implemented interceptor which is invoke at preprocessing and post processing of a request in STRUTS 2x Implemented OGNL Object Graph Navigation Language of STRUTS 2x to simplify the accessibility of data stored in the ActionContext Build PLSQL functions stored procedures views and configured Oracle Database 10g with JDBC data source with connection pooling enabled Performance tuning of JVM heap size garbage collections java stack and Native thread production performance Used Subversion SVN for maintaining current and historical versions of source code web pages and documentation Used Clear Case for source code maintenance Developed Ant scripts and developed builds using Apache ANT Used Log4J to capture the log that includes runtime exceptions Environment JavaJ2EE EJB Servlets JSP HTML CSS JavaScript JBoss Subversion SVN Oracle SQL Developer JDBC Struts 20 framework Education Bachelors in Computer Science and Engineering in Computer Science and Engineering Jawaharlal Nehru Technological University Hyderabad Telangana Skills Java J2Ee Hibernate Java Spring",
    "entities": [
        "Micro Services",
        "AMQP",
        "Implemented Spring Circuit",
        "Responsibilities Developed",
        "AJAX",
        "AWS EC2",
        "Nodejs",
        "Relational",
        "Customer Care",
        "Karnataka India Myntra",
        "Present Description Securian Financial Group",
        "STRUTS",
        "UNIX",
        "IBM WebSphere Environment HTML CSS Backbone",
        "jQuery IBM",
        "GitHub Netflix",
        "MultiThreading Synchronization",
        "Computer Science and Engineering",
        "SPL",
        "Amazon Web Services AWS",
        "jQuery Used Multithreading",
        "JS Expertise",
        "Agile Methodology",
        "SOAP",
        "Mongoose connectors",
        "XML",
        "Nehru Technological University",
        "POST",
        "OAuth",
        "JAXWS",
        "JUnit",
        "Deployment Used Netflix",
        "Angular 2x Angular 5x Experience",
        "NodeJS",
        "Transaction Management",
        "Amazon",
        "NodeJS Express",
        "Environment JavaJ2EE EJB Servlets",
        "Angular JS React",
        "the Spring Cloud Service Registry Implemented",
        "Java Developer Securian Financial Group",
        "Developed",
        "Junit Selenium TestNG Mockito Spock",
        "AWS S3",
        "Mockito",
        "Implemented Virtual Dom",
        "Responsibilities Involved",
        "HTML5",
        "SOA",
        "Ribbon Hystrix Netflix ZUUL Micro",
        "JSP",
        "Model View Controller MVC",
        "Description Mysore Bank",
        "Micro",
        "React Js",
        "Worked",
        "Hibernate ORM Ibatis",
        "IOC",
        "Costco",
        "JBoss",
        "Docker",
        "Bank",
        "DOM",
        "Monitored Micro Services",
        "Oracle Database",
        "Angular JS",
        "MVC",
        "Interface",
        "Authenticating Users",
        "Agile",
        "EJB",
        "GIT",
        "Cassandra Clusters",
        "HTML CSS",
        "API",
        "Integrated Spring and Hibernate",
        "Created",
        "Deployed and Monitored Micro Services",
        "AWS",
        "Java Developer Connexions Loyality Richmond VA",
        "Handlebar JS",
        "Backbone JS",
        "Netflix",
        "MEAN",
        "React JS Proficient",
        "Amazon Web Services",
        "Kubernetes for Zero downtime",
        "Description Myntra",
        "Jasmine",
        "AWS Created",
        "React JSRedux",
        "Node Js Asynchronous",
        "MAVEN",
        "Node Js",
        "JWT Good",
        "Agile Software Development Methodology",
        "Maven Used Postman",
        "Worked with",
        "Company",
        "Used Spring",
        "JDBC",
        "Zuul",
        "SQS",
        "Spring AOP",
        "Maven",
        "Hystrix",
        "lJavaspan",
        "Hibernate",
        "JIRA Rally Microsoft Project Work Experience",
        "Used Docker Container",
        "Hapijs",
        "GET",
        "JavaScript",
        "ANT",
        "Spring Aspects",
        "UI",
        "Functional Interfaces Stream API for Bulk Data Operations Time API Transaction Management Concurrency API Collection",
        "Continuous Integration",
        "Configured AWS EC2",
        "Expertise",
        "CSS",
        "EH",
        "Karma Jasmine",
        "Functional Interfaces Stream API Time API Transaction Management Exception Handling Collection API",
        "jQuery",
        "SPA",
        "REST",
        "WebSphere JBoss",
        "Oracle MySQL Microsoft SQL Server PostgreSQL",
        "JSON Web Tokens",
        "jQuery Used jQuery",
        "Maintaining",
        "NoSQL",
        "Implemented Netflix OSS Open Source Software for Feasible",
        "Strutsconfigxml Tilesdefxml",
        "Routes",
        "Version Control of code",
        "the Spring Cloud Service Registry Deployed",
        "Dependency Injection",
        "Oracle SQL Developer",
        "Underscore JS",
        "Node"
    ],
    "experience": "Experience in developing and deploying Micro Services based on Spring Boot and Spring Cloud Experience in Developing and publishing Service Oriented Architecture SOA using SOAP and RESTful Web services Expertise in generating Rest service templates using the swagger specifications Experience in developing User Interface with different technologies like HTML5 CSS3 JavaScript Developed applications with AJAX for handling asynchronous calls that follows W3C Web standards Good knowledge of implementing MVC architecture on client side using Angular JS React with redux React with flux Backbone JS Ext JS knockout JS Expertise in implementing MVVM architecture on client side using Angular 2x Angular 5x Experience in developing and publishing RESTful web services using Node Js Asynchronous programming and express JS Strong experience in working with Relational databases like Oracle MySQL Microsoft SQL Server PostgreSQL and NoSQL databases like MongoDB Apache Cassandra Great knowledge of writing PLSQL scripts for executing more than one query at a time Proficient in creating views for tables writing stored procedures writing Triggers Experience in using Mongoose connectors for mapping pure java script objects to the MongoDB Great understanding of Apache Cassandra driver for Node Js for Parallel Execution request pipelining Expertise in using Hibernate ORM Ibatis for implementing persistence context using JPA Java persistence API which is a first level cache In Hibernate implemented second level cache using EH cache OS cache Swarm cache JBoss cache Expertise in implementing Spring JTA for transaction management and Spring JDBC to interact with Databases Experience in configuring and deploying applications on different application servers like Apache Tomcat WebLogic IBM WebSphere JBoss and web servers like Apache HTTP Server Nginx Caddy etc Expertise in using Spring CloudNetflix OSS stack for micro services deployment and auto configurations like Ribbon for clientside Load balancing Expertise in using Hystirix circuit breaker for fault tolerance and Zuul gateway for routing Implemented the new message retry mechanism using Kafka in the event of downstream systems Implemented publisher and subscriber model with queues JMS with active MQS IBMQ Strong working knowledge on deploying the pivotal cloud foundry to deploy PAAS Platform as a service IAAS Infrastructure as a service and to run own applications Good knowledge of Working on cloud Amazon Web Services Amazon EC2 Amazon S3 Amazon simple DB Amazon Elastic Load Balancing Amazon SQS Amazon EBS and Amazon cloud front Used Docker Container to address every application across the hybrid cloud and Docker for better collaboration and innovation Automated the deployment process by integrating code repository using build pipe line Jenkins Bamboo and GoCD for continuous deployment Great experience of working with authorization and authentication of web services using OAuth 20 and JWT Good experience with automated Java based logging frameworks like log4J sl4J logcommon Experience in using JavaScript testing frameworks like Karma Jasmine Protractor for Angular 2040 and Mocha and chai for React Js and Node JS Strong Experience Test Driven Development TDD using testing frameworks like Junit Selenium TestNG Mockito Spock Cucumber Powermock MockMvc etc Experience in working with various version controlling tools like Git SVN Bitbuckets TFS CVS and different Project management tools like JIRA Rally Microsoft Project Work Experience Senior Java Developer Securian Financial Group Saint Paul MN April 2018 to Present Description Securian Financial Group is an insurance and investments group which helps people preserve and protect what they earn build own and cherish Keeping this promise means we are there when our customers need us most This application enables clients to access review and update Insurance coverages like auto health and life online The website functionality was extended by providing the customers to login using their policy number and perform online transactions like paying bills online and updating their insurance policy Customer Care website was redesigned to provide customized information for the end users Responsibilities Worked as a part of Agile Software Development Methodology including Scrum technology Implemented the web application using MEAN MongoDB Express Angular 5 Nodejs stack along with HTML5 CSS3 JavaScript jQuery Bootstrap and other web technologies Developed REST services using NodeJS ExpressJS BodyParser Mongoose and other node modules to serve the web application with JSON data Worked with HTTPHTTPS protocols by using Angular 5 components to build microservices in Node JS Used Mongoose connector to map java script objects to MongoDB Pioneered with Java8 features like Functional Interfaces Stream API Time API Transaction Management Exception Handling Collection API and Lambda Expressions Building cloud Micro services and implemented backend using Spring Boot Worked with Micro service architecture using Spring Boot to modularized code and implemented Rest APIs using Spring Rest and integrated Swagger API for documentation Capitalized complete annotation driven approach to develop application using spring Boot and was involved in setting up the spring bean profiling also created build and deployment scripts using Maven Used Postman to test the API workflow tested on the JSON files which are generated by the NodeJS Express JS Used GIT for Version Control of code for incremental development and daytoday basis to maintain the code history Used Continuous delivery Continuous Integration CDCI tools Docker Jenkins to deploy this application to AWS Created instances for AWS EC2 and created AWS S3 buckets to monitor the access to the hosted files Implemented a Robust Restful JAXRS Jersey web Services using Spring Boot to modularize code and automated documentation to the web services in the application is provided by Swagger 20 Experience in Docker Engine and Docker Machine environment to deploy the micro servicesoriented environments for scalable application Created a new cluster and container management tool using Kubernetes for Zero downtime Deployment Used Netflix OSS to allow application to change its properties Dynamically after the deployment Worked with Netflix OSS Eureka service in spring cloud for service registration and discovery and spring config for centralized configuration and used ribbon for clientside load balancing Worked with Zuul Api gateway for Authentication and hystrix circuit breaker for fault tolerance Created various docker images from the docker containers and published these images in the Docker hub repository User authentication is done through JSON Web Tokens JWT Tested Angular 5 with Jasmine unit testing framework and karma as test runner Developed the functionalities under Agile Methodology JIRA processes and used JIRA for task assignment bug tracking and fixture Environment HTML5 CSS JavaScript jQuery Bootstrap Angular5 NodeJS ExpressJS NPM Spring Boot Spring Rest Maven JWT JIRA GIT GitHub Netflix OSS Spring Cloud HTTPHTTPS Jasmine karma AWS EC2 AWS S3 postman Kubernetes Swagger API Agile Methodology Mongoose ORM MongoDB Docker Java Full Stack Developer Costco Wholesale Corporation March 2017 to April 2018 Description Costco is a membership warehouse club dedicated to bringing our members the best possible prices on quality brandname merchandise With hundreds of locations worldwide Costco provides a wide selection of merchandise plus the convenience of specialty departments and exclusive member services all designed to make your shopping experience a pleasurable one Responsibilities Involved in the creation of UI specification documents by interacting with business users and design documentation and data modelling for the entire project Expertise in using React JSRedux to build User Interface strong knowledge of state store middleware action creator reducer and container Developed user interface by using the React JS Redux for SPA development and implemented clientside Interface using React JS Written several Axios service calls like GET and POST to make REST service calls Implemented Virtual Dom for ClientSide view rendering services using React JS Proficient in writing react code with help of ECMAScript ES6 Written calls using FETCH API for fetching JSON data Implemented platform modules through spring Java micro and Nodejs services by employing Hapijs as well as frontend React JS Used complete annotation driven approach to develop the application using Spring Boot and was involved in setting up the Spring bean profiling Worked with Spring Boot for automatic configuration and starter for Maven configuration and performed metrics and externalized configuration Developed RESTFUL web services using Spring Boot and Apace CXF framework Building cloud Microservices and implemented backend using Spring Boot Worked with Microservice architecture using Spring Boot to modularized code and implemented Rest APIs using Spring Rest and integrated Swagger API for documentation Worked with JAVA8 features like Functional Interfaces Stream API for Bulk Data Operations Time API Transaction Management Concurrency API Collection API Calendar API Deployed our Application on Pivotal Cloud Foundry PCF which is used to reduce the development overhead by providing a ready to use platform Deployed and Monitored Micro Services Using Spring Cloud Foundry Managed Domains and Routes with the Spring Cloud Service Registry Deployed and Monitored Micro Services Using Spring Cloud Foundry Managed Domains and Routes with the Spring Cloud Service Registry Implemented Spring Netflix Zuul API gateway and Eureka service registry for reverse proxy and Dynamic service discovery of APIs Implemented Netflix OSS Open Source Software for Feasible changes after the deployment Implemented Spring Circuit breaker pattern integrated Hystrix dashboard to monitor Spring microservices Implemented NoSQL database like Cassandra to store key values for data analytics which is used as a Database for this project Maintaining and troubleshooting Cassandra Clusters this includes monitoring and performing troubleshooting as per requirements Worked on Docker hub creating Docker images and handling multiple images primarily for middleware installations and domain configurations Used Kubernetes to create new cluster and container management tool Used Continuous delivery Continuous Integration CDCI tools Docker and Jenkins to deploy this application Implemented a metrics collection mechanism for the server by utilizing Apache Kafka to stream serverside events Used Apache Kafka in cluster as messaging system between the APIs and microservices and worked on Splunk search processing language SPL queries reports dashboard and logging using Log4J Project code build is done using MAVEN tool Worked with Web pack for bundling application source code in convenient chunks and for loading that code from a server into a browser Adopted JMS API to setup mail notification upon the success or failure when the backend processes are completed and to send mail notifications regarding any system related problems Used Splunk to create charts for the log data and analyze log data to know customer expectations Authenticating Users and to provide the security to RESTful web services using OAUTH20 Tested REACT code on client side with CHAI testing framework and MOCHA as test runner Environment React JS Redux Hapi JS Node JS Web pack ECMA6 Mocha and Chai Spring Boot Spring cloud like Ribbon Hystrix Netflix ZUUL Micro services architecture Docker Jenkins Cassandra DB OAUTH Apache Kafka Splunk PCF Swagger Webpack JMS Maven Senior Java Developer Connexions Loyality Richmond VA March 2016 to February 2017 Description The objective of Company is to have a framework in place for the organization which allows the business users to add new customer configurations customer product catalog excluded product details list etc without depending on the development team Responsibilities Involved in SDLC requirements gathering analysis design development and testing of application developed using Agile methodology for building Service Oriented Architecture SOA Involved in developing user interface with HTML5 CSS3 SAAS JSON Used AngularJS to create views to hook up models to the DOM and synchronize data with server as a Single Page Applications SPA Extensively used http from Angular JS service to make AJAX calls and consume JSON response across numerous services Worked on Angular JS expressions and builtin directives to render functionality to the UI and jQuery for DOM manipulation and twoway binding Used Spring MVC and Dependency Injection for handling presentation and business logic Dependency Injection for managing the components and bean life cycle is achieved in the application using Spring IOC Integrated Spring DAO for data access using Hibernate and handled Transaction Management using the provided data Responsible for designing Hibernate mapping files based on business logic and Object relationships Integrated Spring and Hibernate together and worked on developing backend components and services Spring Batch was used for processing large volumes of records including loggingtracing job processing statistics job restart skip transaction management and resource management in the application using Quartz Scheduler Used Spring Security for Authentication and Authorization of the application Implemented REST APIs using Spring Rest and documented Spring RESTful APIs with Swagger to help customers better understand APIs Designed new queries in app to enhance MySQL database performance Developed stored procedures triggers in MySQL for lowering traffic between servers clients Designed configured and deployed Amazon Web Services AWS for a multitude of applications utilizing the AWS stack Including EC2 S3 focusing on highavailability fault tolerance and autoscaling Configured AWS EC2 instances domain mapping via Route53 Automated the deployment process by integrating code repository using build pipe line Jenkins for continuous deployment Implemented the function to send and receive AMQP messages on RabbitMQ synchronously and asynchronously Developed test driven development code using JUnit and Mockito framework Performed Integration testing using Selenium Environment Spring MVC Spring Batch Spring Security Spring REST Spring IOC Hibernate Angular JS AJAX HTML CSS JSON Junit Mockito Selenium Cucumber MySQL 56 AWS RabbitMQ SOA architecture Java Full Stack Developer Myntra Bengaluru Karnataka May 2014 to February 2016 Description Myntra is an Indian fashion ecommerce company headquartered in Bangalore Karnataka India Myntra maintains a web and mobile application which helps customer to create accounts buy products online The responsibilities in this project was to maintain the application available and to meet the demands of the customers Responsibilities Used Backbone JS to utilize its rendering functions and create controllers to handle events triggered by clients and send request to server Created responsive UI modules using Backbone JS with hard coded dependency of Underscore JS in combination with Handlebar JS for templating Defined and developed the applications presentation layer using HTML CSS and jQuery Used jQuery for creating different menus and dialog boxes and used different jQuery plugins for calendar calculator and printing options Implemented various crossproject functionalities using Spring AOP and implemented transaction management using Spring AOP and used Spring Aspects for implementing logging functionalities Implemented Web service calls using SOAP JAXWS frameworks to provide significant prebuild extensibility in the form of the WS standards Created WSDL Web Services Description Language document for client application web services Developed SOAP web services JAXWS for sending and getting data from different applications WSDL generation and exposed the service at serverside over the Internet Implemented persistence layer with iBATIS ORM Extensively involved in writing code by using Java Collections like LinkedList Queues HashSet and etc Worked on the Java Collections API for handling the data objects between the business layers and the front end Involved in writing MultiThreading Synchronization concepts in Java Developed backend PLSQL packages UNIX shell scripts for data migration and batch processing Created and customized UNIX shell scripts for automating regular maintenance and batch jobs Used ANT for automated build and deployment on IBM WebSphere Environment HTML CSS Backbone JS Handlebar JS jQuery IBM WebSphere Spring AOP Java Collections MultiThreading UNIX iBATIS SOAP Junior Java Developer Mysore Bank Hyderabad Telangana June 2012 to April 2014 Description Mysore Bank is an Indian banking and financial services company This is in house application portal and an Internet Banking product designed and developed using Struts and J2EE to meet the demands of the Bank customer for transactions through Internet In this we have integrated online services and made it is a powerful platform for business owners and customers Responsibilities Developed application based on Model View Controller MVC architecture Implemented forms and action classes for the application using EJB and Struts Framework Developed EJB deployment descriptor using XML and used JAXB components for transferring the objects between the application and the database Functionalities like auto completion of forms and user validation are implemented using jQuery Used Multithreading concept to post data from files to tables involving transformation of file from one format to another Developed dynamic web pages using JSP and used Struts Validation framework to perform input validation Configured Strutsconfigxml Tilesdefxml and various properties files provided by Struts Framework for the implementation module Developed and implemented the MVC Architectural pattern using STRUTS 2x framework Implemented POJO based action by STRUTS and also utilized various Tag Support given by the STRUTS 2x Implemented interceptor which is invoke at preprocessing and post processing of a request in STRUTS 2x Implemented OGNL Object Graph Navigation Language of STRUTS 2x to simplify the accessibility of data stored in the ActionContext Build PLSQL functions stored procedures views and configured Oracle Database 10 g with JDBC data source with connection pooling enabled Performance tuning of JVM heap size garbage collections java stack and Native thread production performance Used Subversion SVN for maintaining current and historical versions of source code web pages and documentation Used Clear Case for source code maintenance Developed Ant scripts and developed builds using Apache ANT Used Log4J to capture the log that includes runtime exceptions Environment JavaJ2EE EJB Servlets JSP HTML CSS JavaScript JBoss Subversion SVN Oracle SQL Developer JDBC Struts 20 framework Education Bachelors in Computer Science and Engineering in Computer Science and Engineering Jawaharlal Nehru Technological University Hyderabad Telangana Skills Java J2Ee Hibernate Java Spring",
    "extracted_keywords": [
        "Java",
        "Developer",
        "Senior",
        "span",
        "lJavaspan",
        "span",
        "lDeveloperspan",
        "Senior",
        "Java",
        "Developer",
        "Securian",
        "Financial",
        "Group",
        "Saint",
        "Paul",
        "MN",
        "Expertise",
        "implementation",
        "Core",
        "Java",
        "SE",
        "concepts",
        "Streams",
        "API",
        "Lambda",
        "functions",
        "programming",
        "experience",
        "Core",
        "Java",
        "concepts",
        "Multithreading",
        "Exception",
        "Handling",
        "Collections",
        "Expertise",
        "Spring",
        "frameworks",
        "Dependency",
        "injection",
        "spring",
        "IOC",
        "business",
        "logics",
        "audits",
        "Spring",
        "AOP",
        "Experience",
        "Micro",
        "Services",
        "Spring",
        "Boot",
        "Spring",
        "Cloud",
        "Experience",
        "Developing",
        "Service",
        "Oriented",
        "Architecture",
        "SOA",
        "SOAP",
        "Web",
        "services",
        "Expertise",
        "Rest",
        "service",
        "templates",
        "specifications",
        "Experience",
        "User",
        "Interface",
        "technologies",
        "HTML5",
        "CSS3",
        "JavaScript",
        "applications",
        "AJAX",
        "calls",
        "W3C",
        "Web",
        "standards",
        "knowledge",
        "MVC",
        "architecture",
        "client",
        "side",
        "JS",
        "React",
        "redux",
        "React",
        "flux",
        "Backbone",
        "JS",
        "Ext",
        "JS",
        "knockout",
        "JS",
        "Expertise",
        "MVVM",
        "architecture",
        "client",
        "side",
        "Angular",
        "2x",
        "5x",
        "Experience",
        "web",
        "services",
        "Node",
        "Js",
        "programming",
        "JS",
        "Strong",
        "experience",
        "databases",
        "Oracle",
        "MySQL",
        "Microsoft",
        "SQL",
        "Server",
        "PostgreSQL",
        "NoSQL",
        "MongoDB",
        "Apache",
        "Cassandra",
        "knowledge",
        "PLSQL",
        "scripts",
        "query",
        "time",
        "views",
        "tables",
        "procedures",
        "Triggers",
        "Experience",
        "Mongoose",
        "connectors",
        "mapping",
        "java",
        "script",
        "understanding",
        "Apache",
        "Cassandra",
        "driver",
        "Node",
        "Js",
        "Parallel",
        "Execution",
        "request",
        "Expertise",
        "Hibernate",
        "ORM",
        "Ibatis",
        "persistence",
        "context",
        "JPA",
        "Java",
        "persistence",
        "API",
        "level",
        "cache",
        "Hibernate",
        "level",
        "cache",
        "cache",
        "cache",
        "Swarm",
        "cache",
        "JBoss",
        "cache",
        "Expertise",
        "Spring",
        "JTA",
        "transaction",
        "management",
        "Spring",
        "JDBC",
        "Databases",
        "Experience",
        "applications",
        "application",
        "servers",
        "Apache",
        "Tomcat",
        "WebLogic",
        "IBM",
        "WebSphere",
        "JBoss",
        "web",
        "servers",
        "Apache",
        "HTTP",
        "Server",
        "Nginx",
        "Caddy",
        "Expertise",
        "Spring",
        "CloudNetflix",
        "OSS",
        "stack",
        "micro",
        "services",
        "deployment",
        "auto",
        "configurations",
        "Ribbon",
        "Load",
        "Expertise",
        "Hystirix",
        "circuit",
        "breaker",
        "fault",
        "tolerance",
        "Zuul",
        "gateway",
        "message",
        "retry",
        "mechanism",
        "Kafka",
        "event",
        "systems",
        "publisher",
        "subscriber",
        "model",
        "queues",
        "JMS",
        "MQS",
        "IBMQ",
        "Strong",
        "knowledge",
        "cloud",
        "foundry",
        "PAAS",
        "Platform",
        "service",
        "IAAS",
        "Infrastructure",
        "service",
        "applications",
        "knowledge",
        "cloud",
        "Amazon",
        "Web",
        "Services",
        "Amazon",
        "EC2",
        "Amazon",
        "S3",
        "Amazon",
        "DB",
        "Amazon",
        "Elastic",
        "Load",
        "Amazon",
        "SQS",
        "Amazon",
        "EBS",
        "Amazon",
        "cloud",
        "front",
        "Used",
        "Docker",
        "Container",
        "application",
        "cloud",
        "Docker",
        "collaboration",
        "innovation",
        "deployment",
        "process",
        "code",
        "repository",
        "build",
        "pipe",
        "line",
        "Jenkins",
        "Bamboo",
        "GoCD",
        "deployment",
        "experience",
        "authorization",
        "authentication",
        "web",
        "services",
        "OAuth",
        "JWT",
        "Good",
        "experience",
        "Java",
        "frameworks",
        "sl4J",
        "logcommon",
        "Experience",
        "JavaScript",
        "testing",
        "frameworks",
        "Karma",
        "Jasmine",
        "Protractor",
        "Angular",
        "Mocha",
        "chai",
        "React",
        "Js",
        "Node",
        "JS",
        "Strong",
        "Experience",
        "Test",
        "Driven",
        "Development",
        "TDD",
        "testing",
        "frameworks",
        "Junit",
        "Selenium",
        "TestNG",
        "Mockito",
        "Spock",
        "Cucumber",
        "Powermock",
        "MockMvc",
        "Experience",
        "version",
        "tools",
        "Git",
        "SVN",
        "Bitbuckets",
        "TFS",
        "CVS",
        "Project",
        "management",
        "tools",
        "JIRA",
        "Rally",
        "Microsoft",
        "Project",
        "Work",
        "Experience",
        "Senior",
        "Java",
        "Developer",
        "Securian",
        "Financial",
        "Group",
        "Saint",
        "Paul",
        "MN",
        "April",
        "Present",
        "Description",
        "Securian",
        "Financial",
        "Group",
        "insurance",
        "investments",
        "group",
        "people",
        "build",
        "promise",
        "customers",
        "application",
        "clients",
        "review",
        "Insurance",
        "coverages",
        "auto",
        "health",
        "life",
        "website",
        "functionality",
        "customers",
        "policy",
        "number",
        "transactions",
        "bills",
        "insurance",
        "policy",
        "Customer",
        "Care",
        "website",
        "information",
        "end",
        "users",
        "Responsibilities",
        "part",
        "Agile",
        "Software",
        "Development",
        "Methodology",
        "Scrum",
        "technology",
        "web",
        "application",
        "MEAN",
        "Express",
        "Angular",
        "Nodejs",
        "stack",
        "HTML5",
        "CSS3",
        "JavaScript",
        "jQuery",
        "Bootstrap",
        "web",
        "technologies",
        "REST",
        "services",
        "NodeJS",
        "ExpressJS",
        "BodyParser",
        "Mongoose",
        "node",
        "modules",
        "web",
        "application",
        "data",
        "HTTPHTTPS",
        "protocols",
        "Angular",
        "components",
        "microservices",
        "Node",
        "JS",
        "Mongoose",
        "connector",
        "java",
        "script",
        "Java8",
        "features",
        "Interfaces",
        "Stream",
        "API",
        "Time",
        "API",
        "Transaction",
        "Management",
        "Exception",
        "Handling",
        "Collection",
        "API",
        "Lambda",
        "Expressions",
        "Building",
        "cloud",
        "Micro",
        "services",
        "backend",
        "Spring",
        "Boot",
        "Micro",
        "service",
        "architecture",
        "Spring",
        "Boot",
        "code",
        "Rest",
        "APIs",
        "Spring",
        "Rest",
        "Swagger",
        "API",
        "documentation",
        "annotation",
        "approach",
        "application",
        "spring",
        "Boot",
        "spring",
        "bean",
        "profiling",
        "build",
        "deployment",
        "scripts",
        "Maven",
        "Postman",
        "API",
        "workflow",
        "files",
        "NodeJS",
        "Express",
        "JS",
        "GIT",
        "Version",
        "Control",
        "code",
        "development",
        "basis",
        "code",
        "history",
        "delivery",
        "Continuous",
        "Integration",
        "CDCI",
        "tools",
        "Docker",
        "Jenkins",
        "application",
        "AWS",
        "instances",
        "AWS",
        "EC2",
        "AWS",
        "S3",
        "buckets",
        "access",
        "files",
        "Robust",
        "Restful",
        "JAXRS",
        "Jersey",
        "web",
        "Services",
        "Spring",
        "Boot",
        "code",
        "documentation",
        "web",
        "services",
        "application",
        "Swagger",
        "Experience",
        "Docker",
        "Engine",
        "Docker",
        "Machine",
        "environment",
        "micro",
        "environments",
        "application",
        "cluster",
        "container",
        "management",
        "tool",
        "Kubernetes",
        "Zero",
        "downtime",
        "Deployment",
        "Used",
        "Netflix",
        "OSS",
        "application",
        "properties",
        "deployment",
        "Netflix",
        "OSS",
        "Eureka",
        "service",
        "spring",
        "cloud",
        "service",
        "registration",
        "discovery",
        "spring",
        "config",
        "configuration",
        "ribbon",
        "load",
        "Zuul",
        "Api",
        "gateway",
        "Authentication",
        "circuit",
        "breaker",
        "fault",
        "tolerance",
        "docker",
        "images",
        "docker",
        "containers",
        "images",
        "Docker",
        "hub",
        "repository",
        "User",
        "authentication",
        "JSON",
        "Web",
        "Tokens",
        "JWT",
        "Angular",
        "Jasmine",
        "unit",
        "testing",
        "framework",
        "karma",
        "test",
        "runner",
        "functionalities",
        "Agile",
        "Methodology",
        "JIRA",
        "processes",
        "JIRA",
        "task",
        "assignment",
        "bug",
        "tracking",
        "fixture",
        "Environment",
        "HTML5",
        "CSS",
        "JavaScript",
        "jQuery",
        "Bootstrap",
        "Angular5",
        "NodeJS",
        "ExpressJS",
        "NPM",
        "Spring",
        "Boot",
        "Spring",
        "Rest",
        "Maven",
        "JWT",
        "JIRA",
        "GIT",
        "GitHub",
        "Netflix",
        "OSS",
        "Spring",
        "Cloud",
        "HTTPHTTPS",
        "Jasmine",
        "karma",
        "AWS",
        "EC2",
        "AWS",
        "S3",
        "postman",
        "Kubernetes",
        "Swagger",
        "API",
        "Agile",
        "Methodology",
        "Mongoose",
        "ORM",
        "Docker",
        "Java",
        "Full",
        "Stack",
        "Developer",
        "Costco",
        "Wholesale",
        "Corporation",
        "March",
        "April",
        "Description",
        "Costco",
        "membership",
        "warehouse",
        "club",
        "members",
        "prices",
        "quality",
        "brandname",
        "merchandise",
        "hundreds",
        "locations",
        "Costco",
        "selection",
        "merchandise",
        "convenience",
        "specialty",
        "departments",
        "member",
        "services",
        "shopping",
        "experience",
        "Responsibilities",
        "creation",
        "UI",
        "specification",
        "documents",
        "business",
        "users",
        "design",
        "documentation",
        "data",
        "project",
        "Expertise",
        "React",
        "JSRedux",
        "User",
        "Interface",
        "knowledge",
        "state",
        "store",
        "middleware",
        "action",
        "creator",
        "reducer",
        "container",
        "user",
        "interface",
        "React",
        "JS",
        "Redux",
        "SPA",
        "development",
        "Interface",
        "React",
        "JS",
        "Axios",
        "service",
        "GET",
        "POST",
        "REST",
        "service",
        "Dom",
        "view",
        "services",
        "React",
        "JS",
        "Proficient",
        "react",
        "code",
        "help",
        "ECMAScript",
        "ES6",
        "Written",
        "FETCH",
        "API",
        "JSON",
        "data",
        "platform",
        "modules",
        "spring",
        "Java",
        "micro",
        "Nodejs",
        "services",
        "Hapijs",
        "frontend",
        "React",
        "JS",
        "annotation",
        "approach",
        "application",
        "Spring",
        "Boot",
        "Spring",
        "bean",
        "profiling",
        "Spring",
        "Boot",
        "configuration",
        "starter",
        "Maven",
        "configuration",
        "metrics",
        "configuration",
        "Developed",
        "RESTFUL",
        "web",
        "services",
        "Spring",
        "Boot",
        "Apace",
        "CXF",
        "framework",
        "Building",
        "cloud",
        "Microservices",
        "backend",
        "Spring",
        "Boot",
        "Microservice",
        "architecture",
        "Spring",
        "Boot",
        "code",
        "Rest",
        "APIs",
        "Spring",
        "Rest",
        "Swagger",
        "API",
        "documentation",
        "JAVA8",
        "features",
        "Interfaces",
        "Stream",
        "API",
        "Bulk",
        "Data",
        "Operations",
        "Time",
        "API",
        "Transaction",
        "Management",
        "Concurrency",
        "API",
        "Collection",
        "API",
        "Calendar",
        "API",
        "Application",
        "Cloud",
        "Foundry",
        "PCF",
        "development",
        "platform",
        "Deployed",
        "Monitored",
        "Micro",
        "Services",
        "Spring",
        "Cloud",
        "Foundry",
        "Managed",
        "Domains",
        "Routes",
        "Spring",
        "Cloud",
        "Service",
        "Registry",
        "Deployed",
        "Monitored",
        "Micro",
        "Services",
        "Spring",
        "Cloud",
        "Foundry",
        "Managed",
        "Domains",
        "Routes",
        "Spring",
        "Cloud",
        "Service",
        "Registry",
        "Spring",
        "Netflix",
        "Zuul",
        "API",
        "gateway",
        "Eureka",
        "service",
        "registry",
        "proxy",
        "service",
        "discovery",
        "APIs",
        "Netflix",
        "OSS",
        "Open",
        "Source",
        "Software",
        "changes",
        "deployment",
        "Spring",
        "Circuit",
        "breaker",
        "pattern",
        "Hystrix",
        "dashboard",
        "Spring",
        "microservices",
        "NoSQL",
        "database",
        "Cassandra",
        "values",
        "data",
        "analytics",
        "Database",
        "project",
        "Cassandra",
        "Clusters",
        "troubleshooting",
        "requirements",
        "Docker",
        "hub",
        "Docker",
        "images",
        "images",
        "middleware",
        "installations",
        "domain",
        "configurations",
        "Kubernetes",
        "cluster",
        "container",
        "management",
        "tool",
        "delivery",
        "Continuous",
        "Integration",
        "CDCI",
        "tools",
        "Docker",
        "Jenkins",
        "application",
        "metrics",
        "collection",
        "mechanism",
        "server",
        "Apache",
        "Kafka",
        "serverside",
        "events",
        "Apache",
        "Kafka",
        "cluster",
        "system",
        "APIs",
        "microservices",
        "Splunk",
        "search",
        "processing",
        "language",
        "SPL",
        "queries",
        "dashboard",
        "Project",
        "code",
        "build",
        "MAVEN",
        "tool",
        "Web",
        "pack",
        "application",
        "source",
        "code",
        "chunks",
        "code",
        "server",
        "browser",
        "JMS",
        "API",
        "mail",
        "notification",
        "success",
        "failure",
        "processes",
        "mail",
        "notifications",
        "system",
        "problems",
        "Splunk",
        "charts",
        "log",
        "data",
        "log",
        "data",
        "customer",
        "expectations",
        "Authenticating",
        "Users",
        "security",
        "web",
        "services",
        "REACT",
        "code",
        "client",
        "side",
        "testing",
        "framework",
        "MOCHA",
        "test",
        "runner",
        "Environment",
        "React",
        "JS",
        "Redux",
        "Hapi",
        "JS",
        "Node",
        "JS",
        "Web",
        "pack",
        "ECMA6",
        "Mocha",
        "Chai",
        "Spring",
        "Boot",
        "Spring",
        "cloud",
        "Ribbon",
        "Hystrix",
        "Netflix",
        "ZUUL",
        "Micro",
        "services",
        "architecture",
        "Docker",
        "Jenkins",
        "Cassandra",
        "DB",
        "Apache",
        "Kafka",
        "Splunk",
        "PCF",
        "Swagger",
        "Webpack",
        "JMS",
        "Maven",
        "Senior",
        "Java",
        "Developer",
        "Connexions",
        "Loyality",
        "Richmond",
        "VA",
        "March",
        "February",
        "Description",
        "objective",
        "Company",
        "framework",
        "place",
        "organization",
        "business",
        "users",
        "customer",
        "configurations",
        "customer",
        "product",
        "catalog",
        "product",
        "details",
        "development",
        "team",
        "Responsibilities",
        "SDLC",
        "requirements",
        "analysis",
        "design",
        "development",
        "testing",
        "application",
        "methodology",
        "Service",
        "Oriented",
        "Architecture",
        "SOA",
        "user",
        "interface",
        "HTML5",
        "CSS3",
        "SAAS",
        "JSON",
        "views",
        "models",
        "DOM",
        "data",
        "server",
        "Single",
        "Page",
        "Applications",
        "SPA",
        "http",
        "Angular",
        "JS",
        "service",
        "AJAX",
        "calls",
        "response",
        "services",
        "JS",
        "expressions",
        "directives",
        "functionality",
        "UI",
        "jQuery",
        "DOM",
        "manipulation",
        "twoway",
        "Spring",
        "MVC",
        "Dependency",
        "Injection",
        "presentation",
        "business",
        "logic",
        "Dependency",
        "Injection",
        "components",
        "bean",
        "life",
        "cycle",
        "application",
        "Spring",
        "IOC",
        "Integrated",
        "Spring",
        "DAO",
        "data",
        "access",
        "Hibernate",
        "Transaction",
        "Management",
        "data",
        "Hibernate",
        "mapping",
        "files",
        "business",
        "logic",
        "Object",
        "relationships",
        "Integrated",
        "Spring",
        "Hibernate",
        "components",
        "services",
        "Spring",
        "Batch",
        "volumes",
        "records",
        "job",
        "processing",
        "statistics",
        "job",
        "restart",
        "transaction",
        "management",
        "resource",
        "management",
        "application",
        "Quartz",
        "Scheduler",
        "Spring",
        "Security",
        "Authentication",
        "Authorization",
        "application",
        "REST",
        "APIs",
        "Spring",
        "Rest",
        "Spring",
        "APIs",
        "Swagger",
        "customers",
        "APIs",
        "queries",
        "app",
        "MySQL",
        "database",
        "performance",
        "Developed",
        "procedures",
        "MySQL",
        "traffic",
        "servers",
        "clients",
        "Amazon",
        "Web",
        "Services",
        "AWS",
        "multitude",
        "applications",
        "AWS",
        "stack",
        "EC2",
        "S3",
        "highavailability",
        "fault",
        "tolerance",
        "Configured",
        "AWS",
        "EC2",
        "instances",
        "mapping",
        "Route53",
        "Automated",
        "deployment",
        "process",
        "code",
        "repository",
        "build",
        "pipe",
        "line",
        "Jenkins",
        "deployment",
        "function",
        "AMQP",
        "messages",
        "RabbitMQ",
        "test",
        "development",
        "code",
        "JUnit",
        "Mockito",
        "framework",
        "Performed",
        "Integration",
        "testing",
        "Selenium",
        "Environment",
        "Spring",
        "MVC",
        "Spring",
        "Batch",
        "Spring",
        "Security",
        "Spring",
        "REST",
        "Spring",
        "IOC",
        "Hibernate",
        "Angular",
        "JS",
        "AJAX",
        "HTML",
        "CSS",
        "JSON",
        "Junit",
        "Mockito",
        "Selenium",
        "Cucumber",
        "MySQL",
        "AWS",
        "SOA",
        "architecture",
        "Java",
        "Full",
        "Stack",
        "Developer",
        "Myntra",
        "Bengaluru",
        "Karnataka",
        "May",
        "February",
        "Description",
        "Myntra",
        "fashion",
        "ecommerce",
        "company",
        "Bangalore",
        "Karnataka",
        "India",
        "Myntra",
        "web",
        "application",
        "customer",
        "accounts",
        "products",
        "responsibilities",
        "project",
        "application",
        "demands",
        "customers",
        "Responsibilities",
        "Backbone",
        "JS",
        "rendering",
        "functions",
        "controllers",
        "events",
        "clients",
        "request",
        "UI",
        "modules",
        "Backbone",
        "JS",
        "dependency",
        "Underscore",
        "JS",
        "combination",
        "Handlebar",
        "JS",
        "applications",
        "presentation",
        "layer",
        "HTML",
        "CSS",
        "jQuery",
        "jQuery",
        "menus",
        "dialog",
        "boxes",
        "jQuery",
        "plugins",
        "calendar",
        "calculator",
        "printing",
        "options",
        "crossproject",
        "functionalities",
        "Spring",
        "AOP",
        "transaction",
        "management",
        "Spring",
        "AOP",
        "Spring",
        "Aspects",
        "functionalities",
        "Web",
        "service",
        "SOAP",
        "JAXWS",
        "frameworks",
        "extensibility",
        "form",
        "WS",
        "standards",
        "WSDL",
        "Web",
        "Services",
        "Description",
        "Language",
        "document",
        "client",
        "application",
        "web",
        "services",
        "SOAP",
        "web",
        "services",
        "JAXWS",
        "data",
        "applications",
        "WSDL",
        "generation",
        "service",
        "serverside",
        "Internet",
        "persistence",
        "layer",
        "iBATIS",
        "ORM",
        "code",
        "Java",
        "Collections",
        "LinkedList",
        "Queues",
        "HashSet",
        "Java",
        "Collections",
        "API",
        "data",
        "objects",
        "business",
        "layers",
        "end",
        "MultiThreading",
        "Synchronization",
        "concepts",
        "Java",
        "Developed",
        "backend",
        "PLSQL",
        "UNIX",
        "shell",
        "scripts",
        "data",
        "migration",
        "batch",
        "processing",
        "UNIX",
        "shell",
        "scripts",
        "maintenance",
        "batch",
        "jobs",
        "ANT",
        "build",
        "deployment",
        "IBM",
        "WebSphere",
        "Environment",
        "HTML",
        "CSS",
        "Backbone",
        "JS",
        "Handlebar",
        "JS",
        "jQuery",
        "IBM",
        "WebSphere",
        "Spring",
        "AOP",
        "Java",
        "Collections",
        "MultiThreading",
        "UNIX",
        "SOAP",
        "Junior",
        "Java",
        "Developer",
        "Mysore",
        "Bank",
        "Hyderabad",
        "Telangana",
        "June",
        "April",
        "Description",
        "Mysore",
        "Bank",
        "banking",
        "services",
        "company",
        "house",
        "application",
        "portal",
        "Internet",
        "Banking",
        "product",
        "Struts",
        "J2EE",
        "demands",
        "Bank",
        "customer",
        "transactions",
        "Internet",
        "services",
        "platform",
        "business",
        "owners",
        "customers",
        "Responsibilities",
        "application",
        "Model",
        "View",
        "Controller",
        "MVC",
        "architecture",
        "forms",
        "action",
        "classes",
        "application",
        "EJB",
        "Struts",
        "Framework",
        "Developed",
        "EJB",
        "deployment",
        "descriptor",
        "XML",
        "JAXB",
        "components",
        "objects",
        "application",
        "database",
        "Functionalities",
        "auto",
        "completion",
        "forms",
        "user",
        "validation",
        "jQuery",
        "Multithreading",
        "concept",
        "data",
        "files",
        "tables",
        "transformation",
        "file",
        "format",
        "web",
        "pages",
        "JSP",
        "Struts",
        "Validation",
        "framework",
        "input",
        "validation",
        "Configured",
        "Strutsconfigxml",
        "Tilesdefxml",
        "properties",
        "files",
        "Struts",
        "Framework",
        "implementation",
        "module",
        "Developed",
        "MVC",
        "Architectural",
        "pattern",
        "STRUTS",
        "framework",
        "POJO",
        "action",
        "STRUTS",
        "Tag",
        "Support",
        "STRUTS",
        "interceptor",
        "invoke",
        "preprocessing",
        "post",
        "processing",
        "request",
        "STRUTS",
        "OGNL",
        "Object",
        "Graph",
        "Navigation",
        "Language",
        "STRUTS",
        "accessibility",
        "data",
        "ActionContext",
        "Build",
        "PLSQL",
        "functions",
        "procedures",
        "views",
        "Oracle",
        "Database",
        "g",
        "JDBC",
        "data",
        "source",
        "connection",
        "pooling",
        "Performance",
        "tuning",
        "JVM",
        "heap",
        "size",
        "garbage",
        "collections",
        "stack",
        "thread",
        "production",
        "performance",
        "Subversion",
        "SVN",
        "versions",
        "source",
        "code",
        "web",
        "pages",
        "documentation",
        "Clear",
        "Case",
        "source",
        "code",
        "maintenance",
        "Ant",
        "scripts",
        "builds",
        "Apache",
        "ANT",
        "Log4J",
        "log",
        "runtime",
        "exceptions",
        "Environment",
        "JavaJ2EE",
        "EJB",
        "Servlets",
        "JSP",
        "HTML",
        "CSS",
        "JavaScript",
        "JBoss",
        "Subversion",
        "SVN",
        "Oracle",
        "SQL",
        "Developer",
        "JDBC",
        "Struts",
        "framework",
        "Education",
        "Bachelors",
        "Computer",
        "Science",
        "Engineering",
        "Computer",
        "Science",
        "Engineering",
        "Jawaharlal",
        "Nehru",
        "Technological",
        "University",
        "Hyderabad",
        "Telangana",
        "Skills",
        "Java",
        "Hibernate",
        "Java",
        "Spring"
    ],
    "input_field": null,
    "instruction": "",
    "processed_at": "2024-11-24T19:52:45.660919",
    "resume_data": "Senior Java Developer Senior span lJavaspan span lDeveloperspan Senior Java Developer Securian Financial Group Saint Paul MN Expertise in the implementation of Core Java SE 8 concepts like Streams API Lambda functions Functional programming Extensive experience with Core Java concepts like Multithreading Exception Handling and Collections Expertise in using Spring frameworks for Dependency injection used spring IOC and isolating business logics with audits Spring AOP Experience in developing and deploying Micro Services based on Spring Boot and Spring Cloud Experience in Developing and publishing Service Oriented Architecture SOA using SOAP and RESTful Web services Expertise in generating Rest service templates using the swagger specifications Experience in developing User Interface with different technologies like HTML5 CSS3 JavaScript Developed applications with AJAX for handling asynchronous calls that follows W3C Web standards Good knowledge of implementing MVC architecture on client side using Angular JS React with redux React with flux Backbone JS Ext JS knockout JS Expertise in implementing MVVM architecture on client side using Angular 2x Angular 5x Experience in developing and publishing RESTful web services using Node Js Asynchronous programming and express JS Strong experience in working with Relational databases like Oracle MySQL Microsoft SQL Server PostgreSQL and NoSQL databases like MongoDB Apache Cassandra Great knowledge of writing PLSQL scripts for executing more than one query at a time Proficient in creating views for tables writing stored procedures writing Triggers Experience in using Mongoose connectors for mapping pure java script objects to the MongoDB Great understanding of Apache Cassandra driver for Node Js for Parallel Execution request pipelining Expertise in using Hibernate ORM Ibatis for implementing persistence context using JPA Java persistence API which is a first level cache In Hibernate implemented second level cache using EH cache OS cache Swarm cache JBoss cache Expertise in implementing Spring JTA for transaction management and Spring JDBC to interact with Databases Experience in configuring and deploying applications on different application servers like Apache Tomcat WebLogic IBM WebSphere JBoss and web servers like Apache HTTP Server Nginx Caddy etc Expertise in using Spring CloudNetflix OSS stack for micro services deployment and auto configurations like Ribbon for clientside Load balancing Expertise in using Hystirix circuit breaker for fault tolerance and Zuul gateway for routing Implemented the new message retry mechanism using Kafka in the event of downstream systems Implemented publisher and subscriber model with queues JMS with active MQS IBMQ Strong working knowledge on deploying the pivotal cloud foundry to deploy PAAS Platform as a service IAAS Infrastructure as a service and to run own applications Good knowledge of Working on cloud Amazon Web Services Amazon EC2 Amazon S3 Amazon simple DB Amazon Elastic Load Balancing Amazon SQS Amazon EBS and Amazon cloud front Used Docker Container to address every application across the hybrid cloud and Docker for better collaboration and innovation Automated the deployment process by integrating code repository using build pipe line Jenkins Bamboo and GoCD for continuous deployment Great experience of working with authorization and authentication of web services using OAuth 20 and JWT Good experience with automated Java based logging frameworks like log4J sl4J logcommon Experience in using JavaScript testing frameworks like Karma Jasmine Protractor for Angular 2040 and Mocha and chai for React Js and Node JS Strong Experience Test Driven Development TDD using testing frameworks like Junit Selenium TestNG Mockito Spock Cucumber Powermock MockMvc etc Experience in working with various version controlling tools like Git SVN Bitbuckets TFS CVS and different Project management tools like JIRA Rally Microsoft Project Work Experience Senior Java Developer Securian Financial Group Saint Paul MN April 2018 to Present Description Securian Financial Group is an insurance and investments group which helps people preserve and protect what they earn build own and cherish Keeping this promise means we are there when our customers need us most This application enables clients to access review and update Insurance coverages like auto health and life online The website functionality was extended by providing the customers to login using their policy number and perform online transactions like paying bills online and updating their insurance policy Customer Care website was redesigned to provide customized information for the end users Responsibilities Worked as a part of Agile Software Development Methodology including Scrum technology Implemented the web application using MEAN MongoDB Express Angular 5 Nodejs stack along with HTML5 CSS3 JavaScript jQuery Bootstrap and other web technologies Developed REST services using NodeJS ExpressJS BodyParser Mongoose and other node modules to serve the web application with JSON data Worked with HTTPHTTPS protocols by using Angular 5 components to build microservices in Node JS Used Mongoose connector to map java script objects to MongoDB Pioneered with Java8 features like Functional Interfaces Stream API Time API Transaction Management Exception Handling Collection API and Lambda Expressions Building cloud Micro services and implemented backend using Spring Boot Worked with Micro service architecture using Spring Boot to modularized code and implemented Rest APIs using Spring Rest and integrated Swagger API for documentation Capitalized complete annotation driven approach to develop application using spring Boot and was involved in setting up the spring bean profiling also created build and deployment scripts using Maven Used Postman to test the API workflow tested on the JSON files which are generated by the NodeJS Express JS Used GIT for Version Control of code for incremental development and daytoday basis to maintain the code history Used Continuous delivery Continuous Integration CDCI tools Docker Jenkins to deploy this application to AWS Created instances for AWS EC2 and created AWS S3 buckets to monitor the access to the hosted files Implemented a Robust Restful JAXRS Jersey web Services using Spring Boot to modularize code and automated documentation to the web services in the application is provided by Swagger 20 Experience in Docker Engine and Docker Machine environment to deploy the micro servicesoriented environments for scalable application Created a new cluster and container management tool using Kubernetes for Zero downtime Deployment Used Netflix OSS to allow application to change its properties Dynamically after the deployment Worked with Netflix OSS Eureka service in spring cloud for service registration and discovery and spring config for centralized configuration and used ribbon for clientside load balancing Worked with Zuul Api gateway for Authentication and hystrix circuit breaker for fault tolerance Created various docker images from the docker containers and published these images in the Docker hub repository User authentication is done through JSON Web Tokens JWT Tested Angular 5 with Jasmine unit testing framework and karma as test runner Developed the functionalities under Agile Methodology JIRA processes and used JIRA for task assignment bug tracking and fixture Environment HTML5 CSS JavaScript jQuery Bootstrap Angular5 NodeJS ExpressJS NPM Spring Boot Spring Rest Maven JWT JIRA GIT GitHub Netflix OSS Spring Cloud HTTPHTTPS Jasmine karma AWS EC2 AWS S3 postman Kubernetes Swagger API Agile Methodology Mongoose ORM MongoDB Docker Java Full Stack Developer Costco Wholesale Corporation March 2017 to April 2018 Description Costco is a membership warehouse club dedicated to bringing our members the best possible prices on quality brandname merchandise With hundreds of locations worldwide Costco provides a wide selection of merchandise plus the convenience of specialty departments and exclusive member services all designed to make your shopping experience a pleasurable one Responsibilities Involved in the creation of UI specification documents by interacting with business users and design documentation and data modelling for the entire project Expertise in using React JSRedux to build User Interface strong knowledge of state store middleware action creator reducer and container Developed user interface by using the React JS Redux for SPA development and implemented clientside Interface using React JS Written several Axios service calls like GET and POST to make REST service calls Implemented Virtual Dom for ClientSide view rendering services using React JS Proficient in writing react code with help of ECMAScript ES6 Written calls using FETCH API for fetching JSON data Implemented platform modules through spring Java micro and Nodejs services by employing Hapijs as well as frontend React JS Used complete annotation driven approach to develop the application using Spring Boot and was involved in setting up the Spring bean profiling Worked with Spring Boot for automatic configuration and starter for Maven configuration and performed metrics and externalized configuration Developed RESTFUL web services using Spring Boot and Apace CXF framework Building cloud Microservices and implemented backend using Spring Boot Worked with Microservice architecture using Spring Boot to modularized code and implemented Rest APIs using Spring Rest and integrated Swagger API for documentation Worked with JAVA8 features like Functional Interfaces Stream API for Bulk Data Operations Time API Transaction Management Concurrency API Collection API Calendar API Deployed our Application on Pivotal Cloud Foundry PCF which is used to reduce the development overhead by providing a ready to use platform Deployed and Monitored Micro Services Using Spring Cloud Foundry Managed Domains and Routes with the Spring Cloud Service Registry Deployed and Monitored Micro Services Using Spring Cloud Foundry Managed Domains and Routes with the Spring Cloud Service Registry Implemented Spring Netflix Zuul API gateway and Eureka service registry for reverse proxy and Dynamic service discovery of APIs Implemented Netflix OSS Open Source Software for Feasible changes after the deployment Implemented Spring Circuit breaker pattern integrated Hystrix dashboard to monitor Spring microservices Implemented NoSQL database like Cassandra to store key values for data analytics which is used as a Database for this project Maintaining and troubleshooting Cassandra Clusters this includes monitoring and performing troubleshooting as per requirements Worked on Docker hub creating Docker images and handling multiple images primarily for middleware installations and domain configurations Used Kubernetes to create new cluster and container management tool Used Continuous delivery Continuous Integration CDCI tools Docker and Jenkins to deploy this application Implemented a metrics collection mechanism for the server by utilizing Apache Kafka to stream serverside events Used Apache Kafka in cluster as messaging system between the APIs and microservices and worked on Splunk search processing language SPL queries reports dashboard and logging using Log4J Project code build is done using MAVEN tool Worked with Web pack for bundling application source code in convenient chunks and for loading that code from a server into a browser Adopted JMS API to setup mail notification upon the success or failure when the backend processes are completed and to send mail notifications regarding any system related problems Used Splunk to create charts for the log data and analyze log data to know customer expectations Authenticating Users and to provide the security to RESTful web services using OAUTH20 Tested REACT code on client side with CHAI testing framework and MOCHA as test runner Environment React JS Redux Hapi JS Node JS Web pack ECMA6 Mocha and Chai Spring Boot Spring cloud like Ribbon Hystrix Netflix ZUUL Micro services architecture Docker Jenkins Cassandra DB OAUTH Apache Kafka Splunk PCF Swagger Webpack JMS Maven Senior Java Developer Connexions Loyality Richmond VA March 2016 to February 2017 Description The objective of Company is to have a framework in place for the organization which allows the business users to add new customer configurations customer product catalog excluded product details list etc without depending on the development team Responsibilities Involved in SDLC requirements gathering analysis design development and testing of application developed using Agile methodology for building Service Oriented Architecture SOA Involved in developing user interface with HTML5 CSS3 SAAS JSON Used AngularJS to create views to hook up models to the DOM and synchronize data with server as a Single Page Applications SPA Extensively used http from Angular JS service to make AJAX calls and consume JSON response across numerous services Worked on Angular JS expressions and builtin directives to render functionality to the UI and jQuery for DOM manipulation and twoway binding Used Spring MVC and Dependency Injection for handling presentation and business logic Dependency Injection for managing the components and bean life cycle is achieved in the application using Spring IOC Integrated Spring DAO for data access using Hibernate and handled Transaction Management using the provided data Responsible for designing Hibernate mapping files based on business logic and Object relationships Integrated Spring and Hibernate together and worked on developing backend components and services Spring Batch was used for processing large volumes of records including loggingtracing job processing statistics job restart skip transaction management and resource management in the application using Quartz Scheduler Used Spring Security for Authentication and Authorization of the application Implemented REST APIs using Spring Rest and documented Spring RESTful APIs with Swagger to help customers better understand APIs Designed new queries in app to enhance MySQL database performance Developed stored procedures triggers in MySQL for lowering traffic between servers clients Designed configured and deployed Amazon Web Services AWS for a multitude of applications utilizing the AWS stack Including EC2 S3 focusing on highavailability fault tolerance and autoscaling Configured AWS EC2 instances domain mapping via Route53 Automated the deployment process by integrating code repository using build pipe line Jenkins for continuous deployment Implemented the function to send and receive AMQP messages on RabbitMQ synchronously and asynchronously Developed test driven development code using JUnit and Mockito framework Performed Integration testing using Selenium Environment Spring MVC Spring Batch Spring Security Spring REST Spring IOC Hibernate Angular JS AJAX HTML CSS JSON Junit Mockito Selenium Cucumber MySQL 56 AWS RabbitMQ SOA architecture Java Full Stack Developer Myntra Bengaluru Karnataka May 2014 to February 2016 Description Myntra is an Indian fashion ecommerce company headquartered in Bangalore Karnataka India Myntra maintains a web and mobile application which helps customer to create accounts buy products online The responsibilities in this project was to maintain the application available and to meet the demands of the customers Responsibilities Used Backbone JS to utilize its rendering functions and create controllers to handle events triggered by clients and send request to server Created responsive UI modules using Backbone JS with hard coded dependency of Underscore JS in combination with Handlebar JS for templating Defined and developed the applications presentation layer using HTML CSS and jQuery Used jQuery for creating different menus and dialog boxes and used different jQuery plugins for calendar calculator and printing options Implemented various crossproject functionalities using Spring AOP and implemented transaction management using Spring AOP and used Spring Aspects for implementing logging functionalities Implemented Web service calls using SOAP JAXWS frameworks to provide significant prebuild extensibility in the form of the WS standards Created WSDL Web Services Description Language document for client application web services Developed SOAP web services JAXWS for sending and getting data from different applications WSDL generation and exposed the service at serverside over the Internet Implemented persistence layer with iBATIS ORM Extensively involved in writing code by using Java Collections like LinkedList Queues HashSet and etc Worked on the Java Collections API for handling the data objects between the business layers and the front end Involved in writing MultiThreading Synchronization concepts in Java Developed backend PLSQL packages UNIX shell scripts for data migration and batch processing Created and customized UNIX shell scripts for automating regular maintenance and batch jobs Used ANT for automated build and deployment on IBM WebSphere Environment HTML CSS Backbone JS Handlebar JS jQuery IBM WebSphere Spring AOP Java Collections MultiThreading UNIX iBATIS SOAP Junior Java Developer Mysore Bank Hyderabad Telangana June 2012 to April 2014 Description Mysore Bank is an Indian banking and financial services company This is in house application portal and an Internet Banking product designed and developed using Struts and J2EE to meet the demands of the Bank customer for transactions through Internet In this we have integrated online services and made it is a powerful platform for business owners and customers Responsibilities Developed application based on Model View Controller MVC architecture Implemented forms and action classes for the application using EJB and Struts Framework Developed EJB deployment descriptor using XML and used JAXB components for transferring the objects between the application and the database Functionalities like auto completion of forms and user validation are implemented using jQuery Used Multithreading concept to post data from files to tables involving transformation of file from one format to another Developed dynamic web pages using JSP and used Struts Validation framework to perform input validation Configured Strutsconfigxml Tilesdefxml and various properties files provided by Struts Framework for the implementation module Developed and implemented the MVC Architectural pattern using STRUTS 2x framework Implemented POJO based action by STRUTS and also utilized various Tag Support given by the STRUTS 2x Implemented interceptor which is invoke at preprocessing and post processing of a request in STRUTS 2x Implemented OGNL Object Graph Navigation Language of STRUTS 2x to simplify the accessibility of data stored in the ActionContext Build PLSQL functions stored procedures views and configured Oracle Database 10g with JDBC data source with connection pooling enabled Performance tuning of JVM heap size garbage collections java stack and Native thread production performance Used Subversion SVN for maintaining current and historical versions of source code web pages and documentation Used Clear Case for source code maintenance Developed Ant scripts and developed builds using Apache ANT Used Log4J to capture the log that includes runtime exceptions Environment JavaJ2EE EJB Servlets JSP HTML CSS JavaScript JBoss Subversion SVN Oracle SQL Developer JDBC Struts 20 framework Education Bachelors in Computer Science and Engineering in Computer Science and Engineering Jawaharlal Nehru Technological University Hyderabad Telangana Skills Java J2Ee Hibernate Java Spring",
    "unique_id": "1de2ea89-a3fc-47da-bdba-bb3a5647423b"
}